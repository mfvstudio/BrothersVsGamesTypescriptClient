{"version":3,"sources":["../src/plugins/@hey-api/client-core/utils.ts","../src/utils/config.ts","../src/config/input.ts","../src/config/logs.ts","../src/config/merge.ts","../src/config/output.ts","../src/config/utils.ts","../src/config/parser.ts","../src/plugins/shared/utils/config.ts","../src/plugins/@hey-api/client-core/config.ts","../src/utils/regexp.ts","../src/utils/escape.ts","../src/compiler/utils.ts","../src/compiler/types.ts","../src/compiler/module.ts","../src/compiler/classes.ts","../src/compiler/convert.ts","../src/compiler/return.ts","../src/compiler/transform.ts","../src/compiler/typedef.ts","../src/compiler/index.ts","../src/generate/utils.ts","../src/generate/client.ts","../src/utils/url.ts","../src/utils/ref.ts","../src/utils/stringCase.ts","../src/plugins/shared/utils/ref.ts","../src/plugins/@hey-api/typescript/ref.ts","../src/plugins/@hey-api/client-core/client.ts","../src/plugins/@hey-api/client-core/createClientConfig.ts","../src/plugins/@hey-api/client-core/plugin.ts","../src/plugins/@hey-api/client-axios/config.ts","../src/plugins/@hey-api/client-fetch/config.ts","../src/plugins/@hey-api/client-next/config.ts","../src/plugins/@hey-api/client-nuxt/config.ts","../src/plugins/@hey-api/legacy-angular/config.ts","../src/plugins/@hey-api/legacy-axios/config.ts","../src/plugins/@hey-api/legacy-fetch/config.ts","../src/plugins/@hey-api/legacy-node/config.ts","../src/plugins/@hey-api/legacy-xhr/config.ts","../src/openApi/shared/utils/identifier.ts","../src/plugins/@hey-api/schemas/plugin.ts","../src/generate/files.ts","../src/generate/tsConfig.ts","../src/error.ts","../src/plugins/shared/utils/instance.ts","../src/ir/context.ts","../src/ir/parameter.ts","../src/ir/schema.ts","../src/openApi/shared/utils/schema.ts","../src/ir/utils.ts","../src/ir/operation.ts","../src/openApi/common/parser/sanitize.ts","../src/openApi/shared/utils/operation.ts","../src/openApi/shared/utils/filter.ts","../src/openApi/shared/graph/meta.ts","../src/openApi/shared/utils/name.ts","../src/openApi/shared/utils/schemaChildRelationships.ts","../src/openApi/shared/utils/transforms.ts","../src/openApi/shared/transforms/utils.ts","../src/openApi/shared/transforms/enums.ts","../src/openApi/shared/utils/graph.ts","../src/openApi/shared/transforms/readWrite.ts","../src/openApi/shared/transforms/index.ts","../src/openApi/shared/utils/parameter.ts","../src/openApi/shared/utils/validator.ts","../src/openApi/2.0.x/parser/filter.ts","../src/ir/mediaType.ts","../src/openApi/2.0.x/parser/mediaType.ts","../src/ir/pagination.ts","../src/openApi/shared/utils/discriminator.ts","../src/openApi/2.0.x/parser/schema.ts","../src/openApi/2.0.x/parser/pagination.ts","../src/openApi/2.0.x/parser/operation.ts","../src/openApi/2.0.x/parser/parameter.ts","../src/openApi/2.0.x/parser/server.ts","../src/openApi/2.0.x/parser/validate.ts","../src/openApi/2.0.x/parser/index.ts","../src/openApi/3.0.x/parser/filter.ts","../src/openApi/3.0.x/parser/mediaType.ts","../src/openApi/3.0.x/parser/schema.ts","../src/openApi/3.0.x/parser/pagination.ts","../src/openApi/3.0.x/parser/operation.ts","../src/openApi/3.0.x/parser/parameter.ts","../src/openApi/3.0.x/parser/requestBody.ts","../src/openApi/3.0.x/parser/server.ts","../src/openApi/3.0.x/parser/validate.ts","../src/openApi/3.0.x/parser/index.ts","../src/openApi/3.1.x/parser/filter.ts","../src/openApi/3.1.x/parser/mediaType.ts","../src/openApi/3.1.x/parser/schema.ts","../src/openApi/3.1.x/parser/pagination.ts","../src/openApi/3.1.x/parser/operation.ts","../src/openApi/3.1.x/parser/parameter.ts","../src/openApi/3.1.x/parser/requestBody.ts","../src/openApi/3.1.x/parser/server.ts","../src/openApi/3.1.x/parser/validate.ts","../src/openApi/3.1.x/parser/index.ts","../src/utils/const.ts","../src/utils/transform.ts","../src/utils/unique.ts","../src/utils/sort.ts","../src/utils/enum.ts","../src/utils/meta.ts","../src/utils/type.ts","../src/openApi/common/parser/operation.ts","../src/openApi/index.ts","../src/plugins/@hey-api/schemas/plugin-legacy.ts","../src/plugins/@hey-api/schemas/config.ts","../src/plugins/shared/utils/operation.ts","../src/plugins/@hey-api/sdk/constants.ts","../src/plugins/@hey-api/transformers/plugin.ts","../src/plugins/@hey-api/transformers/expressions.ts","../src/plugins/@hey-api/sdk/auth.ts","../src/plugins/@hey-api/sdk/validator.ts","../src/plugins/@hey-api/sdk/operation.ts","../src/plugins/@hey-api/sdk/plugin-legacy.ts","../src/plugins/@hey-api/sdk/typeOptions.ts","../src/plugins/@hey-api/sdk/plugin.ts","../src/plugins/@hey-api/sdk/config.ts","../src/plugins/@hey-api/typescript/plugin-legacy.ts","../src/plugins/@hey-api/transformers/plugin-legacy.ts","../src/plugins/@hey-api/transformers/config.ts","../src/plugins/shared/utils/case.ts","../src/plugins/shared/utils/schema.ts","../src/plugins/@hey-api/typescript/clientOptions.ts","../src/plugins/@hey-api/typescript/plugin.ts","../src/plugins/@hey-api/typescript/config.ts","../src/plugins/@tanstack/query-core/useType.ts","../src/plugins/@tanstack/query-core/queryKey.ts","../src/plugins/@tanstack/query-core/infiniteQueryOptions.ts","../src/plugins/@tanstack/query-core/mutationOptions.ts","../src/plugins/@tanstack/query-core/queryOptions.ts","../src/plugins/@tanstack/query-core/plugin.ts","../src/plugins/@tanstack/query-core/plugin-legacy.ts","../src/plugins/@tanstack/angular-query-experimental/config.ts","../src/plugins/@tanstack/react-query/config.ts","../src/plugins/@tanstack/solid-query/config.ts","../src/plugins/@tanstack/svelte-query/config.ts","../src/plugins/@tanstack/vue-query/config.ts","../src/plugins/fastify/plugin.ts","../src/plugins/fastify/config.ts","../src/plugins/valibot/constants.ts","../src/plugins/valibot/api.ts","../src/plugins/valibot/operation.ts","../src/plugins/valibot/plugin.ts","../src/plugins/valibot/config.ts","../src/plugins/zod/constants.ts","../src/plugins/zod/api.ts","../src/plugins/zod/operation.ts","../src/plugins/zod/plugin.ts","../src/plugins/zod/config.ts","../src/plugins/config.ts","../src/config/plugins.ts","../src/config/init.ts","../src/plugins/@hey-api/client-fetch/bundle/utils.ts","../src/getSpec.ts"],"names":["clientId","getClientBaseUrlKey","config","client","getClientPlugin","name","plugin","_config","getConfig","setConfig","isLegacyClient","legacyNameFromConfig","defaultWatch","getWatch","input","watch","getInput","userConfig","getLogs","logs","mergeObjects","objA","objB","mergeConfigs","configA","configB","a","b","merged","getOutput","output","mergeResult","result","mapped","key","value","valueToObject","defaultValue","mappers","mapper","defaultPaginationKeywords","getParser","parser","enabled","mode","fields","clientDefaultConfig","clientDefaultMeta","illegalStartCharactersRegExp","numberRegExp","reservedBrowserGlobalsRegExp","reservedJavaScriptGlobalsRegExp","reservedJavaScriptKeywordsRegExp","reservedNodeGlobalsRegExp","reservedTypeScriptKeywordsRegExp","validTypescriptIdentifierRegExp","escapeName","unescapeName","escapeComment","_l","w","EOL","printer","ts","createSourceFile","sourceText","blankSourceFile","unescapeUnicode","_","hex","tsNodeToString","node","unescape","stringToTsNodes","createIdentifier","text","createThis","createModifier","keyword","kind","syntaxKindKeyword","createPropertyDeclaration","initializer","modifier","type","ots","alias","asType","nameNode","aliasNode","hasBothQuotes","hasNewlines","hasUnescapedBackticks","isBacktickEscaped","createStringLiteral","isTsNode","isType","processCommentObject","commentObject","lines","line","jsdocTexts","index","jsdoc","cleanedJsdoc","addLeadingComments","comments","isObjectStyle","comment","commentObjects","createTypeNode","base","args","createTypeReferenceNode","arg","createPropertyAccessChain","expression","createPropertyAccessExpression","isOptional","nodeExpression","nodeName","createNull","toExpression","identifiers","isValueAccess","shorthand","createArrayLiteralExpression","createObjectType","parts","toParameterDeclarations","parameters","parameter","createParameterDeclaration","param","modifiers","createKeywordTypeNode","toTypeParameters","types","createTypeParameterDeclaration","createTypeOperatorNode","operator","operatorKeyword","constraint","defaultType","createMappedTypeNode","members","nameType","questionToken","readonlyToken","typeParameter","createLiteralTypeNode","literal","createArrowFunction","async","multiLine","returnType","statements","createBlock","createAnonymousFunction","elements","createAwaitExpression","createFunctionTypeNode","typeParameters","obj","properties","canShorthand","assignment","nameIdentifier","createAsExpression","createPropertyAssignment","createEnumDeclaration","enumMemberComments","enumMember","createEnumMember","createNamespaceDeclaration","createIndexedAccessTypeNode","indexType","objectType","isSingleQuote","createConditionalExpression","condition","whenFalse","whenTrue","createTypeOfExpression","createTypeAliasDeclaration","exportType","typeArguments","typeName","createTypeParenthesizedNode","required","createNewExpression","argumentsArray","createForOfStatement","awaitModifier","statement","createAssignment","left","right","createRegularExpressionLiteral","flags","textWithSlashes","createTemplateLiteralType","spans","spanText","item","span","createExportAllDeclaration","module","createCallExpression","functionName","createNamedExportDeclarations","exports","exportedTypes","hasNonTypeExport","exportClause","moduleSpecifier","createConstVariable","assertion","destructure","exportConst","declaration","createNamedImportDeclarations","imports","importedTypes","hasNonTypeImport","namespaceImport","namedBindings","importClause","createConstructorDeclaration","accessLevel","createMethodDeclaration","isStatic","createClassDeclaration","decorator","exportClass","extendedClasses","nodes","heritageClauses","extendedClass","expressionToStatement","createReturnStatement","createReturnFunctionCall","createReturnVariable","createSafeAccessExpression","path","element","createAccessExpression","createPropertyAccessExpressions","expressions","createBinaryExpression","createIfStatement","elseStatement","thenStatement","createDateTransformMutation","safeAccessExpression","accessExpression","createFunctionTransformMutation","transformerName","createArrayTransformMutation","createDateTransformerExpression","parameterName","createArrayMapTransform","transformExpression","nullNode","maybeNullable","isNullable","createTypeInterfaceNode","indexKey","indexProperty","useLegacyResolution","propertyTypes","property","signature","isIndexMapped","indexSignature","createTypeUnionNode","createTypeIntersectionNode","createTypeTupleNode","createTypeRecordNode","keys","values","keyNode","valueNode","createTypeArrayNode","compiler","ensureDirSync","fs","relativeModulePath","moduleOutput","sourceOutput","outputParts","__filename","fileURLToPath","getClientSrcPath","pluginFilePathComponents","clientModulePath","clientSrcPath","outputPath","clientApi","parseUrlRegExp","parseUrl","errorResponse","match","host","protocol","jsonPointerSlash","jsonPointerTilde","irRef","isRefOpenApiComponent","$ref","jsonPointerToPath","refToName","encodeJsonPointerSegment","segment","pointer","clean","part","normalizeJsonPointer","normalized","pathToJsonPointer","segments","resolveRef","spec","current","uppercaseRegExp","lowercaseRegExp","identifierRegExp","separatorsRegExp","leadingSeparatorsRegExp","separatorsAndIdentifierRegExp","numbersAndIdentifierRegExp","preserveCase","_case","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","isLastLastCharPreserved","separator","character","nextIndex","nextCharacter","isSeparatorBeforeNextCharacter","characterLower","characterUpper","stringCase","stripLeadingSeparators","identifier","offset","operationIrRef","id","parameterId","affix","separate","typesId","refIdentifier","onGet","importIdentifier","context","file","operation","ref","resolveBaseUrlString","baseUrl","servers","createClient","clientModule","createConfig","clientOptions","createClientConfig","defaultValues","resolvedBaseUrl","url","createConfigParameters","createClientConfigType","configType","defaultClientOptions","defaultClientOptionsType","tType","typeCreateClientConfig","clientPluginHandler","defaultConfig","defineConfig","regexps","ensureValidIdentifier","regexp","schemasId","stripSchema","schema","schemaToJsonSchemaDraft_04","_schema","schemaToJsonSchemaDraft_05","schemaToJsonSchema2020_12","schemaName","customName","schemasV2_0_X","schemasV3_0_X","schemasV3_1_X","handler","TypeScriptFile","dir","exportFromIndex","header","identifierCase","namespace","parseRef","refValue","ensureUniqueIdentifier","importedItem","moduleMap","splitNameAndExtension","filePath","configFileParts","cfgParts","thisPathParts","filePathParts","relativePath","pathArray","relativePathToFile","relativeFolder","fileName","options","extension","tsConfig","shouldAppendJs","importsStringArray","_module","resolvedModule","propIndex","prop","transformName","transformer","count","create","nameTransformer","nameWithCasingAndTransformer","lowercaseName","nameValue","HeyApiError","error","event","pluginName","message","PluginInstance","props","events","callback","eventSet","server","pathItem","_method","method","originalError","IRContext","outputDir","createdFile","resolved","dereferenced","instance","getPaginationSchema","hasParameterGroupObjectRequired","parameterGroup","hasParametersObjectRequired","parameterWithPagination","deduplicateSchema","detectFormat","uniqueItems","typeIds","constant","format","typeId","liftedSchema","deepClone","mergeSchemaAccessScopes","mergedScopes","scope","assignItems","items","addItemsToSchema","logicalOperator","mutateSchemaOneItem","hasOperationDataRequired","createOperationKey","operationPagination","body","resolvedSchema","paginationProp","statusCodeToGroup","statusCode","operationResponsesMap","errors","responses","defaultResponse","response","inferred","description","errorKeys","errorUnion","responseKeys","responseUnion","ensureValidTypeScriptJavaScriptIdentifier","replaced","sanitizeNamespaceIdentifier","sanitizeOperationParameterName","withoutBrackets","httpMethods","operationToId","state","urlWithoutPlaceholders","namespaceNeedle","addNamespace","removeNamespace","stringToNamespace","createFiltersSetAndRegExps","filters","collectFiltersSetFromRegExpsOpenApiV2","excludeOperations","excludeSchemas","includeOperations","includeSchemas","entry","collectFiltersSetFromRegExpsOpenApiV3","excludeParameters","excludeRequestBodies","excludeResponses","includeParameters","includeRequestBodies","includeResponses","collectFiltersSetFromRegExps","createFilters","hasFilters","collectOperations","requestBodies","resourceMetadata","schemas","finalSet","stack","tag","dependency","collectParameters","collectRequestBodies","collectResponses","collectSchemas","dropExcludedParameters","excludedKey","dropExcludedRequestBodies","dropExcludedResponses","dropExcludedSchemas","dropOrphans","operationDependencies","collectOperationDependencies","operations","dependencies","createFilteredDependencies","buildResourceMetadata","graph","getDependencies","nodeDeps","dep","nodeInfo","operationPath","operationKey","buildName","childSchemaRelationships","getSchemasObject","hasComponentsSchemasObject","hasDefinitionsObject","hasName","getUniqueComponentName","_base","components","extraComponents","isPathRootSchema","specToSchemasPointerNamespace","getEnumSignature","walkSchemas","parent","visitor","k","v","inlineMode","schemasObj","schemasPointerNamespace","rootEnums","replaceEnumRefs","rootMode","rootEnumSignatures","inlineEnums","signatureToName","signatureToSchema","enumsTransform","annotateChildScopes","parentInfo","collectAllDependenciesForPointer","visited","allDependencies","depPointer","transitiveDependencies","childPointer","childInfo","propagateScopes","worklist","notifyAllDependents","reverseDependencies","dependentPointer","combinatorChildMatch","combinatorParentPointer","propagateChildScopes","propagateScopesToNode","depNode","fromNodeInfo","toNodeInfo","changed","seedLocalScopes","buildGraph","root","walk","parentPointer","deprecated","tags","refPointer","childKey","pointerFrom","pointers","pointerTo","schemaKeys","getComponentContext","captureOriginalSchemas","originals","insertSplitSchemasIntoSpec","split","pruneSchemaByScope","objMap","removeOriginalSplitSchemas","originalSchemas","originalPointer","splitSchemas","existingNames","schemasNamespaceSegments","pointerToSchema","readSchema","readBase","readName","readPointer","writeSchema","writeBase","writeName","writePointer","updateRefsInSpec","currentPointer","inSchema","nextPointer","nextContext","mapping","compContext","headerKey","map","readWriteTransform","transformOpenApiSpec","mergeParametersObjects","source","target","isSimpleKey","formatPath","i","formatValidatorIssue","issue","pathStr","level","colors","highlightedMessage","code","shouldPrint","handleValidatorResult","filterSpec","preserveOrder","filtered","fileLikeRegExp","jsonMimeRegExp","multipartFormDataMimeRegExp","textMimeRegExp","xWwwFormUrlEncodedMimeRegExp","octetStreamMimeRegExp","isMediaTypeFileLike","mediaType","mediaTypeToIrMediaType","contentToSchema","content","mediaTypeObjects","mimeTypes","objects","getPaginationKeywordsRegExp","pagination","pattern","discriminatorValues","getSchemaType","parseSchemaJsDoc","irSchema","parseSchemaMeta","parseArray","schemaItems","irItemsSchema","schemaToIrSchema","ofArray","parseBoolean","parseNumber","parseObject","schemaProperties","irPropertySchema","irAdditionalPropertiesSchema","parseString","initIrSchema","parseAllOf","schemaType","compositionSchemas","compositionSchema","irCompositionSchema","valueSchemas","irDiscriminatorSchema","irRefSchema","irObjectSchema","parseOneType","requiredProperty","finalCompositionSchema","nestedItems","parseEnum","enumValue","typeOfEnumValue","enumType","irTypeSchema","refSchema","parseNullableType","typeIrSchema","parseType","parseUnknown","parseSchema","isPaginationType","paginationField","finalSchema","allOf","parseOperationJsDoc","irOperation","initIrOperation","operationToIrOperation","securitySchemesMap","isRequestBodyRequired","requestBodyObject","requestBodyObjectRequired","requestBodyParameter","requestBody","contents","responseObject","securitySchemeObjects","securityRequirementObject","securitySchemeObject","irSecuritySchemeObject","parseOperation","defaultExplode","collectionFormat","defaultStyle","_in","parametersArrayToObject","parametersObject","parameterOrReference","parameterToIrParameter","style","irParameter","parseServers","schemes","scheme","validateOpenApiSpec","issues","operationIds","parseV2_0_X","sets","finalPathItem","commonOperation","operationArgs","parseAnyOf","parseOneOf","defaultAllowReserved","explode","parseParameter","requestBodyToIrRequestBody","irRequestBody","parseRequestBody","parseV3_0_X","securityOrReference","requestBodyOrReference","getSchemaTypes","irItemSchema","parseNull","schemaTypes","parseManyTypes","nonNullCompositionSchemas","parseV3_1_X","refSchemasPartial","transformClassName","transformTypeName","cleanAndTransformTypeName","transformed","unique","arr","sort","nameA","nameB","sorterByName","sortByName","enumKey","enumUnionType","enums","enumerator","union","enumEntry","getSchemasMeta","definitionName","isModelDate","model","typeReference","typeNode","meta","typeArray","m","toType","typeEnum","typeDict","typeUnionOrIntersection","typeInterface","isLegacy","maybeRequired","transformTypeKeyName","setUniqueTypeName","unsetUniqueTypeName","isOperationParameterRequired","parseOpenApiSpec","ensureValidSchemaOutput","parentKey","toSchemaName","validName","handlerLegacy","files","openApi","addSchema","definition","createOperationComment","isOperationOptionsRequired","isNuxtClient","nuxtTypeComposable","nuxtTypeDefault","nuxtTypeResponse","sdkId","bigIntExpressions","dataExpression","bigIntCallExpression","dateExpressions","identifierDate","operationTransformerIrRef","schemaIrRef","schemaResponseTransformerRef","transformersId","dataVariableName","ensureStatements","isNodeReturnStatement","schemaResponseTransformerNodes","identifierData","processSchemaType","callExpression","mapCallbackStatements","stmt","propertyAccessExpression","propertyNodes","noNullableTypesInSchema","x","arrayNodes","identifierItem","t","identifierResponse","identifierResponseTransformer","responseTransformerNode","securitySchemeObjectToAuthObject","operationAuth","auth","authObject","createRequestValidator","pluginValidator","createResponseValidator","operationClassName","getOperationMethodName","operationClasses","classNames","className","methodName","classCandidates","methodCandidate","rootClasses","rootClass","finalClassName","operationOptionsType","throwOnError","optionsName","getResponseType","contentType","cleanContent","operationStatements","isRequiredOptions","sdkOutput","identifierError","requestOptions","requestValidator","identifierTransformer","responseType","responseValidator","parameterContentType","spread","errorType","heyApiClient","optionsClient","clientExpression","generateImport","onImport","setUniqueTypeNameArgs","created","modelResponseTransformerTypeName","operationDataTypeName","operationErrorTypeName","operationResponseTransformerTypeName","operationResponseTypeName","operationOptionsLegacyParserType","importedType","toOperationParamType","isRequired","getDefaultPrintable","p","typePath","toOperationReturnType","toOperationComment","params","successResponses","toRequestOptions","onClientImport","responseTransformerName","toObj","prev","curr","errorResponses","serviceFunctionIdentifier","handleIllegal","toOperationStatements","processService","onNode","service","clientPlugin","throwOnErrorTypeGeneric","compileFunctionParams","_members","member","imported","createTypeOptions","tDataShape","clientType","typeOptions","createClientClassNodes","clientAssignmentStatement","generateClassSdk","sdkClasses","generatedClasses","clientClassNodes","classes","currentClassName","parentClassName","parentClass","currentClass","functionNode","generateClass","childClassName","childClass","sdkClass","generateFlatSdk","treeName","emptyModel","generateEnum","leadingComment","generateType","onCreated","processComposition","enumDeclarations","processType","pluginTypeScript","processEnum","processScopedEnum","processModel","processServiceTypes","pathsMap","pathMap","methodMap","bodyParameters","bodyParameter","headerParameters","pathParameters","queryParameters","operationProperties","methodParameters","operationName","reqKey","reqResParameters","resKey","isVoidResponse","getRefModels","refModel","ensureModelResponseTransformerExists","modelName","generateResponseTransformer","processArray","refModels","nameModelResponseTransformer","processProperty","onRemoveNode","nonVoidResponses","nameCreated","fieldName","createSchemaComment","stringType","serverToBaseUrlType","createClientOptions","typeClientOptions","addJavaScriptEnum","enumObject","schemaToEnumObject","typeofItems","typeOfItemConst","addTypeEnum","schemaToType","shouldCreateTypeScriptEnum","addTypeScriptEnum","arrayTypeToIdentifier","itemTypes","booleanTypeToIdentifier","enumTypeToIdentifier","isRefComponent","objectNode","enumNode","numberTypeToIdentifier","objectTypeToIdentifier","indexPropertyItems","hasOptionalProperties","propertyType","stringTypeToIdentifier","tupleTypeToIdentifier","schemaTypeToIdentifier","irParametersToIrSchema","operationToDataType","data","dataRequired","operationToType","identifierErrors","errorsType","keyofType","identifierResponses","responsesType","useTypeData","useTypeError","typeError","axiosError","useTypeResponse","createQueryKeyFn","queryKeyName","TOptionsType","infiniteIdentifier","optionsIdentifier","createQueryKeyFunction","identifierCreateQueryKey","fn","createQueryKeyLiteral","isInfinite","createQueryKeyType","queryKeyType","queryKeyStatement","typeQueryKey","typeData","createInfiniteParamsFn","infiniteQueryOptionsFn","createInfiniteParamsFunction","identifierCreateInfiniteParams","createInfiniteQueryOptions","queryFn","typeResponse","typePageObjectParam","typePageParam","identifierInfiniteQueryKey","awaitSdkExpression","identifierInfiniteQueryOptions","mutationOptionsFn","createMutationOptions","mutationsType","mutationType","queryOptionsFn","createQueryOptions","identifierQueryKey","identifierQueryOptions","sdkPlugin","toInfiniteQueryOptionsName","toMutationOptionsName","toQueryOptionsName","toQueryKeyName","getPaginationIn","createTypeData","typesModulePath","nameTypeData","createTypeError","nameTypeError","createTypeResponse","nameTypeResponse","typeInfiniteData","hasCreateInfiniteParamsFunction","hasCreateQueryKeyParamsFunction","hasInfiniteQueries","hasMutations","hasQueries","processedOperations","hasUsedQueryFn","paginationParameter","fastifyId","operationToRouteHandler","fileTypes","errorsTypeReference","responsesTypeReference","replyTypes","routeHandlers","routeHandler","valibotId","requests","schemaIdentifier","dataParameterName","api","operationToValibotSchema","requiredProperties","schemaData","schemaToValibotSchema","pipesToExpression","pipes","arrayTypeToValibotSchema","itemExpressions","schemaPipes","unknownTypeToValibotSchema","booleanTypeToValibotSchema","enumTypeToValibotSchema","enumMembers","resultExpression","neverTypeToValibotSchema","_props","nullTypeToValibotSchema","numberParameter","isBigInt","numberTypeToValibotSchema","objectTypeToValibotSchema","propertyName","stringTypeToValibotSchema","tupleTypeToValibotSchema","tupleElements","undefinedTypeToValibotSchema","voidTypeToValibotSchema","schemaTypeToValibotSchema","_identifier","optional","anyType","isCircularReference","identifierRef","lazyExpression","valibotSchema","intersectExpression","unionExpression","readonlyExpression","callParameter","zodId","operationToZodSchema","schemaToZodSchema","andIdentifier","arrayIdentifier","coerceIdentifier","defaultIdentifier","describeIdentifier","intersectionIdentifier","lazyIdentifier","lengthIdentifier","literalIdentifier","maxIdentifier","minIdentifier","objectIdentifier","optionalIdentifier","readonlyIdentifier","recordIdentifier","regexIdentifier","unionIdentifier","zIdentifier","arrayTypeToZodSchema","arrayExpression","unknownTypeToZodSchema","booleanTypeToZodSchema","enumTypeToZodSchema","enumExpression","neverTypeToZodSchema","nullTypeToZodSchema","numberTypeToZodSchema","numberExpression","objectTypeToZodSchema","propertyExpression","zodSchema","stringTypeToZodSchema","stringExpression","tupleTypeToZodSchema","undefinedTypeToZodSchema","voidTypeToZodSchema","schemaTypeToZodSchema","firstSchema","defaultPluginConfigs","defaultPlugins","getPluginsConfig","userPlugins","userPluginsConfig","circularReferenceTracker","pluginOrder","plugins","dfs","defaultPlugin","userPlugin","errorMessage","isPluginClient","getPlugins","definedPlugins","initConfigs","configurationFile","configFromFile","loadConfig","userConfigs","results","configFile","dryRun","experimentalParser","exportCore","request","useOptions","mergeHeaders","headers","mergedHeaders","iterator","getSpec","fetchOptions","inputPath","timeout","refParser","$RefParser","resolvedInput","getResolvedInput","arrayBuffer","hasChanged","sendRequest","eTag","lastModified"],"mappings":"ujBAGO,IAAMA,EAAW,CAAA,QAAA,CAEXC,EAAuBC,CAAAA,CAAAA,EAAmB,CACrD,IAAMC,EAASC,CAAgBF,CAAAA,CAAM,CACrC,CAAA,OACEC,CAAO,CAAA,IAAA,GAAS,uBAChBA,EAAAA,CAAAA,CAAO,OAAS,sBAET,CAAA,SAAA,CAEF,SACT,CAAA,CAEaC,EACXF,CACuE,EAAA,CACvE,IAAWG,IAAAA,CAAAA,IAAQH,EAAO,WAAa,CAAA,CACrC,IAAMI,CAAAA,CAASJ,CAAO,CAAA,OAAA,CAAQG,CAAI,CAAA,CAClC,GAAIC,CAAQ,EAAA,IAAA,EAAM,QAAS,CAAA,QAAQ,EACjC,OAAOA,CAIX,CAEA,OAAO,CACL,MAAQ,CAAA,CAEN,IAAM,CAAA,EACR,CAEA,CAAA,IAAA,CAAM,EACR,CACF,ECjCA,IAAIC,EAAAA,CAESC,CAAY,CAAA,IAAM,CAC7B,IAAMN,CAAAA,CAASK,EACTD,CAAAA,CAAAA,CAASF,EAAgBF,CAAM,CAAA,CAGrC,OAAAA,CAAAA,CAAO,MAASI,CAAAA,CAAAA,CACTJ,CACT,CAAA,CAEaO,GAAaP,CACxBK,GAAAA,EAAAA,CAAUL,CACHM,CAAAA,CAAAA,IAGIE,CAAkBR,CAAAA,CAAAA,EACdE,CAAgBF,CAAAA,CAAM,EACvB,IAAK,CAAA,UAAA,CAAW,SAAS,CAAA,CAM5BS,EAAwBT,CAAAA,CAAAA,EAAmB,CACtD,GAAKQ,EAAeR,CAAM,CAAA,CAI1B,OAAOA,CAAAA,CAAO,IAChB,CC/BA,CAAA,IAAMU,EAAyC,CAAA,CAC7C,QAAS,KACT,CAAA,QAAA,CAAU,GACV,CAAA,OAAA,CAAS,GACX,CAAA,CAEMC,EACJC,CAAAA,CAAAA,EAC6B,CAC7B,IAAIC,CAAAA,CAAQ,CAAE,GAAGH,EAAa,CAG9B,CAAA,OAAI,OAAOE,CAAAA,CAAM,MAAS,QAItB,GAAA,OAAOA,CAAM,CAAA,KAAA,EAAU,SACzBC,CAAAA,CAAAA,CAAM,OAAUD,CAAAA,CAAAA,CAAM,MACb,OAAOA,CAAAA,CAAM,KAAU,EAAA,QAAA,EAChCC,EAAM,OAAU,CAAA,IAAA,CAChBA,CAAM,CAAA,QAAA,CAAWD,EAAM,KACdA,EAAAA,CAAAA,CAAM,KACfC,GAAAA,CAAAA,CAAQ,CACN,GAAGA,CACH,CAAA,GAAGD,EAAM,KACX,CAAA,CAAA,CAAA,CAGKC,CACT,CAAA,CAEaC,GAAYC,CAA4C,EAAA,CACnE,IAAIH,CAAAA,CAAyB,CAC3B,IAAM,CAAA,EAAA,CACN,KAAOF,CAAAA,EACT,CAEA,CAAA,OAAI,OAAOK,CAAAA,CAAW,OAAU,QAC9BH,CAAAA,CAAAA,CAAM,IAAOG,CAAAA,CAAAA,CAAW,MAExBA,CAAW,CAAA,KAAA,GACVA,CAAW,CAAA,KAAA,CAAM,OAAS,MACzBA,EAAAA,CAAAA,CAAW,KAAM,CAAA,YAAA,GAAiB,MAGpCH,CAAAA,EAAAA,CAAAA,CAAQ,CACN,GAAGA,EACH,IAAM,CAAA,wBAAA,CACN,GAAGG,CAAAA,CAAW,KAChB,CAGIH,CAAAA,CAAAA,CAAM,KAAU,GAAA,MAAA,GAClBA,EAAM,KAAQD,CAAAA,EAAAA,CAASC,CAAK,CAAA,CAAA,EAG9BA,CAAQ,CAAA,CACN,GAAGA,CAAAA,CACH,KAAMG,CAAW,CAAA,KACnB,CAIAA,CAAAA,CAAAA,CAAW,QAAU,MACrBH,EAAAA,CAAAA,CAAM,KAAM,CAAA,OAAA,GAAYF,GAAa,OACrCE,EAAAA,CAAAA,CAAM,KAAM,CAAA,QAAA,GAAaF,EAAa,CAAA,QAAA,EACtCE,CAAM,CAAA,KAAA,CAAM,UAAYF,EAAa,CAAA,OAAA,GAErCE,CAAM,CAAA,KAAA,CAAQD,GAAS,CACrB,IAAA,CAAMC,CAAM,CAAA,IAAA,CAEZ,MAAOG,CAAW,CAAA,KACpB,CAAC,CAAA,CAAA,CAGIH,CACT,CAAA,CC5EO,IAAMI,EAAAA,CAAWD,GAAuD,CAC7E,IAAIE,CAAuB,CAAA,CACzB,KAAM,IACN,CAAA,KAAA,CAAO,MACP,CAAA,IAAA,CAAM,QAAQ,GAAI,EACpB,CAEA,CAAA,OAAI,OAAOF,CAAAA,EAAY,IAAS,EAAA,QAAA,CAC9BE,EAAK,IAAOF,CAAAA,CAAAA,CAAW,IAEvBE,CAAAA,CAAAA,CAAO,CACL,GAAGA,CAAAA,CACH,GAAGF,CAAAA,EAAY,IACjB,CAGKE,CAAAA,CACT,CCjBA,CAAA,IAAMC,EAAe,CAAA,CACnBC,CACAC,CAAAA,CAAAA,IAIO,CACL,GAHQD,CAAAA,EAAQ,EAAC,CAIjB,GAHQC,CAAQ,EAAA,EAIlB,CAAA,CAAA,CAGWC,GAAe,CAC1BC,CAAAA,CACAC,CACe,GAAA,CACf,IAAMC,CAAAA,CAAyBF,CAAW,EAAA,GACpCG,CAAyBF,CAAAA,CAAAA,EAAW,EAAC,CACrCG,EAAqB,CACzB,GAAIF,CACJ,CAAA,GAAIC,CACN,CACA,CAAA,OAAI,OAAOC,CAAAA,CAAO,IAAS,EAAA,QAAA,GACzBA,CAAO,CAAA,IAAA,CAAOR,GACZM,CAAE,CAAA,IAAA,CACFC,CAAE,CAAA,IACJ,GAEKC,CACT,CAAA,CC7BO,IAAMC,EAAAA,CAAaZ,GAA6C,CACrE,IAAIa,CAA2B,CAAA,CAC7B,KAAO,CAAA,IAAA,CACP,MAAQ,CAAA,KAAA,CACR,UAAW,IACX,CAAA,IAAA,CAAM,KACN,CAAA,IAAA,CAAM,GACN,YAAc,CAAA,EAChB,CAEA,CAAA,OAAI,OAAOb,CAAW,CAAA,MAAA,EAAW,QAC/Ba,CAAAA,CAAAA,CAAO,IAAOb,CAAAA,CAAAA,CAAW,MAEzBa,CAAAA,CAAAA,CAAS,CACP,GAAGA,CAAAA,CACH,GAAGb,CAAAA,CAAW,MAChB,CAGKa,CAAAA,CACT,CCeA,CAAA,IAAMC,GAAc,CAClBC,CAAAA,CACAC,CACkB,GAAA,CAClB,IAAW,GAAA,CAACC,CAAKC,CAAAA,CAAK,IAAK,MAAO,CAAA,OAAA,CAAQF,CAAM,CAAA,CAC1CE,IAAU,MAAaA,EAAAA,CAAAA,GAAU,EAClCH,GAAAA,CAAAA,CAA+BE,CAAG,CAAIC,CAAAA,CAAAA,CAAAA,CAG3C,OAAOH,CACT,CAEaI,CAAAA,EAAAA,CAA+B,CAAC,CAC3C,aAAAC,CACA,CAAA,OAAA,CAAAC,CACA,CAAA,KAAA,CAAAH,CACF,CAAM,GAAA,CACJ,IAAIH,CAAAA,CAAS,CAAE,GAAGK,CAAa,CAE/B,CAAA,OAAQ,OAAOF,CAAAA,EACb,KAAK,UACH,GAAIG,CAAAA,EAAW,SAAaA,GAAAA,CAAAA,CAAS,CACnC,IAAMC,CAAAA,CAASD,CAAQ,CAAA,OAAA,CAGvBN,EAASD,EAAYC,CAAAA,CAAAA,CAAQO,CAAOJ,CAAAA,CAAK,CAAC,EAC5C,CACA,MACF,KAAK,QACH,CAAA,GAAIG,CAAW,EAAA,QAAA,GAAYA,EAAS,CAClC,IAAMC,CAASD,CAAAA,CAAAA,CAAQ,OACvBN,CAASD,CAAAA,EAAAA,CAAYC,CAAQO,CAAAA,CAAAA,CAAOJ,CAAK,CAAC,EAC5C,CACA,MACF,KAAK,QAAA,CACH,GAAIG,CAAAA,EAAW,WAAYA,CAAS,CAAA,CAClC,IAAMC,CAAAA,CAASD,EAAQ,MACvBN,CAAAA,CAAAA,CAASD,EAAYC,CAAAA,CAAAA,CAAQO,CAAOJ,CAAAA,CAAK,CAAC,EAC5C,CACA,MACF,KAAK,QACH,CAAA,GAAIA,IAAU,IACZ,CAAA,GACEG,CACA,EAAA,QAAA,GAAYA,GACZ,OAAOA,CAAAA,CAAQ,MAAW,EAAA,UAAA,CAC1B,CACA,IAAMC,CAASD,CAAAA,CAAAA,CAAQ,OAGvBN,CAASD,CAAAA,EAAAA,CAAYC,CAAQO,CAAAA,CAAAA,CAAOJ,CAAK,CAAC,EAC5C,CACEH,KAAAA,CAAAA,CAASD,GAAYC,CAAQG,CAAAA,CAAK,CAGtC,CAAA,KACJ,CAEA,OAAOH,CACT,CAAA,CC7FO,IAAMQ,EAA4B,CAAA,CACvC,OACA,CAAA,QAAA,CACA,SACA,QACA,CAAA,MAAA,CACA,OACF,CAAA,CAEaC,GAAaxB,CAA6C,EAAA,CACrE,IAAMyB,CAAAA,CAA2B,CAC/B,GAAGzB,CAAW,CAAA,MAAA,CACd,WAAY,CACV,QAAA,CAAUuB,EACZ,CAAA,CACA,WAAY,CACV,KAAA,CAAO,CACL,IAAA,CAAM,aACN,OAAS,CAAA,KAAA,CACT,IAAM,CAAA,MAAA,CACN,IAAM,CAAA,cACR,CACA,CAAA,SAAA,CAAW,CACT,OAAS,CAAA,IAAA,CACT,QAAU,CAAA,CACR,KAAM,UACN,CAAA,IAAA,CAAM,kBACR,CAAA,CACA,UAAW,CACT,IAAA,CAAM,UACN,CAAA,IAAA,CAAM,UACR,CACF,CACF,CAAA,CACA,sBAAuB,KACzB,CAAA,CAEA,OAAIvB,CAAAA,CAAW,SACTA,CAAW,CAAA,MAAA,CAAO,UAAY,EAAA,QAAA,GAChCyB,EAAO,UAAW,CAAA,QAAA,CAAWzB,CAAW,CAAA,MAAA,CAAO,UAAW,CAAA,QAAA,CAAA,CAGxDA,CAAW,CAAA,MAAA,CAAO,aAChBA,CAAW,CAAA,MAAA,CAAO,UAAW,CAAA,KAAA,GAAU,SACzCyB,CAAO,CAAA,UAAA,CAAW,KAAQN,CAAAA,EAAAA,CAAc,CACtC,YAAc,CAAA,CACZ,GAAGM,CAAAA,CAAO,UAAW,CAAA,KAAA,CACrB,OAAS,CAAA,CAAA,CAAQzB,EAAW,MAAO,CAAA,UAAA,CAAW,KAChD,CAAA,CACA,OAAS,CAAA,CACP,OAAU0B,CAAAA,CAAAA,GAAa,CAAE,OAAAA,CAAAA,CAAQ,CACjC,CAAA,CAAA,MAAA,CAASC,CAAU,GAAA,CAAE,IAAAA,CAAAA,CAAK,EAC5B,CACA,CAAA,KAAA,CAAO3B,CAAW,CAAA,MAAA,CAAO,WAAW,KACtC,CAAC,CAGCA,CAAAA,CAAAA,CAAAA,CAAW,OAAO,UAAW,CAAA,SAAA,GAAc,MAC7CyB,GAAAA,CAAAA,CAAO,UAAW,CAAA,SAAA,CAAYN,EAAc,CAAA,CAC1C,aAAc,CACZ,GAAGM,CAAO,CAAA,UAAA,CAAW,UACrB,OAAS,CAAA,CAAA,CAAQzB,CAAW,CAAA,MAAA,CAAO,WAAW,SAChD,CAAA,CACA,OAAS,CAAA,CACP,OAAU0B,CAAAA,CAAAA,GAAa,CAAE,OAAA,CAAAA,CAAQ,CACjC,CAAA,CAAA,MAAA,CAASE,CAAY,GAAA,CACnB,GAAGA,CACH,CAAA,QAAA,CAAUT,EAAc,CAAA,CACtB,aAAcM,CAAO,CAAA,UAAA,CAAW,SAAU,CAAA,QAAA,CAC1C,OAAS,CAAA,CACP,MAASrC,CAAAA,CAAAA,GAAU,CAAE,IAAAA,CAAAA,CAAK,CAC5B,CAAA,CAAA,CACA,MAAOwC,CAAO,CAAA,QAChB,CAAC,CAAA,CACD,UAAWT,EAAc,CAAA,CACvB,YAAcM,CAAAA,CAAAA,CAAO,UAAW,CAAA,SAAA,CAAU,SAC1C,CAAA,OAAA,CAAS,CACP,MAASrC,CAAAA,CAAAA,GAAU,CAAE,IAAA,CAAAA,CAAK,CAC5B,CAAA,CAAA,CACA,KAAOwC,CAAAA,CAAAA,CAAO,SAChB,CAAC,CACH,CACF,CAAA,CAAA,CACA,KAAO5B,CAAAA,CAAAA,CAAW,MAAO,CAAA,UAAA,CAAW,SACtC,CAAC,CAAA,CAAA,CAAA,CAIDA,CAAW,CAAA,MAAA,CAAO,wBACpByB,CAAO,CAAA,qBAAA,CACLzB,CAAW,CAAA,MAAA,CAAO,wBAA0B,IACxC,CAAA,MAAA,CACAA,CAAW,CAAA,MAAA,CAAO,qBAIrByB,CAAAA,CAAAA,CAAAA,CACT,CClGO,CCFA,IAAMI,EAAAA,CAAsB,CACjC,OAAA,CAAS,KACT,MAAQ,CAAA,IAAA,CACR,eAAiB,CAAA,KACnB,EAEaC,EAAoB,CAAA,CAC/B,YAAc,CAAA,CAAC,qBAAqB,CACpC,CAAA,MAAA,CAAQ,QACR,CAAA,IAAA,CAAM,CAAC,QAAQ,CACjB,CAAA,CCPO,IAAMC,EAAAA,CAA+B,sBAM/BC,CAAAA,EAAAA,CAAe,iBAEfC,CAAAA,EAAAA,CACX,kDAEWC,EACX,CAAA,gGAAA,CAEWC,EACX,CAAA,sUAAA,CAEWC,GAA4B,4BAE5BC,CAAAA,EAAAA,CACX,kGAMWC,CAAAA,EAAAA,CACX,qDC1BK,IAAMC,EAAAA,CAAcrB,CACrBA,EAAAA,CAAAA,CAAAA,EAASA,CAAU,GAAA,EAAA,IACrBoB,EAAgC,CAAA,SAAA,CAAY,EAExC,CADcA,EAAAA,CAAgC,IAAKpB,CAAAA,CAAK,GAEnD,CAAIA,CAAAA,EAAAA,CAAK,CAGbA,CAAAA,CAAAA,CAAAA,CAAAA,CAGIsB,GAAgBtB,CACvBA,EAAAA,CAAAA,EAASA,CAAM,CAAA,UAAA,CAAW,GAAG,CAAA,EAAKA,CAAM,CAAA,QAAA,CAAS,GAAG,CAC/CA,CAAAA,CAAAA,CAAM,KAAM,CAAA,CAAA,CAAGA,EAAM,MAAS,CAAA,CAAC,CAEjCA,CAAAA,CAAAA,CAGIuB,EAAiBvB,CAC5BA,EAAAA,CAAAA,CACG,OAAQ,CAAA,OAAA,CAAS,GAAG,CAAA,CACpB,OAAQ,CAAA,OAAA,CAAS,GAAG,CACpB,CAAA,OAAA,CAAQ,YAAc,CAAA,CAACwB,EAAIC,CAAMC,GAAAA,QAAAA,CAAMD,CAAE,CAAA,IAAA,EAAM,CC1BpD,CAaA,IAAME,EAAAA,CAAUC,kBAAG,CAAA,aAAA,CAAc,CAC/B,OAASA,CAAAA,kBAAAA,CAAG,WAAY,CAAA,QAAA,CACxB,eAAgB,KAClB,CAAC,CAEYC,CAAAA,EAAAA,CAAoBC,GAC/BF,kBAAG,CAAA,gBAAA,CACD,EACAE,CAAAA,CAAAA,CACAF,kBAAG,CAAA,YAAA,CAAa,MAChB,CAAA,KAAA,CACAA,mBAAG,UAAW,CAAA,EAChB,CAEIG,CAAAA,EAAAA,CAAkBF,GAAiB,EAAE,CAAA,CAErCG,EAAmBhC,CAAAA,CAAAA,EACvBA,EAAM,OAAQ,CAAA,sBAAA,CAAwB,CAACiC,CAAAA,CAAGC,CACxC,GAAA,MAAA,CAAO,YAAa,CAAA,MAAA,CAAO,SAASA,CAAK,CAAA,EAAE,CAAC,CAC9C,EAOK,SAASC,EAAAA,CAAe,CAC7B,IAAA,CAAAC,EACA,QAAAC,CAAAA,CAAAA,CAAW,KACb,CAAA,CAGW,CACT,IAAMxC,CAAS8B,CAAAA,EAAAA,CAAQ,UACrBC,kBAAG,CAAA,QAAA,CAAS,WACZQ,CAAAA,CAAAA,CACAL,EACF,CAEA,CAAA,GAAI,CAACM,CAAAA,CACH,OAAOxC,CAGT,CAAA,GAAI,CAMF,OAAOmC,EAAgBnC,CAAAA,CAAM,CAC/B,CAAA,KAAQ,CACN,OAAIxB,CAAAA,EAAY,CAAA,IAAA,CAAK,QAAU,OAC7B,EAAA,OAAA,CAAQ,IAAK,CAAA,yBAAA,CAA2BwB,CAAM,CAEzCA,CAAAA,CACT,CACF,CAOO,SAASyC,EAAAA,CAAgBtC,CAAwB,CAAA,CAEtD,OADa6B,EAAiB7B,CAAAA,CAAK,CACvB,CAAA,UAAA,CAAW,CAAC,CAC1B,CAEO,IAAMuC,CAAAA,CAAmB,CAAC,CAAE,IAAA,CAAAC,CAAK,CAAA,GACnBZ,kBAAG,CAAA,OAAA,CAAQ,gBAAiBY,CAAAA,CAAI,EAIxCC,EAAa,CAAA,IAAMb,kBAAG,CAAA,OAAA,CAAQ,YAI9Bc,CAAAA,CAAAA,CAAiB,CAAC,CAAE,QAAAC,CAAQ,CAAA,GAA6B,CACpE,IAAMC,CAAOC,CAAAA,EAAAA,CAAkB,CAAE,OAAA,CAAAF,CAAQ,CAAC,CAAA,CAC1C,OAAOf,kBAAAA,CAAG,QAAQ,cAAegB,CAAAA,CAAI,CACvC,CAAA,CAEaE,GAA4B,CAAC,CACxC,WAAAC,CAAAA,CAAAA,CACA,QAAAC,CAAAA,CAAAA,CACA,IAAA9E,CAAAA,CAAAA,CACA,KAAA+E,CACF,CAAA,GAMerB,kBAAG,CAAA,OAAA,CAAQ,0BACtBoB,CAAW,CAAA,CAACN,CAAe,CAAA,CAAE,QAASM,CAAS,CAAC,CAAC,CAAA,CAAI,MACrD9E,CAAAA,CAAAA,CACA,MACA+E,CAAAA,CAAAA,CACAF,CACF,CAQWG,CAAAA,EAAAA,CAAM,CAIjB,OAAA,CAAUlD,GACRA,CAAQ4B,CAAAA,kBAAAA,CAAG,OAAQ,CAAA,UAAA,GAAeA,kBAAG,CAAA,OAAA,CAAQ,WAAY,EAAA,CAC3D,MAAQ,CAAA,CAAC,CAAE,KAAA,CAAAuB,EAAO,MAAAC,CAAAA,CAAAA,CAAS,KAAO,CAAA,IAAA,CAAAlF,CAAK,CAA8B,GAAA,CACnE,IAAMmF,CAAAA,CAAWd,EAAiB,CAAE,IAAA,CAAMrE,CAAK,CAAC,CAChD,CAAA,GAAIiF,CAAO,CAAA,CACT,IAAMG,CAAYf,CAAAA,CAAAA,CAAiB,CAAE,IAAA,CAAMY,CAAM,CAAC,CAAA,CAClD,OAAOvB,kBAAAA,CAAG,QAAQ,qBAAsBwB,CAAAA,CAAAA,CAAQC,CAAUC,CAAAA,CAAS,CACrE,CACA,OAAO1B,kBAAAA,CAAG,QAAQ,qBAAsBwB,CAAAA,CAAAA,CAAQ,MAAWC,CAAAA,CAAQ,CACrE,CACA,CAAA,MAAA,CAAQ,CAAC,CAAE,MAAAF,CAAO,CAAA,MAAA,CAAAC,CAAS,CAAA,KAAA,CAAO,IAAAlF,CAAAA,CAAK,CAA8B,GAAA,CACnE,IAAMmF,CAAWd,CAAAA,CAAAA,CAAiB,CAAE,IAAA,CAAMrE,CAAK,CAAC,CAAA,CAChD,GAAIiF,CAAAA,CAAO,CACT,IAAMG,CAAAA,CAAYf,CAAiB,CAAA,CAAE,IAAMY,CAAAA,CAAM,CAAC,CAAA,CAClD,OAAOvB,kBAAG,CAAA,OAAA,CAAQ,qBAAsBwB,CAAAA,CAAAA,CAAQC,EAAUC,CAAS,CACrE,CACA,OAAO1B,mBAAG,OAAQ,CAAA,qBAAA,CAAsBwB,CAAQ,CAAA,MAAA,CAAWC,CAAQ,CACrE,CAIA,CAAA,MAAA,CAASrD,GACHA,CAAQ,CAAA,CAAA,CACH4B,kBAAG,CAAA,OAAA,CAAQ,4BAChBA,kBAAG,CAAA,UAAA,CAAW,UACdA,CAAAA,kBAAAA,CAAG,QAAQ,oBAAqB,CAAA,IAAA,CAAK,GAAI5B,CAAAA,CAAK,CAAC,CACjD,CAEK4B,CAAAA,kBAAAA,CAAG,QAAQ,oBAAqB5B,CAAAA,CAAK,CAK9C,CAAA,MAAA,CAAQ,CAACA,CAAeqC,CAAAA,CAAAA,CAAW,KAAU,GAAA,CAC3C,IAAIG,CAAOxC,CAAAA,CAAAA,CACPqC,CACFG,GAAAA,CAAAA,CAAOlB,EAAakB,CAAAA,CAAI,CAE1B,CAAA,CAAA,IAAMe,EAAgBf,CAAK,CAAA,QAAA,CAAS,GAAG,CAAA,EAAKA,EAAK,QAAS,CAAA,GAAG,CACvDgB,CAAAA,CAAAA,CAAchB,EAAK,QAAS,CAAA;AAAA,CAAI,CAChCiB,CAAAA,CAAAA,CAAwBjB,CAAK,CAAA,UAAA,CAAW,GAAG,CAC3CkB,CAAAA,CAAAA,CAAoBlB,CAAK,CAAA,UAAA,CAAW,KAAK,CAAA,EAAKA,CAAK,CAAA,QAAA,CAAS,KAAK,CAOvE,CAAA,OAAA,CALGgB,CAAeD,EAAAA,CAAAA,EAAiBE,CACjC,GAAA,CAACC,CAEDlB,GAAAA,CAAAA,CAAO,KAAKA,CAAK,CAAA,OAAA,CAAQ,WAAa,CAAA,KAAK,CAAE,CAAA,OAAA,CAAQ,MAAQ,CAAA,MAAM,CAAC,CAElEA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAK,UAAW,CAAA,GAAG,CACdD,CAAAA,CAAAA,CAAiB,CAAE,IAAA,CAAAC,CAAK,CAAC,CAAA,CAE3BmB,EAAoB,CAAA,CAAE,IAAAnB,CAAAA,CAAK,CAAC,CACrC,CACF,CAEaoB,CAAAA,EAAAA,CAAYxB,CACvBA,EAAAA,CAAAA,GAAS,IACT,EAAA,OAAOA,CAAS,EAAA,QAAA,EAChB,OAAOA,CAAK,CAAA,IAAA,EAAS,QACrB,EAAA,OAAOA,CAAK,CAAA,KAAA,EAAU,QACtB,EAAA,OAAOA,EAAK,GAAQ,EAAA,QAAA,EACpB,OAAOA,CAAAA,CAAK,GAAQ,EAAA,QAAA,CAETyB,EAAa7D,CAAAA,CAAAA,EACxBA,IAAU,MASN8D,CAAAA,EAAAA,CAAuB,CAAC,CAC5B,aAAAC,CAAAA,CAAAA,CACA,IAAA3B,CAAAA,CACF,IAGM,CACJ,IAAM4B,CAAQD,CAAAA,CAAAA,CAAc,KAAM,CAAA,MAAA,CAC/BE,CAAS,EAAA,CAAA,CAAQA,GAASA,CAAS,GAAA,EACtC,CACA,CAAA,GAAI,CAACD,CAAAA,CAAM,MACT,CAAA,OAGF,GAAI,CAACD,CAAAA,CAAc,KAAO,CAAA,CACxB,IAAWE,IAAAA,CAAAA,IAAQD,CACjBpC,CAAAA,kBAAAA,CAAG,2BACDQ,CACAR,CAAAA,kBAAAA,CAAG,UAAW,CAAA,uBAAA,CACd,CAAIqC,CAAAA,EAAAA,CAAI,CACR,CAAA,CAAA,IACF,EAEF,MACF,CAEA,IAAMC,CAAAA,CAAaF,CAAM,CAAA,GAAA,CAAI,CAACC,CAAAA,CAAME,IAAU,CAC5C,IAAI3B,CAAOyB,CAAAA,CAAAA,CACX,OAAIE,CAAUH,GAAAA,CAAAA,CAAM,MAClBxB,GAAAA,CAAAA,CAAO,GAAGA,CAAI;AAAA,CAEEZ,CAAAA,CAAAA,kBAAAA,CAAG,OAAQ,CAAA,eAAA,CAAgBY,CAAI,CAEnD,CAAC,CAEK4B,CAAAA,CAAAA,CAAQxC,kBAAG,CAAA,OAAA,CAAQ,kBACvBA,CAAAA,kBAAAA,CAAG,QAAQ,eAAgBsC,CAAAA,CAAU,CACrC,CAAA,MACF,CAEMG,CAAAA,CAAAA,CAAelC,GAAe,CAAE,IAAA,CAAMiC,CAAO,CAAA,QAAA,CAAU,IAAK,CAAC,EAChE,OAAQ,CAAA,IAAA,CAAM,EAAE,CAAA,CAChB,OAAQ,CAAA,OAAA,CAAS,EAAE,CAEtBxC,CAAAA,kBAAAA,CAAG,0BACDQ,CAAAA,CAAAA,CACAR,kBAAG,CAAA,UAAA,CAAW,uBACdyC,CACA,CAAA,IACF,EACF,CAAA,CAEaC,CAAqB,CAAA,CAAC,CACjC,QAAAC,CAAAA,CAAAA,CAAW,EAAC,CACZ,IAAAnC,CAAAA,CACF,IAGM,CACJ,IAAMoC,CAAgB,CAAA,CAAA,CACpBD,CAAS,CAAA,IAAA,CAAME,GAAY,OAAOA,CAAAA,EAAY,QAAYA,EAAAA,CAAO,CAG/DC,CAAAA,CAAAA,CAAiBH,EAChBC,CACHE,GAAAA,CAAAA,CAAiB,CACf,CACE,KAAO,CAAA,IAAA,CACP,MAAOH,CACT,CACF,CAGF,CAAA,CAAA,IAAA,IAAWR,CAAiBW,IAAAA,CAAAA,CAC1BZ,GAAqB,CACnB,aAAA,CAAAC,CACA,CAAA,IAAA,CAAA3B,CACF,CAAC,EAEL,CChPO,CAAA,IAAMuC,CAAiB,CAAA,CAC5BC,CACAC,CAAAA,CAAAA,GAEIjD,mBAAG,UAAWgD,CAAAA,CAAI,CACbA,CAAAA,CAAAA,CAGL,OAAOA,CAAAA,EAAS,SACXhD,kBAAG,CAAA,OAAA,CAAQ,qBAAsBsB,CAAAA,EAAAA,CAAI,MAAO0B,CAAAA,CAAI,CAAC,CAGnDE,CAAAA,EAAAA,CAAwB,CAC7B,aAAA,CAAeD,CAAM,EAAA,GAAA,CAAKE,GAAQJ,CAAeI,CAAAA,CAAG,CAAC,CAAA,CACrD,QAAUH,CAAAA,CACZ,CAAC,CAGUI,CAAAA,EAAAA,CAA4B,CAAC,CACxC,UAAAC,CAAAA,CAAAA,CACA,KAAA/G,CACF,CAAA,GAIe0D,kBAAG,CAAA,OAAA,CAAQ,yBACtBqD,CAAAA,CAAAA,CACArD,mBAAG,OAAQ,CAAA,WAAA,CAAYA,kBAAG,CAAA,UAAA,CAAW,gBAAgB,CAAA,CACrD1D,CACF,CAIWgH,CAAAA,EAAAA,CAAiC,CAAC,CAC7C,UAAAD,CAAAA,CAAAA,CACA,WAAAE,CACA,CAAA,IAAA,CAAAjH,CACF,CAAA,GAOkC,CAChC,IAAMkH,EACJ,OAAOH,CAAAA,EAAe,QAClB1C,CAAAA,CAAAA,CAAiB,CAAE,IAAA,CAAM0C,CAAW,CAAC,CAAA,CACrCA,CAEN,CAAA,GAAIE,CAAc,EAAA,OAAOjH,GAAS,QAChC,CAAA,OAAO8G,EAA0B,CAAA,CAC/B,UAAYI,CAAAA,CAAAA,CACZ,KAAAlH,CACF,CAAC,CAGH,CAAA,GAAI,OAAOA,CAAAA,EAAS,SAAU,CAE5B,GADAkD,EAAgC,CAAA,SAAA,CAAY,CACxC,CAAA,CAACA,GAAgC,IAAKlD,CAAAA,CAAI,CAAG,CAAA,CAE3C,CAACA,CAAAA,CAAK,WAAW,GAAG,CAAA,EAAK,CAACA,CAAAA,CAAK,QAAS,CAAA,GAAG,IAE7CA,CAAO,CAAA,CAAA,CAAA,EAAKA,CAAI,CAAA,CAAA,CAAA,CAAA,CAElB,IAAMmH,CAAAA,CAAW9C,EAAiB,CAAE,IAAA,CAAMrE,CAAK,CAAC,CAChD,CAAA,OAAO0D,mBAAG,OAAQ,CAAA,6BAAA,CAA8BwD,CAAgBC,CAAAA,CAAQ,CAC1E,CAEA,IAAMA,CAAW9C,CAAAA,CAAAA,CAAiB,CAAE,IAAA,CAAMrE,CAAK,CAAC,EAChD,OAAO0D,kBAAAA,CAAG,OAAQ,CAAA,8BAAA,CAA+BwD,CAAgBC,CAAAA,CAAQ,CAC3E,CAEA,GAAI,OAAOnH,CAAAA,EAAS,QAAU,CAAA,CAC5B,IAAMmH,CAAWzD,CAAAA,kBAAAA,CAAG,OAAQ,CAAA,oBAAA,CAAqB1D,CAAI,CAAA,CACrD,OAAO0D,kBAAG,CAAA,OAAA,CAAQ,6BAA8BwD,CAAAA,CAAAA,CAAgBC,CAAQ,CAC1E,CAEA,OAAOzD,kBAAAA,CAAG,OAAQ,CAAA,8BAAA,CAA+BwD,CAAgBlH,CAAAA,CAAI,CACvE,CAEaoH,CAAAA,EAAAA,CAAa,IAAsB1D,kBAAAA,CAAG,OAAQ,CAAA,UAAA,GAU9C2D,EAAe,CAAA,CAAc,CACxC,WAAA,CAAAC,CAAc,CAAA,GACd,aAAAC,CAAAA,CAAAA,CACA,SAAAC,CAAAA,CAAAA,CACA,QAAArD,CAAAA,CAAAA,CACA,MAAArC,CACF,CAAA,GAMiC,CAC/B,GAAIA,CAAU,GAAA,IAAA,CACZ,OAAOsF,EAAW,EAAA,CAGpB,GAAI,KAAA,CAAM,OAAQtF,CAAAA,CAAK,EACrB,OAAO2F,EAAAA,CAA6B,CAAE,QAAA,CAAU3F,CAAM,CAAC,EAGzD,GAAI,OAAOA,CAAU,EAAA,QAAA,CACnB,OAAO4F,EAAAA,CAAiB,CACtB,WAAAJ,CAAAA,CAAAA,CACA,GAAKxF,CAAAA,CAAAA,CACL,SAAA0F,CAAAA,CACF,CAAC,CAGH,CAAA,GAAI,OAAO1F,CAAAA,EAAU,QACnB,CAAA,OAAOkD,GAAI,MAAOlD,CAAAA,CAAK,CAGzB,CAAA,GAAI,OAAOA,CAAAA,EAAU,UACnB,OAAOkD,EAAAA,CAAI,OAAQlD,CAAAA,CAAK,CAG1B,CAAA,GAAI,OAAOA,CAAU,EAAA,QAAA,CAAU,CAC7B,GAAIyF,CAAe,CAAA,CAEjB,IAAMI,CAAQ7F,CAAAA,CAAAA,CAAM,KAAM,CAAA,GAAG,CAC7B,CAAA,OAAOkF,GAA+B,CACpC,UAAA,CAAYW,CAAM,CAAA,CAAC,CACnB,CAAA,IAAA,CAAMA,EAAM,CAAC,CACf,CAAC,CACH,CACA,OAAO3C,GAAI,MAAOlD,CAAAA,CAAAA,CAAOqC,CAAQ,CACnC,CAGF,CAAA,CAOayD,GACXC,CAEAA,EAAAA,CAAAA,CAAW,GAAKC,CAAAA,CAAAA,EAAc,CAC5B,GAAI,gBAAiBA,CACnB,CAAA,OAAOC,EAA2B,CAAA,CAChC,IAAMrE,CAAAA,kBAAAA,CAAG,QAAQ,0BACfoE,CAAAA,CAAAA,CAAU,WACP,CAAA,GAAA,CAAKE,CAEA,EAAA,aAAA,GAAiBA,EACnB,MAGatE,CAAAA,kBAAAA,CAAG,OAAQ,CAAA,oBAAA,CACxB,MACA,CAAA,MAAA,CACAW,EAAiB,CAAE,IAAA,CAAM2D,CAAM,CAAA,IAAK,CAAC,CAAA,CACrC,MACF,CAED,CAAA,CACA,MAAO,CAAA,OAAO,CACnB,CAAA,CACA,KACEF,CAAU,CAAA,IAAA,GAAS,MACfrB,CAAAA,CAAAA,CAAeqB,CAAU,CAAA,IAAI,EAC7B,MACR,CAAC,CAGH,CAAA,IAAMG,CAAYH,CAAAA,CAAAA,CAAU,YACxB,CAACtD,CAAAA,CAAe,CAAE,OAAA,CAASsD,CAAU,CAAA,WAAY,CAAC,CAAC,CAAA,CACnD,EAAC,CAEL,OAAIA,CAAAA,CAAU,YACZG,CAAU,CAAA,IAAA,CAAKzD,CAAe,CAAA,CAAE,OAAS,CAAA,UAAW,CAAC,CAAC,CAAA,CAGjDuD,EAA2B,CAAA,CAChC,WACED,CAAAA,CAAAA,CAAU,UAAY,MAClBT,CAAAA,EAAAA,CAAa,CAAE,KAAA,CAAOS,CAAU,CAAA,OAAQ,CAAC,CACzC,CAAA,MAAA,CACN,SAAAG,CAAAA,CAAAA,CACA,IAAM5D,CAAAA,CAAAA,CAAiB,CAAE,IAAMyD,CAAAA,CAAAA,CAAU,IAAK,CAAC,CAC/C,CAAA,QAAA,CAAUA,EAAU,UAAe,GAAA,KAAA,CACnC,IACEA,CAAAA,CAAAA,CAAU,IAAS,GAAA,MAAA,CACfrB,EAAeqB,CAAU,CAAA,IAAI,CAC7B,CAAA,MACR,CAAC,CACH,CAAC,CAmBUnD,CAAAA,EAAAA,CAAoB,CAA8B,CAC7D,OAAAF,CAAAA,CACF,IAwBiD,CAC/C,OAAQA,CAAS,EACf,KAAK,KAAA,CACH,OAAOf,kBAAG,CAAA,UAAA,CAAW,UACvB,CAAA,KAAK,OACH,CAAA,OAAOA,mBAAG,UAAW,CAAA,YAAA,CACvB,KAAK,SAAA,CACH,OAAOA,kBAAAA,CAAG,WAAW,cACvB,CAAA,KAAK,QACH,CAAA,OAAOA,kBAAG,CAAA,UAAA,CAAW,cACvB,KAAK,OAAA,CACH,OAAOA,kBAAAA,CAAG,UAAW,CAAA,YAAA,CACvB,KAAK,QACH,CAAA,OAAOA,kBAAG,CAAA,UAAA,CAAW,aACvB,CAAA,KAAK,UACH,OAAOA,kBAAAA,CAAG,UAAW,CAAA,cAAA,CACvB,KAAK,WAAA,CACH,OAAOA,kBAAG,CAAA,UAAA,CAAW,gBACvB,CAAA,KAAK,QACH,CAAA,OAAOA,mBAAG,UAAW,CAAA,aAAA,CACvB,KAAK,UAAA,CACH,OAAOA,kBAAAA,CAAG,WAAW,eACvB,CAAA,KAAK,QACH,CAAA,OAAOA,kBAAG,CAAA,UAAA,CAAW,cACvB,KAAK,QAAA,CACH,OAAOA,kBAAAA,CAAG,UAAW,CAAA,aAAA,CACvB,KAAK,WACH,CAAA,OAAOA,kBAAG,CAAA,UAAA,CAAW,gBACvB,CAAA,KAAK,UACH,OAAOA,kBAAAA,CAAG,UAAW,CAAA,cAAA,CACvB,KAAK,MAAA,CACH,OAAOA,kBAAG,CAAA,UAAA,CAAW,WACvB,CAAA,QACE,MAAM,IAAI,MAAM,CAAoCe,iCAAAA,EAAAA,CAAO,CAAG,CAAA,CAAA,CAClE,CACF,CAAA,CAEayD,GAAwB,CAAC,CACpC,OAAAzD,CAAAA,CACF,CAYM,GAAA,CACJ,IAAMC,CAAOC,CAAAA,EAAAA,CAAkB,CAAE,OAAA,CAAAF,CAAQ,CAAC,EAC1C,OAAOf,kBAAAA,CAAG,OAAQ,CAAA,qBAAA,CAAsBgB,CAAI,CAC9C,EAEayD,EACXC,CAAAA,CAAAA,EAEAA,CAAM,CAAA,GAAA,CAAKlE,CAELR,EAAAA,kBAAAA,CAAG,2BAA2BQ,CAAI,CAAA,CAC7BA,CAGFmE,CAAAA,EAAAA,CAA+B,CAEpC,UAAA,CAAYnE,EAAK,OACb,CAAA,OAAOA,CAAK,CAAA,OAAA,EAAY,QACtBgE,CAAAA,EAAAA,CAAsB,CAAE,OAAS,CAAA,SAAU,CAAC,CAAA,CAC5ChE,CAAK,CAAA,OAAA,CACP,OAEJ,WACEA,CAAAA,CAAAA,CAAK,OAAY,GAAA,MAAA,CACbwB,EAASxB,CAAAA,CAAAA,CAAK,OAAO,CAClBA,CAAAA,CAAAA,CAAK,OACNR,CAAAA,kBAAAA,CAAG,OAAQ,CAAA,qBAAA,CACTQ,EAAK,OACDR,CAAAA,kBAAAA,CAAG,OAAQ,CAAA,UAAA,EACXA,CAAAA,kBAAAA,CAAG,QAAQ,WAAY,EAC7B,CACF,CAAA,MAAA,CACN,IAAMQ,CAAAA,CAAAA,CAAK,IACb,CAAC,CACF,CAEUoE,CAAAA,EAAAA,CAAyB,CAAC,CACrC,SAAAC,CACA,CAAA,IAAA,CAAAxD,CACF,CAAA,GAGM,CACJ,IAAMyD,EACJD,CAAa,GAAA,OAAA,CACT7E,kBAAG,CAAA,UAAA,CAAW,YACd6E,CAAAA,CAAAA,GAAa,WACX7E,kBAAG,CAAA,UAAA,CAAW,eACdA,CAAAA,kBAAAA,CAAG,UAAW,CAAA,aAAA,CACtB,OAAOA,kBAAG,CAAA,OAAA,CAAQ,sBAAuB8E,CAAAA,CAAAA,CAAiBzD,CAAI,CAChE,EAEasD,EAAiC,CAAA,CAAC,CAC7C,UAAA,CAAAI,CACA,CAAA,WAAA,CAAAC,EACA,SAAAT,CAAAA,CAAAA,CACA,IAAAjI,CAAAA,CACF,CAME0D,GAAAA,kBAAAA,CAAG,QAAQ,8BACTuE,CAAAA,CAAAA,CACAjI,CACAyI,CAAAA,CAAAA,CACAC,CACF,CAAA,CAEWC,GAAuB,CAAC,CACnC,OAAAC,CAAAA,CAAAA,CACA,QAAAC,CAAAA,CAAAA,CACA,cAAAC,CACA,CAAA,aAAA,CAAAC,CACA,CAAA,IAAA,CAAAhE,CACA,CAAA,aAAA,CAAAiE,CACF,CAQEtF,GAAAA,kBAAAA,CAAG,OAAQ,CAAA,oBAAA,CACTqF,CACAC,CAAAA,CAAAA,CACAH,EACAC,CACA/D,CAAAA,CAAAA,CACA6D,CACF,CAAA,CAEWK,EAAwB,CAAA,CAAC,CACpC,OAAAC,CAAAA,CACF,CAGexF,GAAAA,kBAAAA,CAAG,OAAQ,CAAA,qBAAA,CAAsBwF,CAAO,CAO1CC,CAAAA,EAAAA,CAAsB,CAAC,CAClC,KAAAC,CAAAA,CAAAA,CACA,QAAA7C,CACA,CAAA,SAAA,CAAA8C,CACA,CAAA,UAAA,CAAAxB,CAAa,CAAA,GACb,UAAAyB,CAAAA,CAAAA,CACA,UAAAC,CAAAA,CAAAA,CAAa,EAAC,CACd,MAAAnB,CAAQ,CAAA,EACV,CAAA,GAQM,CACJ,IAAMrB,EAAarD,kBAAG,CAAA,OAAA,CAAQ,mBAC5B0F,CAAAA,CAAAA,CAAQ,CAAC5E,CAAAA,CAAe,CAAE,OAAS,CAAA,OAAQ,CAAC,CAAC,CAAI,CAAA,MAAA,CACjD4D,EAAQD,EAAiBC,CAAAA,CAAK,CAAI,CAAA,MAAA,CAClCR,EAAwBC,CAAAA,CAAU,EAClCyB,CAAa7C,CAAAA,CAAAA,CAAe6C,CAAU,CAAA,CAAI,MAC1C,CAAA,MAAA,CACA,MAAM,OAAQC,CAAAA,CAAU,CACpBC,CAAAA,EAAAA,CAAY,CAAE,SAAA,CAAAH,EAAW,UAAAE,CAAAA,CAAW,CAAC,CAAA,CACrCA,CACN,CAAA,CAEA,OAAAnD,CAAmB,CAAA,CACjB,QAAUG,CAAAA,CAAAA,CACV,IAAMQ,CAAAA,CACR,CAAC,CAEMA,CAAAA,CACT,CAKa0C,CAAAA,EAAAA,CAA0B,CAAC,CACtC,MAAAL,CACA,CAAA,OAAA,CAAA7C,CACA,CAAA,SAAA,CAAA8C,CACA,CAAA,UAAA,CAAAxB,EAAa,EAAC,CACd,UAAAyB,CAAAA,CAAAA,CACA,UAAAC,CAAAA,CAAAA,CAAa,EACb,CAAA,KAAA,CAAAnB,CAAQ,CAAA,EACV,CAAA,GAQM,CACJ,IAAMrB,CAAarD,CAAAA,kBAAAA,CAAG,OAAQ,CAAA,wBAAA,CAC5B0F,CAAQ,CAAA,CAAC5E,EAAe,CAAE,OAAA,CAAS,OAAQ,CAAC,CAAC,CAAA,CAAI,OACjD,MACA,CAAA,MAAA,CACA4D,CAAQD,CAAAA,EAAAA,CAAiBC,CAAK,CAAA,CAAI,OAClCR,EAAwBC,CAAAA,CAAU,CAClCyB,CAAAA,CAAAA,CAAa7C,CAAe6C,CAAAA,CAAU,EAAI,MAC1CE,CAAAA,EAAAA,CAAY,CAAE,SAAA,CAAAH,CAAW,CAAA,UAAA,CAAAE,CAAW,CAAC,CACvC,CAEA,CAAA,OAAAnD,CAAmB,CAAA,CACjB,SAAUG,CACV,CAAA,IAAA,CAAMQ,CACR,CAAC,CAEMA,CAAAA,CACT,EAKaU,EAA+B,CAAA,CAAI,CAC9C,QAAA,CAAAiC,CACA,CAAA,SAAA,CAAAL,EAAY,KACd,CAAA,GAYqB3F,kBAAG,CAAA,OAAA,CAAQ,4BAC5BgG,CAAAA,CAAAA,CACG,IAAK5H,CAAW4D,EAAAA,EAAAA,CAAS5D,CAAK,CAAA,CAAIA,CAAQuF,CAAAA,EAAAA,CAAa,CAAE,KAAAvF,CAAAA,CAAM,CAAC,CAAE,CAClE,CAAA,MAAA,CAAO6D,EAAqB,CAE/B0D,CAAAA,CAAAA,EACG,CAAC,KAAA,CAAM,OAAQK,CAAAA,CAAAA,CAAS,CAAC,CAAC,CAAA,EAAK,OAAOA,CAAAA,CAAS,CAAC,CAAA,EAAM,QAC3D,CAIWC,CAAAA,EAAAA,CAAwB,CAAC,CACpC,UAAA5C,CAAAA,CACF,IAEMrD,kBAAG,CAAA,OAAA,CAAQ,qBAAsBqD,CAAAA,CAAU,CAEpC6C,CAAAA,EAAAA,CAAyB,CAAC,CACrC,UAAA,CAAA/B,CAAa,CAAA,EACb,CAAA,UAAA,CAAAyB,EACA,cAAAO,CAAAA,CACF,CAKenG,GAAAA,kBAAAA,CAAG,OAAQ,CAAA,sBAAA,CACtBmG,EACAhC,CACAyB,CAAAA,CACF,CAiCW5B,CAAAA,EAAAA,CAAmB,CAE9B,CACA,SAAArB,CACA,CAAA,WAAA,CAAAiB,CAAc,CAAA,EACd,CAAA,SAAA,CAAA+B,EAAY,IACZ,CAAA,GAAA,CAAAS,CACA,CAAA,SAAA,CAAAtC,CACA,CAAA,QAAA,CAAArD,EAAW,KACb,CAAA,GAOkC,CAChC,IAAM4F,CAAa,CAAA,KAAA,CAAM,QAAQD,CAAG,CAAA,CAChCA,CACG,CAAA,GAAA,CAAKhI,CAAuB,EAAA,CAE3B,IAAIkI,CAAe,CAAA,KAAA,CACnB,GAAI,KAAA,GAASlI,CAAO,CAAA,CAClB,GAAM,CAAE,GAAA,CAAAD,CAAI,CAAA,CAAIC,CAChBkI,CAAAA,CAAAA,CAAenI,IAAQC,CAAM,CAAA,KAAA,CAAA,CAE3BD,CAAI,CAAA,KAAA,CAAM,QAAQ,CAAA,EAAKA,EAAI,KAAM,CAAA,MAAM,CAEZA,EAAAA,CAAAA,CAAI,KAAM,CAAA,KAAK,GAAKA,CAAQ,GAAA,EAAA,GACvD,CAACA,CAAAA,CAAI,UAAW,CAAA,GAAG,GACnB,CAACA,CAAAA,CAAI,QAAS,CAAA,GAAG,CAEjBC,GAAAA,CAAAA,CAAM,IAAM,CAAID,CAAAA,EAAAA,CAAG,CAEvB,CAAA,CAAA,EAAA,CACA,IAAIoI,CAAAA,CACJ,GAAI,QAAYnI,GAAAA,CAAAA,CAAO,CACrB,IAAMoI,CAAiBxE,CAAAA,EAAAA,CAAS5D,EAAM,MAAM,CAAA,CACxCA,CAAM,CAAA,MAAA,CACNuC,CAAiB,CAAA,CAAE,KAAMvC,CAAM,CAAA,MAAO,CAAC,CAAA,CAC3CmI,CAAavG,CAAAA,kBAAAA,CAAG,QAAQ,sBACtB5B,CAAAA,CAAAA,CAAM,SACFqI,CAAAA,EAAAA,CAAmB,CACjB,UAAA,CAAYD,EACZ,IACE,CAAA,OAAOpI,CAAM,CAAA,SAAA,EAAc,QACvBoG,CAAAA,EAAAA,CAAsB,CAAE,OAASpG,CAAAA,CAAAA,CAAM,SAAU,CAAC,CAClDA,CAAAA,CAAAA,CAAM,SACd,CAAC,CAAA,CACDoI,CACN,EACF,CAAWpI,KAAAA,GAAAA,CAAAA,CAAM,WAAc0F,CAAawC,EAAAA,CAAAA,CAC1CC,CAAavG,CAAAA,kBAAAA,CAAG,OAAQ,CAAA,iCAAA,CACtB5B,EAAM,KACR,CAAA,CAAA,KACK,CACL,IAAI+C,CAAyCa,CAAAA,EAAAA,CAAS5D,EAAM,KAAK,CAAA,CAC7DA,CAAM,CAAA,KAAA,CACN,KAAM,CAAA,OAAA,CAAQA,EAAM,KAAK,CAAA,GACtB,CAACA,CAAAA,CAAM,KAAM,CAAA,MAAA,EAAU,OAAOA,CAAM,CAAA,KAAA,CAAM,CAAC,CAAA,EAAM,QAClD4F,CAAAA,CAAAA,EAAAA,CAAiB,CACf,SAAA2B,CAAAA,CAAAA,CACA,GAAKvH,CAAAA,CAAAA,CAAM,KACX,CAAA,SAAA,CAAA0F,EACA,QAAArD,CAAAA,CACF,CAAC,CAAA,CACDkD,EAAa,CAAA,CACX,YAAaC,CAAY,CAAA,QAAA,CAASxF,CAAM,CAAA,GAAG,CACvC,CAAA,MAAA,CAAO,KAAKA,CAAM,CAAA,KAAK,CACvB,CAAA,EACJ,CAAA,aAAA,CAAeA,EAAM,aACrB,CAAA,SAAA,CAAA0F,CACA,CAAA,QAAA,CAAArD,CACA,CAAA,KAAA,CAAOrC,EAAM,KACf,CAAC,CACP,CAAA,GAAI,CAAC+C,CAAAA,CACH,OAIAyC,CAAY,CAAA,QAAA,CAASxF,CAAM,CAAA,GAAG,CAC9B,EAAA,CAAC4B,mBAAG,yBAA0BmB,CAAAA,CAAW,CAEzCA,GAAAA,CAAAA,CAAcR,CAAiB,CAAA,CAAE,KAAMvC,CAAM,CAAA,KAAgB,CAAC,CAAA,CAAA,CAEhEmI,CAAaG,CAAAA,EAAAA,CAAyB,CACpC,WAAAvF,CAAAA,CAAAA,CACA,IAAM/C,CAAAA,CAAAA,CAAM,GACd,CAAC,EACH,CAEA,OAAAsE,CAAmB,CAAA,CACjB,QAAUtE,CAAAA,CAAAA,CAAM,SAChB,IAAMmI,CAAAA,CACR,CAAC,CAAA,CAEMA,CACT,CAAC,EACA,MAAOtE,CAAAA,EAAwB,CAClC,CAAA,MAAA,CAAO,OAAQmE,CAAAA,CAAG,EACf,GAAI,CAAA,CAAC,CAACjI,CAAAA,CAAKC,CAAK,CAAA,GAAM,CAErB,IAAI+C,CAAAA,CAAyCwC,EAAa,CAAA,CACxD,WAAaC,CAAAA,CAAAA,CAAY,SAASzF,CAAG,CAAA,CAAI,MAAO,CAAA,IAAA,CAAKC,CAAK,CAAA,CAAI,EAC9D,CAAA,SAAA,CAAA0F,CACA,CAAA,QAAA,CAAArD,CACA,CAAA,KAAA,CAAArC,CACF,CAAC,CAAA,CACD,GAAI,CAAC+C,CACH,CAAA,OAIAyC,EAAY,QAASzF,CAAAA,CAAG,CACxB,EAAA,CAAC6B,kBAAG,CAAA,yBAAA,CAA0BmB,CAAW,CAEzCA,GAAAA,CAAAA,CAAcR,CAAiB,CAAA,CAAE,IAAMvC,CAAAA,CAAgB,CAAC,CAG1D,CAAA,CAAA,IAAMkI,CAAenI,CAAAA,CAAAA,GAAQC,CAC7B,CAAA,OACED,EAAI,KAAM,CAAA,QAAQ,CAClBA,EAAAA,CAAAA,CAAI,KAAM,CAAA,MAAM,GAChB,CAACA,CAAAA,CAAI,UAAW,CAAA,GAAG,CACnB,EAAA,CAACA,CAAI,CAAA,QAAA,CAAS,GAAG,CAAA,GAEjBA,CAAM,CAAA,CAAA,CAAA,EAAIA,CAAG,CAAA,CAAA,CAAA,CAAA,CAEXA,EAAI,KAAM,CAAA,KAAK,CAAK,EAAA,CAACA,CAAI,CAAA,UAAA,CAAW,GAAG,CAAK,EAAA,CAACA,CAAI,CAAA,QAAA,CAAS,GAAG,CAAA,GAC/DA,EAAM,CAAIA,CAAAA,EAAAA,CAAG,CAGb2F,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAawC,CACTtG,CAAAA,kBAAAA,CAAG,QAAQ,iCAAkC5B,CAAAA,CAAK,CAClDsI,CAAAA,EAAAA,CAAyB,CAAE,WAAA,CAAAvF,EAAa,IAAMhD,CAAAA,CAAI,CAAC,CAG3D,CAAC,CAAA,CACA,OAAO8D,EAAwB,CAAA,CAEhCzB,CAAOR,CAAAA,kBAAAA,CAAG,OAAQ,CAAA,6BAAA,CACtBqG,EACAV,CACF,CAAA,CAEA,OAAAjD,CAAAA,CAAmB,CACjB,QAAA,CAAAC,EACA,IAAAnC,CAAAA,CACF,CAAC,CAAA,CAEMA,CACT,CAAA,CAUamG,GAAwB,CAEnC,CACA,QAAUC,CAAAA,CAAAA,CAAqB,EAAC,CAChC,eAAgBjE,CAChB,CAAA,IAAA,CAAArG,CACA,CAAA,GAAA,CAAA8J,CACF,CAAA,GAK0B,CACxB,IAAMlB,CAAAA,CAAgC,KAAM,CAAA,OAAA,CAAQkB,CAAG,CAAA,CACnDA,EAAI,GAAKhI,CAAAA,CAAAA,EAAU,CACjB,IAAMyI,CAAaC,CAAAA,EAAAA,CAAiB,CAClC,WAAanD,CAAAA,EAAAA,CAAa,CACxB,KAAA,CAAOvF,CAAM,CAAA,KACf,CAAC,CACD,CAAA,IAAA,CAAMA,CAAM,CAAA,GACd,CAAC,CAAA,CAED,OAAAsE,CAAmB,CAAA,CACjB,QAAUtE,CAAAA,CAAAA,CAAM,QAChB,CAAA,IAAA,CAAMyI,CACR,CAAC,CAAA,CAEMA,CACT,CAAC,CAED,CAAA,MAAA,CAAO,QAAQT,CAAG,CAAA,CAAE,GAAI,CAAA,CAAC,CAACjI,CAAAA,CAAKC,CAAK,CAAM,GAAA,CACxC,IAAMyI,CAAAA,CAAa7G,kBAAG,CAAA,OAAA,CAAQ,iBAC5B7B,CACAwF,CAAAA,EAAAA,CAAa,CACX,QAAA,CAAU,IACV,CAAA,KAAA,CAAAvF,CACF,CAAC,CACH,CAEA,CAAA,OAAAsE,CAAmB,CAAA,CACjB,SAAUkE,CAAmBzI,CAAAA,CAAG,CAChC,CAAA,IAAA,CAAM0I,CACR,CAAC,EAEMA,CACT,CAAC,CAECrG,CAAAA,CAAAA,CAAOR,kBAAG,CAAA,OAAA,CAAQ,sBACtB,CAACc,CAAAA,CAAe,CAAE,OAAA,CAAS,QAAS,CAAC,CAAC,CACtCH,CAAAA,CAAAA,CAAiB,CAAE,IAAA,CAAMrE,CAAK,CAAC,EAC/B4I,CACF,CAAA,CAEA,OAAAxC,CAAAA,CAAmB,CACjB,QAAA,CAAAC,EACA,IAAAnC,CAAAA,CACF,CAAC,CAAA,CAEMA,CACT,CAAA,CAEMsG,GAAmB,CAAC,CACxB,WAAA3F,CAAAA,CAAAA,CACA,IAAA7E,CAAAA,CACF,IAGM,CACJ,IAAI6B,CAAM7B,CAAAA,CAAAA,CACV,OAAI,OAAO6B,GAAQ,QACbA,GAAAA,CAAAA,CAAI,QAAS,CAAA,GAAG,CAClBA,CAAAA,CAAAA,CAAM4D,GAAoB,CACxB,aAAA,CAAe,KACf,CAAA,IAAA,CAAM5D,CACR,CAAC,EAEDA,CAAMsB,CAAAA,EAAAA,CAAWtB,CAAG,CAAA,CAAA,CAGjB6B,kBAAG,CAAA,OAAA,CAAQ,iBAAiB7B,CAAKgD,CAAAA,CAAW,CACrD,CAAA,CAQa4F,EAA6B,CAAA,CAAC,CACzC,IAAAzK,CAAAA,CAAAA,CACA,UAAAuJ,CAAAA,CACF,CAIE7F,GAAAA,kBAAAA,CAAG,QAAQ,uBACT,CAAA,CAACc,CAAe,CAAA,CAAE,OAAS,CAAA,QAAS,CAAC,CAAC,CAAA,CACtCH,CAAiB,CAAA,CAAE,IAAMrE,CAAAA,CAAK,CAAC,CAC/B0D,CAAAA,kBAAAA,CAAG,OAAQ,CAAA,iBAAA,CAAkB6F,CAAU,CAAA,CACvC7F,mBAAG,SAAU,CAAA,SACf,CAEWgH,CAAAA,EAAAA,CAA8B,CAAC,CAC1C,UAAAC,CACA,CAAA,UAAA,CAAAC,CACF,CAAA,GAIelH,kBAAG,CAAA,OAAA,CAAQ,4BAA4BkH,CAAYD,CAAAA,CAAS,CAI9DlF,CAAAA,EAAAA,CAAsB,CAAC,CAClC,cAAAoF,CACA,CAAA,IAAA,CAAAvG,CACF,CAAA,IAIMuG,CAAkB,GAAA,MAAA,GACpBA,EAAgB,CAACvG,CAAAA,CAAK,QAAS,CAAA,GAAG,CAEvBZ,CAAAA,CAAAA,kBAAAA,CAAG,QAAQ,mBAAoBY,CAAAA,CAAAA,CAAMuG,CAAa,CAAA,CAAA,CAIpDC,EAA8B,CAAA,CAAC,CAC1C,SAAAC,CAAAA,CAAAA,CACA,SAAAC,CAAAA,CAAAA,CACA,QAAAC,CAAAA,CACF,IAKqBvH,kBAAG,CAAA,OAAA,CAAQ,2BAC5BqH,CAAAA,CAAAA,CACArH,kBAAG,CAAA,OAAA,CAAQ,YAAYA,kBAAG,CAAA,UAAA,CAAW,aAAa,CAAA,CAClDuH,CACAvH,CAAAA,kBAAAA,CAAG,QAAQ,WAAYA,CAAAA,kBAAAA,CAAG,UAAW,CAAA,UAAU,CAC/CsH,CAAAA,CACF,EAIWE,EAAyB,CAAA,CAAC,CAAE,IAAA,CAAA5G,CAAK,CAAA,GACzBZ,mBAAG,OAAQ,CAAA,sBAAA,CAC5BW,CAAiB,CAAA,CAAE,IAAAC,CAAAA,CAAK,CAAC,CAC3B,CAAA,CAWW6G,EAA6B,CAAA,CAAC,CACzC,OAAA,CAAA5E,EACA,UAAA6E,CAAAA,CAAAA,CACA,IAAApL,CAAAA,CAAAA,CACA,IAAA+E,CAAAA,CAAAA,CACA,eAAA8E,CAAiB,CAAA,EACnB,CAAA,GAM+B,CAC7B,IAAM3F,EAAOR,kBAAG,CAAA,OAAA,CAAQ,0BACtB0H,CAAAA,CAAAA,CAAa,CAAC5G,CAAAA,CAAe,CAAE,OAAS,CAAA,QAAS,CAAC,CAAC,CAAI,CAAA,MAAA,CACvDH,EAAiB,CAAE,IAAA,CAAMrE,CAAK,CAAC,CAC/BmI,CAAAA,EAAAA,CAAiB0B,CAAc,CAC/BpD,CAAAA,CAAAA,CAAe1B,CAAI,CACrB,CAEA,CAAA,OAAAqB,EAAmB,CACjB,QAAA,CAAUG,CACV,CAAA,IAAA,CAAArC,CACF,CAAC,EAEMA,CACT,CAAA,CAEa0C,EAA0B,CAAA,CAAC,CACtC,aAAA,CAAAyE,EACA,QAAAC,CAAAA,CACF,CAIe5H,GAAAA,kBAAAA,CAAG,OAAQ,CAAA,uBAAA,CAAwB4H,EAAUD,CAAa,CAAA,CAI5DE,EAA8B,CAAA,CAAC,CAC1C,IAAA,CAAAxG,CACF,CAGerB,GAAAA,kBAAAA,CAAG,OAAQ,CAAA,uBAAA,CAAwBqB,CAAI,CAAA,CAIzCgD,GAA6B,CAAC,CACzC,WAAAlD,CAAAA,CAAAA,CACA,SAAAoD,CAAAA,CAAAA,CACA,KAAAjI,CACA,CAAA,QAAA,CAAAwL,CAAW,CAAA,IAAA,CACX,IAAAzG,CAAAA,CACF,IAOerB,kBAAG,CAAA,OAAA,CAAQ,0BACtBuE,CAAAA,CAAAA,CACA,MACAjI,CAAAA,CAAAA,CACAwL,CAAW,CAAA,MAAA,CAAY9H,kBAAG,CAAA,OAAA,CAAQ,WAAYA,CAAAA,kBAAAA,CAAG,UAAW,CAAA,aAAa,EACzEqB,CACAF,CAAAA,CACF,CAIW4G,CAAAA,EAAAA,CAAsB,CAAC,CAClC,eAAAC,CACA,CAAA,UAAA,CAAA3E,CACA,CAAA,aAAA,CAAAsE,CACF,CAAA,GAKe3H,mBAAG,OAAQ,CAAA,mBAAA,CACtBqD,CACAsE,CAAAA,CAAAA,CACAK,CACF,CAAA,CAIWC,GAAuB,CAAC,CACnC,aAAAC,CAAAA,CAAAA,CACA,UAAA7E,CAAAA,CAAAA,CACA,YAAAlC,CACA,CAAA,SAAA,CAAAgH,CACF,CAAA,GAOenI,kBAAG,CAAA,OAAA,CAAQ,qBACtBkI,CACA/G,CAAAA,CAAAA,CACAkC,CACA8E,CAAAA,CACF,CAIWC,CAAAA,EAAAA,CAAmB,CAAC,CAC/B,IAAA,CAAAC,CACA,CAAA,KAAA,CAAAC,CACF,CAAA,GAGMtI,mBAAG,OAAQ,CAAA,gBAAA,CAAiBqI,CAAMC,CAAAA,CAAK,CAEhCxC,CAAAA,EAAAA,CAAc,CAAC,CAC1B,SAAA,CAAAH,CAAY,CAAA,IAAA,CACZ,UAAAE,CAAAA,CACF,IAGM7F,kBAAG,CAAA,OAAA,CAAQ,WAAY6F,CAAAA,CAAAA,CAAYF,CAAS,CAAA,CAErCe,GAA2B,CAAC,CACvC,WAAAvF,CAAAA,CAAAA,CACA,IAAA7E,CAAAA,CACF,IAGM0D,kBAAG,CAAA,OAAA,CAAQ,wBAAyB1D,CAAAA,CAAAA,CAAM6E,CAAW,CAAA,CAE9CoH,GAAiC,CAAC,CAC7C,KAAAC,CAAAA,CAAAA,CAAQ,EAAC,CACT,KAAA5H,CACF,CAAA,GAGM,CACJ,IAAM6H,CACJ7H,CAAAA,CAAAA,CAAK,WAAW,GAAG,CAAA,EAAKA,CAAK,CAAA,QAAA,CAAS,GAAG,CAAA,CAAIA,EAAO,CAAIA,CAAAA,EAAAA,CAAI,CAC9D,CAAA,CAAA,CAAA,OAAOZ,kBAAG,CAAA,OAAA,CAAQ,+BAChB,CAAGyI,EAAAA,CAAe,CAAGD,EAAAA,CAAAA,CAAM,IAAK,CAAA,EAAE,CAAC,CACrC,CAAA,CACF,CAEa/B,CAAAA,EAAAA,CAAqB,CAAC,CACjC,WAAApD,CACA,CAAA,IAAA,CAAAhC,CACF,CAAA,GAGMrB,kBAAG,CAAA,OAAA,CAAQ,mBAAmBqD,CAAYhC,CAAAA,CAAI,CAEvCqH,CAAAA,EAAAA,CAA4B,CAAC,CACxC,MAAAtK,CACF,CAAA,GAEM,CACJ,IAAMuK,CAA2C,CAAA,GAC7CC,CAAW,CAAA,EAAA,CAEf,IAAWC,IAAAA,CAAAA,IAAQzK,CAAM,CAAA,KAAA,CAAM,CAAC,CAAE,CAAA,OAAA,EAChC,CAAA,GAAI,OAAOyK,CAAAA,EAAS,SAClBD,CAAW,CAAA,CAAA,EAAGC,CAAI,CAAA,EAAGD,CAAQ,CAAA,CAAA,CAAA,KACxB,CACL,IAAMpD,CAAAA,CAAUmD,CAAM,CAAA,MAAA,CAClB3I,kBAAG,CAAA,OAAA,CAAQ,qBAAqB4I,CAAQ,CAAA,CACxC5I,kBAAG,CAAA,OAAA,CAAQ,kBAAmB4I,CAAAA,CAAQ,EACpCE,CAAO9I,CAAAA,kBAAAA,CAAG,OAAQ,CAAA,6BAAA,CAA8B6I,CAAMrD,CAAAA,CAAO,EACnEmD,CAAM,CAAA,IAAA,CAAKG,CAAI,CAAA,CACfF,CAAW,CAAA,GACb,CAOF,OAJ4B5I,kBAAAA,CAAG,OAAQ,CAAA,yBAAA,CACrCA,kBAAG,CAAA,OAAA,CAAQ,mBAAmB4I,CAAQ,CAAA,CACtCD,CAAM,CAAA,OAAA,EACR,CAEF,ECvjCO,IAAMI,EAAAA,CAA6B,CAAC,CACzC,MAAAC,CAAAA,CACF,IAGoBhJ,kBAAG,CAAA,OAAA,CAAQ,uBAC3B,CAAA,MAAA,CACA,KACA,CAAA,MAAA,CACAsB,GAAI,MAAO0H,CAAAA,CAAM,CACnB,CAAA,CAMWC,EAAuB,CAAA,CAAC,CACnC,YAAAC,CAAAA,CAAAA,CACA,UAAA/E,CAAAA,CAAAA,CAAa,EAAC,CACd,MAAAO,CACF,CAAA,GASM,CACJ,IAAMrB,CACJ,CAAA,OAAO6F,GAAiB,QACpBvI,CAAAA,CAAAA,CAAiB,CAAE,IAAA,CAAMuI,CAAa,CAAC,EACvCA,CACAlB,CAAAA,CAAAA,CAAiB7D,CACpB,CAAA,MAAA,CAAQC,CAAcA,EAAAA,CAAAA,GAAc,MAAS,CAC7C,CAAA,GAAA,CAAKA,CACJ,EAAA,OAAOA,CAAc,EAAA,QAAA,CACjBzD,EAAiB,CAAE,IAAA,CAAMyD,CAAU,CAAC,CACpCA,CAAAA,CACN,EAMF,OALuBpE,kBAAAA,CAAG,OAAQ,CAAA,oBAAA,CAChCqD,CACAqB,CAAAA,CAAAA,CACAsD,CACF,CAEF,CAAA,CAQamB,EAAgC,CAAA,CAAC,CAC5C,OAAA,CAAAC,EACA,MAAAJ,CAAAA,CACF,CAG4B,GAAA,CAC1B,IAAMK,CAAAA,CAAgB,MAAM,OAAQD,CAAAA,CAAO,CAAIA,CAAAA,CAAAA,CAAU,CAACA,CAAO,EAC3DE,CAAmBD,CAAAA,CAAAA,CAAc,IACpCR,CAAAA,CAAAA,EAAS,OAAOA,CAAAA,EAAS,UAAY,CAACA,CAAAA,CAAK,MAC9C,CAAA,CACM7C,CAAWqD,CAAAA,CAAAA,CAAc,IAAK/M,CAAS,EAAA,CAC3C,IAAMuM,CAAAA,CAAO,OAAOvM,CAAAA,EAAS,SAAW,CAAE,IAAA,CAAAA,CAAK,CAAA,CAAIA,CACnD,CAAA,OAAOgF,GAAI,MAAO,CAAA,CAChB,KAAOuH,CAAAA,CAAAA,CAAK,KACZ,CAAA,MAAA,CAAQS,GAAoBT,CAAK,CAAA,MAAA,CACjC,IAAMA,CAAAA,CAAAA,CAAK,IACb,CAAC,CACH,CAAC,CAAA,CACKU,CAAevJ,CAAAA,kBAAAA,CAAG,OAAQ,CAAA,kBAAA,CAAmBgG,CAAQ,CACrDwD,CAAAA,CAAAA,CAAkBlI,EAAI,CAAA,MAAA,CAAO0H,CAAM,CAAA,CAOzC,OANkBhJ,kBAAG,CAAA,OAAA,CAAQ,uBAC3B,CAAA,MAAA,CACA,CAACsJ,CAAAA,CACDC,EACAC,CACF,CAEF,CAWaC,CAAAA,EAAAA,CAAsB,CAAC,CAClC,UAAAC,CACA,CAAA,OAAA,CAAA7G,CACA,CAAA,WAAA,CAAA8G,CACA,CAAA,WAAA,CAAAC,EACA,UAAAvG,CAAAA,CAAAA,CACA,IAAA/G,CAAAA,CAAAA,CACA,QAAAsL,CAAAA,CACF,IAS4B,CAC1B,IAAMzG,CAAcuI,CAAAA,CAAAA,CAChBjD,EAAmB,CAAA,CACjB,WAAApD,CACA,CAAA,IAAA,CACE,OAAOqG,CAAAA,EAAc,QACjBxG,CAAAA,EAAAA,CAAwB,CAAE,QAAUwG,CAAAA,CAAU,CAAC,CAAA,CAC/CA,CACR,CAAC,EACDrG,CACEmD,CAAAA,CAAAA,CAAiB7F,CAAiB,CAAA,CAAE,IAAMrE,CAAAA,CAAK,CAAC,CAChDuN,CAAAA,CAAAA,CAAc7J,kBAAG,CAAA,OAAA,CAAQ,yBAC7B2J,CAAAA,CAAAA,CACI3J,mBAAG,OAAQ,CAAA,0BAAA,CAA2B,CACpCA,kBAAAA,CAAG,OAAQ,CAAA,oBAAA,CACT,OACA,MACAwG,CAAAA,CAAAA,CACA,MACF,CACF,CAAC,CAAA,CACDA,EACJ,MACAoB,CAAAA,CAAAA,CACI,OAAOA,CAAAA,EAAa,QAClB1E,CAAAA,EAAAA,CAAwB,CAAE,QAAA0E,CAAAA,CAAS,CAAC,CAAA,CACpCA,CACF,CAAA,MAAA,CACJzG,CACF,CACMgH,CAAAA,CAAAA,CAAYnI,kBAAG,CAAA,OAAA,CAAQ,uBAC3B4J,CAAAA,CAAAA,CAAc,CAAC9I,CAAe,CAAA,CAAE,OAAS,CAAA,QAAS,CAAC,CAAC,EAAI,MACxDd,CAAAA,kBAAAA,CAAG,OAAQ,CAAA,6BAAA,CAA8B,CAAC6J,CAAW,EAAG7J,kBAAG,CAAA,SAAA,CAAU,KAAK,CAC5E,CAEA,CAAA,OAAA0C,EAAmB,CACjB,QAAA,CAAUG,CACV,CAAA,IAAA,CAAMsF,CACR,CAAC,EAEMA,CACT,CAAA,CAQa2B,EAAgC,CAAA,CAAC,CAC5C,OAAA,CAAAC,EACA,MAAAf,CAAAA,CACF,CAG4B,GAAA,CAC1B,IAAMgB,CAAAA,CAAgB,MAAM,OAAQD,CAAAA,CAAO,CAAIA,CAAAA,CAAAA,CAAU,CAACA,CAAO,EAC3DE,CAAmBD,CAAAA,CAAAA,CAAc,IACpCnB,CAAAA,CAAAA,EAAS,OAAOA,CAAAA,EAAS,UAAY,CAACA,CAAAA,CAAK,MAC9C,CAAA,CACIqB,CACElE,CAAAA,CAAAA,CAAsC,EAC5CgE,CAAAA,CAAAA,CAAc,OAAS1N,CAAAA,CAAAA,EAAS,CAC9B,IAAMuM,EAAO,OAAOvM,CAAAA,EAAS,QAAW,CAAA,CAAE,IAAAA,CAAAA,CAAK,EAAIA,CAC/CuM,CAAAA,CAAAA,CAAK,IAAS,GAAA,GAAA,EAAOA,CAAK,CAAA,KAAA,CAC5BqB,EAAkBrB,CAElB7C,CAAAA,CAAAA,CAAS,IACP1E,CAAAA,EAAAA,CAAI,MAAO,CAAA,CACT,MAAOuH,CAAK,CAAA,KAAA,CACZ,MAAQoB,CAAAA,CAAAA,EAAoBpB,CAAK,CAAA,MAAA,CACjC,KAAMA,CAAK,CAAA,IACb,CAAC,CACH,EAEJ,CAAC,EACD,IAAMsB,CAAAA,CAAgBD,CAClBlK,CAAAA,kBAAAA,CAAG,OAAQ,CAAA,qBAAA,CACTW,EAAiB,CAAE,IAAA,CAAMuJ,CAAgB,CAAA,KAAO,CAAC,CACnD,EACAlK,kBAAG,CAAA,OAAA,CAAQ,kBAAmBgG,CAAAA,CAAQ,CACpCoE,CAAAA,CAAAA,CAAepK,mBAAG,OAAQ,CAAA,kBAAA,CAC9B,CAACiK,CAAAA,CACD,MACAE,CAAAA,CACF,EACMX,CAAkBlI,CAAAA,EAAAA,CAAI,MAAO0H,CAAAA,CAAM,CAMzC,CAAA,OALkBhJ,mBAAG,OAAQ,CAAA,uBAAA,CAC3B,MACAoK,CAAAA,CAAAA,CACAZ,CACF,CAEF,EC/LO,IAAMa,EAAAA,CAA+B,CAAC,CAC3C,WAAAC,CAAAA,CAAAA,CACA,QAAAzH,CACA,CAAA,SAAA,CAAA8C,CAAY,CAAA,IAAA,CACZ,UAAAxB,CAAAA,CAAAA,CAAa,EACb,CAAA,UAAA,CAAA0B,CAAa,CAAA,EACf,CAAA,GAMM,CACJ,IAAMtB,CAAAA,CAAY+F,CACd,CAAA,CAACxJ,CAAe,CAAA,CAAE,QAASwJ,CAAY,CAAC,CAAC,CAAA,CACzC,MACE9J,CAAAA,CAAAA,CAAOR,mBAAG,OAAQ,CAAA,4BAAA,CACtBuE,CACAL,CAAAA,EAAAA,CAAwBC,CAAU,CAAA,CAClC2B,GAAY,CAAE,SAAA,CAAAH,CAAW,CAAA,UAAA,CAAAE,CAAW,CAAC,CACvC,CAEA,CAAA,OAAAnD,CAAmB,CAAA,CACjB,QAAUG,CAAAA,CAAAA,CACV,KAAArC,CACF,CAAC,CAEMA,CAAAA,CACT,CAca+J,CAAAA,EAAAA,CAA0B,CAAC,CACtC,WAAA,CAAAD,CACA,CAAA,OAAA,CAAAzH,CACA,CAAA,QAAA,CAAA2H,EAAW,KACX,CAAA,SAAA,CAAA7E,CAAY,CAAA,IAAA,CACZ,IAAArJ,CAAAA,CAAAA,CACA,WAAA6H,CAAa,CAAA,EACb,CAAA,UAAA,CAAAyB,CACA,CAAA,UAAA,CAAAC,EAAa,EAAC,CACd,KAAAnB,CAAAA,CAAAA,CAAQ,EACV,IAUM,CACJ,IAAMH,CAAY+F,CAAAA,CAAAA,CACd,CAACxJ,CAAAA,CAAe,CAAE,OAASwJ,CAAAA,CAAY,CAAC,CAAC,CACzC,CAAA,GAEAE,CACFjG,EAAAA,CAAAA,CAAU,IAAKzD,CAAAA,CAAAA,CAAe,CAAE,OAAA,CAAS,QAAS,CAAC,CAAC,CAGtD,CAAA,IAAMN,CAAOR,CAAAA,kBAAAA,CAAG,QAAQ,uBACtBuE,CAAAA,CAAAA,CACA,MACA5D,CAAAA,CAAAA,CAAiB,CAAE,IAAA,CAAMrE,CAAK,CAAC,CAAA,CAC/B,MACAoI,CAAAA,CAAAA,CAAQD,EAAiBC,CAAAA,CAAK,EAAI,MAClCR,CAAAA,EAAAA,CAAwBC,CAAU,CAAA,CAClCyB,CAAa7C,CAAAA,CAAAA,CAAe6C,CAAU,CAAI,CAAA,MAAA,CAC1CE,EAAY,CAAA,CAAE,SAAAH,CAAAA,CAAAA,CAAW,WAAAE,CAAW,CAAC,CACvC,CAAA,CAEA,OAAAnD,CAAAA,CAAmB,CACjB,QAAUG,CAAAA,CAAAA,CACV,IAAArC,CAAAA,CACF,CAAC,CAAA,CAEMA,CACT,CAUaiK,CAAAA,EAAAA,CAAyB,CAAC,CACrC,SAAAC,CAAAA,CAAAA,CACA,YAAAC,CACA,CAAA,eAAA,CAAAC,CACA,CAAA,IAAA,CAAAtO,CACA,CAAA,KAAA,CAAAuO,CACF,CAqB2B,GAAA,CACzB,IAAMtG,CAAAA,CAAoC,EAAC,CAEvCoG,GACFpG,CAAU,CAAA,IAAA,CAAKzD,CAAe,CAAA,CAAE,OAAS,CAAA,QAAS,CAAC,CAAC,CAAA,CAGlD4J,CACFnG,EAAAA,CAAAA,CAAU,OACRvE,CAAAA,kBAAAA,CAAG,QAAQ,eACTiJ,CAAAA,EAAAA,CAAqB,CACnB,YAAA,CAAcyB,CAAU,CAAA,IAAA,CACxB,WAAYA,CAAU,CAAA,IAAA,CACnB,GAAKvH,CAAAA,CAAAA,EAAQQ,EAAa,CAAA,CAAE,MAAOR,CAAI,CAAC,CAAC,CAAA,CACzC,MAAOlB,CAAAA,EAAqB,CACjC,CAAC,CACH,CACF,CAAA,CAGF,IAAM6I,CAAAA,CAA4C,EAElD,CAAA,GAAIF,CACF,CAAA,IAAA,IAAWG,CAAiBH,IAAAA,CAAAA,CAC1BE,EAAgB,IACd9K,CAAAA,kBAAAA,CAAG,OAAQ,CAAA,oBAAA,CAAqBA,kBAAG,CAAA,UAAA,CAAW,eAAgB,CAC5DA,kBAAAA,CAAG,OAAQ,CAAA,iCAAA,CACTW,CAAiB,CAAA,CAAE,KAAMoK,CAAc,CAAC,CACxC,CAAA,MACF,CACF,CAAC,CACH,CAIJ,CAAA,OAAO/K,kBAAG,CAAA,OAAA,CAAQ,sBAChBuE,CAAAA,CAAAA,CACA5D,EAAiB,CAAE,IAAA,CAAMrE,CAAK,CAAC,CAC/B,CAAA,MAAA,CACAwO,EACAD,CACF,CACF,CCrMA,CAEO,IAAMG,EAAwB,CAAA,CAAC,CACpC,UAAA,CAAA3H,CACF,CAAA,GAGoBrD,mBAAG,OAAQ,CAAA,yBAAA,CAA0BqD,CAAU,CAAA,CCD5D,IAAM4H,EAAwB,CAAA,CAAC,CACpC,UAAA,CAAA5H,CACF,CAAA,GAEMrD,mBAAG,OAAQ,CAAA,qBAAA,CAAsBqD,CAAU,CAAA,CASpC6H,EAA2B,CAAA,CAAC,CACvC,IAAAjI,CAAAA,CAAAA,CAAO,EAAC,CACR,IAAA3G,CAAAA,CAAAA,CACA,MAAAoI,CAAQ,CAAA,EACV,CAAA,GAaM,CACJ,IAAMiD,EAAgBjD,CAAM,CAAA,GAAA,CAAKrD,CAI/B6B,EAAAA,EAAAA,CAAwB,CAAE,QAAA,CAAU7B,CAAK,CAAC,CAC5C,CACM2G,CAAAA,CAAAA,CAAiB/E,CACpB,CAAA,GAAA,CAAKE,GACJnD,kBAAG,CAAA,YAAA,CAAamD,CAAG,CAAA,CAAIA,CAAMxC,CAAAA,CAAAA,CAAiB,CAAE,IAAMwC,CAAAA,CAAI,CAAC,CAC7D,CACC,CAAA,MAAA,CAAOlB,EAAqC,CACzCoB,CAAAA,CAAAA,CAAa4F,EAAqB,CAAA,CACtC,YAAc3M,CAAAA,CAAAA,CACd,WAAY0L,CACZ,CAAA,KAAA,CAAOL,CACT,CAAC,CAED,CAAA,OADkBsD,GAAsB,CAAE,UAAA,CAAA5H,CAAW,CAAC,CAExD,CAAA,CAEa8H,GAAuB,CAAC,CACnC,UAAA9H,CAAAA,CACF,CAGoB4H,GAAAA,EAAAA,CAAsB,CACtC,UACE,CAAA,OAAO5H,CAAe,EAAA,QAAA,CAClB1C,CAAiB,CAAA,CAAE,KAAM0C,CAAW,CAAC,CACrCA,CAAAA,CACR,CAAC,CAAA,CCrDI,IAAM+H,EAAAA,CAA8BC,CACzCA,EAAAA,CAAAA,CAAK,MAAM,CAAC,CAAA,CAAE,MACZ,CAAA,CAAChI,CAAYiI,CAAAA,CAAAA,IACX9L,GAAgC,SAAY,CAAA,CAAA,CACxCA,EAAgC,CAAA,IAAA,CAAK8L,CAAO,CAAA,CACvClI,GAA0B,CAC/B,UAAA,CAAAC,CACA,CAAA,IAAA,CAAMiI,CACR,CAAC,EAGItL,kBAAG,CAAA,OAAA,CAAQ,wBAChBqD,CAAAA,CAAAA,CACArD,kBAAG,CAAA,OAAA,CAAQ,YAAYA,kBAAG,CAAA,UAAA,CAAW,gBAAgB,CAAA,CACrDW,CAAiB,CAAA,CAAE,KAAM2K,CAAQ,CAAC,CACpC,CAAA,CAAA,CAEF3K,CAAiB,CAAA,CAAE,KAAM0K,CAAK,CAAA,CAAC,CAAG,CAAC,CACrC,CAAA,CAEWE,GAA0BF,CACrCA,EAAAA,CAAAA,CAAK,KAAM,CAAA,CAAC,CAAE,CAAA,MAAA,CACZ,CAAChI,CAAYiI,CAAAA,CAAAA,GACXhI,EAA+B,CAAA,CAC7B,UAAAD,CAAAA,CAAAA,CACA,KAAMiI,CACR,CAAC,CACH3K,CAAAA,CAAAA,CAAiB,CAAE,IAAA,CAAM0K,EAAK,CAAC,CAAG,CAAC,CACrC,CAKWG,CAAAA,EAAAA,CAAkC,CAAC,CAC9C,WAAA,CAAAC,CACF,CAAA,GAGqBA,CAAY,CAAA,MAAA,CAAO,CAACpI,CAAY/G,CAAAA,CAAAA,GACpCgH,EAA+B,CAAA,CAC1C,UAAAD,CAAAA,CAAAA,CAEA,KAAA/G,CACF,CAAC,CAEF,CAAA,CAIUoP,EAAyB,CAAA,CAAC,CACrC,IAAArD,CAAAA,CAAAA,CACA,QAAAxD,CAAAA,CAAAA,CAAW,GACX,CAAA,KAAA,CAAAyD,CACF,CAKqBtI,GAAAA,kBAAAA,CAAG,OAAQ,CAAA,sBAAA,CAC5BqI,CAEAxD,CAAAA,CAAAA,GAAa,IACT7E,kBAAG,CAAA,UAAA,CAAW,WACd6E,CAAAA,CAAAA,GAAa,KACX7E,CAAAA,kBAAAA,CAAG,WAAW,uBACd6E,CAAAA,CAAAA,GAAa,IACX7E,CAAAA,kBAAAA,CAAG,UAAW,CAAA,qBAAA,CACdA,mBAAG,UAAW,CAAA,SAAA,CACtB,OAAOsI,CAAAA,EAAU,QAAW3H,CAAAA,CAAAA,CAAiB,CAAE,IAAM2H,CAAAA,CAAM,CAAC,CAAA,CAAIA,CAClE,CAAA,CAIWqD,GAAoB,CAAC,CAChC,aAAAC,CAAAA,CAAAA,CACA,UAAAvI,CAAAA,CAAAA,CACA,cAAAwI,CACF,CAAA,GAIM7L,kBAAG,CAAA,OAAA,CAAQ,iBAAkBqD,CAAAA,CAAAA,CAAYwI,EAAeD,CAAa,CAAA,CAE9DE,EAA8B,CAAA,CAAC,CAC1C,IAAA,CAAAT,CACF,CAEoB,GAAA,CAClB,IAAMU,CAAAA,CAAuBX,EAA2BC,CAAAA,CAAI,EACtDW,CAAmBT,CAAAA,EAAAA,CAAuBF,CAAI,CAAA,CAE9CQ,CAAgB/F,CAAAA,EAAAA,CAAY,CAChC,UAAY,CAAA,CACVkF,EAAsB,CAAA,CACpB,UAAYU,CAAAA,EAAAA,CAAuB,CACjC,IAAMM,CAAAA,CAAAA,CACN,KAAOjE,CAAAA,EAAAA,CAAoB,CACzB,cAAA,CAAgB,CAACiE,CAAgB,CAAA,CACjC,UAAYrL,CAAAA,CAAAA,CAAiB,CAAE,IAAA,CAAM,MAAO,CAAC,CAC/C,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CAAA,CAOD,OALkBgL,EAAAA,CAAkB,CAClC,UAAYI,CAAAA,CAAAA,CACZ,aAAAF,CAAAA,CACF,CAAC,CAGH,EAEaI,EAAkC,CAAA,CAAC,CAC9C,IAAA,CAAAZ,CACA,CAAA,eAAA,CAAAa,CACF,CAGM,GAAA,CACJ,IAAMH,CAAAA,CAAuBX,EAA2BC,CAAAA,CAAI,EACtDW,CAAmBT,CAAAA,EAAAA,CAAuBF,CAAI,CAAA,CAE9CQ,CAAgB/F,CAAAA,EAAAA,CAAY,CAChC,UAAY,CAAA,CACVkF,EAAsB,CAAA,CACpB,UAAY/B,CAAAA,EAAAA,CAAqB,CAC/B,YAAciD,CAAAA,CAAAA,CACd,UAAY,CAAA,CAACF,CAAgB,CAC/B,CAAC,CACH,CAAC,CACH,CACF,CAAC,CAAA,CASD,OAPkB,CAChBL,EAAAA,CAAkB,CAChB,UAAA,CAAYI,CACZ,CAAA,aAAA,CAAAF,CACF,CAAC,CACH,CAGF,CAAA,CAEaM,EAA+B,CAAA,CAAC,CAC3C,IAAAd,CAAAA,CAAAA,CACA,eAAAa,CAAAA,CACF,CAGoB,GAAA,CAClB,IAAMH,CAAuBX,CAAAA,EAAAA,CAA2BC,CAAI,CAAA,CACtDW,CAAmBT,CAAAA,EAAAA,CAAuBF,CAAI,CA2BpD,CAAA,OAzBkBM,EAAkB,CAAA,CAClC,UAAY1C,CAAAA,EAAAA,CAAqB,CAC/B,YAAc3F,CAAAA,EAAAA,CAA+B,CAC3C,UAAA,CAAY,OACZ,CAAA,IAAA,CAAM,SACR,CAAC,CAAA,CACD,UAAY,CAAA,CAACyI,CAAoB,CACnC,CAAC,CACD,CAAA,aAAA,CAAejG,EAAY,CAAA,CACzB,UAAY,CAAA,CACVkF,GAAsB,CACpB,UAAA,CAAYhL,kBAAG,CAAA,OAAA,CAAQ,eACrBsD,CAAAA,EAAAA,CAA+B,CAC7B,UAAY0I,CAAAA,CAAAA,CACZ,IAAM,CAAA,SACR,CAAC,CAAA,CACD,OACA,MACA,CAAA,CAACrL,CAAiB,CAAA,CAAE,IAAMuL,CAAAA,CAAgB,CAAC,CAAC,CAC9C,CACF,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAGH,CAEaE,CAAAA,EAAAA,CAAkC,CAAC,CAC9C,cAAAC,CACF,CAAA,GAEM,CACJ,IAAMhJ,CAAa1C,CAAAA,CAAAA,CAAiB,CAAE,IAAM,CAAA,MAAO,CAAC,CAAA,CAKpD,OAJsBoH,EAAAA,CAAoB,CACxC,cAAgB,CAAA,CAACpH,CAAiB,CAAA,CAAE,IAAM0L,CAAAA,CAAc,CAAC,CAAC,CAAA,CAC1D,UAAAhJ,CAAAA,CACF,CAAC,CAEH,EAEaiJ,EAA0B,CAAA,CAAC,CACtC,IAAA,CAAAjB,CACA,CAAA,mBAAA,CAAAkB,CACF,CAGM,GAAA,CACJ,IAAMR,CAAAA,CAAuBX,EAA2BC,CAAAA,CAAI,EACtDW,CAAmBT,CAAAA,EAAAA,CAAuBF,CAAI,CAAA,CAuCpD,OArCkBM,EAAAA,CAAkB,CAClC,UAAY1C,CAAAA,EAAAA,CAAqB,CAC/B,YAAA,CAAc3F,EAA+B,CAAA,CAC3C,WAAY,OACZ,CAAA,IAAA,CAAM,SACR,CAAC,CACD,CAAA,UAAA,CAAY,CAACyI,CAAoB,CACnC,CAAC,CAAA,CACD,aAAejG,CAAAA,EAAAA,CAAY,CACzB,UAAY,CAAA,CACVkF,EAAsB,CAAA,CACpB,UAAYU,CAAAA,EAAAA,CAAuB,CACjC,IAAMM,CAAAA,CAAAA,CACN,KAAOhM,CAAAA,kBAAAA,CAAG,OAAQ,CAAA,eAAA,CAChBsD,GAA+B,CAC7B,UAAA,CAAY0I,CACZ,CAAA,IAAA,CAAM,KACR,CAAC,EACD,MACA,CAAA,MAAA,CACA,CACEvG,EAAAA,CAAoB,CAClB,UAAA,CAAY,CACV,CACE,IAAA,CAAM,MACR,CACF,CACA,CAAA,UAAA,CAAY8G,CACd,CAAC,CACH,CACF,CACF,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAGH,EC7OA,IAAMC,EAAWtJ,CAAAA,EAAAA,CAAwB,CAAE,QAAU,CAAA,MAAO,CAAC,CAAA,CAevDuJ,EAAgB,CAAA,CAAC,CACrB,UAAAC,CAAAA,CAAAA,CACA,IAAAlM,CAAAA,CACF,CAIOkM,GAAAA,CAAAA,CAGE1M,mBAAG,OAAQ,CAAA,mBAAA,CAAoB,CAACQ,CAAAA,CAAMgM,EAAQ,CAAC,EAF7ChM,CAWEmM,CAAAA,EAAAA,CAA0B,CAAC,CACtC,QAAAC,CAAAA,CAAAA,CACA,cAAAC,CACA,CAAA,UAAA,CAAAH,CACA,CAAA,UAAA,CAAArG,CACA,CAAA,mBAAA,CAAAyG,CACF,CA0BM,GAAA,CACEC,IAEA7H,EAAqDmB,CAAW,CAAA,GAAA,CACnE2G,CAAa,EAAA,CACZ,IAAMzI,CAAAA,CAAgDyI,EAAS,UAC3D,CAAA,CAAClM,CAAe,CAAA,CAAE,OAAS,CAAA,UAAW,CAAC,CAAC,CAAA,CACxC,MAEEsE,CAAAA,CAAAA,CACJ4H,CAAS,CAAA,UAAA,GAAe,MACpB,MACAhN,CAAAA,kBAAAA,CAAG,OAAQ,CAAA,WAAA,CAAYA,kBAAG,CAAA,UAAA,CAAW,aAAa,CAElDqB,CAAAA,CAAAA,CAAgC0B,CAAeiK,CAAAA,CAAAA,CAAS,IAAI,CAAA,CAGlE,IAAMC,CAAYjN,CAAAA,kBAAAA,CAAG,QAAQ,uBAC3BuE,CAAAA,CAAAA,CACAuI,CACG,EAAA,OAAOE,CAAS,CAAA,IAAA,EAAS,UACxBA,CAAS,CAAA,IAAA,CAAK,KAAMxN,CAAAA,EAA+B,CACpD,EAAA,OAAOwN,EAAS,IAAS,EAAA,QAAA,EACxBhN,kBAAG,CAAA,cAAA,CAAegN,CAAS,CAAA,IAAI,EAC/BA,CAAS,CAAA,IAAA,CACTjL,EAAoB,CAAA,CAAE,IAAMiL,CAAAA,CAAAA,CAAS,IAAK,CAAC,CAAA,CAC/C5H,CACA/D,CAAAA,CACF,CAEA,CAAA,OAAAqB,EAAmB,CACjB,QAAA,CAAUsK,CAAS,CAAA,OAAA,CACnB,IAAMC,CAAAA,CACR,CAAC,CAEMA,CAAAA,CACT,CACF,CAAA,CAEIC,CAAgB,CAAA,MAEpB,GAAIL,CACF,CAAA,GAAI,CAACxG,CAAAA,CAAW,MAAUuG,EAAAA,CAAAA,CAAU,CAClC,IAAMO,CAAAA,CAAiBlI,EAAqB,CAAA,CAC1C,aAAejF,CAAAA,kBAAAA,CAAG,QAAQ,WAAYA,CAAAA,kBAAAA,CAAG,UAAW,CAAA,aAAa,CACjE,CAAA,IAAA,CACE6M,EAAc,IAAQrI,EAAAA,EAAAA,CAAsB,CAAE,OAAA,CAAS,QAAS,CAAC,EACnE,aAAeG,CAAAA,EAAAA,CAA+B,CAC5C,UAAA,CAAYzB,EAAwB,CAAA,CAAE,SAAU0J,CAAS,CAAC,CAC1D,CAAA,IAAA,CAAMjM,CAAiB,CAAA,CAAE,KAAM,MAAOkM,CAAAA,CAAAA,CAAc,IAAI,CAAE,CAAC,CAC7D,CAAC,CACH,CAAC,CACD3H,CAAAA,CAAAA,CAAQ,IAAKiI,CAAAA,CAAc,EAC3BD,CAAgB,CAAA,KAClB,CAAO,KAAA,CACL,IAAM3I,CAAAA,CACJsI,EAAc,UACV,CAAA,CAAC/L,CAAe,CAAA,CAAE,OAAS,CAAA,UAAW,CAAC,CAAC,CAAA,CACxC,MACAqM,CAAAA,CAAAA,CAAiBnN,kBAAG,CAAA,OAAA,CAAQ,qBAChCuE,CACA,CAAA,CACEF,EAA2B,CAAA,CACzB,IAAM1D,CAAAA,CAAAA,CAAiB,CAAE,IAAM,CAAA,MAAA,CAAOkM,CAAc,CAAA,IAAI,CAAE,CAAC,EAC3D,IAAMrI,CAAAA,EAAAA,CAAsB,CAAE,OAAA,CAAS,QAAS,CAAC,CACnD,CAAC,CACH,CACAzB,CAAAA,CAAAA,CAAe8J,CAAc,CAAA,IAAI,CACnC,CACA3H,CAAAA,CAAAA,CAAQ,IAAKiI,CAAAA,CAAc,EAC7B,CAGF,IAAM3M,CAAO0M,CAAAA,CAAAA,CACThI,CAAQ,CAAA,CAAC,CAETlF,CAAAA,kBAAAA,CAAG,QAAQ,qBAAsBkF,CAAAA,CAAO,CAC5C,CAAA,OAAOuH,EAAc,CAAA,CACnB,WAAAC,CAEA,CAAA,IAAA,CAAAlM,CACF,CAAC,CACH,CAAA,CAQa4M,GAAsB,CAAC,CAClC,UAAAV,CAAAA,CAAAA,CACA,KAAAhI,CAAAA,CACF,IAGM,CACJ,IAAMmG,CAAQnG,CAAAA,CAAAA,CAAM,GAAKrD,CAAAA,CAAAA,EAAS0B,EAAe1B,CAAI,CAAC,CAChDb,CAAAA,CAAAA,CAAOR,kBAAG,CAAA,OAAA,CAAQ,oBAAoB6K,CAAK,CAAA,CACjD,OAAO4B,EAAAA,CAAc,CAAE,UAAA,CAAAC,EAAY,IAAAlM,CAAAA,CAAK,CAAC,CAC3C,CAQa6M,CAAAA,EAAAA,CAA6B,CAAC,CACzC,UAAA,CAAAX,CACA,CAAA,KAAA,CAAAhI,CACF,CAAA,GAGM,CACJ,IAAMmG,CAAAA,CAAQnG,CAAM,CAAA,GAAA,CAAKrD,CAAS0B,EAAAA,CAAAA,CAAe1B,CAAI,CAAC,CAChDb,CAAAA,CAAAA,CAAOR,kBAAG,CAAA,OAAA,CAAQ,0BAA2B6K,CAAAA,CAAK,EACxD,OAAO4B,EAAAA,CAAc,CAAE,UAAA,CAAAC,CAAY,CAAA,IAAA,CAAAlM,CAAK,CAAC,CAC3C,CAQa8M,CAAAA,EAAAA,CAAsB,CAAC,CAClC,WAAAZ,CAAa,CAAA,KAAA,CACb,KAAAhI,CAAAA,CACF,CAGM,GAAA,CACJ,IAAMmG,CAAQnG,CAAAA,CAAAA,CAAM,GAAKrD,CAAAA,CAAAA,EAAS0B,CAAe1B,CAAAA,CAAI,CAAC,CAChDb,CAAAA,CAAAA,CAAOR,kBAAG,CAAA,OAAA,CAAQ,mBAAoB6K,CAAAA,CAAK,EACjD,OAAO4B,EAAAA,CAAc,CAAE,UAAA,CAAAC,CAAY,CAAA,IAAA,CAAAlM,CAAK,CAAC,CAC3C,CASa+M,CAAAA,EAAAA,CAAuB,CAClCC,CAAAA,CACAC,EACAf,CAAsB,CAAA,KAAA,CACtBI,CAA+B,CAAA,IAAA,GAC5B,CACH,IAAMY,EAAUN,EAAoB,CAAA,CAClC,KAAOI,CAAAA,CACT,CAAC,CAAA,CACKG,EAAYP,EAAoB,CAAA,CACpC,KAAOK,CAAAA,CACT,CAAC,CAAA,CAIKjN,EAAOmM,EAAwB,CAAA,CACnC,UAAY,CAAA,CACV,CACE,IAAA,CAAM,SAASpM,EAAe,CAAA,CAAE,IAAMmN,CAAAA,CAAAA,CAAS,QAAU,CAAA,IAAK,CAAC,CAAC,CAAA,CAAA,CAAA,CAChE,IAAMC,CAAAA,CACR,CACF,CAAA,CACA,oBAAAb,CACF,CAAC,CACD,CAAA,OAAOL,EAAc,CAAA,CAAE,WAAAC,CAAY,CAAA,IAAA,CAAAlM,CAAK,CAAC,CAC3C,CAAA,CAQaoN,GAAsB,CACjClJ,CAAAA,CACAgI,CAAsB,CAAA,KAAA,GACnB,CACH,IAAMlM,EAAO0C,EAAwB,CAAA,CACnC,aAAe,CAAA,CAEb,KAAM,CAAA,OAAA,CAAQwB,CAAK,CAAI0I,CAAAA,EAAAA,CAAoB,CAAE,KAAA,CAAA1I,CAAM,CAAC,EAAIA,CAC1D,CAAA,CACA,QAAU,CAAA,OACZ,CAAC,CAAA,CACD,OAAO+H,EAAc,CAAA,CAAE,UAAAC,CAAAA,CAAAA,CAAY,IAAAlM,CAAAA,CAAK,CAAC,CAC3C,CAAA,CCvQO,IAAMqN,CAAAA,CAAW,CACtB,iBAAA,CAAyB9H,GACzB,sBAA8BhC,CAAAA,EAAAA,CAC9B,aAAqB0B,CAAAA,EAAAA,CACrB,YAAoBgB,CAAAA,EAAAA,CACpB,WAAkB2B,EAClB,CAAA,eAAA,CAAuBnC,EACvB,CAAA,gBAAA,CAA4ByF,EAC5B,CAAA,KAAA,CAAa5F,GACb,cAAuBmD,CAAAA,EAAAA,CACvB,gBAA0BwB,CAAAA,EAAAA,CAC1B,qBAA6BrD,CAAAA,EAAAA,CAC7B,cAAsBqC,EACtB,CAAA,sBAAA,CAAgCY,EAChC,CAAA,eAAA,CAAuB1D,EACvB,CAAA,oBAAA,CAA6BoC,GAC7B,sBAA+BI,CAAAA,EAAAA,CAC/B,qBAA+B6B,CAAAA,EAAAA,CAC/B,cAAsB/C,CAAAA,EAAAA,CACtB,iBAAwB/B,EACxB,CAAA,UAAA,CAAkBvF,CAClB,CAAA,WAAA,CAAuBgL,EACvB,CAAA,qBAAA,CAA6B3E,GAC7B,QAAgBhF,CAAAA,EAAAA,CAChB,eAAuBwC,CAAAA,EAAAA,CACvB,eAAuBe,CAAAA,EAAAA,CACvB,eAAsBN,EACtB,CAAA,iBAAA,CAA2BsF,EAC3B,CAAA,uBAAA,CAAgCT,EAChC,CAAA,oBAAA,CAA4B/C,GAC5B,aAAqBgB,CAAAA,EAAAA,CACrB,YAAoBxH,CAAAA,EAAAA,CACpB,IAAYmD,CAAAA,EAAAA,CACZ,iBAAwBM,EACxB,CAAA,GAAA,CAAW1C,EACX,CAAA,oBAAA,CAA4B+C,EAC5B,CAAA,wBAAA,CAAgCf,GAChC,yBAAqCkI,CAAAA,EAAAA,CACrC,kBAA0B9E,CAAAA,EAAAA,CAC1B,mBAA2BxF,CAAAA,EAAAA,CAC3B,yBAAgCqH,EAChC,CAAA,kBAAA,CAA4B2C,EAC5B,CAAA,eAAA,CAAyBD,EACzB,CAAA,cAAA,CAAwBE,GACxB,oBAAgCC,CAAAA,EAAAA,CAChC,aAAqBrJ,CAAAA,EAAAA,CACrB,eAAuBrB,CAAAA,EAAAA,CACvB,oBAA2BgI,EAC3B,CAAA,IAAA,CAAY7H,EACZ,CAAA,iBAAA,CAA6ByL,EAC7B,CAAA,sBAAA,CAAkCH,GAClC,qBAAiCL,CAAAA,EAAAA,CACjC,yBAAqCG,CAAAA,EAAAA,CACrC,gBAA4BG,CAAAA,EAAAA,CAC5B,qBAA4B3E,EAC5B,CAAA,aAAA,CAAuBmG,EACvB,CAAA,iBAAA,CAA2BjB,EAC3B,CAAA,oBAAA,CAA8BU,GAC9B,QAAgBtK,CAAAA,CAAAA,CAChB,gBAAwByE,CAAAA,EAAAA,CACxB,gBAAwB5C,CAAAA,EAAAA,CACxB,yBAAgCD,EAChC,CAAA,qBAAA,CAA6BkD,EAC7B,CAAA,cAAA,CAAwB0F,EACxB,CAAA,iBAAA,CAAyBrK,GACzB,aAAuBoK,CAAAA,EAAAA,CACvB,aAAuBF,CAAAA,EAAAA,CACvB,iBAAyBzJ,CAAAA,EAC3B,EC9EO,IAAMmK,EAAAA,CAAiBzC,CAAmB,EAAA,CAC1C0C,oBAAG,UAAW1C,CAAAA,CAAI,CACrB0C,EAAAA,mBAAAA,CAAG,SAAU1C,CAAAA,CAAAA,CAAM,CAAE,SAAW,CAAA,IAAK,CAAC,EAE1C,CAYO,CAAA,IAAM2C,GAAqB,CAAC,CACjC,YAAAC,CAAAA,CAAAA,CACA,YAAAC,CAAAA,CACF,IAac,CACZ,IAAMC,CAAcD,CAAAA,CAAAA,CAAa,KAAM,CAAA,GAAG,EAG1C,OAAO,CAAA,EADL,KAAM,CAAA,IAAA,CAAK,CAAE,MAAA,CAAQC,EAAY,MAAO,CAAC,CAAE,CAAA,IAAA,CAAK,EAAE,CAAA,CAAE,KAAK,KAAK,CAAA,EAAK,IAC/C,CAAA,EAAGF,CAAY,CAAA,CACvC,EC3BMG,IAAAA,EAAAA,CAAaC,iBAAc,CAAA,8PAAe,CAAA,CAC9BhD,mBAAK,CAAA,OAAA,CAAQ+C,EAAU,CAAA,KAEnCE,EAAoBhS,CAAAA,CAAAA,EAAiB,CACzC,IAAMiS,CAAAA,CAA2BjS,CAAK,CAAA,KAAA,CAAM+O,mBAAK,CAAA,GAAG,EAIpD,OAHsBkD,CAAAA,CACnB,KAAM,CAAA,CAAA,CAAGA,CAAyB,CAAA,MAAA,CAAS,CAAC,CAC5C,CAAA,IAAA,CAAKlD,mBAAK,CAAA,GAAG,CAElB,CAAA,CAOamD,EAAmB,CAAC,CAC/B,MAAArS,CAAAA,CAAAA,CACA,YAAA+R,CAAAA,CACF,IAGc,CACZ,IAAM9R,CAASC,CAAAA,CAAAA,CAAgBF,CAAM,CAAA,CAErC,GAAI,QAAYC,GAAAA,CAAAA,CAAO,MAAUA,EAAAA,CAAAA,CAAO,MAAO,CAAA,MAAA,CAC7C,OAAO4R,EAAmB,CAAA,CACxB,YAAc,CAAA,QAAA,CACd,YAAAE,CAAAA,CACF,CAAC,CAGH,CAAA,GAAI7C,mBAAK,CAAA,UAAA,CAAWjP,CAAO,CAAA,IAAI,EAAG,CAChC,IAAMqS,CAAgBH,CAAAA,EAAAA,CAAiBlS,CAAO,CAAA,IAAI,EAC5CsS,CAAarD,CAAAA,mBAAAA,CAAK,OAAQlP,CAAAA,CAAAA,CAAO,MAAO,CAAA,IAAI,EAClD,OAAOkP,mBAAAA,CAAK,QAASqD,CAAAA,CAAAA,CAAYD,CAAa,CAAA,CAAE,QAAQ,KAAO,CAAA,GAAG,CACpE,CAEA,OAAOrS,CAAAA,CAAO,IAChB,CAEauS,CAAAA,CAAAA,CAAY,CACvB,OAAA,CAAS,CACP,MAAA,CAAQ,KACR,IAAM,CAAA,SACR,CACA,CAAA,mBAAA,CAAqB,CACnB,MAAA,CAAQ,KACR,IAAM,CAAA,qBACR,CACF,EC/DA,IAAMC,EAAAA,CACJ,+EASWC,EAAYzQ,CAAAA,CAAAA,EAAuB,CAC9C,IAAM0Q,CAAqB,CAAA,CACzB,KAAM,EACN,CAAA,IAAA,CAAM,EACN,CAAA,IAAA,CAAM,EACN,CAAA,QAAA,CAAU,EACZ,CAEAF,CAAAA,EAAAA,CAAe,SAAY,CAAA,CAAA,CAC3B,IAAMG,CAAAA,CAAQ3Q,EAAM,KAAMwQ,CAAAA,EAAc,CAExC,CAAA,GAAI,CAACG,CAAAA,CACH,OAAOD,CAGT,CAAA,IAAME,CAAOD,CAAAA,CAAAA,CAAM,CAAC,CAAA,EAAK,GAGzB,GAAIC,CAAAA,GAAS,GAAOA,EAAAA,CAAAA,GAAS,IAC3B,CAAA,OAAOF,EAGT,IAAMzD,CAAAA,CAAO0D,CAAM,CAAA,CAAC,CAAK,EAAA,EAAA,CACnBE,EAAWF,CAAM,CAAA,CAAC,CAAK,EAAA,EAAA,CAG7B,OAAIE,CAAAA,CAAS,SAAW,CACfH,CAAAA,CAAAA,CAGF,CACL,IAAA,CAAAE,CACA,CAAA,IAAA,CAAM3D,IAAS,GAAM,CAAA,EAAA,CAAKA,CAC1B,CAAA,IAAA,CAAM0D,CAAM,CAAA,CAAC,GAAK,EAClB,CAAA,QAAA,CAAAE,CACF,CACF,CC9CA,CAAA,IAAMC,GAAmB,KACnBC,CAAAA,EAAAA,CAAmB,KAEZC,CAAAA,EAAAA,CAAQ,OAERC,CAAAA,EAAAA,CAAyBC,GAA0B,CAC9D,IAAMjE,CAAOkE,CAAAA,EAAAA,CAAkBD,CAAI,CAAA,CAEnC,OAAOjE,CAAK,CAAA,MAAA,GAAW,CAAKA,EAAAA,CAAAA,CAAK,CAAC,CAAA,GAAM,YAC1C,CAKamE,CAAAA,CAAAA,CAAaF,CAAyB,EAAA,CACjD,IAAMjE,CAAAA,CAAOkE,GAAkBD,CAAI,CAAA,CAC7BhT,CAAO+O,CAAAA,CAAAA,CAAKA,CAAK,CAAA,MAAA,CAAS,CAAC,CAGjC,CAAA,OAAO,SAAU/O,CAAAA,CAAI,CACvB,CAAA,CAcamT,GAA4BC,CACvC,EAAA,MAAA,CAAOA,CAAO,CAAA,CAAE,OAAQ,CAAA,IAAA,CAAM,IAAI,CAAE,CAAA,OAAA,CAAQ,KAAO,CAAA,IAAI,CAa5CH,CAAAA,EAAAA,CAAqBI,GAA2C,CAC3E,IAAIC,CAAQD,CAAAA,CAAAA,CAAQ,IAAK,EAAA,CAOzB,OANIC,CAAM,CAAA,UAAA,CAAW,GAAG,CAAA,GACtBA,CAAQA,CAAAA,CAAAA,CAAM,MAAM,CAAC,CAAA,CAAA,CAEnBA,CAAM,CAAA,UAAA,CAAW,GAAG,CAAA,GACtBA,EAAQA,CAAM,CAAA,KAAA,CAAM,CAAC,CAAA,CAAA,CAElBA,CAGEA,CAAAA,CAAAA,CACJ,MAAM,GAAG,CAAA,CACT,GAAKC,CAAAA,CAAAA,EACJA,CAAK,CAAA,OAAA,CAAQX,GAAkB,GAAG,CAAA,CAAE,OAAQC,CAAAA,EAAAA,CAAkB,GAAG,CACnE,EANO,EAOX,CAaaW,CAAAA,EAAAA,CAAwBH,CAA4B,EAAA,CAC/D,IAAII,CAAaJ,CAAAA,CAAAA,CAAQ,IAAK,EAAA,CAC9B,OAAKI,CAAAA,CAAW,WAAW,GAAG,CAAA,GAC5BA,CAAa,CAAA,CAAA,CAAA,EAAIA,CAAU,CAAA,CAAA,CAAA,CAGzBA,EAAW,MAAS,CAAA,CAAA,EAAKA,CAAW,CAAA,QAAA,CAAS,GAAG,CAAA,GAClDA,EAAaA,CAAW,CAAA,KAAA,CAAM,CAAG,CAAA,EAAE,CAGrCA,CAAAA,CAAAA,CAAAA,CAAaA,EAAW,OAAQ,CAAA,MAAA,CAAQ,GAAG,CAAA,CACpCA,CACT,CAAA,CAQaC,GACX3E,CACW,EAAA,CACX,IAAM4E,CAAAA,CAAW5E,CAAK,CAAA,GAAA,CAAIoE,EAAwB,CAAE,CAAA,IAAA,CAAK,GAAG,CAAA,CAC5D,OAAO,GAAA,EAAOQ,EAAW,CAAIA,CAAAA,EAAAA,CAAQ,CAAK,CAAA,CAAA,EAAA,CAC5C,CAEaC,CAAAA,EAAAA,CAAa,CAAI,CAC5B,IAAA,CAAAZ,CACA,CAAA,IAAA,CAAAa,CACF,CAAA,GAGS,CAGP,IAAM9E,CAAAA,CAAOkE,EAAkB,CAAA,SAAA,CAAUD,CAAI,CAAC,EAE1Cc,CAAUD,CAAAA,CAAAA,CAEd,IAAWN,IAAAA,CAAAA,IAAQxE,CAAM,CAAA,CACvB,IAAMqE,CAAUG,CAAAA,CAAAA,CAChB,GAAIO,CAAAA,CAAQV,CAAO,CAAA,GAAM,OACvB,MAAM,IAAI,KAAM,CAAA,CAAA,qBAAA,EAAwBJ,CAAI,CAAA,CAAE,EAEhDc,CAAUA,CAAAA,CAAAA,CAAQV,CAAO,EAC3B,CAEA,OAAOU,CACT,CC5HA,CAAA,IAAMC,EAAkB,CAAA,WAAA,CAClBC,EAAkB,CAAA,WAAA,CAClBC,GAAmB,wBACnBC,CAAAA,EAAAA,CAAmB,qBAEnBC,CAAAA,EAAAA,CAA0B,IAAI,MAAA,CAAO,IAAID,EAAiB,CAAA,MAAM,CAAE,CAAA,CAAA,CAClEE,EAAgC,CAAA,IAAI,OACxC,CAAGF,EAAAA,EAAAA,CAAiB,MAAM,CAAA,EAAGD,EAAiB,CAAA,MAAM,GACpD,IACF,CAAA,CACMI,EAA6B,CAAA,IAAI,MACrC,CAAA,CAAA,IAAA,EAAOJ,GAAiB,MAAM,CAAA,CAAA,CAC9B,IACF,CAAA,CAEMK,EAAe,CAAA,CAAC,CACpB,IAAMC,CAAAA,CAAAA,CACN,MAAAC,CAAAA,CACF,CAGM,GAAA,CACJ,IAAIC,CAAkB,CAAA,KAAA,CAClBC,CAAkB,CAAA,KAAA,CAClBC,CAAsB,CAAA,KAAA,CACtBC,EAA0B,KAExBC,CAAAA,CAAAA,CACJN,CAAU,GAAA,YAAA,EAAgBA,CAAU,GAAA,sBAAA,CAAyB,IAAM,GAErE,CAAA,IAAA,IAAStO,CAAQ,CAAA,CAAA,CAAGA,CAAQuO,CAAAA,CAAAA,CAAO,OAAQvO,CAAS,EAAA,CAAA,CAClD,IAAM6O,CAAAA,CAAYN,CAAOvO,CAAAA,CAAK,EAC9B2O,CACE3O,CAAAA,CAAAA,CAAQ,CAAIuO,CAAAA,CAAAA,CAAOvO,CAAQ,CAAA,CAAC,IAAM4O,CAAY,CAAA,IAAA,CAEhD,IAAIE,CAAAA,CAAY9O,CAAQ,CAAA,CAAA,CACpB+O,EAAgBR,CAAOO,CAAAA,CAAS,CAEpC,CAAA,IADAb,EAAiB,CAAA,SAAA,CAAY,EACtBc,CAAiBd,EAAAA,EAAAA,CAAiB,IAAKc,CAAAA,CAAa,CACzDD,EAAAA,CAAAA,EAAa,EACbC,CAAgBR,CAAAA,CAAAA,CAAOO,CAAS,CAAA,CAElC,IAAME,CAAAA,CAAiCF,IAAc9O,CAAQ,CAAA,CAAA,CAI7D,GAFA+N,EAAAA,CAAgB,SAAY,CAAA,CAAA,CAC5BD,GAAgB,SAAY,CAAA,CAAA,CAE1BA,EAAgB,CAAA,IAAA,CAAKe,CAAS,CAAA,GAC7BL,GACEO,CACC,EAAA,CAACC,CACDD,EAAAA,CAAAA,GAAkB,GAClBhB,EAAAA,EAAAA,CAAgB,KAAKgB,CAAa,CAAA,CAAA,CAGtCR,CAAS,CAAA,CAAA,EAAGA,CAAO,CAAA,KAAA,CAAM,CAAGvO,CAAAA,CAAK,CAAC,CAAA,EAAG4O,CAAS,CAAA,EAAGL,CAAO,CAAA,KAAA,CAAMvO,CAAK,CAAC,CAAA,CAAA,CACpEA,CACA0O,EAAAA,CAAAA,CAAAA,CAAsBD,CACtBD,CAAAA,CAAAA,CAAkB,MAClBC,CAAkB,CAAA,IAAA,CAAA,KAAA,GAElBA,CACAC,EAAAA,CAAAA,EACAX,EAAgB,CAAA,IAAA,CAAKc,CAAS,CAC9B,EAAA,CAACF,CAED,EAAA,EACEE,CAAc,GAAA,GAAA,GACb,CAACE,CAAiBA,EAAAA,CAAAA,CAAc,iBAAkB,EAAA,GAAMA,CAI3DR,CAAAA,CAAAA,CAAAA,CAAAA,CAAS,GAAGA,CAAO,CAAA,KAAA,CAAM,CAAGvO,CAAAA,CAAAA,CAAQ,CAAC,CAAC,GAAG4O,CAAS,CAAA,EAAGL,CAAO,CAAA,KAAA,CAAMvO,CAAQ,CAAA,CAAC,CAAC,CAC5E0O,CAAAA,CAAAA,CAAAA,CAAsBD,CACtBD,CAAAA,CAAAA,CAAkB,IAClBC,CAAAA,CAAAA,CAAkB,WACb,CACL,IAAMQ,CAAiBJ,CAAAA,CAAAA,CAAU,iBAAkB,EAAA,CAC7CK,EAAiBL,CAAU,CAAA,iBAAA,EACjCH,CAAAA,CAAAA,CAAsBD,CACtBD,CAAAA,CAAAA,CACES,IAAmBJ,CAAaK,EAAAA,CAAAA,GAAmBL,CACrDJ,CAAAA,CAAAA,CACES,CAAmBL,GAAAA,CAAAA,EAAaI,IAAmBJ,EACvD,CACF,CAEA,OAAON,CACT,CAAA,CAEaY,EAAa,CAAC,CACzB,IAAMb,CAAAA,CAAAA,CACN,sBAAAc,CAAAA,CAAAA,CAAyB,KACzB,KAAAvT,CAAAA,CACF,CAQc,GAAA,CACZ,IAAIH,CAAAA,CAASG,EAAM,IAAK,EAAA,CAExB,OAAKH,CAAAA,CAAO,MAIR,CAAA,CAAC4S,GAASA,CAAU,GAAA,UAAA,CACf5S,CAGLA,CAAAA,CAAAA,CAAO,MAAW,GAAA,CAAA,EACpBuS,GAAiB,SAAY,CAAA,CAAA,CACzBA,EAAiB,CAAA,IAAA,CAAKvS,CAAM,CAAA,CACvB,GAGF4S,CAAU,GAAA,YAAA,EAAgBA,CAAU,GAAA,sBAAA,CACvC5S,CAAO,CAAA,iBAAA,GACPA,CAAO,CAAA,iBAAA,EAGQA,GAAAA,CAAAA,GAAWA,CAAO,CAAA,iBAAA,KAGrCA,CAAS2S,CAAAA,EAAAA,CAAa,CAAE,IAAA,CAAMC,CAAO,CAAA,MAAA,CAAQ5S,CAAO,CAAC,CAAA,CAAA,CAAA,CAGnD0T,CAA0B1T,EAAAA,CAAAA,CAAO,CAAC,CAAA,GAAMG,EAAM,CAAC,CAAA,IACjDH,CAASA,CAAAA,CAAAA,CAAO,OAAQwS,CAAAA,EAAAA,CAAyB,EAAE,CAGrDxS,CAAAA,CAAAA,CAAAA,CACE4S,CAAU,GAAA,sBAAA,CACN5S,CAAO,CAAA,iBAAA,GACPA,CAAO,CAAA,iBAAA,EAET4S,CAAAA,CAAAA,GAAU,YACZ5S,GAAAA,CAAAA,CAAS,GAAGA,CAAO,CAAA,MAAA,CAAO,CAAC,CAAA,CAAE,iBAAkB,EAAC,GAAGA,CAAO,CAAA,KAAA,CAAM,CAAC,CAAC,CAGhE4S,CAAAA,CAAAA,CAAAA,CAAAA,GAAU,cAAgBA,CAAU,GAAA,sBAAA,EACtC5S,CAASA,CAAAA,CAAAA,CAAO,UACdyS,CAAAA,EAAAA,CACA,CAAC3B,CAAO6C,CAAAA,CAAAA,CAAYC,CACdA,GAAAA,CAAAA,GAAW,CAAK,EAAA,CAACF,EACZ5C,CAEF,CAAA,CAAA,CAAA,EAAI6C,CAAU,CAAA,CAEzB,CAEI3T,CAAAA,CAAAA,CAAOA,EAAO,MAAS,CAAA,CAAC,CAAM,GAAA,GAAA,GAEhCA,CAASA,CAAAA,CAAAA,CAAO,MAAM,CAAGA,CAAAA,CAAAA,CAAO,MAAS,CAAA,CAAC,CAG5CyS,CAAAA,GAAAA,EAAAA,CAA8B,UAAY,CAC1CC,CAAAA,EAAAA,CAA2B,SAAY,CAAA,CAAA,CAEvC1S,CAASA,CAAAA,CAAAA,CAAO,WACd0S,EACA,CAAA,CAAC5B,CAAO1O,CAAAA,CAAAA,CAAGwR,CACL,GAAA,CAAC,IAAK,GAAK,CAAA,GAAG,CAAE,CAAA,QAAA,CAAS5T,CAAO,CAAA,MAAA,CAAO4T,EAAS9C,CAAM,CAAA,MAAM,CAAC,CAAA,CACxDA,CAGFA,CAAAA,CAAAA,CAAM,mBAEjB,CAAA,CAEA9Q,CAASA,CAAAA,CAAAA,CAAO,UACdyS,CAAAA,EAAAA,CACA,CAAC3B,CAAO6C,CAAAA,CAAAA,CAAYC,CAEhBA,GAAAA,CAAAA,GAAW,CACX,EAAA,CAACF,GACD5C,CAAM,CAAA,CAAC,CACP3Q,EAAAA,CAAAA,CAAM,UAAW2Q,CAAAA,CAAAA,CAAM,CAAC,CAAC,CAAA,CAElBA,CAEF6C,CAAAA,CAAAA,CAAW,iBAAkB,EAExC,GAGK3T,CAnFE,CAAA,CAAA,EAoFX,CCnLO,CAAA,IAAM6T,CAAiB,CAAA,CAAC,CAC7B,IAAMjB,CAAAA,CAAAA,CAAQ,YACd,CAAA,MAAA,CAAA1U,CACA,CAAA,EAAA,CAAA4V,EACA,WAAAC,CAAAA,CAAAA,CACA,IAAA3Q,CAAAA,CACF,CAKc,GAAA,CACZ,IAAI4Q,CAAQ,CAAA,EAAA,CACZ,OAAQ5Q,CAAAA,EACN,KAAK,OACL,KAAK,OAAA,CACL,KAAK,QAAA,CACL,KAAK,WAAA,CACL,KAAK,UACL,CAAA,KAAK,WACH4Q,CAAAA,CAAAA,CAAQ,CAAI5Q,EAAAA,CAAAA,CAAAA,CAAK,CAAC,CAAK,EAAA,EAAA,EAAI,iBAAkB,EAAC,CAAGA,EAAAA,CAAAA,CAAK,MAAM,CAAC,CAAC,CAC9D,CAAA,CAAA,KACJ,CACA,IAAI6Q,EAAW,IACX/V,CAAAA,CAAAA,CAAO,OAAQ,CAAA,qBAAqB,CAAG,EAAA,MAAA,CAAO,OAAS,UACzD+V,GAAAA,CAAAA,CAAW,KAEb,CAAA,CAAA,IAAMf,CAAYe,CAAAA,CAAAA,CAAW,IAAM,EAC7BjO,CAAAA,CAAAA,CAAuB,CAC3BmL,EAAAA,CACAsC,CAAW,CAAA,CACT,KAAMb,CACN,CAAA,KAAA,CAAOkB,CACT,CAAC,CACDZ,CAAAA,CAAAA,CACAc,CACF,CACA,CAAA,OAAID,CACF/N,EAAAA,CAAAA,CAAM,IACJkN,CAAAA,CAAAA,CACAO,EAAW,CACT,IAAA,CAAMb,CACN,CAAA,KAAA,CAAOmB,CACT,CAAC,CACH,CAEK/N,CAAAA,CAAAA,CAAM,IAAK,CAAA,EAAE,CACtB,CAAA,CCxDO,IAAMkO,CAAU,CAAA,OAAA,CAEvB,SAASC,EAAAA,CACPR,CACAS,CAAAA,CAAAA,CACG,CACH,OAAO,CACL,GAAGT,CAAAA,CACH,IAAI,IAAA,EAAO,CACT,OAAAS,CAAAA,GAAQT,CAAU,CAAA,CACXA,CAAW,CAAA,IACpB,CACF,CACF,CAEO,IAAMU,EAAAA,CAAmB,CAAC,CAC/B,QAAAC,CACA,CAAA,IAAA,CAAAC,CACA,CAAA,SAAA,CAAAC,CACA,CAAA,IAAA,CAAApR,CACF,CAKkB,GAAA,CAChB,IAAMuQ,CAAAA,CAAaW,CAAQ,CAAA,IAAA,CAAK,CAAE,EAAIJ,CAAAA,CAAQ,CAAC,CAAA,CAAG,UAAW,CAAA,CAC3D,KAAML,CAAe,CAAA,CACnB,MAAQS,CAAAA,CAAAA,CAAQ,MAChB,CAAA,EAAA,CAAIE,EAAU,EACd,CAAA,IAAA,CAAApR,CACF,CAAC,CACD,CAAA,SAAA,CAAW,MACb,CAAC,CAAA,CACD,OAAO+Q,EAAAA,CAAcR,CAAac,CAAAA,CAAAA,EAAQ,CACpCA,CAAAA,CAAI,IACNF,EAAAA,CAAAA,CAAK,MAAO,CAAA,CACV,MAAQ,CAAA,IAAA,CACR,OAAQA,CAAK,CAAA,kBAAA,CAAmB,CAAE,OAAA,CAAAD,CAAS,CAAA,EAAA,CAAIJ,CAAQ,CAAC,CAAA,CACxD,IAAMO,CAAAA,CAAAA,CAAI,IACZ,CAAC,EAEL,CAAC,CACH,CCxCA,CAAA,IAAMC,EAAuB,CAAA,CAAC,CAC5B,MAAApW,CAAAA,CACF,CAAwD,GAAA,CACtD,GAAM,CAAE,QAAAqW,CAAQ,CAAA,CAAIrW,CAAO,CAAA,MAAA,CAE3B,GAAIqW,CAAAA,GAAY,MACd,OAGF,GAAI,OAAOA,CAAAA,EAAY,QACrB,CAAA,OAAOA,EAGT,GAAM,CAAE,OAAAC,CAAAA,CAAQ,CAAItW,CAAAA,CAAAA,CAAO,QAAQ,EAEnC,CAAA,GAAKsW,CAIL,CAAA,OAAOA,CAAQ,CAAA,OAAOD,GAAY,QAAWA,CAAAA,CAAAA,CAAU,CAAC,CAAA,EAAG,GAC7D,CAAA,CAEaE,GAAe,CAAC,CAAE,MAAAvW,CAAAA,CAAO,CAAoC,GAAA,CACxE,IAAMiW,CAAOjW,CAAAA,CAAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,CAAE,EAAA,CAAIN,EAAS,CAAC,CAAA,CAE3C8W,CAAevE,CAAAA,CAAAA,CAAiB,CACpC,MAAA,CAAQjS,EAAO,OAAQ,CAAA,MAAA,CACvB,YAAciW,CAAAA,CAAAA,CAAK,oBAAqB,EAC1C,CAAC,CACKM,CAAAA,CAAAA,CAAeN,CAAK,CAAA,MAAA,CAAO,CAC/B,MAAA,CAAQO,EACR,IAAM,CAAA,cACR,CAAC,CAAA,CACKC,CAAeR,CAAAA,CAAAA,CAAK,OAAO,CAC/B,MAAA,CAAQO,CACR,CAAA,IAAA,CAAM,cACR,CAAC,EACKE,CAAgBT,CAAAA,CAAAA,CAAK,MAAO,CAAA,CAChC,MAAQ,CAAA,IAAA,CACR,OAAQA,CAAK,CAAA,kBAAA,CAAmB,CAAE,OAAA,CAASjW,CAAO,CAAA,OAAA,CAAS,GAAI4V,CAAQ,CAAC,CACxE,CAAA,IAAA,CAAM,eACR,CAAC,EAEKe,CAAqB3W,CAAAA,CAAAA,CAAO,MAAO,CAAA,iBAAA,CACrCiW,CAAK,CAAA,MAAA,CAAO,CACV,MAAQA,CAAAA,CAAAA,CAAK,kBAAmB,CAAA,CAC9B,OAASjW,CAAAA,CAAAA,CAAO,QAChB,EAAIA,CAAAA,CAAAA,CAAO,MAAO,CAAA,iBACpB,CAAC,CAAA,CACD,KAAM,oBACR,CAAC,CACD,CAAA,MAAA,CAEE4W,CAAgC,CAAA,GAEhCC,CAAkBT,CAAAA,EAAAA,CAAqB,CAC3C,MAAA,CAAQpW,CACV,CAAC,EACD,GAAI6W,CAAAA,CAAiB,CACnB,IAAMC,CAAMxE,CAAAA,EAAAA,CAASuE,CAAe,CACpC,CAAA,GAAIC,CAAI,CAAA,QAAA,EAAYA,CAAI,CAAA,IAAA,EAAQ,CAACD,CAAgB,CAAA,QAAA,CAAS,GAAG,CAAA,CAC3DD,CAAc,CAAA,IAAA,CAAK,CACjB,GAAKjX,CAAAA,EAAAA,CAAoBK,CAAO,CAAA,OAAA,CAAQ,MAAM,CAAA,CAC9C,MAAO6W,CACT,CAAC,CACQA,CAAAA,KAAAA,GAAAA,CAAAA,GAAoB,GAAOA,EAAAA,CAAAA,CAAgB,WAAW,GAAG,CAAA,CAAG,CACrE,IAAMR,CAAUQ,CAAAA,CAAAA,CAAgB,SAAS,GAAG,CAAA,CACxCA,CAAgB,CAAA,KAAA,CAAM,CAAG,CAAA,EAAE,EAC3BA,CACJD,CAAAA,CAAAA,CAAc,IAAK,CAAA,CACjB,GAAKjX,CAAAA,EAAAA,CAAoBK,EAAO,OAAQ,CAAA,MAAM,CAC9C,CAAA,KAAA,CAAOqW,CACT,CAAC,EACH,CACF,CAEI,cAAkBrW,GAAAA,CAAAA,CAAO,MAAUA,EAAAA,CAAAA,CAAO,OAAO,YACnD4W,EAAAA,CAAAA,CAAc,IAAK,CAAA,CACjB,GAAK,CAAA,cAAA,CACL,MAAO,IACT,CAAC,CAGH,CAAA,IAAMG,CAAyB,CAAA,CAC7BzF,EAAS,cAAe,CAAA,CACtB,YAAcmF,CAAAA,CAAAA,CAAa,IAC3B,CAAA,UAAA,CAAYG,EAAc,MACtB,CAAA,CAACtF,CAAS,CAAA,gBAAA,CAAiB,CAAE,GAAA,CAAKsF,CAAc,CAAC,CAAC,CAClD,CAAA,MAAA,CACJ,KAAO,CAAA,CAACtF,EAAS,iBAAkB,CAAA,CAAE,QAAUoF,CAAAA,CAAAA,CAAc,IAAK,CAAC,CAAC,CACtE,CAAC,CACH,CAAA,CAEM9K,CAAY0F,CAAAA,CAAAA,CAAS,cAAc,CACvC,WAAA,CAAa,IACb,CAAA,UAAA,CAAYA,CAAS,CAAA,cAAA,CAAe,CAClC,YAAciF,CAAAA,CAAAA,CAAa,IAC3B,CAAA,UAAA,CAAYI,CACR,CAAA,CACErF,EAAS,cAAe,CAAA,CACtB,YAAcqF,CAAAA,CAAAA,CAAmB,IACjC,CAAA,UAAA,CAAYI,CACd,CAAC,CACH,CACAA,CAAAA,CACN,CAAC,CAAA,CACD,KAAM,QACR,CAAC,CACDd,CAAAA,CAAAA,CAAK,GAAIrK,CAAAA,CAAS,EACpB,CC9GO,CAAA,IAAMoL,EAAyB,CAAA,CAAC,CACrC,MAAA,CAAAhX,CACF,CAAoC,GAAA,CAClC,IAAMiW,CAAAA,CAAOjW,CAAO,CAAA,OAAA,CAAQ,KAAK,CAAE,EAAA,CAAIN,EAAS,CAAC,CAE3C8W,CAAAA,CAAAA,CAAevE,EAAiB,CACpC,MAAA,CAAQjS,CAAO,CAAA,OAAA,CAAQ,MACvB,CAAA,YAAA,CAAciW,EAAK,oBAAqB,EAC1C,CAAC,CAAA,CACKS,CAAgBT,CAAAA,CAAAA,CAAK,OAAO,CAChC,MAAA,CAAQ,IACR,CAAA,MAAA,CAAQA,CAAK,CAAA,kBAAA,CAAmB,CAAE,OAASjW,CAAAA,CAAAA,CAAO,OAAS,CAAA,EAAA,CAAI4V,CAAQ,CAAC,EACxE,IAAM,CAAA,eACR,CAAC,CAAA,CACKqB,CAAahB,CAAAA,CAAAA,CAAK,OAAO,CAC7B,MAAA,CAAQ,IACR,CAAA,MAAA,CAAQO,CACR,CAAA,IAAA,CAAM,QACR,CAAC,CAAA,CACKU,CAAuBjB,CAAAA,CAAAA,CAAK,MAAO,CAAA,CACvC,MAAO,sBACP,CAAA,MAAA,CAAQ,IACR,CAAA,MAAA,CAAQO,CACR,CAAA,IAAA,CAAM,eACR,CAAC,CAAA,CAEKW,CAA2B7F,CAAAA,CAAAA,CAAS,iBAAkB,CAAA,CAC1D,SAAU4F,CAAqB,CAAA,IACjC,CAAC,CAAA,CACKE,CAAQ9F,CAAAA,CAAAA,CAAS,kBAAkB,CAAE,QAAA,CAAU,GAAI,CAAC,CAEpD+F,CAAAA,CAAAA,CAAyB/F,EAAS,oBAAqB,CAAA,CAC3D,OAAS,CAAA,CACP,6EACA,CAAA,yEAAA,CACA,GACA,oEACA,CAAA,mEAAA,CACA,sDACF,CAAA,CACA,UAAY,CAAA,IAAA,CACZ,KAAM,oBACN,CAAA,IAAA,CAAMA,CAAS,CAAA,gBAAA,CAAiB,CAC9B,UAAA,CAAY,CACVA,CAAAA,CAAS,oBAAqB,CAAA,CAC5B,IAAM,CAAA,UAAA,CACN,QAAU,CAAA,KAAA,CACV,KAAMA,CAAS,CAAA,iBAAA,CAAkB,CAC/B,aAAA,CAAe,CACbA,CAAAA,CAAS,qBAAqB,CAC5B,KAAA,CAAO,CAAC6F,CAAAA,CAA0BC,CAAK,CACzC,CAAC,CACH,CAAA,CACA,QAAUH,CAAAA,CAAAA,CAAW,IACvB,CAAC,CACH,CAAC,CACH,CACA,CAAA,UAAA,CAAY3F,CAAS,CAAA,iBAAA,CAAkB,CACrC,aAAe,CAAA,CACbA,CAAS,CAAA,oBAAA,CAAqB,CAC5B,KAAA,CAAO,CACLA,CAAS,CAAA,iBAAA,CAAkB,CACzB,aAAA,CAAe,CAAC6F,CAAwB,EACxC,QAAU,CAAA,UACZ,CAAC,CAAA,CACDC,CACF,CACF,CAAC,CACH,CAAA,CACA,QAAUH,CAAAA,CAAAA,CAAW,IACvB,CAAC,CACH,CAAC,CAAA,CACD,cAAgB,CAAA,CACd,CACE,OAAA,CAAS3F,EAAS,iBAAkB,CAAA,CAAE,QAAUoF,CAAAA,CAAAA,CAAc,IAAK,CAAC,EACpE,OAASS,CAAAA,CAAAA,CACT,IAAM,CAAA,GACR,CACF,CACF,CAAC,CAEDlB,CAAAA,CAAAA,CAAK,GAAIoB,CAAAA,CAAsB,EACjC,CAAA,CCnFO,IAAMC,EAAsB,CAAA,CAAC,CAClC,MAAA,CAAAtX,CACF,CAAA,GAAoC,CAClCA,CAAO,CAAA,UAAA,CAAW,CAChB,EAAA,CAAIN,EACJ,CAAA,IAAA,CAAMM,EAAO,MACf,CAAC,CAEDgX,CAAAA,EAAAA,CAAuB,CACrB,MAAA,CAAQhX,CACV,CAAC,CAAA,CACDuW,EAAa,CAAA,CACX,MAAQvW,CAAAA,CACV,CAAC,EACH,CAAA,CCdauX,IAAAA,EAAAA,CAAmD,CAC9D,GAAG9U,GACH,MAAQ,CAAA,CACN,GAAGD,EAAAA,CACH,YAAc,CAAA,KAChB,EACA,OAAS8U,CAAAA,EAAAA,CACT,IAAM,CAAA,uBACR,CAKaE,CCbAD,IAAAA,EAAAA,CAAmD,CAC9D,GAAG9U,GACH,MAAQ,CAAA,CACN,GAAGD,EAAAA,CACH,YAAc,CAAA,KAChB,EACA,OAAS8U,CAAAA,EAAAA,CACT,IAAM,CAAA,uBACR,CAKaE,CCbAD,IAAAA,EAAAA,CAAkD,CAC7D,GAAG9U,GACH,MAAQ,CAAA,CACN,GAAGD,EAAAA,CACH,YAAc,CAAA,KAChB,EACA,OAAS8U,CAAAA,EAAAA,CACT,IAAM,CAAA,sBACR,CAKaE,CCbAD,IAAAA,EAAAA,CAAkD,CAC7D,GAAG9U,GACH,MAAQD,CAAAA,EAAAA,CACR,OAAS8U,CAAAA,EAAAA,CACT,IAAM,CAAA,sBACR,ECPaC,IAAAA,EAAAA,CAA2D,CACtE,MAAQ,CAAA,EACR,CAAA,OAAA,CAAS,IAAM,GACf,IAAM,CAAA,gBAAA,CACN,MAAQ,CAAA,QAAA,CACR,IAAM,CAAA,CAAC,QAAQ,CACjB,CAAA,KCNaA,EAAyD,CAAA,CACpE,MAAQ,CAAA,EACR,CAAA,OAAA,CAAS,IAAM,EAAC,CAChB,IAAM,CAAA,cAAA,CACN,MAAQ,CAAA,QAAA,CACR,KAAM,CAAC,QAAQ,CACjB,CAAA,CCNO,IAAMA,EAAyD,CAAA,CACpE,MAAQ,CAAA,GACR,OAAS,CAAA,IAAM,EAAC,CAChB,IAAM,CAAA,cAAA,CACN,OAAQ,QACR,CAAA,IAAA,CAAM,CAAC,QAAQ,CACjB,CAAA,CCNO,IAAMA,EAAwD,CAAA,CACnE,OAAQ,EAAC,CACT,OAAS,CAAA,IAAM,EAAC,CAChB,KAAM,aACN,CAAA,MAAA,CAAQ,QACR,CAAA,IAAA,CAAM,CAAC,QAAQ,CACjB,CAKaC,CCXN,IAAMD,GAAuD,CAClE,MAAA,CAAQ,EAAC,CACT,OAAS,CAAA,IAAM,EACf,CAAA,IAAA,CAAM,YACN,CAAA,MAAA,CAAQ,QACR,CAAA,IAAA,CAAM,CAAC,QAAQ,CACjB,CAKaC,CCLb,IAAMC,EAAAA,CAAU,CACd3U,EAAAA,CACAE,EACAH,CAAAA,EAAAA,CACAE,GACAH,EACF,CAAA,CAEa8U,EAAyB3X,CAAAA,CAAAA,EAAyB,CAC7D,IAAIsV,EAAatV,CAAK,CAAA,OAAA,CAAQ,mCAAqC,CAAA,GAAG,CAGtE,CAAA,GADA2C,GAA6B,SAAY,CAAA,CAAA,CACrCA,EAA6B,CAAA,IAAA,CAAK2S,CAAU,CAAA,CAC9C,OAAO,CAAIA,CAAAA,EAAAA,CAAU,CAGvB,CAAA,CAAA,IAAA,IAAWsC,CAAUF,IAAAA,EAAAA,CAAS,CAC5B,GAAIpC,CAAAA,CAAW,UAAW,CAAA,GAAG,CAC3B,CAAA,OAAOA,EAGTA,CAAaA,CAAAA,CAAAA,CAAW,OAAQsC,CAAAA,CAAAA,CAAQ,KAAK,EAC/C,CAEA,OAAOtC,CACT,CCzBA,CAAA,IAAMuC,EAAY,CAAA,SAAA,CAEZC,GAAc,CAAC,CACnB,MAAA7X,CAAAA,CAAAA,CACA,MAAA8X,CAAAA,CACF,IAMM,CACA9X,CAAAA,CAAO,MAAO,CAAA,IAAA,GAAS,MACrB8X,GAAAA,CAAAA,CAAO,aACT,OAAOA,CAAAA,CAAO,WAGZA,CAAAA,CAAAA,CAAO,qBAAqB,CAAA,EAC9B,OAAOA,CAAO,CAAA,qBAAqB,CAGjCA,CAAAA,CAAAA,CAAO,iBAAiB,CAAA,EAC1B,OAAOA,CAAO,CAAA,iBAAiB,CAG7BA,CAAAA,CAAAA,CAAO,aAAa,CAAA,EACtB,OAAOA,CAAO,CAAA,aAAa,CAGzBA,CAAAA,CAAAA,CAAO,KACT,EAAA,OAAOA,EAAO,KAGpB,EAAA,CAAA,CAEMC,EAA6B,CAAA,CAAC,CAClC,OAAA,CAAA/B,EACA,MAAAhW,CAAAA,CAAAA,CACA,MAAQgY,CAAAA,CACV,CAI0C,GAAA,CACxC,GAAI,KAAM,CAAA,OAAA,CAAQA,CAAO,CAAA,CACvB,OAAOA,CAAAA,CAAQ,IAAK1L,CAClByL,EAAAA,EAAAA,CAA2B,CACzB,OAAA,CAAA/B,CACA,CAAA,MAAA,CAAAhW,EACA,MAAQsM,CAAAA,CACV,CAAC,CACH,CAGF,CAAA,IAAMwL,CAAS,CAAA,eAAA,CAAgBE,CAAO,CAAA,CAEtC,GAAIF,CAAAA,CAAO,IAGT,CAAA,OAAAA,EAAO,IAAO,CAAA,SAAA,CAAUA,CAAO,CAAA,IAAI,CAC5BA,CAAAA,CAAAA,CAkCT,GA/BAD,EAAY,CAAA,CAAE,MAAA7X,CAAAA,CAAAA,CAAQ,MAAA8X,CAAAA,CAAO,CAAC,CAG5BA,CAAAA,CAAAA,CAAO,oBACP,EAAA,OAAOA,CAAO,CAAA,oBAAA,EAAyB,YAEvCA,CAAO,CAAA,oBAAA,CAAuBC,EAA2B,CAAA,CACvD,OAAA/B,CAAAA,CAAAA,CACA,OAAAhW,CACA,CAAA,MAAA,CAAQ8X,CAAO,CAAA,oBACjB,CAAC,CAAA,CAAA,CAGCA,EAAO,KACTA,GAAAA,CAAAA,CAAO,KAAQA,CAAAA,CAAAA,CAAO,KAAM,CAAA,GAAA,CAAKxL,GAC/ByL,EAA2B,CAAA,CACzB,OAAA/B,CAAAA,CAAAA,CACA,MAAAhW,CAAAA,CAAAA,CACA,OAAQsM,CACV,CAAC,CACH,CAAA,CAAA,CAGEwL,CAAO,CAAA,KAAA,GACTA,EAAO,KAAQC,CAAAA,EAAAA,CAA2B,CACxC,OAAA,CAAA/B,CACA,CAAA,MAAA,CAAAhW,EACA,MAAQ8X,CAAAA,CAAAA,CAAO,KACjB,CAAC,CAGCA,CAAAA,CAAAA,CAAAA,CAAO,WACT,IAAW/X,IAAAA,CAAAA,IAAQ+X,CAAO,CAAA,UAAA,CAAY,CACpC,IAAMrH,EAAWqH,CAAO,CAAA,UAAA,CAAW/X,CAAI,CAAA,CAEnC,OAAO0Q,CAAAA,EAAa,YACtBqH,CAAO,CAAA,UAAA,CAAW/X,CAAI,CAAA,CAAIgY,EAA2B,CAAA,CACnD,QAAA/B,CACA,CAAA,MAAA,CAAAhW,CACA,CAAA,MAAA,CAAQyQ,CACV,CAAC,GAEL,CAGF,OAAOqH,CACT,CAAA,CAEMG,EAA6B,CAAA,CAAC,CAClC,OAAAjC,CAAAA,CAAAA,CACA,MAAAhW,CAAAA,CAAAA,CACA,MAAQgY,CAAAA,CACV,IAQ6C,CAC3C,GAAI,KAAM,CAAA,OAAA,CAAQA,CAAO,CAAA,CACvB,OAAOA,CAAQ,CAAA,GAAA,CAAK1L,CAClB2L,EAAAA,EAAAA,CAA2B,CACzB,OAAA,CAAAjC,EACA,MAAAhW,CAAAA,CAAAA,CACA,MAAQsM,CAAAA,CACV,CAAC,CACH,EAKF,IAAMwL,CAAAA,CAAS,eAAgBE,CAAAA,CAAO,CAEtC,CAAA,GAAI,SAAUF,CAGZ,CAAA,OAAAA,CAAO,CAAA,IAAA,CAAO,SAAUA,CAAAA,CAAAA,CAAO,IAAI,CAC5BA,CAAAA,CAAAA,CAsDT,GAnDAD,EAAAA,CAAY,CAAE,MAAA,CAAA7X,EAAQ,MAAA8X,CAAAA,CAAO,CAAC,CAAA,CAG5BA,CAAO,CAAA,oBAAA,EACP,OAAOA,CAAO,CAAA,oBAAA,EAAyB,SAEvCA,GAAAA,CAAAA,CAAO,oBAAuBG,CAAAA,EAAAA,CAA2B,CACvD,OAAAjC,CAAAA,CAAAA,CACA,MAAAhW,CAAAA,CAAAA,CACA,MAAQ8X,CAAAA,CAAAA,CAAO,oBACjB,CAAC,CAAA,CAAA,CAGCA,CAAO,CAAA,KAAA,GACTA,CAAO,CAAA,KAAA,CAAQA,EAAO,KAAM,CAAA,GAAA,CAAKxL,CAC/B2L,EAAAA,EAAAA,CAA2B,CACzB,OAAA,CAAAjC,EACA,MAAAhW,CAAAA,CAAAA,CACA,MAAQsM,CAAAA,CACV,CAAC,CACH,GAGEwL,CAAO,CAAA,KAAA,GACTA,CAAO,CAAA,KAAA,CAAQA,CAAO,CAAA,KAAA,CAAM,IAAKxL,CAC/B2L,EAAAA,EAAAA,CAA2B,CACzB,OAAA,CAAAjC,CACA,CAAA,MAAA,CAAAhW,EACA,MAAQsM,CAAAA,CACV,CAAC,CACH,CAGEwL,CAAAA,CAAAA,CAAAA,CAAO,QACTA,CAAO,CAAA,KAAA,CAAQG,EAA2B,CAAA,CACxC,OAAAjC,CAAAA,CAAAA,CACA,OAAAhW,CACA,CAAA,MAAA,CAAQ8X,CAAO,CAAA,KACjB,CAAC,CAAA,CAAA,CAGCA,EAAO,KACTA,GAAAA,CAAAA,CAAO,KAAQA,CAAAA,CAAAA,CAAO,KAAM,CAAA,GAAA,CAAKxL,GAC/B2L,EAA2B,CAAA,CACzB,OAAAjC,CAAAA,CAAAA,CACA,MAAAhW,CAAAA,CAAAA,CACA,OAAQsM,CACV,CAAC,CACH,CAAA,CAAA,CAGEwL,CAAO,CAAA,UAAA,CACT,QAAW/X,CAAQ+X,IAAAA,CAAAA,CAAO,UAAY,CAAA,CACpC,IAAMrH,CAAAA,CAAWqH,EAAO,UAAW/X,CAAAA,CAAI,CAEnC,CAAA,OAAO0Q,CAAa,EAAA,SAAA,GACtBqH,EAAO,UAAW/X,CAAAA,CAAI,CAAIkY,CAAAA,EAAAA,CAA2B,CACnD,OAAA,CAAAjC,EACA,MAAAhW,CAAAA,CAAAA,CACA,MAAQyQ,CAAAA,CACV,CAAC,CAAA,EAEL,CAGF,OAAOqH,CACT,CAEMI,CAAAA,EAAAA,CAA4B,CAAC,CACjC,QAAAlC,CACA,CAAA,MAAA,CAAAhW,CACA,CAAA,MAAA,CAAQgY,CACV,CAAA,GAI0C,CACxC,GAAI,KAAA,CAAM,OAAQA,CAAAA,CAAO,CACvB,CAAA,OAAOA,EAAQ,GAAK1L,CAAAA,CAAAA,EAClB4L,EAA0B,CAAA,CACxB,OAAAlC,CAAAA,CAAAA,CACA,OAAAhW,CACA,CAAA,MAAA,CAAQsM,CACV,CAAC,CACH,CAAA,CAGF,IAAMwL,CAAS,CAAA,eAAA,CAAgBE,CAAO,CAAA,CAqEtC,GAnEAH,EAAAA,CAAY,CAAE,MAAA7X,CAAAA,CAAAA,CAAQ,MAAA8X,CAAAA,CAAO,CAAC,CAAA,CAE1BA,EAAO,IAGTA,GAAAA,CAAAA,CAAO,IAAO,CAAA,SAAA,CAAUA,CAAO,CAAA,IAAI,GAInCA,CAAO,CAAA,oBAAA,EACP,OAAOA,CAAAA,CAAO,oBAAyB,EAAA,SAAA,GAEvCA,EAAO,oBAAuBI,CAAAA,EAAAA,CAA0B,CACtD,OAAA,CAAAlC,CACA,CAAA,MAAA,CAAAhW,EACA,MAAQ8X,CAAAA,CAAAA,CAAO,oBACjB,CAAC,CAGCA,CAAAA,CAAAA,CAAAA,CAAO,QACTA,CAAO,CAAA,KAAA,CAAQA,CAAO,CAAA,KAAA,CAAM,GAAKxL,CAAAA,CAAAA,EAC/B4L,GAA0B,CACxB,OAAA,CAAAlC,CACA,CAAA,MAAA,CAAAhW,CACA,CAAA,MAAA,CAAQsM,CACV,CAAC,CACH,CAGEwL,CAAAA,CAAAA,CAAAA,CAAO,KACTA,GAAAA,CAAAA,CAAO,MAAQA,CAAO,CAAA,KAAA,CAAM,GAAKxL,CAAAA,CAAAA,EAC/B4L,EAA0B,CAAA,CACxB,QAAAlC,CACA,CAAA,MAAA,CAAAhW,CACA,CAAA,MAAA,CAAQsM,CACV,CAAC,CACH,CAGEwL,CAAAA,CAAAA,CAAAA,CAAO,KACTA,GAAAA,CAAAA,CAAO,KAAQI,CAAAA,EAAAA,CAA0B,CACvC,OAAAlC,CAAAA,CAAAA,CACA,MAAAhW,CAAAA,CAAAA,CACA,MAAQ8X,CAAAA,CAAAA,CAAO,KACjB,CAAC,CAAA,CAAA,CAGCA,CAAO,CAAA,KAAA,GACTA,CAAO,CAAA,KAAA,CAAQA,EAAO,KAAM,CAAA,GAAA,CAAKxL,CAC/B4L,EAAAA,EAAAA,CAA0B,CACxB,OAAA,CAAAlC,EACA,MAAAhW,CAAAA,CAAAA,CACA,MAAQsM,CAAAA,CACV,CAAC,CACH,GAGEwL,CAAO,CAAA,WAAA,GACTA,CAAO,CAAA,WAAA,CAAcA,CAAO,CAAA,WAAA,CAAY,IAAKxL,CAC3C4L,EAAAA,EAAAA,CAA0B,CACxB,OAAA,CAAAlC,CACA,CAAA,MAAA,CAAAhW,CACA,CAAA,MAAA,CAAQsM,CACV,CAAC,CACH,CAAA,CAAA,CAGEwL,CAAO,CAAA,UAAA,CACT,QAAW/X,CAAQ+X,IAAAA,CAAAA,CAAO,UAAY,CAAA,CACpC,IAAMrH,CAAAA,CAAWqH,EAAO,UAAW/X,CAAAA,CAAI,CAEnC,CAAA,OAAO0Q,CAAa,EAAA,SAAA,GACtBqH,EAAO,UAAW/X,CAAAA,CAAI,CAAImY,CAAAA,EAAAA,CAA0B,CAClD,OAAA,CAAAlC,EACA,MAAAhW,CAAAA,CAAAA,CACA,MAAQyQ,CAAAA,CACV,CAAC,CAAA,EAEL,CAGF,OAAOqH,CACT,CAEMK,CAAAA,EAAAA,CAAa,CAAC,CAClB,KAAApY,CACA,CAAA,MAAA,CAAAC,CACA,CAAA,MAAA,CAAA8X,CACF,CAAA,GAQc,CACZ,IAAIM,CAAAA,CAAa,EAEjB,CAAA,OAAIpY,CAAO,CAAA,MAAA,CAAO,cACZ,OAAOA,CAAAA,CAAO,MAAO,CAAA,WAAA,EAAgB,UACvCoY,CAAAA,CAAAA,CAAapY,EAAO,MAAO,CAAA,WAAA,CAAYD,CAAM+X,CAAAA,CAAM,CAEnDM,CAAAA,CAAAA,CAAapY,EAAO,MAAO,CAAA,WAAA,CAAY,OAAQ,CAAA,UAAA,CAAYD,CAAI,CAAA,CAAA,CAI9DqY,IACHA,CAAa,CAAA,CAAA,EAAGrY,CAAI,CAAA,MAAA,CAAA,CAAA,CAGf2X,EAAsBU,CAAAA,CAAU,CACzC,CAEMC,CAAAA,EAAAA,CAAgB,CAAC,CACrB,OAAArC,CAAAA,CAAAA,CACA,OAAAhW,CACF,CAAA,GAGM,CACJ,GAAKgW,CAAQ,CAAA,IAAA,CAAK,YAIlB,IAAWjW,IAAAA,CAAAA,IAAQiW,CAAQ,CAAA,IAAA,CAAK,WAAa,CAAA,CAC3C,IAAM8B,CAAS9B,CAAAA,CAAAA,CAAQ,IAAK,CAAA,WAAA,CAAYjW,CAAI,CAAA,CACtC8J,EAAMkO,EAA2B,CAAA,CACrC,OAAA/B,CAAAA,CAAAA,CACA,MAAAhW,CAAAA,CAAAA,CACA,OAAA8X,CACF,CAAC,CACKlM,CAAAA,CAAAA,CAAY0F,CAAS,CAAA,aAAA,CAAc,CACvC,SAAW,CAAA,OAAA,CACX,WAAa,CAAA,IAAA,CACb,UAAYA,CAAAA,CAAAA,CAAS,iBAAiB,CAAE,GAAA,CAAAzH,CAAI,CAAC,CAC7C,CAAA,IAAA,CAAMsO,GAAW,CAAE,IAAA,CAAApY,CAAM,CAAA,MAAA,CAAAC,CAAQ,CAAA,MAAA,CAAA8X,CAAO,CAAC,CAC3C,CAAC,CAAA,CACD9B,CAAQ,CAAA,IAAA,CAAK,CAAE,EAAI4B,CAAAA,EAAU,CAAC,CAAA,CAAG,GAAIhM,CAAAA,CAAS,EAChD,CACF,CAAA,CAEM0M,EAAgB,CAAA,CAAC,CACrB,OAAA,CAAAtC,EACA,MAAAhW,CAAAA,CACF,CAGM,GAAA,CACJ,GAAKgW,CAAAA,CAAQ,KAAK,UAIlB,CAAA,IAAA,IAAWjW,CAAQiW,IAAAA,CAAAA,CAAQ,IAAK,CAAA,UAAA,CAAW,QAAS,CAClD,IAAM8B,CAAS9B,CAAAA,CAAAA,CAAQ,IAAK,CAAA,UAAA,CAAW,QAAQjW,CAAI,CAAA,CAC7C8J,CAAMoO,CAAAA,EAAAA,CAA2B,CACrC,OAAA,CAAAjC,EACA,MAAAhW,CAAAA,CAAAA,CACA,MAAA8X,CAAAA,CACF,CAAC,CAAA,CACKlM,EAAY0F,CAAS,CAAA,aAAA,CAAc,CACvC,SAAA,CAAW,OACX,CAAA,WAAA,CAAa,KACb,UAAYA,CAAAA,CAAAA,CAAS,gBAAiB,CAAA,CAAE,GAAAzH,CAAAA,CAAI,CAAC,CAC7C,CAAA,IAAA,CAAMsO,EAAW,CAAA,CAAE,IAAApY,CAAAA,CAAAA,CAAM,OAAAC,CAAQ,CAAA,MAAA,CAAA8X,CAAO,CAAC,CAC3C,CAAC,EACD9B,CAAQ,CAAA,IAAA,CAAK,CAAE,EAAA,CAAI4B,EAAU,CAAC,EAAG,GAAIhM,CAAAA,CAAS,EAChD,CACF,CAEM2M,CAAAA,EAAAA,CAAgB,CAAC,CACrB,OAAA,CAAAvC,CACA,CAAA,MAAA,CAAAhW,CACF,CAAA,GAGM,CACJ,GAAKgW,CAAAA,CAAQ,IAAK,CAAA,UAAA,CAIlB,IAAWjW,IAAAA,CAAAA,IAAQiW,EAAQ,IAAK,CAAA,UAAA,CAAW,OAAS,CAAA,CAClD,IAAM8B,CAAAA,CAAS9B,EAAQ,IAAK,CAAA,UAAA,CAAW,OAAQjW,CAAAA,CAAI,CAC7C8J,CAAAA,CAAAA,CAAMqO,GAA0B,CACpC,OAAA,CAAAlC,CACA,CAAA,MAAA,CAAAhW,CACA,CAAA,MAAA,CAAA8X,CACF,CAAC,CAAA,CACKlM,CAAY0F,CAAAA,CAAAA,CAAS,aAAc,CAAA,CACvC,UAAW,OACX,CAAA,WAAA,CAAa,IACb,CAAA,UAAA,CAAYA,CAAS,CAAA,gBAAA,CAAiB,CAAE,GAAAzH,CAAAA,CAAI,CAAC,CAAA,CAC7C,IAAMsO,CAAAA,EAAAA,CAAW,CAAE,IAAApY,CAAAA,CAAAA,CAAM,MAAAC,CAAAA,CAAAA,CAAQ,MAAA8X,CAAAA,CAAO,CAAC,CAC3C,CAAC,CACD9B,CAAAA,CAAAA,CAAQ,IAAK,CAAA,CAAE,GAAI4B,EAAU,CAAC,CAAG,CAAA,GAAA,CAAIhM,CAAS,EAChD,CACF,CAEa4M,CAAAA,EAAAA,CAA0C,CAAC,CAAE,MAAAxY,CAAAA,CAAO,IAAM,CAMrE,GALAA,CAAO,CAAA,UAAA,CAAW,CAChB,EAAA,CAAI4X,GACJ,IAAM5X,CAAAA,CAAAA,CAAO,MACf,CAAC,CAEG,CAAA,SAAA,GAAaA,EAAO,OAAQ,CAAA,IAAA,CAAM,CACpCqY,EAAAA,CAAc,CACZ,OAAA,CAASrY,EAAO,OAChB,CAAA,MAAA,CAAAA,CACF,CAAC,CACD,CAAA,MACF,CAEA,OAAQA,CAAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,OAAS,EACnC,KAAK,OACL,CAAA,KAAK,OACL,CAAA,KAAK,OACL,CAAA,KAAK,QACL,KAAK,OAAA,CACHsY,EAAc,CAAA,CACZ,OAAStY,CAAAA,CAAAA,CAAO,QAChB,MAAAA,CAAAA,CACF,CAAC,CAAA,CACD,MACF,KAAK,QACL,KAAK,OAAA,CACHuY,EAAc,CAAA,CACZ,OAASvY,CAAAA,CAAAA,CAAO,QAChB,MAAAA,CAAAA,CACF,CAAC,CAAA,CACD,MACF,QACE,MAAM,IAAI,KAAA,CAAM,mCAAmC,CACvD,CACF,CAAA,CCtZO,IAAMyY,EAAN,CAAA,KAAqB,CAIlB,gBAAA,CACA,SAA0B,EAAC,CAC3B,GACA,CAAA,eAAA,CACA,QAAW,CAAA,IAAI,IACf,MAAkC,CAAA,EAClC,CAAA,KAAA,CACA,KAED,CAAA,WAAA,CAA2B,EAS3B,CAAA,WAAA,CAAY,CACjB,GAAA,CAAAC,CACA,CAAA,eAAA,CAAAC,EAAkB,KAClB,CAAA,MAAA,CAAAC,CAAS,CAAA,IAAA,CACT,EAAApD,CAAAA,CAAAA,CACA,cAAAqD,CAAAA,CAAAA,CACA,IAAA9Y,CAAAA,CACF,CAeG,CAAA,CACD,IAAK,CAAA,gBAAA,CAAmB4Y,EACxB,IAAK,CAAA,GAAA,CAAMnD,CACX,CAAA,IAAA,CAAK,eAAkBqD,CAAAA,CAAAA,CACvB,KAAK,KAAQ,CAAA,IAAA,CAAK,QAAS9Y,CAAAA,CAAI,CAC/B,CAAA,IAAA,CAAK,MAAQ+O,mBAAK,CAAA,OAAA,CAAQ4J,CAAK,CAAA,IAAA,CAAK,KAAK,CAAA,CAErCE,GACF,IAAK,CAAA,QAAA,CAAS,IACZ,CAAA,uDACF,EAEJ,CAEO,OAAOtK,CAAgC,CAAA,CAC5C,IAAK,CAAA,MAAA,CAAS,IAAK,CAAA,MAAA,CAAO,OAAOA,CAAK,EACxC,CAOO,eAAA,CAAgB,CACrB,IAAA,CAAAyE,EACA,SAAA+F,CAAAA,CACF,CAEe,CAAA,CACb,GAAM,CAAE,KAAA/Y,CAAM,CAAA,GAAA,CAAAoW,CAAI,CAAA,CAAI4C,EAAShG,CAAAA,CAAI,EAC7BiG,CACJ,CAAA,IAAA,CAAK,WAAYjZ,CAAAA,CAAAA,CAAK,iBAAkB,EAAC,IAAI+Y,CAAS,CAAA,GAAI3C,CAAG,CAAA,CAC/D,GAAI,CAAC6C,EACH,MAAM,IAAI,KACR,CAAA,CAAA,oBAAA,EAAuBjG,CAAI,CAAA,cAAA,EAAiB+F,CAAS,CACvD,UAAA,CAAA,CAAA,CAGF,OAAAE,CAAAA,CAAS,IAAO,CAAA,KAAA,CAET,CACL,OAAS,CAAA,KAAA,CACT,IAAMA,CAAAA,CAAAA,CAAS,IACjB,CACF,CAEA,IAAW,eAAA,EAA2B,CACpC,OAAO,IAAK,CAAA,gBACd,CAEA,IAAW,EAAA,EAAa,CACtB,OAAO,IAAK,CAAA,GACd,CAEO,UACLtS,CAAAA,CAAAA,CAOY,CACZ,OAAOuS,EAAuB,CAAA,CAC5B,KAAMvS,CAAK,CAAA,IAAA,EAAQ,IAAK,CAAA,eAAA,CACxB,WAAa,CAAA,IAAA,CAAK,YAClB,GAAGA,CACL,CAAC,CACH,CAOO,MAAA,CAAO,CACZ,MAAA+F,CAAAA,CAAAA,CACA,GAAGyM,CACL,CAEqB,CAAA,CACnB,IAAIC,CAAY,CAAA,IAAA,CAAK,QAAS,CAAA,GAAA,CAAI1M,CAAM,CAAA,CAEnC0M,IACHA,CAAY,CAAA,IAAI,GAChB,CAAA,IAAA,CAAK,QAAS,CAAA,GAAA,CAAI1M,EAAQ0M,CAAS,CAAA,CAAA,CAGrC,IAAM3G,CAAAA,CAAQ2G,CAAU,CAAA,GAAA,CAAID,EAAa,IAAI,CAAA,CAC7C,OAAI1G,CAAAA,CACK,CACL,GAAGA,EACH,IAAMA,CAAAA,CAAAA,CAAM,KAASA,EAAAA,CAAAA,CAAM,IAC7B,CAAA,EAGF2G,EAAU,GAAID,CAAAA,CAAAA,CAAa,IAAMA,CAAAA,CAAY,CACtC,CAAA,CACL,GAAGA,CACH,CAAA,IAAA,CAAMA,CAAa,CAAA,KAAA,EAASA,CAAa,CAAA,IAC3C,EACF,CAEO,OAAA,EAAU,CACf,OAAO,CAAC,IAAA,CAAK,OAAO,MACtB,CAEO,oBAAuB,EAAA,CAC5B,GAAM,CAAE,KAAAnZ,CAAK,CAAA,CAAIqZ,EAAsB,CAAA,IAAA,CAAK,KAAK,CAAA,CACjD,OAAOrZ,CACT,CAEO,kBAAmB,CAAA,CACxB,OAAAiW,CAAAA,CAAAA,CACA,GAAAR,CACF,CAAA,CAGW,CACT,IAAI6D,CAAW,CAAA,EAAA,CAGf,GAAI7D,CAAG,CAAA,UAAA,CAAW,GAAG,CAAA,CAAG,CACtB,IAAI8D,EAAiC,EAAC,CAGtC,GAAItD,CAAAA,CAAQ,MAAO,CAAA,UAAA,CAAY,CAC7B,IAAMuD,CAAAA,CAAWvD,CAAQ,CAAA,MAAA,CAAO,UAAW,CAAA,KAAA,CAAM,GAAG,CACpDsD,CAAAA,CAAAA,CAAkBC,CAAS,CAAA,KAAA,CAAM,CAAGA,CAAAA,CAAAA,CAAS,OAAS,CAAC,EACzD,CACAF,CAAAA,CAAWvK,mBAAK,CAAA,OAAA,CAAQ,QAAQ,GAAI,EAAA,CAAG,GAAGwK,CAAAA,CAAiB9D,CAAE,EAC/D,MAAO,CACL,IAAMS,CAAOD,CAAAA,CAAAA,CAAQ,IAAK,CAAA,CAAE,GAAAR,CAAG,CAAC,CAChC,CAAA,GAAI,CAACS,CAAAA,CACH,MAAM,IAAI,KAAA,CAAM,CAAgBT,aAAAA,EAAAA,CAAE,CAAiB,eAAA,CAAA,CAAA,CAErD6D,EAAWpD,CAAK,CAAA,MAClB,CAEA,IAAMuD,CAAgB,CAAA,IAAA,CAAK,MAAM,KAAM1K,CAAAA,mBAAAA,CAAK,GAAG,CAAA,CACzC2K,CAAgBJ,CAAAA,CAAAA,CAAS,MAAMvK,mBAAK,CAAA,GAAG,CAEzC9I,CAAAA,CAAAA,CAAQ,EACR0T,CAAAA,CAAAA,CAAe,GACnB,IAAWpG,IAAAA,CAAAA,IAAQkG,CAEjB,CAAA,GADAxT,CAAS,EAAA,CAAA,CACLyT,EAAczT,CAAK,CAAA,GAAMsN,CAAM,CAAA,CACjC,IAAMqG,CAAAA,CAAY,MAAM,IAAK,CAAA,CAC3B,MAAQH,CAAAA,CAAAA,CAAc,MAASxT,CAAAA,CACjC,CAAC,CAAE,CAAA,IAAA,CAAK,EAAE,CAAA,CACJ4T,CAAqBH,CAAAA,CAAAA,CAAc,MAAMzT,CAAK,CAAA,CAC9C6T,CAAiBD,CAAAA,CAAAA,CAAmB,KACxC,CAAA,CAAA,CACAA,EAAmB,MAAS,CAAA,CAC9B,CACIC,CAAAA,CAAAA,CAAe,MACjBA,EAAAA,CAAAA,CAAe,KAAK,EAAE,CAAA,CAExBH,CACGC,CAAAA,CAAAA,CAAAA,CAAU,IAAK,CAAA,KAAK,GAAK,IAAQE,EAAAA,CAAAA,CAAe,IAAK,CAAA,GAAG,CAC3D,CAAA,KACF,CAGF,IAAMC,CAAAA,CAAWL,CAAcA,CAAAA,CAAAA,CAAc,MAAS,CAAA,CAAC,EAEvD,OAAO,CAAA,EAAGC,CAAY,CAAA,EAAGN,EAAsBU,CAAAA,CAAQ,EAAE,IAAI,CAAA,CAC/D,CAEO,MAAA,CAAOC,CAA2C,CAAA,CACvDvI,oBAAG,MAAO,CAAA,IAAA,CAAK,KAAOuI,CAAAA,CAAO,EAC/B,CAKO,YAAa,CAClB,IAAA,CAAK,MAAS,CAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,EAAG,IAAK,CAAA,MAAA,CAAO,MAAS,CAAA,CAAC,EAC3D,CAEQ,SAASD,CAAkB,CAAA,CACjC,GAAIA,CAAAA,CAAS,QAAS,CAAA,OAAO,EAC3B,OAAOA,CAAAA,CAGT,GAAM,CAAE,SAAAE,CAAAA,CAAAA,CAAW,KAAAja,CAAK,CAAA,CAAIqZ,EAAsBU,CAAAA,CAAQ,CAC1D,CAAA,OAAO,CAAC/Z,CAAM,CAAA,KAAA,CAAOia,CAAS,CAAA,CAAE,MAAO,CAAA,OAAO,EAAE,IAAK,CAAA,GAAG,CAC1D,CAEQ,SAAUpF,CAAAA,CAAAA,CAAmBqF,EAAuC,CAC1E,IAAIzY,CAAwB,CAAA,EACxB,CAAA,IAAA,CAAK,QAAS,CAAA,MAAA,EAChBA,CAAO,CAAA,IAAA,CAAK,IAAK,CAAA,QAAA,CAAS,IAAK,CAAA;AAAA,CAAI,CAAC,CAGtC,CAAA,IAAM0Y,CACJD,CAAAA,CAAAA,EAAU,QAAQ,gBAAqBxW,GAAAA,kBAAAA,CAAG,oBAAqB,CAAA,QAAA,CAE3D0W,EAAoC,EAAC,CAE3C,IAAW,GAAA,CAACC,EAASjB,CAAS,CAAA,GAAK,IAAK,CAAA,QAAA,CAAS,SAAW,CAAA,CAC1D,IAAM3L,CAAAA,CAAU,MAAM,IAAK2L,CAAAA,CAAAA,CAAU,MAAO,EAAC,EAEzCkB,CAAiBD,CAAAA,CAAAA,CAEnBF,CACCG,GAAAA,CAAAA,CAAe,WAAW,IAAI,CAAA,EAAKA,CAAe,CAAA,UAAA,CAAW,KAAK,CAE/DA,CAAAA,GAAAA,CAAAA,GAAmB,UACrBA,CAAAA,CAAAA,CAAiB,oBAEjBA,CAAiB,CAAA,CAAA,EAAGA,CAAc,CAAA,GAAA,CAAA,CAAA,CAItC,IAAMpW,CAAOqN,CAAAA,CAAAA,CAAS,uBAAwB,CAAA,CAC5C,QAAA9D,CACA,CAAA,MAAA,CAAQ6M,CACV,CAAC,EACDF,CAAmB,CAAA,IAAA,CAAKnW,EAAe,CAAA,CAAE,KAAAC,CAAK,CAAC,CAAC,EAClD,CACA,OAAIkW,CAAAA,CAAmB,QACrB3Y,CAAO,CAAA,IAAA,CAAK2Y,EAAmB,IAAK,CAAA;AAAA,CAAI,CAAC,CAAA,CAE3C3Y,CAASA,CAAAA,CAAAA,CAAO,MACd,CAAA,IAAA,CAAK,MAAO,CAAA,GAAA,CAAKyC,CACf,EAAA,OAAOA,CAAS,EAAA,QAAA,CACZA,CACAD,CAAAA,EAAAA,CAAe,CAAE,IAAA,CAAAC,CAAM,CAAA,QAAA,CAAU,IAAK,CAAC,CAC7C,CACF,CACOzC,CAAAA,CAAAA,CAAO,IAAKoT,CAAAA,CAAS,CAC9B,CAEO,MAAMA,CAAY,CAAA;AAAA,CAAA,CAAMqF,EAAwC,IAAM,CAAA,CAC3E,GAAI,IAAK,CAAA,OAAA,GAAW,CAClB,IAAA,CAAK,MAAO,CAAA,CAAE,MAAO,IAAK,CAAC,EAC3B,MACF,CAEA,IAAIvB,CAAM,CAAA,IAAA,CAAK,KACf,CAAA,GAAI,OAAO,IAAK,CAAA,KAAA,EAAU,SAAU,CAClC,IAAMhR,EAAQ,IAAK,CAAA,KAAA,CAAM,MAAMoH,mBAAK,CAAA,GAAG,EACvC4J,CAAMhR,CAAAA,CAAAA,CAAM,MAAM,CAAGA,CAAAA,CAAAA,CAAM,OAAS,CAAC,CAAA,CAAE,IAAKoH,CAAAA,mBAAAA,CAAK,GAAG,EACtD,CACAyC,GAAcmH,CAAG,CAAA,CACjBlH,oBAAG,aAAc,CAAA,IAAA,CAAK,MAAO,IAAK,CAAA,SAAA,CAAUoD,EAAWqF,CAAQ,CAAC,EAClE,CACF,CAAA,CAEMlB,GACJhG,CAeG,EAAA,CACH,IAAIoD,CAAAA,CAAMpD,EACJjJ,CAAuB,CAAA,GAEvBpC,CAAQyO,CAAAA,CAAAA,CAAI,MAAM,GAAG,CAAA,CACvBpW,EAAO2H,CAAMA,CAAAA,CAAAA,CAAM,OAAS,CAAC,CAAA,EAAK,GAElC4S,CAAY5S,CAAAA,CAAAA,CAAM,QAAQ,YAAY,CAAA,CAE1C,GAAI4S,CAAAA,GAAc,GAIhB,IAHAnE,CAAAA,CAAMzO,EAAM,KAAM,CAAA,CAAA,CAAG4S,CAAS,CAAE,CAAA,IAAA,CAAK,GAAG,CACxCva,CAAAA,CAAAA,CAAO2H,EAAM4S,CAAY,CAAA,CAAC,GAAK,EAExBA,CAAAA,CAAAA,CAAY,EAAI5S,CAAM,CAAA,MAAA,EAAQ,CACnC,IAAM6S,EAAO7S,CAAM4S,CAAAA,CAAAA,CAAY,CAAC,CAChC,CAAA,GAAI,CAACC,CACH,CAAA,MAAM,IAAI,KAAM,CAAA,CAAA,cAAA,EAAiBxH,CAAI,CAAE,CAAA,CAAA,CAEzCjJ,EAAW,IAAKyQ,CAAAA,CAAI,EACpBD,CAAa,EAAA,EACf,CAGF,OAAO,CACL,IAAAva,CAAAA,CAAAA,CACA,WAAA+J,CACA,CAAA,GAAA,CAAAqM,CACF,CACF,CAAA,CAEMqE,GAAgB,CACpBza,CAAAA,CACA0a,EACA5B,CACW,GAAA,CACX,GAAI,OAAO4B,CAAAA,EAAgB,WACzB,OAAOA,CAAAA,CAAY1a,CAAI,CAAA,CAGzB,IAAM6U,CAAYiE,CAAAA,CAAAA,GAAmB,WAAa,EAAK,CAAA,GAAA,CACvD,OAAO4B,CAAY,CAAA,OAAA,CAAQ,WAAY,CAAG7F,EAAAA,CAAS,GAAG7U,CAAI,CAAA,EAAG6U,CAAS,CAAE,CAAA,CAC1E,EAeMqE,EAAyB,CAAA,CAAC,CAC9B,IAAA,CAAAlG,EACA,IAAM8F,CAAAA,CAAAA,CACN,MAAA6B,CAAQ,CAAA,CAAA,CACR,OAAAC,CAAS,CAAA,KAAA,CACT,YAAAtT,CACA,CAAA,eAAA,CAAAuT,EACA,SAAA9B,CAAAA,CACF,IAA8C,CAC5C,GAAM,CAAE,IAAA/Y,CAAAA,CAAAA,CAAM,UAAA+J,CAAAA,CAAAA,CAAY,IAAAqM,CAAI,CAAA,CAAI4C,GAAShG,CAAI,CAAA,CAE/C,GAAI,CAAChT,CAAAA,CACH,OAAO,CACL,OAAA,CAAS,MACT,IAAM,CAAA,EACR,EAGF,IAAI8a,CAAAA,CAA+B1F,EAAW,CAC5C,IAAA,CAAM0D,CACN,CAAA,KAAA,CAAO+B,EACHJ,EAAcza,CAAAA,CAAAA,CAAM6a,EAAiB/B,CAAc,CAAA,CACnD9Y,CACN,CAAC,CAAA,CACG2a,EAAQ,CACVG,GAAAA,CAAAA,CAA+B,GAAGA,CAA4B,CAAA,EAAGH,CAAK,CAExE,CAAA,CAAA,CAAA,IAAMI,EAAgBD,CAA6B,CAAA,iBAAA,EAC9CxT,CAAAA,CAAAA,CAAYyT,CAAa,CAC5BzT,GAAAA,CAAAA,CAAYyT,CAAa,CAAI,CAAA,IAE/B,IAAMzF,CAAAA,CAAahO,EAAYyT,CAAa,CAAA,CAI5C,GACGhC,CAAc,GAAA,MAAA,GAAWzD,EAAW,IAAQA,EAAAA,CAAAA,CAAW,QACvDyD,CAAc,GAAA,MAAA,EAAUzD,CAAW,CAAA,IAAA,CAEpC,OAAO4D,EAAuB,CAAA,CAC5B,KAAM9C,CACN,CAAA,IAAA,CAAM0C,EACN,KAAO6B,CAAAA,CAAAA,CAAQ,EACf,MAAAC,CAAAA,CAAAA,CACA,YAAAtT,CACA,CAAA,eAAA,CAAAuT,EACA,SAAA9B,CAAAA,CACF,CAAC,CAGEzD,CAAAA,CAAAA,CAAWyD,CAAS,CAAA,GACvBzD,EAAWyD,CAAS,CAAA,CAAI,EAE1B,CAAA,CAAA,IAAMtD,EAAKH,CAAWyD,CAAAA,CAAS,EAEzBE,CAAWxD,CAAAA,CAAAA,CAAGW,CAAG,CACvB,CAAA,GAAI6C,EAAU,CACZ,IAAIjZ,EAAOiZ,CAAS,CAAA,IAAA,CACpB,OAAIlP,CAAAA,CAAW,SACb/J,CAAQ+J,EAAAA,CAAAA,CAAW,IAAK2G,CAAa,EAAA,CAAA,EAAA,EAAKA,CAAQ,CAAI,EAAA,CAAA,CAAA,CAAE,KAAK,EAAE,CAAA,CAAA,CAE1D,CACL,OAAS,CAAA,KAAA,CACT,KAAM1Q,CACR,CACF,CAEA,IAAIgb,CAAAA,CAAYvF,CAAGqF,CAAAA,CAA4B,EAC/C,OAAIE,CAAAA,CACEA,EAAU,IAAS5E,GAAAA,CAAAA,CACd,CACL,OAAS,CAAA,KAAA,CACT,KAAM4E,CAAU,CAAA,IAClB,EAGK9B,EAAuB,CAAA,CAC5B,KAAM9C,CACN,CAAA,IAAA,CAAM0C,EACN,KAAO6B,CAAAA,CAAAA,CAAQ,CACf,CAAA,MAAA,CAAAC,EACA,WAAAtT,CAAAA,CAAAA,CACA,gBAAAuT,CACA,CAAA,SAAA,CAAA9B,CACF,CAAC,CAAA,CAGE6B,GAQLI,CAAY,CAAA,CACV,KAAM5E,CACN,CAAA,IAAA,CAAMuB,GAAsBmD,CAA4B,CAC1D,EACArF,CAAGqF,CAAAA,CAA4B,CAAIE,CAAAA,CAAAA,CACnCvF,EAAGuF,CAAU,CAAA,IAAI,EAAIA,CAEd,CAAA,CACL,QAAS,IACT,CAAA,IAAA,CAAMA,EAAU,IAClB,CAAA,GAjBE,OAAO1F,CAAWyD,CAAAA,CAAS,EACpB,CACL,OAAA,CAAS,MACT,IAAM,CAAA,EACR,CAcJ,CAAA,CAAA,CAEMM,GAAyBU,CAAqB,EAAA,CAClD,IAAMtH,CAAQsH,CAAAA,CAAAA,CAAS,MAAM,eAAe,CAAA,CACtCE,EAAYxH,CAAQA,CAAAA,CAAAA,CAAM,CAAC,CAAE,CAAA,KAAA,CAAM,CAAC,CAAI,CAAA,EAAA,CACxCzS,EAAO+Z,CAAS,CAAA,KAAA,CACpB,CACAA,CAAAA,CAAAA,CAAS,QAAUE,CAAYA,CAAAA,CAAAA,CAAU,OAAS,CAAI,CAAA,CAAA,CACxD,EACA,OAAO,CAAE,UAAAA,CAAW,CAAA,IAAA,CAAAja,CAAK,CAC3B,CAAA,CCliBA,IAAM8R,GAAaC,iBAAc,CAAA,8PAAe,CAAA,CAC9BhD,mBAAK,CAAA,OAAA,CAAQ+C,EAAU,ECCZ,OAAQ,CAAA,KAAA,CAAM,OAAS,OAAQ,CAAA,MAAA,CAAO,UAEtDmJ,EAAN,CAAA,cAA0B,KAAM,CACrC,IAAA,CACA,MACA,UAEA,CAAA,WAAA,CAAY,CACV,IAAA,CAAAtU,EACA,KAAAuU,CAAAA,CAAAA,CACA,MAAAC,CACA,CAAA,IAAA,CAAAnb,EACA,UAAAob,CAAAA,CACF,EAMG,CACD,IAAMC,EAAUH,CAAiB,YAAA,KAAA,CAAQA,EAAM,OAAU,CAAA,eAAA,CACzD,MAAMG,CAAO,CAAA,CAEb,IAAK,CAAA,IAAA,CAAO1U,EACZ,IAAK,CAAA,KAAA,CAAQuU,EAAM,KACnB,CAAA,IAAA,CAAK,MAAQC,CACb,CAAA,IAAA,CAAK,KAAOnb,CAAQkb,EAAAA,CAAAA,CAAM,KAC1B,IAAK,CAAA,UAAA,CAAaE,EAClB,IAAK,CAAA,KAAA,CAAQF,EAAM,MACrB,CACF,EC/BO,IAAMI,GAAN,KAA4D,CAC1D,IACA,MACA,CAAA,OAAA,CACA,aAA2D,EAAC,CAC3D,QACD,IACA,CAAA,MAAA,CAEA,YACLC,CASA,CAAA,CACA,KAAK,GAAMA,CAAAA,CAAAA,CAAM,KAAO,EAAC,CACzB,IAAK,CAAA,MAAA,CAASA,EAAM,MACpB,CAAA,IAAA,CAAK,QAAUA,CAAM,CAAA,OAAA,CACrB,KAAK,YAAeA,CAAAA,CAAAA,CAAM,aAC1B,IAAK,CAAA,OAAA,CAAUA,EAAM,OACrB,CAAA,IAAA,CAAK,KAAOA,CAAM,CAAA,IAAA,CAClB,KAAK,MAASA,CAAAA,CAAAA,CAAM,OACtB,CAEO,WAAWrF,CAAsB,CAAA,CACtC,OAAO,IAAK,CAAA,OAAA,CAAQ,WAAW,CAC7B,eAAA,CAAiB,KAAK,MAAO,CAAA,eAAA,CAC7B,GAAGA,CACL,CAAC,CACH,CAwBO,OAAA,CAAA,GACFvP,EAIG,CACN,IAAM6U,CAAS7U,CAAAA,CAAAA,CAAK,MAAM,CAAG,CAAA,EAAE,EACzB8U,CAAW9U,CAAAA,CAAAA,CAAKA,EAAK,MAAS,CAAA,CAAC,EAC/B+U,CAAW,CAAA,IAAI,IACnBF,CAAO,CAAA,MAAA,CACHA,EACC,CACC,WAAA,CACA,YACA,aACA,CAAA,QAAA,CACA,QACF,CACN,EAEA,GAAIE,CAAAA,CAAS,IAAI,QAAQ,CAAA,EAAK,KAAK,OAAQ,CAAA,EAAA,CAAG,QAC5C,IAAWC,IAAAA,CAAAA,IAAU,KAAK,OAAQ,CAAA,EAAA,CAAG,QAAS,CAC5C,IAAMR,EAA6B,CAAE,MAAA,CAAAQ,CAAQ,CAAA,IAAA,CAAM,QAAS,CAC5D,CAAA,GAAI,CACFF,CAASN,CAAAA,CAAqB,EAChC,CAASD,MAAAA,CAAAA,CAAO,CACd,IAAK,CAAA,YAAA,CAAaA,EAAOC,CAAK,EAChC,CACF,CAGF,GAAIO,EAAS,GAAI,CAAA,QAAQ,CAAK,EAAA,IAAA,CAAK,QAAQ,EAAG,CAAA,UAAA,EAAY,QACxD,IAAW1b,IAAAA,CAAAA,IAAQ,KAAK,OAAQ,CAAA,EAAA,CAAG,WAAW,OAAS,CAAA,CACrD,IAAMmb,CAA6B,CAAA,CACjC,KAAM,CAAwBnb,qBAAAA,EAAAA,CAAI,GAClC,IAAAA,CAAAA,CAAAA,CACA,MAAQ,CAAA,IAAA,CAAK,QAAQ,EAAG,CAAA,UAAA,CAAW,QAAQA,CAAI,CAAA,CAC/C,KAAM,QACR,CAAA,CACA,GAAI,CACFyb,CAAAA,CAASN,CAAqB,EAChC,CAAA,MAASD,EAAO,CACd,IAAA,CAAK,aAAaA,CAAOC,CAAAA,CAAK,EAChC,CACF,CAGF,GAAIO,CAAAA,CAAS,IAAI,WAAW,CAAA,EAAK,KAAK,OAAQ,CAAA,EAAA,CAAG,YAAY,UAC3D,CAAA,IAAA,IAAW1b,KAAQ,IAAK,CAAA,OAAA,CAAQ,GAAG,UAAW,CAAA,UAAA,CAAY,CACxD,IAAMmb,CAAAA,CAAgC,CACpC,IAAA,CAAM,2BAA2Bnb,CAAI,CAAA,CAAA,CACrC,KAAAA,CACA,CAAA,SAAA,CAAW,KAAK,OAAQ,CAAA,EAAA,CAAG,WAAW,UAAWA,CAAAA,CAAI,EACrD,IAAM,CAAA,WACR,EACA,GAAI,CACFyb,EAASN,CAAqB,EAChC,CAASD,MAAAA,CAAAA,CAAO,CACd,IAAK,CAAA,YAAA,CAAaA,EAAOC,CAAK,EAChC,CACF,CAGF,GACEO,EAAS,GAAI,CAAA,aAAa,GAC1B,IAAK,CAAA,OAAA,CAAQ,GAAG,UAAY,EAAA,aAAA,CAE5B,QAAW1b,CAAQ,IAAA,IAAA,CAAK,OAAQ,CAAA,EAAA,CAAG,WAAW,aAAe,CAAA,CAC3D,IAAMmb,CAAkC,CAAA,CACtC,KAAM,CAA8Bnb,2BAAAA,EAAAA,CAAI,GACxC,IAAAA,CAAAA,CAAAA,CACA,YAAa,IAAK,CAAA,OAAA,CAAQ,GAAG,UAAW,CAAA,aAAA,CAAcA,CAAI,CAC1D,CAAA,IAAA,CAAM,aACR,CAAA,CACA,GAAI,CACFyb,CAAAA,CAASN,CAAqB,EAChC,CAAA,MAASD,EAAO,CACd,IAAA,CAAK,aAAaA,CAAOC,CAAAA,CAAK,EAChC,CACF,CAGF,GAAIO,CAAS,CAAA,GAAA,CAAI,WAAW,CAAK,EAAA,IAAA,CAAK,OAAQ,CAAA,EAAA,CAAG,MAC/C,IAAW3M,IAAAA,CAAAA,IAAQ,KAAK,OAAQ,CAAA,EAAA,CAAG,MAAO,CACxC,IAAM6M,EACJ,IAAK,CAAA,OAAA,CAAQ,GAAG,KAAM7M,CAAAA,CAA0C,EAClE,IAAW8M,IAAAA,CAAAA,IAAWD,EAAU,CAC9B,IAAME,CAASD,CAAAA,CAAAA,CACTV,EAAgC,CACpC,MAAA,CAAAW,EACA,SAAWF,CAAAA,CAAAA,CAASE,CAAM,CAC1B,CAAA,IAAA,CAAA/M,EACA,IAAM,CAAA,WACR,EACA,GAAI,CACF0M,EAASN,CAAqB,EAChC,OAASD,CAAO,CAAA,CACd,IAAK,CAAA,YAAA,CAAaA,EAAOC,CAAK,EAChC,CACF,CACF,CAEJ,CAEQ,YAAaD,CAAAA,CAAAA,CAAgBC,EAAkB,CACrD,IAAMY,EACJb,CAAiB,YAAA,KAAA,CAAQA,EAAQ,IAAI,KAAA,CAAM,OAAOA,CAAK,CAAC,CAC1D,CAAA,MAAM,IAAID,EAAY,CAAA,CACpB,KAAM,CAACE,CAAK,EACZ,KAAOY,CAAAA,CAAAA,CACP,MAAOZ,CAAM,CAAA,IAAA,CACb,KAAM,OACN,CAAA,UAAA,CAAY,KAAK,IACnB,CAAC,CACH,CAUO,SAAA,CACLnb,CACwE,CAAA,CACxE,OAAO,IAAK,CAAA,OAAA,CAAQ,QAAQA,CAAI,CAClC,CAKA,MAAa,GAAA,EAAM,CACjB,MAAM,IAAA,CAAK,QAAQ,CAAE,MAAA,CAAQ,IAAK,CAAC,EACrC,CACF,CCvKO,CAAA,IAAMgc,EAAN,CAAA,KAAwD,CAKtD,MAIA,CAAA,KAAA,CAAe,EAIf,CAAA,EAAA,CAAe,EAMf,CAAA,OAAA,CAEH,EAIG,CAAA,IAAA,CAEP,YAAY,CAAE,MAAA,CAAAnc,EAAQ,IAAAgU,CAAAA,CAAK,EAAmC,CAC5D,IAAA,CAAK,MAAShU,CAAAA,CAAAA,CACd,KAAK,IAAOgU,CAAAA,EACd,CAMO,UAAWqC,CAAAA,CAAAA,CAAmC,CAEnD,IAAMrE,CAAAA,CAAcqE,EAAK,IAAK,CAAA,KAAA,CAAM,GAAG,CACjC+F,CAAAA,CAAAA,CAAYlN,oBAAK,OACrB,CAAA,IAAA,CAAK,OAAO,MAAO,CAAA,IAAA,CACnB,GAAG8C,CAAAA,CAAY,MAAM,CAAGA,CAAAA,CAAAA,CAAY,OAAS,CAAC,CAChD,EACMqK,CAAc,CAAA,IAAIxD,GAAe,CACrC,GAAA,CAAKuD,EACL,eAAiB/F,CAAAA,CAAAA,CAAK,gBACtB,EAAIA,CAAAA,CAAAA,CAAK,GACT,cAAgBA,CAAAA,CAAAA,CAAK,cACrB,CAAA,IAAA,CAAM,GAAGrE,CAAYA,CAAAA,CAAAA,CAAY,OAAS,CAAC,CAAC,KAC9C,CAAC,CAAA,CACD,YAAK,KAAMqE,CAAAA,CAAAA,CAAK,EAAE,CAAIgG,CAAAA,CAAAA,CACfA,CACT,CAKO,WAAA,CAAenE,EAA0B,CAC9C,IAAMoE,CAAW,CAAA,IAAA,CAAK,WAAcpE,CAAO,CAAA,IAAI,EACzCqE,CAAe,CAAA,CACnB,GAAGrE,CACH,CAAA,GAAGoE,CACL,CAEA,CAAA,OAAA,OAAOC,EAAa,IACbA,CAAAA,CACT,CAKO,IAAK,CAAA,CAAE,GAAA3G,CAAG,CAAA,CAAwD,CACvE,OAAO,KAAK,KAAMA,CAAAA,CAAE,CACtB,CAQQ,cAAA,CACNzV,EACoC,CACpC,IAAMC,EAAS,IAAK,CAAA,MAAA,CAAO,QAAQD,CAAI,CAAA,CACjCqc,EAAW,IAAIf,EAAAA,CAAe,CAClC,GAAKrb,CAAAA,CAAAA,CAAO,GACZ,CAAA,MAAA,CAAQA,EAAO,MACf,CAAA,OAAA,CAAS,KACT,YAAcA,CAAAA,CAAAA,CAAO,cAAgB,EAAC,CACtC,QAASA,CAAO,CAAA,OAAA,CAChB,KAAMA,CAAO,CAAA,IAAA,CACb,OAAQA,CAAO,CAAA,MACjB,CAAC,CACD,CAAA,OAAA,IAAA,CAAK,OAAQoc,CAAAA,CAAAA,CAAS,IAAI,CAAIA,CAAAA,CAAAA,CACvBA,CACT,CASO,eAAA,EAAiD,CACtD,OAAO,IAAA,CAAK,OAAO,WAAY,CAAA,GAAA,CAAKrc,GAAS,IAAK,CAAA,cAAA,CAAeA,CAAI,CAAC,CACxE,CAMO,YAAgBgT,CAAAA,CAAAA,CAAc,CACnC,OAAOY,GAAc,CACnB,IAAA,CAAAZ,EACA,IAAM,CAAA,IAAA,CAAK,EACb,CAAC,CACH,CAKO,UAAcA,CAAAA,CAAAA,CAAc,CACjC,OAAOY,EAAAA,CAAc,CACnB,IAAAZ,CAAAA,CAAAA,CACA,KAAM,IAAK,CAAA,IACb,CAAC,CACH,CACF,CChKA,CAAA,IAAMsJ,GAAsB,CAAC,CAC3B,QAAArG,CACA,CAAA,SAAA,CAAAnO,CACF,CAGmC,GAAA,CACjC,GAAI,CAACA,CAAAA,CAAU,WACb,OAGF,GAAIA,EAAU,UAAe,GAAA,IAAA,CAC3B,OAAOA,CAAAA,CAAU,OAGnB,IAAIiQ,CAAAA,CAASjQ,EAAU,MACvB,CAAA,OAAIiQ,EAAO,IACTA,GAAAA,CAAAA,CAAS9B,EAAQ,YAA8B8B,CAAAA,CAAAA,CAAO,IAAI,CAGrDA,CAAAA,CAAAA,CAAAA,CAAO,WAAYjQ,CAAU,CAAA,UAAU,CAChD,CAEayU,CAAAA,EAAAA,CACXC,CACY,EAAA,CACZ,QAAWxc,CAAQwc,IAAAA,CAAAA,CACjB,GAAIA,CAAexc,CAAAA,CAAI,EAAG,QACxB,CAAA,OAAO,MAIX,OAAO,MACT,EAEayc,EACX5U,CAAAA,CAAAA,EAEKA,EAID,CAAA0U,EAAAA,EAAAA,CAAgC1U,EAAW,MAAM,CAAA,EAIjD0U,EAAgC1U,CAAAA,CAAAA,CAAW,MAAM,CAIjD0U,EAAAA,EAAAA,CAAgC1U,EAAW,IAAI,CAAA,EAI/C0U,GAAgC1U,CAAW,CAAA,KAAK,GAf3C,KAsBE6U,CAAAA,EAAAA,CAA0B,CAAC,CACtC,OAAA,CAAAzG,EACA,UAAApO,CAAAA,CACF,IAG8B,CAC5B,GAAKA,CAIL,CAAA,CAAA,IAAA,IAAW7H,KAAQ6H,CAAW,CAAA,MAAA,CAAQ,CACpC,IAAMC,CAAAA,CAAYD,EAAW,MAAO7H,CAAAA,CAAI,EACxC,GAAI8H,CAAAA,CAAU,WACZ,OAAO,CACL,GAAIA,CAAU,CAAA,QAAA,CACd,KACEA,CAAU,CAAA,UAAA,GAAe,IACrB9H,CAAAA,CAAAA,CACA,GAAGA,CAAI,CAAA,CAAA,EAAI8H,EAAU,UAAU,CAAA,CAAA,CACrC,OAAQwU,EAAoB,CAAA,CAAE,QAAArG,CAAS,CAAA,SAAA,CAAAnO,CAAU,CAAC,CACpD,CAEJ,CAEA,IAAA,IAAW9H,KAAQ6H,CAAW,CAAA,MAAA,CAAQ,CACpC,IAAMC,EAAYD,CAAW,CAAA,MAAA,CAAO7H,CAAI,CACxC,CAAA,GAAI8H,EAAU,UACZ,CAAA,OAAO,CACL,EAAIA,CAAAA,CAAAA,CAAU,SACd,IACEA,CAAAA,CAAAA,CAAU,aAAe,IACrB9H,CAAAA,CAAAA,CACA,GAAGA,CAAI,CAAA,CAAA,EAAI8H,CAAU,CAAA,UAAU,GACrC,MAAQwU,CAAAA,EAAAA,CAAoB,CAAE,OAAArG,CAAAA,CAAAA,CAAS,UAAAnO,CAAU,CAAC,CACpD,CAEJ,CAEA,QAAW9H,CAAQ6H,IAAAA,CAAAA,CAAW,KAAM,CAClC,IAAMC,EAAYD,CAAW,CAAA,IAAA,CAAK7H,CAAI,CAAA,CACtC,GAAI8H,CAAU,CAAA,UAAA,CACZ,OAAO,CACL,EAAA,CAAIA,EAAU,QACd,CAAA,IAAA,CACEA,EAAU,UAAe,GAAA,IAAA,CACrB9H,EACA,CAAGA,EAAAA,CAAI,IAAI8H,CAAU,CAAA,UAAU,GACrC,MAAQwU,CAAAA,EAAAA,CAAoB,CAAE,OAAA,CAAArG,EAAS,SAAAnO,CAAAA,CAAU,CAAC,CACpD,CAEJ,CAEA,IAAW9H,IAAAA,CAAAA,IAAQ6H,EAAW,KAAO,CAAA,CACnC,IAAMC,CAAYD,CAAAA,CAAAA,CAAW,MAAM7H,CAAI,CAAA,CACvC,GAAI8H,CAAU,CAAA,UAAA,CACZ,OAAO,CACL,GAAIA,CAAU,CAAA,QAAA,CACd,KACEA,CAAU,CAAA,UAAA,GAAe,KACrB9H,CACA,CAAA,CAAA,EAAGA,CAAI,CAAI8H,CAAAA,EAAAA,CAAAA,CAAU,UAAU,CACrC,CAAA,CAAA,MAAA,CAAQwU,GAAoB,CAAE,OAAA,CAAArG,EAAS,SAAAnO,CAAAA,CAAU,CAAC,CACpD,CAEJ,CAGF,CAAA,CAAA,CC/HO,IAAM6U,EAAoB,CAAA,CAA4B,CAC3D,YAAAC,CAAAA,CAAAA,CAAe,KACf,MAAA7E,CAAAA,CACF,IAGS,CACP,GAAI,CAACA,CAAO,CAAA,KAAA,CACV,OAAOA,CAGT,CAAA,IAAM8E,CAAsC,CAAA,GACtCC,CAAyB,CAAA,GAE/B,IAAWvQ,IAAAA,CAAAA,IAAQwL,EAAO,KAAO,CAAA,CAE/B,GAAK,CAACxL,CAAAA,CAAK,MAAQA,CAAK,CAAA,KAAA,EAAUwL,EAAO,IAAS,GAAA,OAAA,CAAS,CACzD8E,CAAY,CAAA,IAAA,CAAKtQ,CAAI,CAAA,CACrB,QACF,CAEA,GAEE,CAACA,CAAK,CAAA,IAAA,EACNA,EAAK,IAAS,GAAA,SAAA,EACdA,CAAK,CAAA,IAAA,GAAS,WACdA,CAAK,CAAA,IAAA,GAAS,QACdA,CAAK,CAAA,IAAA,GAAS,UACdA,CAAK,CAAA,IAAA,GAAS,QACdA,EAAAA,CAAAA,CAAK,OAAS,SACdA,EAAAA,CAAAA,CAAK,OAAS,MACd,CAAA,CAGA,IAAMwQ,CAAWxQ,CAAAA,CAAAA,CAAK,QAAU,MAAY,CAAA,CAAA,MAAA,EAASA,EAAK,KAAK,CAAA,CAAA,CAAK,GAC9DyQ,CACJzQ,CAAAA,CAAAA,CAAK,SAAW,MAAaqQ,EAAAA,CAAAA,CACzB,CAAUrQ,OAAAA,EAAAA,CAAAA,CAAK,MAAM,CACrB,CAAA,CAAA,EAAA,CACA0Q,EAAS,CAAG1Q,EAAAA,CAAAA,CAAK,MAAQ,EAAE,CAAA,EAAGA,EAAK,IAAQ,EAAA,EAAE,GAAGwQ,CAAQ,CAAA,EAAGC,CAAM,CAClEF,CAAAA,CAAAA,CAAAA,CAAQ,SAASG,CAAM,CAAA,GAC1BH,CAAQ,CAAA,IAAA,CAAKG,CAAM,CACnBJ,CAAAA,CAAAA,CAAY,KAAKtQ,CAAI,CAAA,CAAA,CAEvB,QACF,CAEAsQ,CAAAA,CAAY,KAAKtQ,CAAI,EACvB,CAEA,IAAI5K,CAAAA,CAAS,CAAE,GAAGoW,CAAO,EAGzB,GAFApW,CAAAA,CAAO,KAAQkb,CAAAA,CAAAA,CAGblb,EAAO,KAAM,CAAA,MAAA,EAAU,GACvBA,CAAO,CAAA,IAAA,GAAS,SAChBA,CAAO,CAAA,IAAA,GAAS,QAChBA,CAAO,CAAA,IAAA,GAAS,QAChB,CAEA,IAAMub,EAAevb,CAAO,CAAA,KAAA,CAAM,CAAC,CACnC,CAAA,OAAOA,CAAO,CAAA,eAAA,CACd,OAAOA,CAAO,CAAA,KAAA,CACdA,EAAS,CACP,GAAGA,EACH,GAAGub,CACL,EACF,CAGA,OAAIvb,EAAO,IAAS,GAAA,SAAA,CACX,EAGFA,CAAAA,CACT,EChFO,IAAMwb,EAAAA,CAAgBrT,CAAc,EAAA,IAAA,CAAK,MAAM,IAAK,CAAA,SAAA,CAAUA,CAAG,CAAC,CAAA,CAM5DsT,EAA0B,CACrC/b,CAAAA,CACAC,IACyD,CACzD,GAAI,CAACD,CAAG,EAAA,MAAA,CACN,OAAOC,CAAG,EAAA,MAAA,CAASA,EAAI,MAGzB,CAAA,GAAI,CAACA,CAAAA,EAAG,OACN,OAAOD,CAAAA,CAGT,IAAMgc,CAAe,CAAA,IAAI,IAAIhc,CAAC,CAAA,CAE9B,QAAWic,CAAShc,IAAAA,CAAAA,CAClB+b,EAAa,GAAIC,CAAAA,CAAK,EAGxB,OAAOD,CAAAA,CAAa,KAAOhc,CAAE,CAAA,MAAA,CAAS,KAAM,CAAA,IAAA,CAAKgc,CAAY,CAAIhc,CAAAA,CACnE,ECtBA,IAAMkc,EAAAA,CAAc,CAAC,CACnB,KAAA,CAAAC,EACA,MAAAzF,CAAAA,CACF,IAGM,CACJ,IAAA,IAAWxL,KAAQiR,CACjBzF,CAAAA,CAAAA,CAAO,aAAeqF,CACpBrF,CAAAA,CAAAA,CAAO,YACPxL,CAAAA,CAAAA,CAAK,YACP,CAEFwL,CAAAA,CAAAA,CAAO,MAAQyF,EACjB,CAAA,CAMaC,EAAmB,CAAC,CAC/B,MAAAD,CACA,CAAA,eAAA,CAAAE,EAAkB,IAClB,CAAA,mBAAA,CAAAC,EAAsB,KACtB,CAAA,MAAA,CAAA5F,CACF,CAMOyF,GAAAA,CAAAA,CAAM,MAIPzF,CAAAA,CAAAA,CAAO,OAAS,OAClBwF,EAAAA,EAAAA,CAAY,CAAE,KAAAC,CAAAA,CAAAA,CAAO,OAAAzF,CAAO,CAAC,EACtBA,CAGLyF,EAAAA,CAAAA,CAAM,SAAW,CACnBD,EAAAA,EAAAA,CAAY,CAAE,KAAAC,CAAAA,CAAAA,CAAO,OAAAzF,CAAO,CAAC,CAC7BA,CAAAA,CAAAA,CAAO,gBAAkB2F,CAClB3F,CAAAA,CAAAA,EAGL4F,GAEF5F,CAAS,CAAA,CACP,GAAGA,CACH,CAAA,GAAGyF,EAAM,CAAC,CACZ,EACOzF,CAGTwF,GAAAA,EAAAA,CAAY,CAAE,KAAAC,CAAAA,CAAAA,CAAO,OAAAzF,CAAO,CAAC,CACtBA,CAAAA,CAAAA,CAAAA,CAxBEA,EC1BJ,IAAM6F,EAAAA,CACXzH,GAEI,CAAAsG,EAAAA,EAAAA,CAA4BtG,EAAU,UAAU,CAAA,EAIhDA,EAAU,IAAM,EAAA,QAAA,CAAA,CAOT0H,EAAqB,CAAC,CACjC,OAAA/B,CACA,CAAA,IAAA,CAAA/M,CACF,CAGM,GAAA,CAAA,EAAG+M,CAAO,CAAA,WAAA,EAAa,CAAI/M,CAAAA,EAAAA,CAAI,GAExB+O,EAAsB,CAAA,CAAC,CAClC,OAAA7H,CAAAA,CAAAA,CACA,UAAAE,CACF,CAAA,GAG8B,CAC5B,IAAM4H,CAAAA,CAAO5H,EAAU,IAEvB,CAAA,GAAI,CAAC4H,CAAQ,EAAA,CAACA,CAAK,CAAA,UAAA,CACjB,OAAOrB,EAAwB,CAAA,CAC7B,QAAAzG,CACA,CAAA,UAAA,CAAYE,EAAU,UACxB,CAAC,EAGH,GAAI4H,CAAAA,CAAK,aAAe,IACtB,CAAA,OAAO,CACL,EAAI,CAAA,MAAA,CACJ,KAAM,MACN,CAAA,MAAA,CAAQA,CAAK,CAAA,MACf,EAGF,IAAMhG,CAAAA,CAASgG,EAAK,MACdC,CAAAA,CAAAA,CAAiBjG,EAAO,IAC1B9B,CAAAA,CAAAA,CAAQ,aAAqD8B,CAAO,CAAA,IAAI,EACxEA,CAIEkG,CAAAA,CAAAA,CAAAA,CADJ,WAAYD,CAAiBA,CAAAA,CAAAA,CAAe,OAASA,CACnB,GAAA,UAAA,GAAaD,CAAK,CAAA,UAAU,EAEhE,OAAKE,CAAAA,CAOE,CACL,EAAI,CAAA,MAAA,CACJ,KAAMF,CAAK,CAAA,UAAA,CACX,OAAQE,CACV,CAAA,CAVSvB,GAAwB,CAC7B,OAAA,CAAAzG,EACA,UAAYE,CAAAA,CAAAA,CAAU,UACxB,CAAC,CAQL,CAIa+H,CAAAA,EAAAA,CAAoB,CAAC,CAChC,UAAA,CAAAC,CACF,CAEmB,GAAA,CACjB,OAAQA,CAAY,EAClB,KAAK,KACH,CAAA,OAAO,MACT,KAAK,KAAA,CACH,OAAO,KACT,CAAA,KAAK,MACH,OAAO,KAAA,CACT,KAAK,KAAA,CACH,OAAO,KACT,CAAA,KAAK,MACH,OAAO,KAAA,CACT,KAAK,SACH,CAAA,OAAO,UACT,QACE,OAAO,GAAGA,CAAW,CAAA,CAAC,CAAC,CAC3B,EAAA,CAAA,CACF,EAqBaC,EACXjI,CAAAA,CAAAA,EAC0B,CAC1B,IAAMxU,EAAgC,EAAC,CAEvC,GAAI,CAACwU,CAAAA,CAAU,UACb,OAAOxU,CAAAA,CAGT,IAAM0c,CAC4C,CAAA,CAChD,WAAY,EAAC,CACb,KAAM,QACR,CAAA,CAEMC,EAC4C,CAChD,UAAA,CAAY,EAAC,CACb,KAAM,QACR,CAAA,CAGIC,EAEJ,IAAWve,IAAAA,CAAAA,IAAQmW,EAAU,SAAW,CAAA,CACtC,IAAMqI,CAAWrI,CAAAA,CAAAA,CAAU,UAAUnW,CAAI,CAAA,CAEzC,OAAQke,EAAkB,CAAA,CAAE,WAAYle,CAAK,CAAC,CAAG,EAC/C,KAAK,KACL,CAAA,KAAK,MAEH,MACF,KAAK,MACHse,CAAU,CAAA,UAAA,CAAWte,CAAI,CAAIwe,CAAAA,CAAAA,CAAS,OACtC,MACF,KAAK,MACL,KAAK,KAAA,CACHH,EAAO,UAAWre,CAAAA,CAAI,CAAIwe,CAAAA,CAAAA,CAAS,OACnC,MACF,KAAK,UACHD,CAAkBC,CAAAA,CAAAA,CAClB,KACJ,CACF,CAGA,GAAID,CAAiB,CAAA,CACnB,IAAIE,CAAW,CAAA,KAAA,CAGV,OAAO,IAAKH,CAAAA,CAAAA,CAAU,UAAU,CAAE,CAAA,MAAA,GACrCA,CAAU,CAAA,UAAA,CAAW,QAAUC,CAAgB,CAAA,MAAA,CAC/CE,EAAW,IAGb,CAAA,CAAA,IAAMC,GACJH,CAAgB,CAAA,MAAA,CAAO,aAAe,EACtC,EAAA,iBAAA,GACIvL,CAAQuL,CAAAA,CAAAA,CAAAA,CAAgB,OAAO,IAAQ,EAAA,EAAA,EAAI,mBAGzB,CAAA,CAAC,SAAS,CAAA,CAEhB,KACb9Z,CAAYia,EAAAA,CAAAA,CAAY,SAASja,CAAO,CAAA,EAAKuO,EAAK,QAASvO,CAAAA,CAAO,CACrE,CAEA6Z,GAAAA,CAAAA,CAAU,WAAW,OAAUC,CAAAA,CAAAA,CAAgB,OAC/CE,CAAW,CAAA,IAAA,CAAA,CAIS,CAAC,OAAS,CAAA,SAAS,CAEzB,CAAA,IAAA,CACXha,GAAYia,CAAY,CAAA,QAAA,CAASja,CAAO,CAAKuO,EAAAA,CAAAA,CAAK,SAASvO,CAAO,CACrE,IAEA4Z,CAAO,CAAA,UAAA,CAAW,QAAUE,CAAgB,CAAA,MAAA,CAC5CE,EAAW,IAIRA,CAAAA,CAAAA,CAAAA,GACHJ,EAAO,UAAW,CAAA,OAAA,CAAUE,CAAgB,CAAA,MAAA,EAEhD,CAEA,IAAMI,CAAAA,CAAY,OAAO,IAAKN,CAAAA,CAAAA,CAAO,UAAU,CAC/C,CAAA,GAAIM,EAAU,MAAQ,CAAA,CACpBN,EAAO,QAAWM,CAAAA,CAAAA,CAClBhd,EAAO,MAAS0c,CAAAA,CAAAA,CAEhB,IAAIO,CAAanB,CAAAA,CAAAA,CAAiB,CAChC,KAAA,CAAO,OAAO,MAAOY,CAAAA,CAAAA,CAAO,UAAU,CACtC,CAAA,mBAAA,CAAqB,KACrB,MAAQ,CAAA,EACV,CAAC,CAAA,CACDO,EAAajC,EAAkB,CAAA,CAAE,OAAQiC,CAAW,CAAC,EACjD,MAAO,CAAA,IAAA,CAAKA,CAAU,CAAA,CAAE,QAAUA,CAAW,CAAA,IAAA,GAAS,YACxDjd,CAAO,CAAA,KAAA,CAAQid,GAEnB,CAEA,IAAMC,EAAe,MAAO,CAAA,IAAA,CAAKP,EAAU,UAAU,CAAA,CACrD,GAAIO,CAAa,CAAA,MAAA,CAAQ,CACvBP,CAAU,CAAA,QAAA,CAAWO,CACrBld,CAAAA,CAAAA,CAAO,UAAY2c,CAEnB,CAAA,IAAIQ,EAAgBrB,CAAiB,CAAA,CACnC,MAAO,MAAO,CAAA,MAAA,CAAOa,EAAU,UAAU,CAAA,CACzC,oBAAqB,IACrB,CAAA,MAAA,CAAQ,EACV,CAAC,EACDQ,CAAgBnC,CAAAA,EAAAA,CAAkB,CAAE,MAAA,CAAQmC,CAAc,CAAC,CAAA,CACvD,OAAO,IAAKA,CAAAA,CAAa,EAAE,MAAUA,EAAAA,CAAAA,CAAc,OAAS,SAC9Dnd,GAAAA,CAAAA,CAAO,SAAWmd,CAEtB,EAAA,CAEA,OAAOnd,CACT,CAAA,CCjPO,IAAMod,EAA6C/e,CAAAA,CAAAA,EAAiB,CACzE,IAAMgf,EAAWhf,CAAK,CAAA,OAAA,CAAQ,oCAAqC,GAAG,CAAA,CACtE,OAAA2C,EAA6B,CAAA,SAAA,CAAY,EAEvCA,EAA6B,CAAA,IAAA,CAAKqc,CAAQ,CACD,CAAA,CAAA,CAAA,EAAIA,CAAQ,CAAKA,CAAAA,CAAAA,CAE9D,EAgBaC,EAA+Bjf,CAAAA,CAAAA,EAC1CA,CACG,CAAA,OAAA,CAAQ,qBAAsB,EAAE,CAAA,CAChC,QAAQ,mCAAqC,CAAA,GAAG,EAChD,OAAQ,CAAA,OAAA,CAAS,GAAG,CAEZkf,CAAAA,EAAAA,CAAkClf,GAAiB,CAC9D,IAAMmf,EAAkBnf,CAAK,CAAA,OAAA,CAAQ,KAAM,OAAO,CAAA,CAClD,OAAOif,EAAAA,CAA4BE,CAAe,CACpD,CAAA,CC5BO,IAAMC,CAAc,CAAA,CACzB,SACA,KACA,CAAA,MAAA,CACA,UACA,OACA,CAAA,MAAA,CACA,MACA,OACF,CAAA,CAOaC,GAAgB,CAAC,CAC5B,QAAApJ,CACA,CAAA,KAAA,CAAA0E,CAAQ,CAAA,CAAA,CACR,GAAAlF,CACA,CAAA,MAAA,CAAAqG,EACA,IAAA/M,CAAAA,CAAAA,CACA,MAAAuQ,CACF,CAAA,GAOc,CACZ,IAAI3d,CAAAA,CAEJ,GACE8T,CACC,GAAA,CAACQ,EAAQ,MAAO,CAAA,OAAA,CAAQ,cAAc,CACrCA,EAAAA,CAAAA,CAAQ,MAAO,CAAA,OAAA,CAAQ,cAAc,CAAE,CAAA,MAAA,CAAO,aAEhDtU,CAASyT,CAAAA,CAAAA,CAAW,CAClB,IAAM,CAAA,WAAA,CACN,MAAO6J,EAA4BxJ,CAAAA,CAAE,CACvC,CAAC,CAAA,CAAA,KACI,CACL,IAAM8J,CAAAA,CAAyBxQ,EAC5B,OAAQ,CAAA,UAAA,CAAY,OAAO,CAAA,CAE3B,QAAQ,QAAU,CAAA,GAAG,EAExBpN,CAASyT,CAAAA,CAAAA,CAAW,CAClB,IAAM,CAAA,WAAA,CACN,MAAO,CAAG0G,EAAAA,CAAM,IAAIyD,CAAsB,CAAA,CAC5C,CAAC,EACH,CAMA,OAJI5E,CAAQ,CAAA,CAAA,GACVhZ,CAAS,CAAA,CAAA,EAAGA,CAAM,CAAGgZ,EAAAA,CAAK,IAGxB2E,CAAM,CAAA,GAAA,CAAI,IAAI3d,CAAM,CAAA,CACf0d,GAAc,CACnB,OAAA,CAAApJ,EACA,KAAO0E,CAAAA,CAAAA,CAAQ,EACf,EAAAlF,CAAAA,CAAAA,CACA,OAAAqG,CACA,CAAA,IAAA,CAAA/M,CACA,CAAA,KAAA,CAAAuQ,CACF,CAAC,CAAA,EAGHA,EAAM,GAAI,CAAA,GAAA,CAAI3d,EAAQkc,CAAmB,CAAA,CAAE,OAAA/B,CAAQ,CAAA,IAAA,CAAA/M,CAAK,CAAC,CAAC,EAEnDpN,CACT,CAAA,CAAA,CC/DA,IAAM6d,EAAkB,CAAA,GAAA,CAEXC,CAAe,CAAA,CAC1B1G,EACAjX,CAAgB,CAAA,EAAA,GACL,GAAGiX,CAAS,CAAA,EAAGyG,EAAe,CAAG1d,EAAAA,CAAK,GAEtC4d,CACX7d,CAAAA,CAAAA,EAIG,CACH,IAAMoE,CAAAA,CAAQpE,EAAI,OAAQ2d,CAAAA,EAAe,EAEzC,OAAO,CACL,IAFW3d,CAAAA,CAAAA,CAAI,MAAMoE,CAAQ,CAAA,CAAC,EAG9B,SAAWpE,CAAAA,CAAAA,CAAI,MAAM,CAAGoE,CAAAA,CAAK,CAC/B,CACF,CAAA,CAOa0Z,GAAqB7d,CAAmC,EAAA,CACnE,OAAQA,CAAO,EACb,KAAK,YACH,CAAA,OAAO,WACT,CAAA,KAAK,gBACH,OAAO,MAAA,CACT,KAAK,WACH,CAAA,OAAO,WACT,KAAK,aAAA,CACL,KAAK,SACH,CAAA,OAAO,SACT,QACE,OAAO,SACX,CACF,CAAA,CAmBM8d,GAA6B,CACjC7a,CAAAA,CACA8a,CACkB,GAAA,CAClB,IAAM3O,CAAsB,CAAA,GACtBwG,CAAyB,CAAA,GAC/B,GAAImI,CAAAA,CACF,QAAW/d,CAAS+d,IAAAA,CAAAA,CACd/d,EAAM,UAAW,CAAA,GAAG,GAAKA,CAAM,CAAA,QAAA,CAAS,GAAG,CAC7C4V,CAAAA,CAAAA,CAAQ,IAAK,CAAA,IAAI,OAAO5V,CAAM,CAAA,KAAA,CAAM,EAAGA,CAAM,CAAA,MAAA,CAAS,CAAC,CAAC,CAAC,EAEzDoP,CAAK,CAAA,IAAA,CAAKuO,EAAa1a,CAAMjD,CAAAA,CAAK,CAAC,CAIzC,CAAA,OAAO,CACL,OAAA4V,CAAAA,CAAAA,CACA,GAAK,CAAA,IAAI,IAAIxG,CAAI,CACnB,CACF,CAeM4O,CAAAA,EAAAA,CAAwC,CAAC,CAC7C,iBAAA,CAAAC,EACA,cAAAC,CAAAA,CAAAA,CACA,kBAAAC,CACA,CAAA,cAAA,CAAAC,EACA,IAAArM,CAAAA,CACF,IAEM,CACJ,GAAA,CACGkM,CAAkB,CAAA,OAAA,CAAQ,QAAUE,CAAkB,CAAA,OAAA,CAAQ,SAC/DpM,CAAK,CAAA,KAAA,CAEL,QAAWsM,CAAS,IAAA,MAAA,CAAO,QAAQtM,CAAK,CAAA,KAAK,EAAG,CAC9C,IAAM9E,EAAOoR,CAAM,CAAA,CAAC,EACdvE,CAAWuE,CAAAA,CAAAA,CAAM,CAAC,CAAA,CACxB,QAAWrE,CAAUsD,IAAAA,CAAAA,CAAa,CAEhC,GAAI,CADcxD,EAASE,CAAM,CAAA,CAE/B,SAGF,IAAMja,CAAAA,CAAMgc,EAAmB,CAAE,MAAA,CAAA/B,EAAQ,IAAA/M,CAAAA,CAAK,CAAC,CAC3CgR,CAAAA,CAAAA,CAAkB,OAAQ,CAAA,IAAA,CAAMnI,GAAWA,CAAO,CAAA,IAAA,CAAK/V,CAAG,CAAC,CAAA,EAC7Dke,EAAkB,GAAI,CAAA,GAAA,CAAIN,EAAa,WAAa5d,CAAAA,CAAG,CAAC,CAEtDoe,CAAAA,CAAAA,CAAkB,QAAQ,IAAMrI,CAAAA,CAAAA,EAAWA,EAAO,IAAK/V,CAAAA,CAAG,CAAC,CAAA,EAC7Doe,EAAkB,GAAI,CAAA,GAAA,CAAIR,EAAa,WAAa5d,CAAAA,CAAG,CAAC,EAE5D,CACF,CAGF,GAAIgS,CAAAA,CAAK,cAGHmM,CAAe,CAAA,OAAA,CAAQ,QAAUE,CAAe,CAAA,OAAA,CAAQ,QAC1D,IAAWre,IAAAA,CAAAA,IAAO,MAAO,CAAA,IAAA,CAAKgS,EAAK,WAAW,CAAA,CACxCmM,EAAe,OAAQ,CAAA,IAAA,CAAMpI,GAAWA,CAAO,CAAA,IAAA,CAAK/V,CAAG,CAAC,CAAA,EAC1Dme,EAAe,GAAI,CAAA,GAAA,CAAIP,EAAa,QAAU5d,CAAAA,CAAG,CAAC,CAEhDqe,CAAAA,CAAAA,CAAe,OAAQ,CAAA,IAAA,CAAMtI,GAAWA,CAAO,CAAA,IAAA,CAAK/V,CAAG,CAAC,CAAA,EAC1Dqe,EAAe,GAAI,CAAA,GAAA,CAAIT,EAAa,QAAU5d,CAAAA,CAAG,CAAC,EAK5D,CAAA,CAEMue,GAAwC,CAAC,CAC7C,kBAAAL,CACA,CAAA,iBAAA,CAAAM,CACA,CAAA,oBAAA,CAAAC,EACA,gBAAAC,CAAAA,CAAAA,CACA,eAAAP,CACA,CAAA,iBAAA,CAAAC,EACA,iBAAAO,CAAAA,CAAAA,CACA,qBAAAC,CACA,CAAA,gBAAA,CAAAC,EACA,cAAAR,CAAAA,CAAAA,CACA,KAAArM,CACF,CAAA,GAEM,CACJ,GACGkM,CAAAA,CAAAA,CAAkB,OAAQ,CAAA,MAAA,EAAUE,EAAkB,OAAQ,CAAA,MAAA,GAC/DpM,EAAK,KAEL,CAAA,IAAA,IAAWsM,KAAS,MAAO,CAAA,OAAA,CAAQtM,EAAK,KAAK,CAAA,CAAG,CAC9C,IAAM9E,CAAAA,CAAOoR,EAAM,CAAC,CAAA,CACdvE,EAAWuE,CAAM,CAAA,CAAC,CACxB,CAAA,IAAA,IAAWrE,KAAUsD,CAAa,CAAA,CAEhC,GAAI,CADcxD,CAAAA,CAASE,CAAM,CAE/B,CAAA,SAGF,IAAMja,CAAMgc,CAAAA,CAAAA,CAAmB,CAAE,MAAA/B,CAAAA,CAAAA,CAAQ,KAAA/M,CAAK,CAAC,EAC3CgR,CAAkB,CAAA,OAAA,CAAQ,IAAMnI,CAAAA,CAAAA,EAAWA,EAAO,IAAK/V,CAAAA,CAAG,CAAC,CAC7Dke,EAAAA,CAAAA,CAAkB,IAAI,GAAIN,CAAAA,CAAAA,CAAa,YAAa5d,CAAG,CAAC,EAEtDoe,CAAkB,CAAA,OAAA,CAAQ,KAAMrI,CAAWA,EAAAA,CAAAA,CAAO,KAAK/V,CAAG,CAAC,CAC7Doe,EAAAA,CAAAA,CAAkB,IAAI,GAAIR,CAAAA,CAAAA,CAAa,YAAa5d,CAAG,CAAC,EAE5D,CACF,CAGF,GAAIgS,CAAK,CAAA,UAAA,CAAY,CACnB,GACGwM,CAAAA,CAAAA,CAAkB,QAAQ,MAAUG,EAAAA,CAAAA,CAAkB,QAAQ,MAC/D3M,GAAAA,CAAAA,CAAK,UAAW,CAAA,UAAA,CAEhB,QAAWhS,CAAO,IAAA,MAAA,CAAO,KAAKgS,CAAK,CAAA,UAAA,CAAW,UAAU,CAClDwM,CAAAA,CAAAA,CAAkB,QAAQ,IAAMzI,CAAAA,CAAAA,EAAWA,EAAO,IAAK/V,CAAAA,CAAG,CAAC,CAC7Dwe,EAAAA,CAAAA,CAAkB,IAAI,GAAIZ,CAAAA,CAAAA,CAAa,WAAa5d,CAAAA,CAAG,CAAC,CAEtD2e,CAAAA,CAAAA,CAAkB,QAAQ,IAAM5I,CAAAA,CAAAA,EAAWA,EAAO,IAAK/V,CAAAA,CAAG,CAAC,CAC7D2e,EAAAA,CAAAA,CAAkB,IAAI,GAAIf,CAAAA,CAAAA,CAAa,YAAa5d,CAAG,CAAC,EAK9D,GACGye,CAAAA,CAAAA,CAAqB,OAAQ,CAAA,MAAA,EAC5BG,EAAqB,OAAQ,CAAA,MAAA,GAC/B5M,EAAK,UAAW,CAAA,aAAA,CAEhB,QAAWhS,CAAO,IAAA,MAAA,CAAO,KAAKgS,CAAK,CAAA,UAAA,CAAW,aAAa,CACrDyM,CAAAA,CAAAA,CAAqB,QAAQ,IAAM1I,CAAAA,CAAAA,EAAWA,EAAO,IAAK/V,CAAAA,CAAG,CAAC,CAAA,EAChEye,EAAqB,GAAI,CAAA,GAAA,CAAIb,EAAa,MAAQ5d,CAAAA,CAAG,CAAC,CAEpD4e,CAAAA,CAAAA,CAAqB,QAAQ,IAAM7I,CAAAA,CAAAA,EAAWA,EAAO,IAAK/V,CAAAA,CAAG,CAAC,CAChE4e,EAAAA,CAAAA,CAAqB,IAAI,GAAIhB,CAAAA,CAAAA,CAAa,MAAQ5d,CAAAA,CAAG,CAAC,CAK5D,CAAA,GAAA,CACG0e,EAAiB,OAAQ,CAAA,MAAA,EAAUG,EAAiB,OAAQ,CAAA,MAAA,GAC7D7M,EAAK,UAAW,CAAA,SAAA,CAEhB,QAAWhS,CAAO,IAAA,MAAA,CAAO,KAAKgS,CAAK,CAAA,UAAA,CAAW,SAAS,CACjD0M,CAAAA,CAAAA,CAAiB,OAAQ,CAAA,IAAA,CAAM3I,GAAWA,CAAO,CAAA,IAAA,CAAK/V,CAAG,CAAC,CAAA,EAC5D0e,EAAiB,GAAI,CAAA,GAAA,CAAId,EAAa,UAAY5d,CAAAA,CAAG,CAAC,CAEpD6e,CAAAA,CAAAA,CAAiB,QAAQ,IAAM9I,CAAAA,CAAAA,EAAWA,EAAO,IAAK/V,CAAAA,CAAG,CAAC,CAAA,EAC5D6e,EAAiB,GAAI,CAAA,GAAA,CAAIjB,EAAa,UAAY5d,CAAAA,CAAG,CAAC,CAK5D,CAAA,GAAA,CACGme,EAAe,OAAQ,CAAA,MAAA,EAAUE,EAAe,OAAQ,CAAA,MAAA,GACzDrM,EAAK,UAAW,CAAA,OAAA,CAEhB,QAAWhS,CAAO,IAAA,MAAA,CAAO,IAAKgS,CAAAA,CAAAA,CAAK,WAAW,OAAO,CAAA,CAC/CmM,EAAe,OAAQ,CAAA,IAAA,CAAMpI,GAAWA,CAAO,CAAA,IAAA,CAAK/V,CAAG,CAAC,CAAA,EAC1Dme,EAAe,GAAI,CAAA,GAAA,CAAIP,EAAa,QAAU5d,CAAAA,CAAG,CAAC,CAEhDqe,CAAAA,CAAAA,CAAe,OAAQ,CAAA,IAAA,CAAMtI,GAAWA,CAAO,CAAA,IAAA,CAAK/V,CAAG,CAAC,CAAA,EAC1Dqe,EAAe,GAAI,CAAA,GAAA,CAAIT,CAAa,CAAA,QAAA,CAAU5d,CAAG,CAAC,EAI1D,CACF,CAEM8e,CAAAA,EAAAA,CAA+B,CAAC,CACpC,IAAA,CAAA9M,CACA,CAAA,GAAGgM,CACL,CAEY,GAAA,CACN,YAAahM,CACfiM,CAAAA,EAAAA,CAAsC,CAAE,GAAGD,CAAAA,CAAS,KAAAhM,CAAK,CAAC,EAE1DuM,EAAsC,CAAA,CAAE,GAAGP,CAAS,CAAA,IAAA,CAAAhM,CAAK,CAAC,EAE9D,CAEa+M,CAAAA,EAAAA,CAAgB,CAC3B/gB,CACAgU,CAAAA,CAAAA,GACY,CACZ,IAAMkM,CAAAA,CAAoBH,GACxB,WACA/f,CAAAA,CAAAA,EAAQ,YAAY,OACtB,CAAA,CACMogB,EAAoBL,EACxB,CAAA,WAAA,CACA/f,GAAQ,UAAY,EAAA,OACtB,EACMwgB,CAAoBT,CAAAA,EAAAA,CACxB,WACA/f,CAAAA,CAAAA,EAAQ,YAAY,OACtB,CAAA,CACM2gB,EAAoBZ,EACxB,CAAA,WAAA,CACA/f,GAAQ,UAAY,EAAA,OACtB,EACMygB,CAAuBV,CAAAA,EAAAA,CAC3B,OACA/f,CAAQ,EAAA,aAAA,EAAe,OACzB,CACM4gB,CAAAA,CAAAA,CAAuBb,GAC3B,MACA/f,CAAAA,CAAAA,EAAQ,aAAe,EAAA,OACzB,EACM0gB,CAAmBX,CAAAA,EAAAA,CACvB,WACA/f,CAAQ,EAAA,SAAA,EAAW,OACrB,CACM6gB,CAAAA,CAAAA,CAAmBd,GACvB,UACA/f,CAAAA,CAAAA,EAAQ,WAAW,OACrB,CAAA,CACMmgB,EAAiBJ,EACrB,CAAA,QAAA,CACA/f,GAAQ,OAAS,EAAA,OACnB,CACMqgB,CAAAA,CAAAA,CAAiBN,GACrB,QACA/f,CAAAA,CAAAA,EAAQ,SAAS,OACnB,CAAA,CAEA,OAAA8gB,EAA6B,CAAA,CAC3B,kBAAAZ,CACA,CAAA,iBAAA,CAAAM,EACA,oBAAAC,CAAAA,CAAAA,CACA,iBAAAC,CACA,CAAA,cAAA,CAAAP,EACA,iBAAAC,CAAAA,CAAAA,CACA,iBAAAO,CAAAA,CAAAA,CACA,qBAAAC,CACA,CAAA,gBAAA,CAAAC,EACA,cAAAR,CAAAA,CAAAA,CACA,KAAArM,CACF,CAAC,EAEwB,CACvB,UAAA,CAAYhU,GAAQ,UAAc,EAAA,IAAA,CAClC,WAAY,CACV,OAAA,CAASkgB,EAAkB,GAC3B,CAAA,OAAA,CAASE,CAAkB,CAAA,GAC7B,EACA,OAASpgB,CAAAA,CAAAA,EAAQ,SAAW,KAC5B,CAAA,UAAA,CAAY,CACV,OAASwgB,CAAAA,CAAAA,CAAkB,IAC3B,OAASG,CAAAA,CAAAA,CAAkB,GAC7B,CACA,CAAA,aAAA,CAAe3gB,GAAQ,aAAiB,EAAA,KAAA,CACxC,cAAe,CACb,OAAA,CAASygB,CAAqB,CAAA,GAAA,CAC9B,QAASG,CAAqB,CAAA,GAChC,EACA,SAAW,CAAA,CACT,QAASF,CAAiB,CAAA,GAAA,CAC1B,QAASG,CAAiB,CAAA,GAC5B,EACA,OAAS,CAAA,CACP,QAASV,CAAe,CAAA,GAAA,CACxB,QAASE,CAAe,CAAA,GAC1B,CACA,CAAA,IAAA,CAAM,CACJ,OAAS,CAAA,IAAI,IAAIrgB,CAAQ,EAAA,IAAA,EAAM,OAAO,CACtC,CAAA,OAAA,CAAS,IAAI,GAAIA,CAAAA,CAAAA,EAAQ,MAAM,OAAO,CACxC,CACF,CAEF,CAAA,CAEaghB,GAAchhB,CACpBA,EAAAA,CAAAA,CAKDA,CAAO,CAAA,OAAA,GAAY,OAASA,CAAO,CAAA,UAAA,GAAe,MAC7C,IAGF,CAAA,CAAA,EACLA,EAAO,UAAY,EAAA,OAAA,EAAS,QAC1BA,CAAO,CAAA,UAAA,EAAY,SAAS,MAC5BA,EAAAA,CAAAA,CAAO,YAAY,OAAS,EAAA,MAAA,EAC5BA,EAAO,UAAY,EAAA,OAAA,EAAS,MAC5BA,EAAAA,CAAAA,CAAO,eAAe,OAAS,EAAA,MAAA,EAC/BA,EAAO,aAAe,EAAA,OAAA,EAAS,QAC/BA,CAAO,CAAA,SAAA,EAAW,SAAS,MAC3BA,EAAAA,CAAAA,CAAO,WAAW,OAAS,EAAA,MAAA,EAC3BA,EAAO,OAAS,EAAA,OAAA,EAAS,QACzBA,CAAO,CAAA,OAAA,EAAS,OAAS,EAAA,MAAA,EACzBA,EAAO,IAAM,EAAA,OAAA,EAAS,QACtBA,CAAO,CAAA,IAAA,EAAM,SAAS,MApBjB,CAAA,CAAA,KAAA,CA2BLihB,GAAoB,CAAC,CACzB,QAAAjB,CACA,CAAA,UAAA,CAAAhY,EACA,aAAAkZ,CAAAA,CAAAA,CACA,iBAAAC,CACA,CAAA,SAAA,CAAA1C,CACA,CAAA,OAAA,CAAA2C,CACF,CASK,GAAA,CACH,IAAMC,CAAW,CAAA,IAAI,IAIfC,CAAQ,CAAA,CAAC,GAHItB,CAAQ,CAAA,UAAA,CAAW,QAAQ,IAC1CA,CAAAA,CAAAA,CAAQ,WAAW,OACnB,CAAA,IAAI,IAAImB,CAAiB,CAAA,UAAA,CAAW,IAAK,EAAC,CAClB,CAC5B,CAAA,KAAOG,EAAM,MAAQ,EAAA,CACnB,IAAMtf,CAAMsf,CAAAA,CAAAA,CAAM,KAElB,CAAA,GAAItB,EAAQ,UAAW,CAAA,OAAA,CAAQ,IAAIhe,CAAG,CAAA,EAAKqf,EAAS,GAAIrf,CAAAA,CAAG,CACzD,CAAA,SAGF,IAAMqC,CAAO8c,CAAAA,CAAAA,CAAiB,WAAW,GAAInf,CAAAA,CAAG,EAE3CqC,CAID,GAAA,CAAC2b,EAAQ,UAAc3b,EAAAA,CAAAA,CAAK,YAK9B2b,CAAQ,CAAA,IAAA,CAAK,QAAQ,IACrB3b,EAAAA,CAAAA,CAAK,KAAK,IACV,EAAA,CAAC,GAAG2b,CAAAA,CAAQ,KAAK,OAAO,CAAA,CAAE,KAAMuB,CAAQld,EAAAA,CAAAA,CAAK,KAAK,GAAIkd,CAAAA,CAAG,CAAC,CAM1DvB,EAAAA,CAAAA,CAAQ,KAAK,OAAQ,CAAA,IAAA,EACrB,CAAC,IAAI,GAAA,CAAI,CAAC,GAAGA,CAAAA,CAAQ,IAAK,CAAA,OAAO,EAAE,MAAQuB,CAAAA,CAAAA,EAAQld,EAAK,IAAK,CAAA,GAAA,CAAIkd,CAAG,CAAC,CAAC,EACnE,IAOH,EAAA,CAAC,GAAGld,CAAK,CAAA,YAAY,EAAE,IAAMmd,CAAAA,CAAAA,EAAe,CAC1C,GAAM,CAAE,SAAAtI,CAAAA,CAAU,EAAI2G,CAAgB2B,CAAAA,CAAU,EAChD,OAAQtI,CAAAA,EACN,KAAK,MAAA,CACH,OAAO,CAACgI,CAAAA,CAAc,IAAIM,CAAU,CAAA,CACtC,KAAK,WACH,CAAA,OAAO,CAACxZ,CAAW,CAAA,GAAA,CAAIwZ,CAAU,CAAA,CACnC,KAAK,UACH,CAAA,OAAO,CAAC/C,CAAU,CAAA,GAAA,CAAI+C,CAAU,CAClC,CAAA,KAAK,SACH,OAAO,CAACJ,EAAQ,GAAII,CAAAA,CAAU,EAChC,QACE,OAAO,MACX,CACF,CAAC,CAKHH,EAAAA,CAAAA,CAAS,IAAIrf,CAAG,CAAA,EAClB,CACA,OAAO,CAAE,WAAYqf,CAAS,CAChC,EAKMI,EAAoB,CAAA,CAAC,CACzB,OAAAzB,CAAAA,CAAAA,CACA,iBAAAmB,CACA,CAAA,OAAA,CAAAC,CACF,CAMK,GAAA,CACH,IAAMC,CAAAA,CAAW,IAAI,GAIfC,CAAAA,CAAAA,CAAQ,CAAC,GAHItB,CAAAA,CAAQ,WAAW,OAAQ,CAAA,IAAA,CAC1CA,EAAQ,UAAW,CAAA,OAAA,CACnB,IAAI,GAAImB,CAAAA,CAAAA,CAAiB,WAAW,IAAK,EAAC,CAClB,CAC5B,CAAA,KAAOG,CAAM,CAAA,MAAA,EAAQ,CACnB,IAAMtf,CAAAA,CAAMsf,EAAM,GAAI,EAAA,CAEtB,GAAItB,CAAQ,CAAA,UAAA,CAAW,QAAQ,GAAIhe,CAAAA,CAAG,GAAKqf,CAAS,CAAA,GAAA,CAAIrf,CAAG,CACzD,CAAA,SAGF,IAAMqC,CAAO8c,CAAAA,CAAAA,CAAiB,UAAW,CAAA,GAAA,CAAInf,CAAG,CAEhD,CAAA,GAAKqC,GAID,EAAC2b,CAAAA,CAAAA,CAAQ,YAAc3b,CAAK,CAAA,UAAA,CAAA,GAIhCgd,EAAS,GAAIrf,CAAAA,CAAG,EAEZ,CAACqC,CAAAA,CAAAA,CAAK,aAAa,IAIvB,CAAA,CAAA,IAAA,IAAWmd,KAAcnd,CAAK,CAAA,YAAA,CAAc,CAC1C,GAAM,CAAE,SAAA6U,CAAAA,CAAU,EAAI2G,CAAgB2B,CAAAA,CAAU,EAChD,OAAQtI,CAAAA,EACN,KAAK,MAAA,CAAQ,CACP8G,CAAQ,CAAA,aAAA,CAAc,QAAQ,GAAIwB,CAAAA,CAAU,EAC9CH,CAAS,CAAA,MAAA,CAAOrf,CAAG,CAAA,CACTqf,EAAS,GAAIG,CAAAA,CAAU,GACjCF,CAAM,CAAA,IAAA,CAAKE,CAAU,CAEvB,CAAA,KACF,CACA,KAAK,QAAA,CAAU,CACTxB,CAAQ,CAAA,OAAA,CAAQ,QAAQ,GAAIwB,CAAAA,CAAU,EACxCH,CAAS,CAAA,MAAA,CAAOrf,CAAG,CAAA,CACTof,EAAQ,GAAII,CAAAA,CAAU,GAChCJ,CAAQ,CAAA,GAAA,CAAII,CAAU,CAExB,CAAA,KACF,CACF,CACF,CACF,CACA,OAAO,CAAE,WAAYH,CAAS,CAChC,EAKMK,EAAuB,CAAA,CAAC,CAC5B,OAAA,CAAA1B,EACA,gBAAAmB,CAAAA,CAAAA,CACA,QAAAC,CACF,CAAA,GAMK,CACH,IAAMC,CAAAA,CAAW,IAAI,GAIfC,CAAAA,CAAAA,CAAQ,CAAC,GAHItB,CAAAA,CAAQ,cAAc,OAAQ,CAAA,IAAA,CAC7CA,EAAQ,aAAc,CAAA,OAAA,CACtB,IAAI,GAAA,CAAImB,EAAiB,aAAc,CAAA,IAAA,EAAM,CACrB,CAAA,CAC5B,KAAOG,CAAM,CAAA,MAAA,EAAQ,CACnB,IAAMtf,CAAAA,CAAMsf,EAAM,GAAI,EAAA,CAEtB,GAAItB,CAAQ,CAAA,aAAA,CAAc,QAAQ,GAAIhe,CAAAA,CAAG,CAAKqf,EAAAA,CAAAA,CAAS,IAAIrf,CAAG,CAAA,CAC5D,SAGF,IAAMqC,CAAAA,CAAO8c,EAAiB,aAAc,CAAA,GAAA,CAAInf,CAAG,CAEnD,CAAA,GAAKqC,GAID,EAAC2b,CAAAA,CAAAA,CAAQ,YAAc3b,CAAK,CAAA,UAAA,CAAA,GAIhCgd,EAAS,GAAIrf,CAAAA,CAAG,CAEZ,CAAA,CAAA,CAACqC,EAAK,YAAa,CAAA,IAAA,CAAA,CAIvB,QAAWmd,CAAcnd,IAAAA,CAAAA,CAAK,aAAc,CAC1C,GAAM,CAAE,SAAA6U,CAAAA,CAAU,EAAI2G,CAAgB2B,CAAAA,CAAU,EAChD,OAAQtI,CAAAA,EACN,KAAK,MAAA,CAAQ,CACP8G,CAAAA,CAAQ,cAAc,OAAQ,CAAA,GAAA,CAAIwB,CAAU,CAC9CH,CAAAA,CAAAA,CAAS,OAAOrf,CAAG,CAAA,CACTqf,EAAS,GAAIG,CAAAA,CAAU,GACjCF,CAAM,CAAA,IAAA,CAAKE,CAAU,CAEvB,CAAA,KACF,CACA,KAAK,QAAA,CAAU,CACTxB,CAAAA,CAAQ,QAAQ,OAAQ,CAAA,GAAA,CAAIwB,CAAU,CACxCH,CAAAA,CAAAA,CAAS,OAAOrf,CAAG,CAAA,CACTof,EAAQ,GAAII,CAAAA,CAAU,GAChCJ,CAAQ,CAAA,GAAA,CAAII,CAAU,CAExB,CAAA,KACF,CACF,CACF,CACF,CACA,OAAO,CAAE,aAAeH,CAAAA,CAAS,CACnC,CAKMM,CAAAA,EAAAA,CAAmB,CAAC,CACxB,OAAA,CAAA3B,EACA,gBAAAmB,CAAAA,CAAAA,CACA,QAAAC,CACF,CAAA,GAMK,CACH,IAAMC,CAAAA,CAAW,IAAI,GAIfC,CAAAA,CAAAA,CAAQ,CAAC,GAHItB,EAAQ,SAAU,CAAA,OAAA,CAAQ,KACzCA,CAAQ,CAAA,SAAA,CAAU,QAClB,IAAI,GAAA,CAAImB,EAAiB,SAAU,CAAA,IAAA,EAAM,CACjB,CAAA,CAC5B,KAAOG,CAAM,CAAA,MAAA,EAAQ,CACnB,IAAMtf,CAAAA,CAAMsf,CAAM,CAAA,GAAA,GAElB,GAAItB,CAAAA,CAAQ,UAAU,OAAQ,CAAA,GAAA,CAAIhe,CAAG,CAAKqf,EAAAA,CAAAA,CAAS,IAAIrf,CAAG,CAAA,CACxD,SAGF,IAAMqC,CAAAA,CAAO8c,EAAiB,SAAU,CAAA,GAAA,CAAInf,CAAG,CAE/C,CAAA,GAAKqC,CAID,EAAA,EAAA,CAAC2b,EAAQ,UAAc3b,EAAAA,CAAAA,CAAK,cAIhCgd,CAAS,CAAA,GAAA,CAAIrf,CAAG,CAEZ,CAAA,CAAA,CAACqC,EAAK,YAAa,CAAA,IAAA,CAAA,CAIvB,QAAWmd,CAAcnd,IAAAA,CAAAA,CAAK,aAAc,CAC1C,GAAM,CAAE,SAAA6U,CAAAA,CAAU,CAAI2G,CAAAA,CAAAA,CAAgB2B,CAAU,CAChD,CAAA,OAAQtI,GACN,KAAK,OAAQ,CACP8G,CAAAA,CAAQ,cAAc,OAAQ,CAAA,GAAA,CAAIwB,CAAU,CAC9CH,CAAAA,CAAAA,CAAS,OAAOrf,CAAG,CAAA,CACTqf,EAAS,GAAIG,CAAAA,CAAU,CACjCF,EAAAA,CAAAA,CAAM,KAAKE,CAAU,CAAA,CAEvB,KACF,CACA,KAAK,SAAU,CACTxB,CAAAA,CAAQ,QAAQ,OAAQ,CAAA,GAAA,CAAIwB,CAAU,CACxCH,CAAAA,CAAAA,CAAS,OAAOrf,CAAG,CAAA,CACTof,EAAQ,GAAII,CAAAA,CAAU,CAChCJ,EAAAA,CAAAA,CAAQ,IAAII,CAAU,CAAA,CAExB,KACF,CACF,CACF,CACF,CACA,OAAO,CAAE,SAAWH,CAAAA,CAAS,CAC/B,CAKMO,CAAAA,EAAAA,CAAiB,CAAC,CACtB,OAAA,CAAA5B,EACA,gBAAAmB,CAAAA,CACF,CAKK,GAAA,CACH,IAAME,CAAW,CAAA,IAAI,IAIfC,CAAQ,CAAA,CAAC,GAHItB,CAAQ,CAAA,OAAA,CAAQ,QAAQ,IACvCA,CAAAA,CAAAA,CAAQ,QAAQ,OAChB,CAAA,IAAI,IAAImB,CAAiB,CAAA,OAAA,CAAQ,MAAM,CACf,CAC5B,CAAA,KAAOG,EAAM,MAAQ,EAAA,CACnB,IAAMtf,CAAMsf,CAAAA,CAAAA,CAAM,KAElB,CAAA,GAAItB,EAAQ,OAAQ,CAAA,OAAA,CAAQ,IAAIhe,CAAG,CAAA,EAAKqf,EAAS,GAAIrf,CAAAA,CAAG,EACtD,SAGF,IAAMqC,CAAO8c,CAAAA,CAAAA,CAAiB,QAAQ,GAAInf,CAAAA,CAAG,EAE7C,GAAKqC,CAAAA,EAID,GAAC2b,CAAQ,CAAA,UAAA,EAAc3b,EAAK,UAIhCgd,CAAAA,GAAAA,CAAAA,CAAS,IAAIrf,CAAG,CAAA,CAEZ,EAACqC,CAAK,CAAA,YAAA,CAAa,MAIvB,IAAWmd,IAAAA,CAAAA,IAAcnd,CAAK,CAAA,YAAA,CAAc,CAC1C,GAAM,CAAE,UAAA6U,CAAU,CAAA,CAAI2G,EAAgB2B,CAAU,CAAA,CAChD,OAAQtI,CAAW,EACjB,KAAK,QAAU,CAAA,CAEX,CAACmI,CAAS,CAAA,GAAA,CAAIG,CAAU,CACxB,EAAA,CAACxB,CAAQ,CAAA,OAAA,CAAQ,QAAQ,GAAIwB,CAAAA,CAAU,GAEvCF,CAAM,CAAA,IAAA,CAAKE,CAAU,CAEvB,CAAA,KACF,CACF,CACF,CACF,CACA,OAAO,CAAE,QAASH,CAAS,CAC7B,EAKMQ,EAAyB,CAAA,CAAC,CAC9B,OAAA,CAAA7B,EACA,UAAAhY,CAAAA,CAAAA,CACA,iBAAAmZ,CACF,CAAA,GAIY,CACV,GAAKnB,CAAAA,CAAQ,WAAW,OAAQ,CAAA,IAAA,CAIhC,QAAWhe,CAAOgG,IAAAA,CAAAA,CAAY,CAC5B,IAAM3D,CAAAA,CAAO8c,EAAiB,UAAW,CAAA,GAAA,CAAInf,CAAG,CAAA,CAEhD,GAAKqC,CAAM,EAAA,YAAA,CAAa,MAIxB,IAAWyd,IAAAA,CAAAA,IAAe9B,EAAQ,UAAW,CAAA,OAAA,CAC3C,GAAI3b,CAAK,CAAA,YAAA,CAAa,IAAIyd,CAAW,CAAA,CAAG,CACtC9Z,CAAW,CAAA,MAAA,CAAOhG,CAAG,CACrB,CAAA,KACF,CAEJ,CAAA,CACF,EAKM+f,EAA4B,CAAA,CAAC,CACjC,OAAA/B,CAAAA,CAAAA,CACA,cAAAkB,CACA,CAAA,gBAAA,CAAAC,CACF,CAIY,GAAA,CACV,GAAKnB,CAAQ,CAAA,aAAA,CAAc,QAAQ,IAInC,CAAA,IAAA,IAAWhe,KAAOkf,CAAe,CAAA,CAC/B,IAAM7c,CAAAA,CAAO8c,EAAiB,aAAc,CAAA,GAAA,CAAInf,CAAG,CAEnD,CAAA,GAAKqC,GAAM,YAAa,CAAA,IAAA,CAAA,CAIxB,QAAWyd,CAAe9B,IAAAA,CAAAA,CAAQ,cAAc,OAC9C,CAAA,GAAI3b,EAAK,YAAa,CAAA,GAAA,CAAIyd,CAAW,CAAG,CAAA,CACtCZ,CAAc,CAAA,MAAA,CAAOlf,CAAG,CACxB,CAAA,KACF,EAEJ,CACF,CAAA,CAKMggB,GAAwB,CAAC,CAC7B,QAAAhC,CACA,CAAA,gBAAA,CAAAmB,EACA,SAAA1C,CAAAA,CACF,IAIY,CACV,GAAKuB,EAAQ,SAAU,CAAA,OAAA,CAAQ,IAI/B,CAAA,IAAA,IAAWhe,KAAOyc,CAAW,CAAA,CAC3B,IAAMpa,CAAO8c,CAAAA,CAAAA,CAAiB,UAAU,GAAInf,CAAAA,CAAG,EAE/C,GAAKqC,CAAAA,EAAM,aAAa,IAIxB,CAAA,CAAA,IAAA,IAAWyd,KAAe9B,CAAQ,CAAA,SAAA,CAAU,QAC1C,GAAI3b,CAAAA,CAAK,YAAa,CAAA,GAAA,CAAIyd,CAAW,CAAG,CAAA,CACtCrD,EAAU,MAAOzc,CAAAA,CAAG,EACpB,KACF,CAAA,CAEJ,CACF,CAKMigB,CAAAA,EAAAA,CAAsB,CAAC,CAC3B,OAAA,CAAAjC,EACA,gBAAAmB,CAAAA,CAAAA,CACA,QAAAC,CACF,CAAA,GAIY,CACV,GAAKpB,EAAQ,OAAQ,CAAA,OAAA,CAAQ,KAI7B,IAAWhe,IAAAA,CAAAA,IAAOof,EAAS,CACzB,IAAM/c,EAAO8c,CAAiB,CAAA,OAAA,CAAQ,IAAInf,CAAG,CAAA,CAE7C,GAAKqC,CAAM,EAAA,YAAA,CAAa,MAIxB,IAAWyd,IAAAA,CAAAA,IAAe9B,CAAQ,CAAA,OAAA,CAAQ,QACxC,GAAI3b,CAAAA,CAAK,aAAa,GAAIyd,CAAAA,CAAW,EAAG,CACtCV,CAAAA,CAAQ,OAAOpf,CAAG,CAAA,CAClB,KACF,CAEJ,CAAA,CACF,EAEMkgB,EAAc,CAAA,CAAC,CACnB,qBAAAC,CAAAA,CAAAA,CACA,UAAAna,CAAAA,CAAAA,CACA,cAAAkZ,CACA,CAAA,SAAA,CAAAzC,EACA,OAAA2C,CAAAA,CACF,IAMM,CACJ,IAAA,IAAWpf,KAAOof,CACXe,CAAAA,CAAAA,CAAsB,IAAIngB,CAAG,CAAA,EAChCof,EAAQ,MAAOpf,CAAAA,CAAG,EAGtB,IAAWA,IAAAA,CAAAA,IAAOgG,CACXma,CAAAA,CAAAA,CAAsB,IAAIngB,CAAG,CAAA,EAChCgG,EAAW,MAAOhG,CAAAA,CAAG,EAGzB,IAAWA,IAAAA,CAAAA,IAAOkf,EACXiB,CAAsB,CAAA,GAAA,CAAIngB,CAAG,CAChCkf,EAAAA,CAAAA,CAAc,OAAOlf,CAAG,CAAA,CAG5B,QAAWA,CAAOyc,IAAAA,CAAAA,CACX0D,CAAsB,CAAA,GAAA,CAAIngB,CAAG,CAChCyc,EAAAA,CAAAA,CAAU,OAAOzc,CAAG,EAG1B,EAEMogB,EAA+B,CAAA,CAAC,CACpC,UAAAC,CAAAA,CAAAA,CACA,iBAAAlB,CACF,CAAA,GAKK,CACH,IAAME,CAAAA,CAAW,IAAI,GAMfC,CAAAA,CAAAA,CAAQ,CAAC,GALI,IAAI,GACrB,CAAA,CAAC,GAAGe,CAAU,CAAA,CAAE,QAASrgB,CAAQ,EAAA,CAC/B,GAAImf,CAAiB,CAAA,UAAA,CAAW,IAAInf,CAAG,CAAA,EAAG,cAAgB,EAC5D,CAAC,CACH,CAC4B,CAC5B,CAAA,KAAOsf,EAAM,MAAQ,EAAA,CACnB,IAAMtf,CAAMsf,CAAAA,CAAAA,CAAM,KAElB,CAAA,GAAID,EAAS,GAAIrf,CAAAA,CAAG,EAClB,SAGFqf,CAAAA,CAAS,IAAIrf,CAAG,CAAA,CAEhB,GAAM,CAAE,SAAA,CAAAkX,CAAU,CAAA,CAAI2G,EAAgB7d,CAAG,CAAA,CACrCsgB,EAaJ,GAZIpJ,CAAAA,GAAc,OAChBoJ,CAAenB,CAAAA,CAAAA,CAAiB,cAAc,GAAInf,CAAAA,CAAG,GAAG,YAC/CkX,CAAAA,CAAAA,GAAc,YACvBoJ,CAAenB,CAAAA,CAAAA,CAAiB,WAAW,GAAInf,CAAAA,CAAG,CAAG,EAAA,YAAA,CAC5CkX,IAAc,WACvBoJ,CAAAA,CAAAA,CAAenB,EAAiB,UAAW,CAAA,GAAA,CAAInf,CAAG,CAAG,EAAA,YAAA,CAC5CkX,IAAc,UACvBoJ,CAAAA,CAAAA,CAAenB,EAAiB,SAAU,CAAA,GAAA,CAAInf,CAAG,CAAG,EAAA,YAAA,CAC3CkX,IAAc,QACvBoJ,GAAAA,CAAAA,CAAenB,CAAiB,CAAA,OAAA,CAAQ,IAAInf,CAAG,CAAA,EAAG,cAGhD,CAACsgB,CAAAA,CAAAA,EAAc,KAInB,IAAWd,IAAAA,CAAAA,IAAcc,EAClBjB,CAAS,CAAA,GAAA,CAAIG,CAAU,CAC1BF,EAAAA,CAAAA,CAAM,KAAKE,CAAU,EAG3B,CACA,OAAO,CAAE,qBAAuBH,CAAAA,CAAS,CAC3C,CAEakB,CAAAA,EAAAA,CAA6B,CAAC,CACzC,OAAA,CAAAvC,EACA,gBAAAmB,CAAAA,CACF,IASK,CACH,GAAM,CAAE,OAAAC,CAAAA,CAAQ,EAAIQ,EAAe,CAAA,CAAE,QAAA5B,CAAS,CAAA,gBAAA,CAAAmB,CAAiB,CAAC,EAC1D,CAAE,UAAA,CAAAnZ,CAAW,CAAIyZ,CAAAA,EAAAA,CAAkB,CACvC,OAAAzB,CAAAA,CAAAA,CACA,iBAAAmB,CACA,CAAA,OAAA,CAAAC,CACF,CAAC,CAAA,CACK,CAAE,aAAAF,CAAAA,CAAc,EAAIQ,EAAqB,CAAA,CAC7C,OAAA1B,CAAAA,CAAAA,CACA,iBAAAmB,CACA,CAAA,OAAA,CAAAC,CACF,CAAC,CAAA,CACK,CAAE,SAAA3C,CAAAA,CAAU,EAAIkD,EAAiB,CAAA,CACrC,QAAA3B,CACA,CAAA,gBAAA,CAAAmB,EACA,OAAAC,CAAAA,CACF,CAAC,CAEDa,CAAAA,EAAAA,CAAoB,CAAE,OAAA,CAAAjC,EAAS,gBAAAmB,CAAAA,CAAAA,CAAkB,QAAAC,CAAQ,CAAC,EAC1DS,EAAuB,CAAA,CAAE,QAAA7B,CAAS,CAAA,UAAA,CAAAhY,EAAY,gBAAAmZ,CAAAA,CAAiB,CAAC,CAChEY,CAAAA,EAAAA,CAA0B,CAAE,OAAA/B,CAAAA,CAAAA,CAAS,aAAAkB,CAAAA,CAAAA,CAAe,iBAAAC,CAAiB,CAAC,EACtEa,EAAsB,CAAA,CAAE,QAAAhC,CAAS,CAAA,gBAAA,CAAAmB,EAAkB,SAAA1C,CAAAA,CAAU,CAAC,CAG9D,CAAA,GAAM,CAAE,UAAA4D,CAAAA,CAAW,EAAIpB,EAAkB,CAAA,CACvC,OAAAjB,CAAAA,CAAAA,CACA,WAAAhY,CACA,CAAA,aAAA,CAAAkZ,EACA,gBAAAC,CAAAA,CAAAA,CACA,UAAA1C,CACA,CAAA,OAAA,CAAA2C,CACF,CAAC,CAAA,CAED,GAAI,CAACpB,CAAAA,CAAQ,SAAWqC,CAAW,CAAA,IAAA,CAAM,CACvC,GAAM,CAAE,qBAAAF,CAAAA,CAAsB,EAAIC,EAA6B,CAAA,CAC7D,WAAAC,CACA,CAAA,gBAAA,CAAAlB,CACF,CAAC,CAAA,CACDe,GAAY,CACV,qBAAA,CAAAC,EACA,UAAAna,CAAAA,CAAAA,CACA,cAAAkZ,CACA,CAAA,SAAA,CAAAzC,EACA,OAAA2C,CAAAA,CACF,CAAC,EACH,CAEA,OAAO,CACL,WAAAiB,CACA,CAAA,UAAA,CAAAra,EACA,aAAAkZ,CAAAA,CAAAA,CACA,UAAAzC,CACA,CAAA,OAAA,CAAA2C,CACF,CACF,CAAA,CCj8BO,IAAMoB,EACXC,CAAAA,CAAAA,EAGG,CACH,IAAMtB,CAAAA,CAAqC,CACzC,UAAA,CAAY,IAAI,GAChB,CAAA,UAAA,CAAY,IAAI,GAChB,CAAA,aAAA,CAAe,IAAI,GACnB,CAAA,SAAA,CAAW,IAAI,GACf,CAAA,OAAA,CAAS,IAAI,GACf,CAAA,CAEMuB,EAAmBlP,CAAiC,EAAA,CACxD,IAAM8O,CAAe,CAAA,IAAI,GACnBK,CAAAA,CAAAA,CAAWF,EAAM,eAAgB,CAAA,GAAA,CAAIjP,CAAO,CAClD,CAAA,GAAImP,GAAU,IACZ,CAAA,IAAA,IAAWC,KAAOD,CAAU,CAAA,CAC1B,IAAMzT,CAAOkE,CAAAA,EAAAA,CAAkBwP,CAAG,CAC5B1d,CAAAA,CAAAA,CAAOgK,EAAKA,CAAK,CAAA,MAAA,CAAS,CAAC,CAAA,CAC3B/O,EAAO+O,CAAKA,CAAAA,CAAAA,CAAK,OAAS,CAAC,CAAA,CACjC,GAAIhK,CAAQ/E,EAAAA,CAAAA,CAAM,CAChB,IAAM+Y,CAAAA,CAAY4G,GAAkB5a,CAAI,CAAA,CACpCgU,IAAc,SAChB,EAAA,OAAA,CAAQ,KAAK,CAAqBhU,kBAAAA,EAAAA,CAAI,CAAE,CAAA,CAAA,CAE1Cod,EAAa,GAAI1C,CAAAA,CAAAA,CAAa1G,EAAW/Y,CAAI,CAAC,EAChD,CACF,CAEF,OAAOmiB,CACT,CAAA,CAGA,OAAW,CAAC9O,CAAAA,CAASqP,CAAQ,CAAKJ,GAAAA,CAAAA,CAAM,MAAO,CAE7C,IAAMvT,CAAOkE,CAAAA,EAAAA,CAAkBI,CAAO,CAGtC,CAAA,GAAItE,EAAK,CAAC,CAAA,GAAM,aAAc,CAC5B,GAAIA,EAAK,MAAW,GAAA,CAAA,CAAA,CAClB,GAAIA,CAAK,CAAA,CAAC,IAAM,SAAW,CAAA,CAEzB,IAAM/O,CAAO+O,CAAAA,CAAAA,CAAKA,CAAK,CAAA,MAAA,CAAS,CAAC,CACjCiS,CAAAA,CAAAA,CAAiB,QAAQ,GAAIvB,CAAAA,CAAAA,CAAa,SAAUzf,CAAI,CAAA,CAAG,CACzD,YAAcuiB,CAAAA,CAAAA,CAAgBlP,CAAO,CACrC,CAAA,UAAA,CAAYqP,EAAS,UAAc,EAAA,KACrC,CAAC,EACH,CAAA,KAAA,GAAW3T,CAAK,CAAA,CAAC,IAAM,YAAc,CAAA,CAEnC,IAAM/O,CAAO+O,CAAAA,CAAAA,CAAKA,EAAK,MAAS,CAAA,CAAC,EACjCiS,CAAiB,CAAA,UAAA,CAAW,IAAIvB,CAAa,CAAA,WAAA,CAAazf,CAAI,CAAG,CAAA,CAC/D,aAAcuiB,CAAgBlP,CAAAA,CAAO,CACrC,CAAA,UAAA,CAAYqP,EAAS,UAAc,EAAA,KACrC,CAAC,EACH,CAAA,KAAA,GAAW3T,EAAK,CAAC,CAAA,GAAM,gBAAiB,CAEtC,IAAM/O,EAAO+O,CAAKA,CAAAA,CAAAA,CAAK,OAAS,CAAC,CAAA,CACjCiS,EAAiB,aAAc,CAAA,GAAA,CAAIvB,CAAa,CAAA,MAAA,CAAQzf,CAAI,CAAG,CAAA,CAC7D,aAAcuiB,CAAgBlP,CAAAA,CAAO,EACrC,UAAYqP,CAAAA,CAAAA,CAAS,YAAc,KACrC,CAAC,EACH,CAAW3T,KAAAA,GAAAA,CAAAA,CAAK,CAAC,CAAM,GAAA,WAAA,CAAa,CAElC,IAAM/O,CAAAA,CAAO+O,CAAKA,CAAAA,CAAAA,CAAK,OAAS,CAAC,CAAA,CACjCiS,EAAiB,SAAU,CAAA,GAAA,CAAIvB,EAAa,UAAYzf,CAAAA,CAAI,EAAG,CAC7D,YAAA,CAAcuiB,EAAgBlP,CAAO,CAAA,CACrC,WAAYqP,CAAS,CAAA,UAAA,EAAc,KACrC,CAAC,EACH,CAEF,CAAA,QACF,CAEA,GAAI3T,CAAAA,CAAK,CAAC,CAAM,GAAA,OAAA,CAAS,CACvB,GACEA,CAAAA,CAAK,SAAW,CAChBqQ,EAAAA,CAAAA,CAAY,SAASrQ,CAAK,CAAA,CAAC,CAAiC,CAC5D,CAAA,CAEA,IAAM+M,CAAS/M,CAAAA,CAAAA,CAAKA,CAAK,CAAA,MAAA,CAAS,CAAC,CAC7B4T,CAAAA,CAAAA,CAAgB5T,EAAK,KAAM,CAAA,CAAA,CAAG,EAAE,CAAE,CAAA,IAAA,CAAK,GAAG,CAC1C6T,CAAAA,CAAAA,CAAe/E,EAAmB,CACtC,MAAA,CAAA/B,EACA,IAAM6G,CAAAA,CACR,CAAC,CACD3B,CAAAA,CAAAA,CAAiB,UAAW,CAAA,GAAA,CAC1BvB,EAAa,WAAamD,CAAAA,CAAY,EACtC,CACE,YAAA,CAAcL,EAAgBlP,CAAO,CAAA,CACrC,WAAYqP,CAAS,CAAA,UAAA,EAAc,MACnC,IAAMA,CAAAA,CAAAA,CAAS,MAAQ,IAAI,GAC7B,CACF,EACF,CACA,QACF,CAGA,GAAI3T,CAAK,CAAA,CAAC,IAAM,aAAe,CAAA,CAC7B,GAAIA,CAAK,CAAA,MAAA,GAAW,EAAG,CAErB,IAAM/O,EAAO+O,CAAKA,CAAAA,CAAAA,CAAK,OAAS,CAAC,CAAA,CACjCiS,EAAiB,OAAQ,CAAA,GAAA,CAAIvB,CAAa,CAAA,QAAA,CAAUzf,CAAI,CAAG,CAAA,CACzD,aAAcuiB,CAAgBlP,CAAAA,CAAO,EACrC,UAAYqP,CAAAA,CAAAA,CAAS,YAAc,KACrC,CAAC,EACH,CACA,QACF,CACF,CAEA,OAAO,CAAE,gBAAA1B,CAAAA,CAAiB,CAC5B,CAAA,CC/JO,IAAM6B,EAAY,CAAA,CAAC,CACxB,MAAAhjB,CAAAA,CAAAA,CACA,KAAAG,CACF,CAAA,IAOM,OAAOH,CAAO,CAAA,IAAA,EAAS,WACzBG,CAAOH,CAAAA,CAAAA,CAAO,KAAKG,CAAI,CAAA,CAEvBA,EAAOH,CAAO,CAAA,IAAA,CAAK,OAAQ,CAAA,UAAA,CAAYG,CAAI,CAGtCoV,CAAAA,CAAAA,CAAW,CAAE,IAAMvV,CAAAA,CAAAA,CAAO,KAAM,KAAOG,CAAAA,CAAK,CAAC,CCnB/C,CAAA,CAAA,IAAM8iB,GAA2B,CACtC,CAAC,uBAAwB,QAAQ,CAAA,CACjC,CAAC,OAAS,CAAA,OAAO,CACjB,CAAA,CAAC,QAAS,OAAO,CAAA,CACjB,CAAC,UAAY,CAAA,QAAQ,EACrB,CAAC,kBAAA,CAAoB,WAAW,CAChC,CAAA,CAAC,OAAQ,QAAQ,CAAA,CACjB,CAAC,IAAM,CAAA,QAAQ,EACf,CAAC,OAAA,CAAS,eAAe,CAAA,CACzB,CAAC,OAAS,CAAA,OAAO,EACjB,CAAC,mBAAA,CAAqB,WAAW,CACjC,CAAA,CAAC,aAAc,WAAW,CAAA,CAC1B,CAAC,eAAiB,CAAA,QAAQ,EAC1B,CAAC,MAAA,CAAQ,QAAQ,CACnB,CAAA,CCdO,IAAMC,EAAAA,CACXlP,GACwC,CACxC,GAAImP,GAA2BnP,CAAI,CAAA,CACjC,OAAQA,CAAa,CAAA,UAAA,CAAW,QAElC,GAAIoP,EAAAA,CAAqBpP,CAAI,CAC3B,CAAA,OAAQA,EAAa,WAGzB,CAAA,CAMamP,GAA8BnP,CACzC,EAAA,OAAOA,CAAS,EAAA,QAAA,EAChBA,IAAS,IACT,EAAA,YAAA,GAAgBA,GAChB,OAAQA,CAAAA,CAAa,YAAe,QACnCA,EAAAA,CAAAA,CAAa,aAAe,IAC7B,EAAA,SAAA,GAAcA,EAAa,UAC3B,EAAA,OAAQA,EAAa,UAAW,CAAA,OAAA,EAAY,UAC3CA,CAAa,CAAA,UAAA,CAAW,OAAY,GAAA,IAAA,CAM1BoP,GAAwBpP,CACnC,EAAA,OAAOA,GAAS,QAChBA,EAAAA,CAAAA,GAAS,MACT,aAAiBA,GAAAA,CAAAA,EACjB,OAAQA,CAAa,CAAA,WAAA,EAAgB,UACpCA,CAAa,CAAA,WAAA,GAAgB,KC9BhC,IAAMqP,EAAAA,CAAU,CAACpZ,CAAUhI,CAAAA,CAAAA,GACrBgI,CAAe,YAAA,GAAA,CACVA,EAAI,GAAIhI,CAAAA,CAAK,EAElBgI,CAAe,YAAA,KAAA,CACVA,EAAI,QAAShI,CAAAA,CAAK,EAEpBA,CAASgI,IAAAA,CAAAA,CAGLqZ,GAAyB,CAAC,CACrC,KAAMC,CACN,CAAA,UAAA,CAAAC,EACA,eAAAC,CAAAA,CACF,CAUc,GAAA,CACZ,IAAIrd,CAAQ,CAAA,CAAA,CAENS,EAAO0c,CAAM,CAAA,OAAA,CAAQ,OAAQ,EAAE,CAAA,CACjCpjB,EAAO0G,CACX,CAAA,KACEwc,GAAQG,CAAYrjB,CAAAA,CAAI,GACvBsjB,CAAmBJ,EAAAA,EAAAA,CAAQI,EAAiBtjB,CAAI,CAAA,EAEjDA,CAAO,CAAA,CAAA,EAAG0G,CAAI,CAAGT,EAAAA,CAAK,GACtBA,CAAS,EAAA,CAAA,CAEX,OAAOjG,CACT,CAAA,CAEaujB,GAAoBxU,CAC9BA,EAAAA,CAAAA,CAAK,SAAW,CAAKA,EAAAA,CAAAA,CAAK,CAAC,CAAM,GAAA,YAAA,EAAgBA,EAAK,CAAC,CAAA,GAAM,SAC7DA,EAAAA,CAAAA,CAAK,SAAW,CAAKA,EAAAA,CAAAA,CAAK,CAAC,CAAM,GAAA,aAAA,CAEvByU,GAAiC3P,CAA0B,EAAA,CACtE,GAAIA,CAAQ,EAAA,OAAOA,GAAS,QAAU,CAAA,CACpC,GAAI,SAAaA,GAAAA,CAAAA,CAEf,OAAO,gBAGT,CAAA,GAAI,SAAaA,GAAAA,CAAAA,CAEf,OAAO,uBAEX,CAEA,OAAO,EACT,CAAA,CCzCA,IAAM4P,EAAoB1L,CAAAA,CAAAA,EAAwC,CAChE,GACE,CAACA,GACD,OAAOA,CAAAA,EAAW,UAClB,EAAE,MAAA,GAAUA,IACZ,EAAEA,CAAAA,CAAO,IAAgB,YAAA,KAAA,CAAA,CAEzB,OAGF,IAAMhT,CAAAA,CAAAA,CAAQ,SAAUgT,CAASA,CAAAA,CAAAA,CAAO,KAAO,MAAc,GAAA,EAAA,CACvD5G,EAAS,CAAC,GAAG4G,EAAO,IAAI,CAAA,CAAE,MAChC,CAAA,OAAO,KAAK,SAAU,CAAA,CAAE,IAAAhT,CAAAA,CAAAA,CAAM,OAAAoM,CAAO,CAAC,CACxC,CAmBMuS,CAAAA,EAAAA,CAAc,CAAC,CACnB,GAAA,CAAA7hB,EACA,IAAAqC,CAAAA,CAAAA,CACA,OAAAyf,CACA,CAAA,IAAA,CAAA5U,EACA,OAAA6U,CAAAA,CACF,IAEM,CACJ,GAAI,CAAC1f,CAAAA,EAAQ,OAAOA,CAAS,EAAA,QAAA,EAAYA,aAAgB,KAAO,CAAA,OAEhE,IAAMpC,CAAQoC,CAAAA,CAAAA,CAAAA,CAGZ,SAAUpC,CACV,EAAA,MAAA,GAAUA,GACVghB,EAAyB,CAAA,IAAA,CAAK,CAAC,CAACre,CAAO,IAAMA,CAAW3C,IAAAA,CAAK,CAE7D8hB,GAAAA,CAAAA,CAAQ,CAAE,GAAA/hB,CAAAA,CAAAA,CAAK,KAAAqC,CAAM,CAAA,MAAA,CAAAyf,EAAQ,IAAA5U,CAAAA,CAAK,CAAC,CAGrC,CAAA,IAAA,GAAW,CAAC8U,CAAGC,CAAAA,CAAC,IAAK,MAAO,CAAA,OAAA,CAAQhiB,CAAK,CACnC,CAAA,OAAOgiB,CAAM,EAAA,QAAA,EAAYA,IAAM,IAC7BA,GAAAA,CAAAA,YAAa,MACfA,CAAE,CAAA,OAAA,CAAQ,CAACvX,CAAMtG,CAAAA,CAAAA,GACfyd,GAAY,CACV,GAAA,CAAKzd,EACL,IAAMsG,CAAAA,CAAAA,CACN,OAAQuX,CACR,CAAA,IAAA,CAAM,CAAC,GAAG/U,CAAAA,CAAM8U,CAAG5d,CAAAA,CAAK,EACxB,OAAA2d,CAAAA,CACF,CAAC,CACH,CAAA,CAEAF,GAAY,CACV,GAAA,CAAKG,EACL,IAAMC,CAAAA,CAAAA,CACN,OAAQ5f,CACR,CAAA,IAAA,CAAM,CAAC,GAAG6K,CAAAA,CAAM8U,CAAC,CACjB,CAAA,OAAA,CAAAD,CACF,CAAC,GAIT,CAQMG,CAAAA,EAAAA,CAAa,CAAC,CAAE,IAAA,CAAAlQ,CAAK,CAAyB,GAAA,CAClD,IAAMmQ,CAAajB,CAAAA,EAAAA,CAAiBlP,CAAI,CACxC,CAAA,GAAI,CAACmQ,CACH,CAAA,OAGF,IAAMC,CAA0BT,CAAAA,EAAAA,CAA8B3P,CAAI,CAAA,CAG5DqQ,EAAqC,EAAC,CAC5C,OAAW,CAAClkB,CAAAA,CAAM+X,CAAM,CAAK,GAAA,MAAA,CAAO,QAAQiM,CAAU,CAAA,CAClCP,GAAiB1L,CAAM,CAAA,GAEvCmM,EAAU,CAAGD,EAAAA,CAAuB,GAAGjkB,CAAI,CAAA,CAAE,CAAI+X,CAAAA,CAAAA,CAAAA,CAKrD,IAAMoM,CAAmBjgB,CAAAA,CAAAA,EAAkB,CACzC,GAAIA,CAAAA,YAAgB,MAClBA,CAAK,CAAA,OAAA,CAAQigB,CAAe,CACnBjgB,CAAAA,KAAAA,GAAAA,CAAAA,EAAQ,OAAOA,CAAS,EAAA,QAAA,CACjC,OAAW,CAAC2f,CAAAA,CAAGC,CAAC,CAAK,GAAA,MAAA,CAAO,OAAQ5f,CAAAA,CAAI,EAClC2f,CAAM,GAAA,MAAA,EAAU,OAAOC,CAAM,EAAA,QAAA,EAAYA,KAAKI,CAEhD,EAAA,MAAA,CAAO,OAAOhgB,CAAMiZ,CAAAA,EAAAA,CAAU+G,EAAUJ,CAAC,CAAC,CAAC,CAC3C,CAAA,OAAQ5f,EAAiC,IAEzCigB,EAAAA,CAAAA,CAAgBL,CAAC,EAIzB,EACAK,CAAgBtQ,CAAAA,CAAI,EAGpB,IAAWR,IAAAA,CAAAA,IAAW,OAAO,IAAK6Q,CAAAA,CAAS,EAAG,CAC5C,IAAMnV,EAAOkE,EAAkBI,CAAAA,CAAO,EAChCrT,CAAO+O,CAAAA,CAAAA,CAAKA,EAAK,MAAS,CAAA,CAAC,CAC7B/O,CAAAA,CAAAA,EACF,OAAOgkB,CAAWhkB,CAAAA,CAAI,EAE1B,CACF,CAAA,CAYMokB,GAAW,CAAC,CAAE,OAAAvkB,CAAQ,CAAA,IAAA,CAAAgU,CAAK,CAA8C,GAAA,CAC7E,IAAMmQ,CAAajB,CAAAA,EAAAA,CAAiBlP,CAAI,CACxC,CAAA,GAAI,CAACmQ,CAAAA,CACH,OAIF,IAAMK,CAAAA,CAA6C,EACnD,CAAA,IAAA,GAAW,CAACrkB,CAAM+X,CAAAA,CAAM,IAAK,MAAO,CAAA,OAAA,CAAQiM,CAAU,CAAG,CAAA,CACvD,IAAMrT,CAAY8S,CAAAA,EAAAA,CAAiB1L,CAAM,CACrCpH,CAAAA,CAAAA,GACF0T,CAAmB1T,CAAAA,CAAS,EAAI3Q,CAEpC,EAAA,CAGA,IAAMskB,CAMD,CAAA,GAELZ,EAAY,CAAA,CACV,IAAK,IACL,CAAA,IAAA,CAAM7P,EACN,MAAQ,CAAA,IAAA,CACR,KAAM,EAAC,CACP,QAAU6O,CAAa,EAAA,CACrB,GAAI,CAACa,GAAiBb,CAAS,CAAA,IAAI,EAAG,CACpC,IAAM/R,EAAY8S,EAAiBf,CAAAA,CAAAA,CAAS,IAAI,CAC5C/R,CAAAA,CAAAA,EACF2T,EAAY,IAAK,CAAA,CAAE,GAAG5B,CAAU,CAAA,SAAA,CAAA/R,CAAU,CAAC,EAE/C,CACF,CACF,CAAC,CAGD,CAAA,IAAM4T,EAAsD,EAAC,CACvDC,EAA6C,EAAC,CAEpD,OAAW,CAAE,GAAA,CAAA3iB,EAAK,IAAAqC,CAAAA,CAAAA,CAAM,UAAAyM,CAAU,CAAA,GAAK2T,EAAa,CAClD,GAAI3T,CAAa4T,IAAAA,CAAAA,CAEf,SAIF,GAAI5T,CAAAA,IAAa0T,EAAoB,CACnCE,CAAAA,CAAgB5T,CAAS,CAAI0T,CAAAA,CAAAA,CAAmB1T,CAAS,CACzD,CAAA,QACF,CAGA,IAAMjK,CAAAA,CAAOmc,GAAU,CACrB,MAAA,CAAAhjB,EACA,IACE,CAAA,OAAOqE,CAAS,EAAA,QAAA,EAChBA,GACA,OAAWA,GAAAA,CAAAA,EACX,OAAOA,CAAK,CAAA,KAAA,EAAU,SAClBA,CAAK,CAAA,KAAA,CACL,OAAOrC,CAAG,CAClB,CAAC,CACK7B,CAAAA,CAAAA,CAAOmjB,GAAuB,CAClC,IAAA,CAAAzc,EACA,UAAYsd,CAAAA,CAAAA,CACZ,eAAiB,CAAA,MAAA,CAAO,OAAOO,CAAe,CAChD,CAAC,CACDA,CAAAA,CAAAA,CAAgB5T,CAAS,CAAI3Q,CAAAA,CAAAA,CAC7BwkB,EAAkB7T,CAAS,CAAA,CAAIzM,EACjC,CAGA,IAAA,GAAW,CAACyM,CAAW3Q,CAAAA,CAAI,IAAK,MAAO,CAAA,OAAA,CAAQukB,CAAe,CAAA,CAAG,CAE/D,IAAMxM,CAAAA,CAASyM,EAAkB7T,CAAS,CAAA,CACtC3Q,GAAQ,EAAEA,CAAAA,IAAQgkB,IAAejM,CAAU,EAAA,OAAOA,GAAW,QAC/DiM,GAAAA,CAAAA,CAAWhkB,CAAI,CAAI+X,CAAAA,CAAAA,EAEvB,CAGA,IAAMkM,CAAAA,CAA0BT,EAA8B3P,CAAAA,CAAI,EAClE,IAAW,GAAA,CAAE,IAAAhS,CAAK,CAAA,MAAA,CAAA8hB,EAAQ,SAAAhT,CAAAA,CAAU,IAAK2T,CAAa,CAAA,CACpD,IAAMtkB,CAAOukB,CAAAA,CAAAA,CAAgB5T,CAAS,CAClC3Q,CAAAA,CAAAA,EAAQ6B,GAAO,IAAQ8hB,EAAAA,CAAAA,EAAU,OAAOA,CAAAA,EAAW,WACpDA,CAAmC9hB,CAAAA,CAAG,EAAI,CACzC,IAAA,CAAM,GAAGoiB,CAAuB,CAAA,EAAGjkB,CAAI,CACzC,CAAA,CAAA,EAEJ,CACF,CAWaykB,CAAAA,EAAAA,CAAiB,CAAC,CAC7B,MAAA,CAAA5kB,EACA,IAAAgU,CAAAA,CACF,CAGM,GAAA,CACJ,GAAIhU,CAAO,CAAA,IAAA,GAAS,SAAU,CAC5BkkB,EAAAA,CAAW,CAAE,IAAAlQ,CAAAA,CAAK,CAAC,CACnB,CAAA,MACF,CAEA,GAAIhU,CAAAA,CAAO,OAAS,MAAQ,CAAA,CAC1BukB,GAAS,CAAE,MAAA,CAAAvkB,CAAQ,CAAA,IAAA,CAAAgU,CAAK,CAAC,CAAA,CACzB,MACF,CACF,CAAA,CC1NO,IAAM6Q,EAAuBnW,CAAAA,CAAAA,EAAgC,CAClE,IAAW,GAAA,EAAGmU,CAAQ,CAAA,GAAKnU,EACzB,GAAI,CAAAmU,EAAS,MAETA,EAAAA,CAAAA,CAAS,aAAe,CAAA,CAC1B,IAAMiC,CAAapW,CAAAA,CAAAA,CAAM,IAAImU,CAAS,CAAA,aAAa,EAC/CiC,CAAY,EAAA,MAAA,GACdjC,EAAS,MAAS,CAAA,IAAI,IAAIiC,CAAW,CAAA,MAAM,GAE/C,CAEJ,CAAA,CAKMC,GAAmC,CAAC,CACxC,KAAAtC,CAAAA,CAAAA,CACA,QAAAjP,CACA,CAAA,OAAA,CAAAwR,CACF,CAImB,GAAA,CACjB,GAAIA,CAAQ,CAAA,GAAA,CAAIxR,CAAO,CACrB,CAAA,OAAO,IAAI,GAMb,CAAA,GAHAwR,EAAQ,GAAIxR,CAAAA,CAAO,EAGf,CADaiP,CAAAA,CAAM,KAAM,CAAA,GAAA,CAAIjP,CAAO,CAEtC,CAAA,OAAO,IAAI,GAGb,CAAA,IAAMyR,EAAkB,IAAI,GAAA,CAKtB3C,EAAeG,CAAM,CAAA,YAAA,CAAa,IAAIjP,CAAO,CAAA,CACnD,GAAI8O,CACF,CAAA,IAAA,IAAW4C,KAAc5C,CAAc,CAAA,CACrC2C,CAAgB,CAAA,GAAA,CAAIC,CAAU,CAE9B,CAAA,IAAMC,EAAyBJ,EAAiC,CAAA,CAC9D,MAAAtC,CACA,CAAA,OAAA,CAASyC,EACT,OAAAF,CAAAA,CACF,CAAC,CACD,CAAA,IAAA,IAAWpC,KAAOuC,CAChBF,CAAAA,CAAAA,CAAgB,IAAIrC,CAAG,EAE3B,CAIF,IAAA,GAAW,CAACwC,CAAcC,CAAAA,CAAS,IAAK5C,CAAM,CAAA,KAAA,CAC5C,GAAI4C,CAAU,CAAA,aAAA,GAAkB7R,EAAS,CACvC,IAAM2R,EAAyBJ,EAAiC,CAAA,CAC9D,MAAAtC,CACA,CAAA,OAAA,CAAS2C,EACT,OAAAJ,CAAAA,CACF,CAAC,CAAA,CACD,QAAWpC,CAAOuC,IAAAA,CAAAA,CAChBF,EAAgB,GAAIrC,CAAAA,CAAG,EAE3B,CAGF,OAAOqC,CACT,CAcaK,CAAAA,EAAAA,CAAmB7C,GAAuB,CACrD,IAAM8C,EAAwB,IAAI,GAAA,CAChC,MAAM,IAAK9C,CAAAA,CAAAA,CAAM,KAAM,CAAA,OAAA,EAAS,CAC7B,CAAA,MAAA,CAAO,CAAC,EAAGI,CAAQ,CAAMA,GAAAA,CAAAA,CAAS,QAAUA,CAAS,CAAA,MAAA,CAAO,KAAO,CAAC,CAAA,CACpE,IAAI,CAAC,CAACrP,CAAO,CAAMA,GAAAA,CAAO,CAC/B,CAAA,CAaMgS,EAAsB,CAC1BhS,CAAAA,CACAqP,EACAuC,CACG,GAAA,CACCvC,EAAS,aACX0C,EAAAA,CAAAA,CAAS,GAAI1C,CAAAA,CAAAA,CAAS,aAAa,CAErC,CAAA,IAAM4C,EAAsBhD,CAAM,CAAA,mBAAA,CAAoB,IAAIjP,CAAO,CAAA,CACjE,GAAIiS,CAAAA,CACF,QAAWC,CAAoBD,IAAAA,CAAAA,CAC7BF,EAAS,GAAIG,CAAAA,CAAgB,EAGjC,GAAIN,CAAAA,CAAc,CAEhB,IAAMO,CAAAA,CAAuBP,EAAa,KACxC,CAAA,iCACF,EACA,GAAIO,CAAAA,CAAsB,CACxB,IAAMC,CAAAA,CAA0BD,CAAqB,CAAA,CAAC,EAClDC,CACFL,EAAAA,CAAAA,CAAS,IAAIK,CAAuB,EAExC,CACF,CACF,CAAA,CAUMC,EAAuB,CAC3BrS,CAAAA,CACAqP,EACAuC,CACS,GAAA,CACT,GAAI,CAACvC,CAAAA,EAAU,OAAQ,OACvB,IAAMwC,CAAY5C,CAAAA,CAAAA,CAAM,MAAM,GAAI2C,CAAAA,CAAY,EAC9C,GAAI,CAACC,GAAW,MAAQ,CAAA,OACRS,GAAsBT,CAAWxC,CAAAA,CAAQ,GAEvD2C,CAAoBhS,CAAAA,CAAAA,CAASqP,EAAUuC,CAAY,EAEvD,EAEA,KAAOG,CAAAA,CAAS,IAAO,CAAA,CAAA,EAAG,CACxB,IAAM/R,CAAAA,CAAU+R,EAAS,MAAO,EAAA,CAAE,MAAO,CAAA,KAAA,CACzCA,EAAS,MAAO/R,CAAAA,CAAO,EAEvB,IAAMqP,CAAAA,CAAWJ,EAAM,KAAM,CAAA,GAAA,CAAIjP,CAAO,CACxC,CAAA,GAAI,CAACqP,CAAAA,CAAU,SAEVA,CAAS,CAAA,MAAA,GACZA,EAAS,MAAS,CAAA,IAAI,KAGxB,IAAMxe,CAAAA,CAAOwe,EAAS,IAGtB,CAAA,IAAA,GAAW,CAACje,CAASM,CAAAA,CAAI,IAAK+d,EAA0B,CAAA,CACtD,GAAI,CAAC5e,CAAAA,EAAQ,OAAOA,CAAAA,EAAS,UAAY,EAAEO,CAAAA,IAAWP,GAAO,SAC7D,IAAMpC,EAAQoC,CAAKO,CAAAA,CAAO,EAC1B,GAAIM,CAAAA,GAAS,SAAWjD,CAAiB,YAAA,KAAA,CACvC,QAASmE,CAAQ,CAAA,CAAA,CAAGA,EAAQnE,CAAM,CAAA,MAAA,CAAQmE,CAAS,EAAA,CAAA,CACjD,IAAMgf,CAAe,CAAA,CAAA,EAAG5R,CAAO,CAAI5O,CAAAA,EAAAA,CAAO,IAAIwB,CAAK,CAAA,CAAA,CACnDyf,EAAqBrS,CAASqP,CAAAA,CAAAA,CAAUuC,CAAY,EACtD,CAAA,KAAA,GAEAlgB,IAAS,WACT,EAAA,OAAOjD,GAAU,QACjBA,EAAAA,CAAAA,GAAU,IACV,EAAA,EAAEA,aAAiB,KAEnB,CAAA,CAAA,IAAA,IAAWD,KAAO,MAAO,CAAA,IAAA,CAAKC,CAAK,CAAG,CAAA,CACpC,IAAMmjB,CAAe,CAAA,CAAA,EAAG5R,CAAO,CAAI5O,CAAAA,EAAAA,CAAO,IAAI5C,CAAG,CAAA,CAAA,CACjD6jB,EAAqBrS,CAASqP,CAAAA,CAAAA,CAAUuC,CAAY,EACtD,SAEAlgB,CAAS,GAAA,QAAA,EACT,OAAOjD,CAAU,EAAA,QAAA,EACjBA,IAAU,IACV,CAAA,CACA,IAAMmjB,CAAe,CAAA,CAAA,EAAG5R,CAAO,CAAI5O,CAAAA,EAAAA,CAAO,GAC1CihB,CAAqBrS,CAAAA,CAAAA,CAASqP,EAAUuC,CAAY,EACtD,CAAWlgB,KAAAA,GAAAA,CAAAA,GAAS,iBAClB,GAAIjD,CAAAA,YAAiB,MACnB,IAASmE,IAAAA,CAAAA,CAAQ,EAAGA,CAAQnE,CAAAA,CAAAA,CAAM,OAAQmE,CAAS,EAAA,CAAA,CACjD,IAAMgf,CAAe,CAAA,CAAA,EAAG5R,CAAO,CAAI5O,CAAAA,EAAAA,CAAO,IAAIwB,CAAK,CAAA,CAAA,CACnDyf,CAAqBrS,CAAAA,CAAAA,CAASqP,EAAUuC,CAAY,EACtD,SACS,OAAOnjB,CAAAA,EAAU,UAAYA,CAAU,GAAA,IAAA,CAAM,CACtD,IAAMmjB,CAAAA,CAAe,GAAG5R,CAAO,CAAA,CAAA,EAAI5O,CAAO,CAC1CihB,CAAAA,CAAAA,CAAAA,CAAqBrS,EAASqP,CAAUuC,CAAAA,CAAY,EACtD,CAAA,CAEJ,CAGA,IAAM9C,CAAAA,CAAeG,EAAM,YAAa,CAAA,GAAA,CAAIjP,CAAO,CACnD,CAAA,GAAI8O,EACF,IAAW4C,IAAAA,CAAAA,IAAc5C,EAAc,CACrC,IAAMyD,EAAUtD,CAAM,CAAA,KAAA,CAAM,IAAIyC,CAAU,CAAA,CACtCa,CAAS,EAAA,MAAA,EACKD,GAAsBC,CAASlD,CAAAA,CAAQ,GAErD2C,CAAoBhS,CAAAA,CAAAA,CAASqP,CAAQ,EAG3C,CAIF,GAAIA,CAAS,CAAA,aAAA,CAAe,CAC1B,IAAMiC,CAAAA,CAAarC,EAAM,KAAM,CAAA,GAAA,CAAII,EAAS,aAAa,CAAA,CACrDiC,CACcgB,EAAAA,EAAAA,CAAsBjD,EAAUiC,CAAU,CAAA,EAExDU,EAAoB3C,CAAS,CAAA,aAAA,CAAeiC,CAAU,EAG5D,CACF,CACF,CAWMgB,CAAAA,EAAAA,CAAwB,CAC5BE,CACAC,CAAAA,CAAAA,GACY,CACZ,GAAI,CAACD,EAAa,MAChB,CAAA,OAAO,MAGJC,CAAAA,CAAAA,CAAW,SACdA,CAAW,CAAA,MAAA,CAAS,IAAI,GAG1B,CAAA,CAAA,IAAIC,EAAU,KAEd,CAAA,IAAA,IAAWzI,KAASuI,CAAa,CAAA,MAAA,CAC1BC,EAAW,MAAO,CAAA,GAAA,CAAIxI,CAAK,CAC9BwI,GAAAA,CAAAA,CAAW,OAAO,GAAIxI,CAAAA,CAAK,CAC3ByI,CAAAA,CAAAA,CAAU,MAId,OAAOA,CACT,EAYaC,EAAmBzX,CAAAA,CAAAA,EAAgC,CAC9D,IAAW,GAAA,CAAC8E,EAASqP,CAAQ,CAAA,GAAKnU,EAAO,CACvC,GAAM,CAAE,IAAArK,CAAAA,CAAK,EAAIwe,CAEb,CAAA,OAAOxe,CAAS,EAAA,QAAA,EAAYA,IAAS,IAAQA,EAAAA,CAAAA,YAAgB,QAI7D,UAAcA,GAAAA,CAAAA,EAAQA,EAAK,QAAa,GAAA,IAAA,CAC1Cwe,EAAS,MAAS,CAAA,IAAI,IAAI,CAAC,MAAM,CAAC,CACzB,CAAA,WAAA,GAAexe,GAAQA,CAAK,CAAA,SAAA,GAAc,IACnDwe,CAAAA,CAAAA,CAAS,OAAS,IAAI,GAAA,CAAI,CAAC,OAAO,CAAC,EAC1BrP,CAAQ,CAAA,KAAA,CAAM,sBAAsB,CAC7CqP,GAAAA,CAAAA,CAAS,OAAS,IAAI,GAAA,CAAI,CAAC,QAAQ,CAAC,IAExC,CACF,CAAA,CAkBauD,EACXC,CAAAA,CAAAA,EAGG,CACH,IAAM5D,CAAAA,CAAe,CACnB,eAAiB,CAAA,IAAI,IACrB,YAAc,CAAA,IAAI,IAClB,KAAO,CAAA,IAAI,IACX,mBAAqB,CAAA,IAAI,GAC3B,CAEM6D,CAAAA,CAAAA,CAAO,CAAC,CACZ,GAAA,CAAAtkB,CACA,CAAA,IAAA,CAAAqC,EACA,aAAAkiB,CAAAA,CAAAA,CACA,KAAArX,CACF,CAAA,GAEM,CACJ,GAAI,OAAO7K,GAAS,QAAYA,EAAAA,CAAAA,GAAS,KACvC,OAGF,IAAMmP,EAAUK,EAAkB3E,CAAAA,CAAI,EAElCsX,CACAC,CAAAA,CAAAA,CAEJ,GAAI,OAAOpiB,GAAS,QAAYA,EAAAA,CAAAA,GAAS,KAAM,CAM7C,GAJI,eAAgBA,CAAQ,EAAA,OAAOA,EAAK,UAAe,EAAA,SAAA,GACrDmiB,EAAa,CAAQniB,CAAAA,CAAAA,CAAK,YAGxB,MAAUA,GAAAA,CAAAA,EAAQ,OAAOA,CAAK,CAAA,IAAA,EAAS,QAAU,CAAA,CACnD,IAAMqiB,CAAa/S,CAAAA,EAAAA,CAAqBtP,EAAK,IAAI,CAAA,CAC5Coe,EAAM,YAAa,CAAA,GAAA,CAAIjP,CAAO,CACjCiP,EAAAA,CAAAA,CAAM,aAAa,GAAIjP,CAAAA,CAAAA,CAAS,IAAI,GAAK,CAAA,CAE3CiP,EAAM,YAAa,CAAA,GAAA,CAAIjP,CAAO,CAAA,CAAG,IAAIkT,CAAU,EACjD,CAEI,MAAUriB,GAAAA,CAAAA,EAAQA,EAAK,IAAgB,YAAA,KAAA,GACzCoiB,EAAO,IAAI,GAAA,CAAIpiB,EAAK,IAAK,CAAA,MAAA,CAAQkd,GAAQ,OAAOA,CAAAA,EAAQ,QAAQ,CAAC,CAAA,EAErE,CAIA,GAFAkB,EAAM,KAAM,CAAA,GAAA,CAAIjP,EAAS,CAAE,UAAA,CAAAgT,EAAY,GAAAxkB,CAAAA,CAAAA,CAAK,KAAAqC,CAAM,CAAA,aAAA,CAAAkiB,EAAe,IAAAE,CAAAA,CAAK,CAAC,CAEnEpiB,CAAAA,CAAAA,YAAgB,MAClBA,CAAK,CAAA,OAAA,CAAQ,CAACqI,CAAAA,CAAMtG,IAClBkgB,CAAK,CAAA,CACH,IAAKlgB,CACL,CAAA,IAAA,CAAMsG,EACN,aAAe8G,CAAAA,CAAAA,CACf,KAAM,CAAC,GAAGtE,EAAM9I,CAAK,CACvB,CAAC,CACH,CAAA,CAAA,YAEW,CAACugB,CAAAA,CAAU1kB,CAAK,CAAA,GAAK,OAAO,OAAQoC,CAAAA,CAAI,EACjDiiB,CAAK,CAAA,CACH,IAAKK,CACL,CAAA,IAAA,CAAM1kB,EACN,aAAeuR,CAAAA,CAAAA,CACf,KAAM,CAAC,GAAGtE,EAAMyX,CAAQ,CAC1B,CAAC,EAGP,CAAA,CAEAL,CAAK,CAAA,CACH,IAAK,IACL,CAAA,IAAA,CAAMD,EACN,aAAe,CAAA,IAAA,CACf,KAAM,EACR,CAAC,CAED,CAAA,IAAA,GAAW,CAACO,CAAaC,CAAAA,CAAQ,IAAKpE,CAAM,CAAA,YAAA,CAC1C,QAAWqE,CAAaD,IAAAA,CAAAA,CACjBpE,CAAM,CAAA,mBAAA,CAAoB,IAAIqE,CAAS,CAAA,EAC1CrE,EAAM,mBAAoB,CAAA,GAAA,CAAIqE,EAAW,IAAI,GAAK,EAEpDrE,CAAM,CAAA,mBAAA,CAAoB,IAAIqE,CAAS,CAAA,CAAG,IAAIF,CAAW,CAAA,CAI7DT,GAAgB1D,CAAM,CAAA,KAAK,CAC3B6C,CAAAA,EAAAA,CAAgB7C,CAAK,CACrBoC,CAAAA,EAAAA,CAAoBpC,EAAM,KAAK,CAAA,CAE/B,QAAWjP,CAAWiP,IAAAA,CAAAA,CAAM,MAAM,IAAK,EAAA,CAAG,CACxC,IAAMwC,CAAAA,CAAkBF,GAAiC,CACvD,KAAA,CAAAtC,EACA,OAAAjP,CAAAA,CAAAA,CACA,OAAS,CAAA,IAAI,GACf,CAAC,CAAA,CACDiP,EAAM,eAAgB,CAAA,GAAA,CAAIjP,EAASyR,CAAe,EACpD,CAEA,OAAO,CAAE,MAAAxC,CAAM,CACjB,ECtbA,IAAMsE,EAAAA,CAAa,IAAI,GAAI,CAAA,CACzB,sBACA,CAAA,OAAA,CACA,QACA,OACA,CAAA,KAAA,CACA,QACA,mBACA,CAAA,YAAA,CACA,QACF,CAAC,CAAA,CAEKC,GACJ9X,CACsB,EAAA,CAEtB,GAAIA,CAAK,CAAA,MAAA,GAAW,GAAKA,CAAK,CAAA,CAAC,IAAM,YAAc,CAAA,CACjD,IAAMhK,CAAAA,CAAOgK,EAAK,CAAC,CAAA,CAEnB,GADIhK,CAAS,GAAA,YAAA,EACTA,IAAS,eAAiB,CAAA,OAAO,QAErC,GADIA,CAAAA,GAAS,aACTA,CAAS,GAAA,SAAA,CAAW,OAAO,MACjC,CAEA,GAAIgK,CAAK,CAAA,MAAA,GAAW,CAAG,CAAA,CACrB,IAAMhK,CAAOgK,CAAAA,CAAAA,CAAK,CAAC,CACnB,CAAA,GAAIhK,IAAS,YAAc,CAAA,OAAO,QAClC,GAAIA,CAAAA,GAAS,YAAa,OAAO,MACnC,CAEF,CAOM+hB,CAAAA,EAAAA,CAA0BjT,GAAmC,CACjE,IAAMkT,CAA6B,CAAA,GACnC,GAAI/D,EAAAA,CAA2BnP,CAAI,CACjC,CAAA,IAAA,GAAW,CAAC7T,CAAM8J,CAAAA,CAAG,IAAK,MAAO,CAAA,OAAA,CAC9B+J,EAAa,UAAW,CAAA,OAC3B,EACEkT,CAAU,CAAA,CAAA,qBAAA,EAAwB/mB,CAAI,CAAE,CAAA,CAAA,CAAI8J,CAErCmZ,CAAAA,KAAAA,GAAAA,EAAAA,CAAqBpP,CAAI,CAClC,CAAA,IAAA,GAAW,CAAC7T,CAAM8J,CAAAA,CAAG,IAAK,MAAO,CAAA,OAAA,CAAS+J,EAAa,WAAW,CAAA,CAChEkT,EAAU,CAAiB/mB,cAAAA,EAAAA,CAAI,EAAE,CAAI8J,CAAAA,CAAAA,CAGzC,OAAOid,CACT,CAAA,CAUMC,EAA6B,CAAA,CACjCnT,EACAoT,CACG,GAAA,CACCjE,GAA2BnP,CAAI,CAAA,CACjC,OAAO,MAAQA,CAAAA,CAAAA,CAAa,WAAW,OAASoT,CAAAA,CAAAA,CAAM,OAAO,CACpDhE,CAAAA,EAAAA,CAAqBpP,CAAI,CAClC,EAAA,MAAA,CAAO,OAAQA,CAAa,CAAA,WAAA,CAAaoT,CAAM,CAAA,OAAO,EAE1D,CAeMC,CAAAA,EAAAA,CAAqB,CACzB5E,CACAvK,CAAAA,CAAAA,CACAuF,IACY,CACZ,GAAIvF,GAAU,OAAOA,CAAAA,EAAW,SAAU,CAExC,GACE,SAAUA,CACV,EAAA,OAAQA,EAAmC,IAAY,EAAA,QAAA,CACvD,CACA,IAAM3B,EAAO2B,CAAmC,CAAA,IAAA,CAC1C2K,EAAWJ,CAAM,CAAA,KAAA,CAAM,IAAIlM,CAAG,CAAA,CACpC,GAAIsM,CAAU,EAAA,MAAA,GAITpF,IAAU,WACToF,EAAAA,CAAAA,CAAS,OAAO,IAAS,GAAA,CAAA,EACzBA,EAAS,MAAO,CAAA,GAAA,CAAI,OAAO,CAAA,EAC5BpF,IAAU,UACToF,EAAAA,CAAAA,CAAS,OAAO,IAAS,GAAA,CAAA,EACzBA,EAAS,MAAO,CAAA,GAAA,CAAI,MAAM,CAE5B,CAAA,GAAA,OAAQ3K,EAAmC,IAGzC,CAAA,CAAC+K,GAAyB,IAAK,CAAA,CAAC,CAACre,CAAO,CAAA,GAAMA,CAAWsT,IAAAA,CAAM,GAE/D,OAAO,KAIf,CAEA,IAAW,GAAA,CAACtT,EAASM,CAAI,CAAA,GAAK+d,GAA0B,CACtD,GAAI,EAAEre,CAAWsT,IAAAA,CAAAA,CAAAA,CACf,SAEF,IAAMjW,CAAAA,CAASiW,EAAmCtT,CAAO,CAAA,CACzD,GAAIM,CAAAA,GAAS,SAAWjD,CAAiB,YAAA,KAAA,CAAO,CAC9C,IAASmE,IAAAA,CAAAA,CAAQnE,EAAM,MAAS,CAAA,CAAA,CAAGmE,GAAS,CAAGA,CAAAA,CAAAA,EAAAA,CAAS,CACtD,IAAMsG,CAAAA,CAAOzK,EAAMmE,CAAK,CAAA,CAAA,CAEtBsG,GACA,OAAOA,CAAAA,EAAS,QACfA,EAAAA,CAAAA,CAAiC+Q,CAAK,CAAM,GAAA,IAAA,EAIxB4J,GAAmB5E,CAAO/V,CAAAA,CAAAA,CAAM+Q,CAAK,CACxCxb,GAAAA,CAAAA,CAAM,OAAOmE,CAAO,CAAA,CAAC,EAE3C,CACKnE,CAAAA,CAAM,QACT,OAAQiW,CAAAA,CAAmCtT,CAAO,EAEtD,CAAA,KAAA,GACEM,CAAS,GAAA,WAAA,EACT,OAAOjD,CAAU,EAAA,QAAA,EACjBA,IAAU,IACV,EAAA,EAAEA,aAAiB,KACnB,CAAA,CAAA,CACA,IAAMqlB,CAASrlB,CAAAA,CAAAA,CACf,QAAWD,CAAO,IAAA,MAAA,CAAO,KAAKslB,CAAM,CAAA,CAAG,CACrC,IAAM3M,CAAAA,CAAO2M,CAAOtlB,CAAAA,CAAG,GAErB2Y,CACA,EAAA,OAAOA,GAAS,QACfA,EAAAA,CAAAA,CAAiC8C,CAAK,CAAM,GAAA,IAAA,EAIxB4J,GAAmB5E,CAAO9H,CAAAA,CAAAA,CAAM8C,CAAK,CAExD,GAAA,OAAO6J,EAAOtlB,CAAG,EAGvB,CACK,MAAO,CAAA,IAAA,CAAKslB,CAAM,CAAA,CAAE,QACvB,OAAQpP,CAAAA,CAAmCtT,CAAO,EAEtD,CAAA,KAAA,GACEM,IAAS,QACT,EAAA,OAAOjD,GAAU,QACjBA,EAAAA,CAAAA,GAAU,MAELA,CAAkCwb,CAAAA,CAAK,IAAM,IAG3B4J,EAAAA,EAAAA,CAAmB5E,EAAOxgB,CAAOwb,CAAAA,CAAK,CAEzD,GAAA,OAAQvF,EAAmCtT,CAAO,CAAA,CAAA,KAAA,GAG7CM,IAAS,eAClB,CAAA,GAAIjD,aAAiB,KAAO,CAAA,CAC1B,QAASmE,CAAQnE,CAAAA,CAAAA,CAAM,OAAS,CAAGmE,CAAAA,CAAAA,EAAS,EAAGA,CAAS,EAAA,CAAA,CACtD,IAAMsG,CAAOzK,CAAAA,CAAAA,CAAMmE,CAAK,CAAA,CAAA,CAEtBsG,GACA,OAAOA,CAAAA,EAAS,UACfA,CAAiC+Q,CAAAA,CAAK,IAAM,IAIxB4J,EAAAA,EAAAA,CAAmB5E,EAAO/V,CAAM+Q,CAAAA,CAAK,IACxCxb,CAAM,CAAA,MAAA,CAAOmE,EAAO,CAAC,EAE3C,CACKnE,CAAM,CAAA,MAAA,EACT,OAAQiW,CAAAA,CAAmCtT,CAAO,EAEtD,CAAA,KAAW,OAAO3C,CAAU,EAAA,QAAA,EAAYA,IAAU,IAC3CA,GAAAA,CAAAA,CAAkCwb,CAAK,CAAM,GAAA,IAAA,EAG3B4J,GAAmB5E,CAAOxgB,CAAAA,CAAAA,CAAOwb,CAAK,CAEzD,CAAA,EAAA,OAAQvF,EAAmCtT,CAAO,EAK5D,CAEA,GACGsT,EAAmC,IAAS,GAAA,QAAA,EAC7C,CAAC+K,EAAyB,CAAA,IAAA,CAAK,CAAC,CAACre,CAAO,IAAMA,CAAWsT,IAAAA,CAAM,EAE/D,OAAO,KAEX,CACA,OAAO,MACT,EAUMqP,EAA6B,CAAA,CAAC,CAClC,eAAA,CAAAC,EACA,IAAAxT,CAAAA,CAAAA,CACA,MAAAoT,CACF,CAAA,GAIM,CACJ,IAAMjD,CAAAA,CAAajB,GAAiBlP,CAAI,CAAA,CAExC,QAAWyT,CAAmB,IAAA,MAAA,CAAO,KAAKL,CAAM,CAAA,OAAO,EAAG,CACxD,IAAMlY,CAAOkE,CAAAA,EAAAA,CAAkBqU,CAAe,CACxCtnB,CAAAA,CAAAA,CAAO+O,EAAKA,CAAK,CAAA,MAAA,CAAS,CAAC,CAE/B,CAAA,OAAO/O,GAAS,QAChBgkB,EAAAA,CAAAA,EACA,OAAO,SAAU,CAAA,cAAA,CAAe,KAAKA,CAAYhkB,CAAAA,CAAI,GACrDgkB,CAAWhkB,CAAAA,CAAI,CAAMqnB,GAAAA,CAAAA,CAAgBC,CAAe,CAEpD,EAAA,OAAOtD,EAAWhkB,CAAI,EAE1B,CACF,CAWaunB,CAAAA,EAAAA,CAAe,CAAC,CAC3B,MAAA,CAAA1nB,EACA,KAAAyiB,CAAAA,CAAAA,CACA,KAAAzO,CACF,CAAA,GAIoB,CAClB,IAAM2T,CAAAA,CAAgB,IAAI,GAAA,CACpBP,EAAsB,CAC1B,OAAA,CAAS,EACT,CAAA,cAAA,CAAgB,EAChB,CAAA,OAAA,CAAS,EACX,CAAA,CAEMhD,EAA0BT,EAA8B3P,CAAAA,CAAI,EAC5D4T,CACJxD,CAAAA,CAAAA,CAAwB,MAAM,GAAG,CAAA,CAAE,MAAS,CAAA,CAAA,CAQxCyD,EAAmBrU,CAA4B,EAAA,CACnD,GAAIA,CAAQ,CAAA,UAAA,CAAW4Q,CAAuB,CAAG,CAAA,CAC/C,IAAMlV,CAAOkE,CAAAA,EAAAA,CAAkBI,CAAO,CACtC,CAAA,GAAItE,EAAK,MAAW0Y,GAAAA,CAAAA,CAClB,OAAO1Y,CAAK0Y,CAAAA,CAAAA,CAA2B,CAAC,CAAA,EAAK,EAEjD,CACA,OAAO,EACT,CAGA,CAAA,IAAA,IAAWpU,KAAWiP,CAAM,CAAA,KAAA,CAAM,MAAQ,CAAA,CACxC,IAAMtiB,CAAO0nB,CAAAA,CAAAA,CAAgBrU,CAAO,CAChCrT,CAAAA,CAAAA,EAAMwnB,EAAc,GAAIxnB,CAAAA,CAAI,EAClC,CAEA,OAAW,CAACqT,CAAAA,CAASqP,CAAQ,CAAKJ,GAAAA,CAAAA,CAAM,MAAO,CAC7C,IAAMtiB,EAAO0nB,CAAgBrU,CAAAA,CAAO,EAEpC,GACE,CAACrT,GACD,EAAE0iB,CAAAA,CAAS,QAAQ,GAAI,CAAA,MAAM,CAAKA,EAAAA,CAAAA,CAAS,QAAQ,GAAI,CAAA,OAAO,GAE9D,SAIF,IAAMiF,EAAaxK,EAAmBuF,CAAAA,CAAAA,CAAS,IAAI,CACnDwE,CAAAA,EAAAA,CAAmB5E,EAAOqF,CAAY,CAAA,WAAW,EACjD,IAAMC,CAAAA,CAAW/E,GAAU,CACzB,MAAA,CAAQhjB,CAAO,CAAA,SAAA,CACf,KAAAG,CACF,CAAC,EACK6nB,CACJD,CAAAA,CAAAA,GAAa5nB,EACT4nB,CACAzE,CAAAA,EAAAA,CAAuB,CACrB,IAAMyE,CAAAA,CAAAA,CACN,WAAYJ,CACd,CAAC,EACPA,CAAc,CAAA,GAAA,CAAIK,CAAQ,CAC1BZ,CAAAA,CAAAA,CAAM,OAAQY,CAAAA,CAAQ,EAAIF,CAC1B,CAAA,IAAMG,EAAc,CAAG7D,EAAAA,CAAuB,GAAG4D,CAAQ,CAAA,CAAA,CAGnDE,EAAc5K,EAAmBuF,CAAAA,CAAAA,CAAS,IAAI,CACpDwE,CAAAA,EAAAA,CAAmB5E,EAAOyF,CAAa,CAAA,UAAU,EACjD,IAAMC,CAAAA,CAAYnF,EAAU,CAAA,CAC1B,OAAQhjB,CAAO,CAAA,QAAA,CACf,KAAAG,CACF,CAAC,EACKioB,CACJD,CAAAA,CAAAA,GAAchoB,GAAQgoB,CAAcH,GAAAA,CAAAA,CAChCG,EACA7E,EAAuB,CAAA,CACrB,KAAM6E,CACN,CAAA,UAAA,CAAYR,CACd,CAAC,CAAA,CACPA,CAAc,CAAA,GAAA,CAAIS,CAAS,CAC3BhB,CAAAA,CAAAA,CAAM,QAAQgB,CAAS,CAAA,CAAIF,EAC3B,IAAMG,CAAAA,CAAe,GAAGjE,CAAuB,CAAA,EAAGgE,CAAS,CAE3DhB,CAAAA,CAAAA,CAAAA,CAAM,QAAQ5T,CAAO,CAAA,CAAI,CACvB,IAAMyU,CAAAA,CAAAA,CACN,KAAOI,CAAAA,CACT,EACAjB,CAAM,CAAA,cAAA,CAAea,CAAW,CAAIzU,CAAAA,CAAAA,CACpC4T,EAAM,cAAeiB,CAAAA,CAAY,EAAI7U,EACvC,CAEA,OAAO4T,CACT,CAAA,CAiBakB,GAAmB,CAC9BtU,CAAAA,CACAoT,IACS,CACT,IAAMhD,CAA0BT,CAAAA,EAAAA,CAA8B3P,CAAI,CAE5DsS,CAAAA,CAAAA,CAAO,CAAC,CACZ,OAAA,CAAAlQ,EACA,cAAAmS,CAAAA,CAAAA,CACA,SAAAC,CACA,CAAA,IAAA,CAAAnkB,EACA,IAAA6K,CAAAA,CACF,IAAsB,CACpB,GAAI7K,aAAgB,KAClBA,CAAAA,CAAAA,CAAK,OAAQ,CAAA,CAACqI,EAAMtG,CAClBkgB,GAAAA,CAAAA,CAAK,CACH,OAAAlQ,CAAAA,CAAAA,CACA,eAAAmS,CACA,CAAA,QAAA,CAAAC,EACA,IAAM9b,CAAAA,CAAAA,CACN,KAAM,CAAC,GAAGwC,EAAM9I,CAAK,CACvB,CAAC,CACH,CAAA,CAAA,KAAA,GACS/B,CAAQ,EAAA,OAAOA,GAAS,QAAU,CAAA,CAE3C,IAAIokB,CAAcF,CAAAA,CAAAA,CACdG,EAActS,CAClB,CAAA,GAAIsN,GAAiBxU,CAAI,CAAA,CAAG,CAC1BuZ,CAAc,CAAA,CAAA,EAAGrE,CAAuB,CAAGlV,EAAAA,CAAAA,CAAK,CAAC,CAAC,CAAA,CAAA,CAClD,IAAMuY,CAAAA,CAAkBL,EAAM,cAAeqB,CAAAA,CAAW,EACxD,GAAIhB,CAAAA,CAAiB,CACnB,IAAMkB,CAAAA,CAAUvB,EAAM,OAAQK,CAAAA,CAAe,EACzCkB,CAAS,EAAA,IAAA,GAASF,EACpBC,CAAc,CAAA,MAAA,CACLC,GAAS,KAAUF,GAAAA,CAAAA,GAC5BC,CAAc,CAAA,OAAA,EAElB,CACF,CAEA,IAAME,EAAc5B,EAAoB9X,CAAAA,CAAI,EAC5C,GAAI0Z,CAAAA,GAAgB,OAAW,CAE7B,IAAA,IAAW5mB,KAAOqC,CACX,CAAA,MAAA,CAAO,UAAU,cAAe,CAAA,IAAA,CAAKA,EAAMrC,CAAG,CAAA,EAGnDskB,CAAK,CAAA,CACH,QAASsC,CACT,CAAA,cAAA,CAAgBH,EAChB,QAAU,CAAA,KAAA,CACV,KAAOpkB,CAAiCrC,CAAAA,CAAG,EAC3C,IAAM,CAAA,CAAC,GAAGkN,CAAMlN,CAAAA,CAAG,CACrB,CAAC,CAAA,CAEH,MACF,CAEA,IAAA,IAAWA,CAAOqC,IAAAA,CAAAA,CAAM,CACtB,GAAI,CAAC,OAAO,SAAU,CAAA,cAAA,CAAe,KAAKA,CAAMrC,CAAAA,CAAG,EACjD,SAEF,IAAMC,EAASoC,CAAiCrC,CAAAA,CAAG,EAGnD,GAAI,CAACwmB,EAAU,CACb,GAAIxmB,CAAQ,GAAA,aAAA,CAAe,CACzBskB,CAAK,CAAA,CACH,QAAS,OACT,CAAA,cAAA,CAAgBmC,EAChB,QAAU,CAAA,KAAA,CACV,KAAMxmB,CACN,CAAA,IAAA,CAAM,CAAC,GAAGiN,CAAAA,CAAMlN,CAAG,CACrB,CAAC,EACD,QACF,CACA,GAAIA,CAAAA,GAAQ,YAAa,CACvBskB,CAAAA,CAAK,CACH,OAAS,CAAA,MAAA,CACT,eAAgBmC,CAChB,CAAA,QAAA,CAAU,MACV,IAAMxmB,CAAAA,CAAAA,CACN,KAAM,CAAC,GAAGiN,EAAMlN,CAAG,CACrB,CAAC,CACD,CAAA,QACF,CACA,GAAIA,IAAQ,YAAgB,EAAA,KAAA,CAAM,QAAQC,CAAK,CAAA,CAAG,CAChDA,CAAM,CAAA,OAAA,CAAQ,CAACkG,CAAO/B,CAAAA,CAAAA,GAAU,CAC1B+B,CAAS,EAAA,OAAOA,GAAU,QAAY,EAAA,QAAA,GAAYA,GACpDme,CAAK,CAAA,CACH,OAAS,CAAA,OAAA,CACT,eAAgBmC,CAChB,CAAA,QAAA,CAAU,KACV,IAAMtgB,CAAAA,CAAAA,CAAM,OACZ,IAAM,CAAA,CAAC,GAAG+G,CAAMlN,CAAAA,CAAAA,CAAKoE,EAAO,QAAQ,CACtC,CAAC,CAGC+B,CAAAA,CAAAA,EAAS,OAAOA,CAAU,EAAA,QAAA,EAAY,SAAaA,GAAAA,CAAAA,EACrDme,EAAK,CACH,OAAA,CAAS,QACT,cAAgBmC,CAAAA,CAAAA,CAChB,SAAU,KACV,CAAA,IAAA,CAAMtgB,EAAM,OACZ,CAAA,IAAA,CAAM,CAAC,GAAG+G,CAAAA,CAAMlN,EAAKoE,CAAO,CAAA,SAAS,CACvC,CAAC,EAEL,CAAC,CAAA,CACD,QACF,CAEA,GACEpE,IAAQ,SACR,EAAA,OAAOC,GAAU,QACjBA,EAAAA,CAAAA,GAAU,KACV,CACA,IAAA,IAAW4mB,KAAa5mB,CACjB,CAAA,MAAA,CAAO,UAAU,cAAe,CAAA,IAAA,CAAKA,EAAO4mB,CAAS,CAAA,EAG1DvC,CAAK,CAAA,CACH,QAAS,MACT,CAAA,cAAA,CAAgBmC,EAChB,QAAU,CAAA,KAAA,CACV,KAAOxmB,CAAkC4mB,CAAAA,CAAS,EAClD,IAAM,CAAA,CAAC,GAAG3Z,CAAMlN,CAAAA,CAAAA,CAAK6mB,CAAS,CAChC,CAAC,EAEH,QACF,CACF,CAGA,GAAI9B,GAAW,GAAI/kB,CAAAA,CAAG,EACpBskB,CAAK,CAAA,CACH,QAASoC,CACT,CAAA,cAAA,CAAgBD,EAChB,QAAU,CAAA,IAAA,CACV,KAAMxmB,CACN,CAAA,IAAA,CAAM,CAAC,GAAGiN,CAAAA,CAAMlN,CAAG,CACrB,CAAC,CACQA,CAAAA,KAAAA,GAAAA,CAAAA,GAAQ,QAAU,OAAOC,CAAAA,EAAU,SAAU,CACtD,IAAM6mB,EAAM1B,CAAM,CAAA,OAAA,CAAQnlB,CAAK,CAC3BymB,CAAAA,CAAAA,GAAgB,QAAUI,CAAK,EAAA,IAAA,CAChCzkB,EAAiCrC,CAAG,CAAA,CAAI8mB,EAAI,IACpCJ,CAAAA,CAAAA,GAAgB,OAAWI,EAAAA,CAAAA,EAAK,QACxCzkB,CAAiCrC,CAAAA,CAAG,EAAI8mB,CAAI,CAAA,KAAA,EAEjD,MACExC,CAAK,CAAA,CACH,QAASoC,CACT,CAAA,cAAA,CAAgBD,EAChB,QAAAD,CAAAA,CAAAA,CACA,KAAMvmB,CACN,CAAA,IAAA,CAAM,CAAC,GAAGiN,CAAAA,CAAMlN,CAAG,CACrB,CAAC,EAEL,CACF,CACF,CACAskB,CAAAA,CAAAA,CAAK,CACH,OAAS,CAAA,IAAA,CACT,eAAgB,IAChB,CAAA,QAAA,CAAU,MACV,IAAMtS,CAAAA,CAAAA,CACN,KAAM,EACR,CAAC,EACH,CAAA,CAaa+U,EAAqB,CAAA,CAAC,CACjC,MAAA/oB,CAAAA,CAAAA,CACA,KAAAgU,CACF,CAAA,GAGM,CACJ,GAAM,CAAE,MAAAyO,CAAM,CAAA,CAAI2D,GAAWpS,CAAI,CAAA,CAC3BwT,EAAkBP,EAAuBjT,CAAAA,CAAI,EAC7CoT,CAAQM,CAAAA,EAAAA,CAAa,CAAE,MAAA,CAAA1nB,EAAQ,KAAAyiB,CAAAA,CAAAA,CAAO,KAAAzO,CAAK,CAAC,EAClDmT,EAA2BnT,CAAAA,CAAAA,CAAMoT,CAAK,CACtCkB,CAAAA,EAAAA,CAAiBtU,EAAMoT,CAAK,CAAA,CAC5BG,GAA2B,CAAE,eAAA,CAAAC,EAAiB,IAAAxT,CAAAA,CAAAA,CAAM,KAAAoT,CAAAA,CAAM,CAAC,EAC7D,CAAA,CC1lBO,IAAM4B,EAAuB,CAAA,CAAC,CAAE,OAAA5S,CAAAA,CAAQ,IAA+B,CACxEA,CAAAA,CAAQ,OAAO,MAAO,CAAA,UAAA,CAAW,MAAM,OACzCwO,EAAAA,EAAAA,CAAe,CACb,MAAQxO,CAAAA,CAAAA,CAAQ,MAAO,CAAA,MAAA,CAAO,WAAW,KACzC,CAAA,IAAA,CAAMA,EAAQ,IAChB,CAAC,EAGCA,CAAQ,CAAA,MAAA,CAAO,OAAO,UAAW,CAAA,SAAA,CAAU,SAC7C2S,EAAmB,CAAA,CACjB,OAAQ3S,CAAQ,CAAA,MAAA,CAAO,OAAO,UAAW,CAAA,SAAA,CACzC,IAAMA,CAAAA,CAAAA,CAAQ,IAChB,CAAC,EAEL,EChBO,IAAM6S,CAAAA,CAAyB,CAAC,CACrC,MAAA,CAAAC,EACA,MAAAC,CAAAA,CACF,IAGuC,CACrC,IAAMrnB,EAAS,CAAE,GAAGqnB,CAAO,CAgD3B,CAAA,GA9CID,CACEA,GAAAA,CAAAA,CAAO,SACLpnB,CAAO,CAAA,MAAA,CACTA,EAAO,MAAS,CAAA,CACd,GAAGA,CAAO,CAAA,MAAA,CACV,GAAGonB,CAAO,CAAA,MACZ,EAEApnB,CAAO,CAAA,MAAA,CAASonB,EAAO,MAIvBA,CAAAA,CAAAA,CAAAA,CAAO,SACLpnB,CAAO,CAAA,MAAA,CACTA,CAAO,CAAA,MAAA,CAAS,CACd,GAAGA,CAAAA,CAAO,OACV,GAAGonB,CAAAA,CAAO,MACZ,CAEApnB,CAAAA,CAAAA,CAAO,OAASonB,CAAO,CAAA,MAAA,CAAA,CAIvBA,EAAO,IACLpnB,GAAAA,CAAAA,CAAO,KACTA,CAAO,CAAA,IAAA,CAAO,CACZ,GAAGA,CAAAA,CAAO,IACV,CAAA,GAAGonB,EAAO,IACZ,CAAA,CAEApnB,EAAO,IAAOonB,CAAAA,CAAAA,CAAO,MAIrBA,CAAO,CAAA,KAAA,GACLpnB,EAAO,KACTA,CAAAA,CAAAA,CAAO,MAAQ,CACb,GAAGA,EAAO,KACV,CAAA,GAAGonB,EAAO,KACZ,CAAA,CAEApnB,CAAO,CAAA,KAAA,CAAQonB,EAAO,KAKxB,CAAA,CAAA,CAAA,CAAA,CAAC,OAAO,IAAKpnB,CAAAA,CAAM,EAAE,MAIzB,CAAA,OAAOA,CACT,CC9DA,CAsCA,IAAMsnB,GAAepnB,CAAgB,EAAA,4BAAA,CAA6B,KAAKA,CAAG,CAAA,CAEpEqnB,EAAcna,CAAAA,CAAAA,EAClBA,EACG,GAAI,CAAA,CAACqE,EAAS+V,CACT,GAAA,OAAO/V,GAAY,QACd,CAAA,CAAA,CAAA,EAAIA,CAAO,CAGhB+V,CAAAA,CAAAA,CAAAA,CAAAA,GAAM,EAED/V,CAGF6V,CAAAA,EAAAA,CAAY7V,CAAO,CACtB,CAAA,CAAA,CAAA,EAAIA,CAAO,CACX,CAAA,CAAA,CAAA,EAAA,EAAKA,CAAQ,CAAA,OAAA,CAAQ,KAAM,KAAK,CAAC,IACtC,CACA,CAAA,IAAA,CAAK,EAAE,CAENgW,CAAAA,EAAAA,CAAwBC,GAAkC,CAC9D,IAAMC,EAAUJ,EAAWG,CAAAA,CAAAA,CAAM,IAAI,CAC/BE,CAAAA,CAAAA,CACJF,EAAM,QAAa,GAAA,OAAA,CAAUG,mBAAO,CAAA,IAAA,CAAK,IAAMA,mBAAO,CAAA,IAAA,CAAK,OAEvDC,CAAqBJ,CAAAA,CAAAA,CAAM,QAAQ,OAAQ,CAAA,YAAA,CAAc,CAACtlB,CAAG2lB,CAAAA,CAAAA,GACjEF,oBAAO,MAAO,CAAA,CAAA,EAAA,EAAKE,CAAI,CAAI,EAAA,CAAA,CAC7B,EAEA,OAAO,CAAA,EAAGH,CAAM,CAAA,CAAA,CAAA,EAAIF,EAAM,QAAS,CAAA,WAAA,EAAa,CAAG,CAAA,CAAA,CAAC,IAAIG,mBAAO,CAAA,IAAA,CAAKF,CAAO,CAAC,CAAA,EAAA,EAAKG,CAAkB,CACrG,CAAA,CAAA,CAEME,GAAc,CAAC,CACnB,QAAA1T,CACA,CAAA,KAAA,CAAAoT,CACF,CAAA,GAIMpT,EAAQ,MAAO,CAAA,IAAA,CAAK,QAAU,QACzB,CAAA,KAAA,CAGLoT,EAAM,QAAa,GAAA,OAAA,CACdpT,EAAQ,MAAO,CAAA,IAAA,CAAK,QAAU,MAGhC,CAAA,IAAA,CAGI2T,GAAwB,CAAC,CACpC,QAAA3T,CACA,CAAA,MAAA,CAAAtU,CACF,CAAA,GAGM,CACJ,IAAW0nB,IAAAA,CAAAA,IAAS1nB,EAAO,MACrBgoB,CAAAA,EAAAA,CAAY,CAAE,OAAA1T,CAAAA,CAAAA,CAAS,MAAAoT,CAAM,CAAC,GAChC,OAAQ,CAAA,GAAA,CAAID,GAAqBC,CAAK,CAAC,EAItC1nB,CAAO,CAAA,KAAA,EACV,OAAQ,CAAA,IAAA,CAAK,CAAC,EAElB,CAAA,CC3FO,IAAMkoB,EAAa,CAAA,CAAC,CACzB,UAAA3H,CAAAA,CAAAA,CACA,cAAA4H,CACA,CAAA,OAAA,CAAA7I,EACA,IAAApN,CAAAA,CACF,IAQM,CACJ,GAAIA,EAAK,WAAa,CAAA,CACpB,IAAMkW,CAAAA,CAAoC,EAE1C,CAAA,GAAID,EACF,IAAW,GAAA,CAAC9pB,EAAM+oB,CAAM,CAAA,GAAK,OAAO,OAAQlV,CAAAA,CAAAA,CAAK,WAAW,CACtDoN,CAAAA,CAAAA,CAAQ,IAAIxB,CAAa,CAAA,QAAA,CAAUzf,CAAI,CAAC,CAAA,GAC1C+pB,CAAS/pB,CAAAA,CAAI,EAAI+oB,CAIrB,CAAA,CAAA,KAAA,IAAA,IAAWlnB,KAAOof,CAAS,CAAA,CACzB,GAAM,CAAE,IAAA,CAAAjhB,CAAK,CAAI0f,CAAAA,CAAAA,CAAgB7d,CAAG,CAC9BknB,CAAAA,CAAAA,CAASlV,EAAK,WAAY7T,CAAAA,CAAI,EAChC+oB,CACFgB,GAAAA,CAAAA,CAAS/pB,CAAI,CAAA,CAAI+oB,GAErB,CAGFlV,CAAAA,CAAK,YAAckW,EACrB,CAEA,GAAIlW,CAAK,CAAA,KAAA,CACP,QAAWsM,CAAS,IAAA,MAAA,CAAO,QAAQtM,CAAK,CAAA,KAAK,EAAG,CAC9C,IAAM9E,EAAOoR,CAAM,CAAA,CAAC,CACdvE,CAAAA,CAAAA,CAAWuE,EAAM,CAAC,CAAA,CAExB,QAAWrE,CAAUsD,IAAAA,CAAAA,CAAa,CAGhC,GAAI,CADcxD,EAASE,CAAM,CAAA,CAE/B,SAGF,IAAMja,CAAAA,CAAM4d,EACV,WACA5B,CAAAA,CAAAA,CAAmB,CAAE,MAAA/B,CAAAA,CAAAA,CAAQ,IAAA/M,CAAAA,CAAK,CAAC,CACrC,CAAA,CACKmT,EAAW,GAAIrgB,CAAAA,CAAG,GAErB,OAAO+Z,CAAAA,CAASE,CAAM,EAE1B,CAGK,OAAO,IAAKF,CAAAA,CAAQ,EAAE,MACzB,EAAA,OAAO/H,EAAK,KAAM9E,CAAAA,CAAI,EAE1B,CAEJ,EC7EA,IAAMib,EAAAA,CACJ,2TACIC,EAAiB,CAAA,mCAAA,CACjBC,GAA8B,+BAC9BC,CAAAA,EAAAA,CAAiB,8BACjBC,EACJ,CAAA,6CAAA,CACIC,GAAwB,oCASjBC,CAAAA,EAAAA,CAAsB,CAAC,CAClC,SAAA,CAAAC,CACF,CAGEP,IAAAA,EAAAA,CAAe,SAAY,CAAA,CAAA,CACpBA,GAAe,IAAKO,CAAAA,CAAS,GAGzBC,EAAyB,CAAA,CAAC,CACrC,SAAAD,CAAAA,CACF,IAE+B,CAE7B,GADAN,GAAe,SAAY,CAAA,CAAA,CACvBA,GAAe,IAAKM,CAAAA,CAAS,EAC/B,OAAO,MAAA,CAIT,GADAL,EAAAA,CAA4B,UAAY,CACpCA,CAAAA,EAAAA,CAA4B,KAAKK,CAAS,CAAA,CAC5C,OAAO,WAIT,CAAA,GADAJ,GAAe,SAAY,CAAA,CAAA,CACvBA,GAAe,IAAKI,CAAAA,CAAS,EAC/B,OAAO,MAAA,CAIT,GADAH,EAA6B,CAAA,SAAA,CAAY,CACrCA,CAAAA,EAAAA,CAA6B,KAAKG,CAAS,CAAA,CAC7C,OAAO,mBAIT,CAAA,GADAF,GAAsB,SAAY,CAAA,CAAA,CAC9BA,GAAsB,IAAKE,CAAAA,CAAS,EACtC,OAAO,cAIX,ECvCO,IAAME,EAAAA,CAAkB,CAAC,CAC9B,OAAA,CAAAC,CACF,CAAA,GAEgC,CAC9B,GAAM,CAAE,UAAAH,CAAW,CAAA,MAAA,CAAAxS,CAAO,CAAI2S,CAAAA,CAAAA,CAE9B,OAAI3S,CAAU,EAAA,MAAA,GAAUA,EACf,CACL,KAAA,CAAO,CAAC,CAAE,GAAGA,CAAO,CAAC,CACvB,CAGGA,CAAAA,CAAAA,CAWHA,EAAO,IAAS,GAAA,QAAA,EAChB,CAACA,CAAO,CAAA,MAAA,EACRuS,GAAoB,CAAE,SAAA,CAAAC,CAAU,CAAC,CAAA,CAE1B,CACL,GAAGxS,CAAAA,CACH,OAAQ,QACV,CAAA,CAGKA,EApBDuS,EAAoB,CAAA,CAAE,SAAAC,CAAAA,CAAU,CAAC,CAC5B,CAAA,CACL,OAAQ,QACR,CAAA,IAAA,CAAM,QACR,CAEF,CAAA,MAeJ,EAEaI,EAAmB,CAAA,CAAC,CAC/B,SAAAC,CAAAA,CAAAA,CACA,SAAApM,CACF,CAAA,GAG8B,CAC5B,IAAMqM,CAAAA,CAA0B,EAAC,CAEjC,QAAWN,CAAaK,IAAAA,CAAAA,EAAa,EACnCC,CAAAA,CAAAA,CAAQ,KAAK,CACX,SAAA,CAAAN,EACA,MAAQ/L,CAAAA,CAAAA,CAAS,OACjB,IAAMgM,CAAAA,EAAAA,CAAuB,CAAE,SAAAD,CAAAA,CAAU,CAAC,CAC5C,CAAC,CAGH,CAAA,OAAOM,CACT,CCrEO,CAAA,SAASC,GACdC,CACQ,CAAA,CACR,IAAMC,CAAU,CAAA,CAAA,EAAA,EAAKD,EAAW,QAAS,CAAA,IAAA,CAAK,GAAG,CAAC,CAAA,EAAA,CAAA,CAClD,OAAO,IAAI,MAAA,CAAOC,CAAO,CAC3B,CCNO,IAAMC,EAAAA,CAAsB,CACjCjY,CACAwV,CAAAA,CAAAA,GAC0B,CAC1B,IAAMrX,CAAAA,CAAwB,EAE9B,CAAA,IAAA,IAAWnR,KAAQwoB,CACbA,CAAAA,CAAAA,CAAQxoB,CAAI,CAAMgT,GAAAA,CAAAA,EACpB7B,EAAO,IAAKnR,CAAAA,CAAI,EAIpB,OAAKmR,CAAAA,CAAO,MAILA,CAAAA,CAAAA,CAHE,CAAC+B,CAAUF,CAAAA,CAAI,CAAC,CAI3B,CAAA,CCPO,IAAMkY,EAAgB,CAAA,CAAC,CAC5B,MAAAnT,CAAAA,CACF,IAE4C,CAC1C,GAAIA,EAAO,IACT,CAAA,OAAOA,EAAO,IAIhB,CAAA,GAAIA,CAAO,CAAA,UAAA,CACT,OAAO,QAIX,CAAA,CAEMoT,GAAmB,CAAC,CACxB,SAAAC,CACA,CAAA,MAAA,CAAArT,CACF,CAGM,GAAA,CACAA,EAAO,WACTqT,GAAAA,CAAAA,CAAS,YAAcrT,CAAO,CAAA,WAAA,CAAA,CAG5BA,EAAO,KACTqT,GAAAA,CAAAA,CAAS,KAAQrT,CAAAA,CAAAA,CAAO,OAE5B,CAEMsT,CAAAA,EAAAA,CAAkB,CAAC,CACvB,QAAA,CAAAD,EACA,MAAArT,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAIM,CACAvH,CAAO,CAAA,OAAA,GAAY,SACrBqT,CAAS,CAAA,OAAA,CAAUrT,EAAO,OAGxBA,CAAAA,CAAAA,CAAAA,CAAO,gBACLA,CAAAA,CAAAA,CAAO,UAAY,MACrBqT,GAAAA,CAAAA,CAAS,iBAAmBrT,CAAO,CAAA,OAAA,CAAA,CAE5BA,EAAO,OAAY,GAAA,MAAA,GAC5BqT,EAAS,OAAUrT,CAAAA,CAAAA,CAAO,SAGxBA,CAAO,CAAA,gBAAA,CACLA,EAAO,OAAY,GAAA,MAAA,GACrBqT,EAAS,gBAAmBrT,CAAAA,CAAAA,CAAO,OAE5BA,CAAAA,CAAAA,CAAAA,CAAO,UAAY,MAC5BqT,GAAAA,CAAAA,CAAS,QAAUrT,CAAO,CAAA,OAAA,CAAA,CAGxBA,EAAO,MACTqT,GAAAA,CAAAA,CAAS,OAASrT,CAAO,CAAA,MAAA,CAAA,CAGvBA,EAAO,QAAa,GAAA,MAAA,GACtBqT,EAAS,QAAWrT,CAAAA,CAAAA,CAAO,UAGzBA,CAAO,CAAA,SAAA,GAAc,MACvBqT,GAAAA,CAAAA,CAAS,UAAYrT,CAAO,CAAA,SAAA,CAAA,CAG1BA,EAAO,QAAa,GAAA,MAAA,GACtBqT,EAAS,QAAWrT,CAAAA,CAAAA,CAAO,UAGzBA,CAAO,CAAA,SAAA,GAAc,SACvBqT,CAAS,CAAA,SAAA,CAAYrT,EAAO,SAG1BA,CAAAA,CAAAA,CAAAA,CAAO,UACTqT,CAAS,CAAA,OAAA,CAAUrT,CAAO,CAAA,OAAA,CAAA,CAGxBA,EAAO,QACTqT,EAAAA,CAAAA,CAAS,YAAc,MACvBA,CAAAA,CAAAA,CAAS,aAAehO,CAAwBgO,CAAAA,CAAAA,CAAS,aAAc,CACrE,MACF,CAAC,CACQ9L,EAAAA,CAAAA,CAAM,aACf8L,CAAS,CAAA,YAAA,CAAehO,EAAwBgO,CAAS,CAAA,YAAA,CAAc,CACrE,MACF,CAAC,CAEL,EAAA,CAAA,CAEME,GAAa,CAAC,CAClB,QAAArV,CACA,CAAA,QAAA,CAAAmV,EAAW,EAAC,CACZ,OAAArT,CACA,CAAA,KAAA,CAAAuH,CACF,CAKuB,GAAA,CACjBvH,EAAO,QAAYA,EAAAA,CAAAA,CAAO,QAAaA,GAAAA,CAAAA,CAAO,SAChDqT,CAAS,CAAA,IAAA,CAAO,QAEhBA,CAAS,CAAA,IAAA,CAAO,QAGlB,IAAIG,CAAAA,CAAsC,EAE1C,CAAA,GAAIxT,EAAO,KAAO,CAAA,CAChB,IAAMyT,CAAgBC,CAAAA,EAAAA,CAAiB,CACrC,OAAAxV,CAAAA,CAAAA,CACA,MAAQ8B,CAAAA,CAAAA,CAAO,MACf,KAAAuH,CAAAA,CACF,CAAC,CAOD,CAAA,GALA8L,EAAS,YAAehO,CAAAA,CAAAA,CACtBgO,EAAS,YACTI,CAAAA,CAAAA,CAAc,YAChB,CAGE,CAAA,CAACD,EAAY,MACbxT,EAAAA,CAAAA,CAAO,UACPA,CAAO,CAAA,QAAA,GAAaA,CAAO,CAAA,QAAA,CAE3BwT,EAAc,KAAMxT,CAAAA,CAAAA,CAAO,QAAQ,CAAE,CAAA,IAAA,CAAKyT,CAAa,CAEnD,CAAA,KAAA,GAAA,MAAA,GAAUzT,EAAO,KACnBwT,CAAAA,CAAAA,CAAY,KAAKC,CAAa,CAAA,CAAA,KACzB,CACL,IAAME,CAAAA,CAAU3T,EAAO,KAAM,CAAA,KAAA,CACzB2T,CAAWA,EAAAA,CAAAA,CAAQ,OAAS,CAAK,EAAA,CAAC3T,EAAO,KAAM,CAAA,YAAY,EAE7DqT,CAAW,CAAA,CACT,GAAGA,CACH,CAAA,GAAGI,CACL,CAEAD,CAAAA,CAAAA,CAAY,KAAKC,CAAa,EAElC,CAEJ,CAEA,OAAAJ,CAAW3N,CAAAA,CAAAA,CAAiB,CAC1B,KAAO8N,CAAAA,CAAAA,CACP,OAAQH,CACV,CAAC,EAEMA,CACT,CAAA,CAEMO,GAAe,CAAC,CACpB,SAAAP,CAAW,CAAA,EACb,CAMEA,IAAAA,CAAAA,CAAS,KAAO,SAETA,CAAAA,CAAAA,CAAAA,CAGHQ,EAAc,CAAA,CAAC,CACnB,QAAAR,CAAAA,CAAAA,CAAW,EACX,CAAA,MAAA,CAAArT,CACF,CAMEqT,IAAAA,CAAAA,CAAS,KAAOrT,CAAO,CAAA,IAAA,CAEhBqT,GAGHS,EAAc,CAAA,CAAC,CACnB,OAAA5V,CAAAA,CAAAA,CACA,SAAAmV,CAAW,CAAA,EACX,CAAA,MAAA,CAAArT,EACA,KAAAuH,CAAAA,CACF,IAKuB,CACrB8L,CAAAA,CAAS,KAAO,QAEhB,CAAA,IAAMU,EAAoD,EAAC,CAE3D,QAAW9rB,CAAQ+X,IAAAA,CAAAA,CAAO,WAAY,CACpC,IAAMrH,EAAWqH,CAAO,CAAA,UAAA,CAAW/X,CAAI,CAAA,CACvC,GAAI,OAAO0Q,CAAAA,EAAa,UAEjB,CACL,IAAMqb,EAAmBN,EAAiB,CAAA,CACxC,QAAAxV,CACA,CAAA,MAAA,CAAQvF,EACR,KAAO,CAAA,CACL,GAAG4O,CACH,CAAA,UAAA,CAAY,IACd,CACF,CAAC,CACD8L,CAAAA,CAAAA,CAAS,aAAehO,CACtBgO,CAAAA,CAAAA,CAAS,aACTW,CAAiB,CAAA,YACnB,EACAD,CAAiB9rB,CAAAA,CAAI,CAAI+rB,CAAAA,EAC3B,CACF,CAMA,GAJI,OAAO,IAAKD,CAAAA,CAAgB,EAAE,MAChCV,GAAAA,CAAAA,CAAS,UAAaU,CAAAA,CAAAA,CAAAA,CAGpB/T,EAAO,oBAAyB,GAAA,MAAA,CAC7BqT,EAAS,UACZA,GAAAA,CAAAA,CAAS,qBAAuB,CAC9B,IAAA,CAAM,SACR,CAEO,CAAA,CAAA,KAAA,GAAA,OAAOrT,EAAO,oBAAyB,EAAA,SAAA,CAChDqT,EAAS,oBAAuB,CAAA,CAC9B,KAAMrT,CAAO,CAAA,oBAAA,CAAuB,SAAY,CAAA,OAClD,OACK,CACL,IAAMiU,EAA+BP,EAAiB,CAAA,CACpD,QAAAxV,CACA,CAAA,MAAA,CAAQ8B,EAAO,oBACf,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CACD8L,EAAS,oBAAuBY,CAAAA,EAClC,CAEA,OAAIjU,CAAAA,CAAO,QACTqT,GAAAA,CAAAA,CAAS,SAAWrT,CAAO,CAAA,QAAA,CAAA,CAGtBqT,CACT,CAEMa,CAAAA,EAAAA,CAAc,CAAC,CACnB,QAAA,CAAAb,EAAW,EACb,KAMEA,CAAS,CAAA,IAAA,CAAO,SAETA,CAGHc,CAAAA,CAAAA,EAAAA,CAAe,CAAC,CACpB,MAAA,CAAAnU,CACF,CAAA,GAEuB,CACrB,IAAMqT,CAAAA,CAA4B,EAElC,CAAA,OAAAD,GAAiB,CACf,QAAA,CAAAC,EACA,MAAArT,CAAAA,CACF,CAAC,CAEMqT,CAAAA,CACT,EAEMe,EAAa,CAAA,CAAC,CAClB,OAAAlW,CAAAA,CAAAA,CACA,MAAA8B,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAIuB,CACrB,IAAI8L,CAAAA,CAAWc,GAAa,CAAE,MAAA,CAAAnU,CAAO,CAAC,CAAA,CAEhCwT,EAAsC,EAAC,CACvCa,EAAalB,EAAc,CAAA,CAAE,OAAAnT,CAAO,CAAC,CAErCsU,CAAAA,CAAAA,CAAqBtU,EAAO,KAElC,CAAA,IAAA,IAAWuU,KAAqBD,CAAoB,CAAA,CAClD,IAAME,CAAsBd,CAAAA,EAAAA,CAAiB,CAC3C,OAAAxV,CAAAA,CAAAA,CACA,OAAQqW,CACR,CAAA,KAAA,CAAAhN,CACF,CAAC,CAAA,CAoBD,GAlBA8L,CAAS,CAAA,YAAA,CAAehO,CACtBgO,CAAAA,CAAAA,CAAS,aACTmB,CAAoB,CAAA,YACtB,EAEIxU,CAAO,CAAA,QAAA,GACLwU,EAAoB,QACtBA,CAAAA,CAAAA,CAAoB,SAAW,CAC7B,GAAGA,EAAoB,QACvB,CAAA,GAAGxU,EAAO,QACZ,CAAA,CAEAwU,EAAoB,QAAWxU,CAAAA,CAAAA,CAAO,QAI1CwT,CAAAA,CAAAA,CAAAA,CAAY,KAAKgB,CAAmB,CAAA,CAEhCD,EAAkB,IAAM,CAAA,CAC1B,IAAMlW,CAAMH,CAAAA,CAAAA,CAAQ,WAAyBqW,CAAkB,CAAA,IAAI,EAEnE,GAAIlW,CAAAA,CAAI,eAAiBkJ,CAAM,CAAA,IAAA,CAAM,CAEnC,IAAMkN,CAAAA,CADSvB,EAAoB3L,CAAAA,CAAAA,CAAM,IAAI,CACe,CAAA,GAAA,CACzDxd,IAAW,CACV,KAAA,CAAOA,EACP,IAAM,CAAA,QACR,EACF,CACM2qB,CAAAA,CAAAA,CAAyC,CAC7C,UAAY,CAAA,CACV,CAACrW,CAAI,CAAA,aAAa,EAChBoW,CAAa,CAAA,MAAA,CAAS,CAClB,CAAA,CACE,MAAOA,CACP,CAAA,eAAA,CAAiB,IACnB,CACAA,CAAAA,CAAAA,CAAa,CAAC,CACtB,CAAA,CACA,KAAM,QACR,CAAA,CACIpW,EAAI,QAAU,EAAA,QAAA,CAASA,EAAI,aAAa,CAAA,GAC1CqW,EAAsB,QAAW,CAAA,CAACrW,CAAI,CAAA,aAAa,GAErDmV,CAAY,CAAA,IAAA,CAAKkB,CAAqB,EACxC,CAEA,GAAI,CAACnN,CAAAA,CAAM,yBAAyB,GAAIgN,CAAAA,CAAAA,CAAkB,IAAI,CAAG,CAAA,CAC/D,IAAMI,CAAcjB,CAAAA,EAAAA,CAAiB,CACnC,OAAAxV,CAAAA,CAAAA,CACA,MAAQG,CAAAA,CAAAA,CACR,MAAO,CACL,GAAGkJ,EACH,IAAMgN,CAAAA,CAAAA,CAAkB,IAC1B,CACF,CAAC,EACDlB,CAAS,CAAA,YAAA,CAAehO,EACtBgO,CAAS,CAAA,YAAA,CACTsB,EAAY,YACd,EACF,CACF,CACF,CAEA,GAAIN,CAAAA,GAAe,SAAU,CAC3B,IAAMO,EAAiBC,EAAa,CAAA,CAClC,QAAA3W,CACA,CAAA,MAAA,CAAQ,CACN,GAAG8B,CAAAA,CACH,KAAM,QACR,CAAA,CACA,MAAAuH,CACF,CAAC,EAOD,GALA8L,CAAAA,CAAS,YAAehO,CAAAA,CAAAA,CACtBgO,EAAS,YACTuB,CAAAA,CAAAA,CAAe,YACjB,CAEIA,CAAAA,CAAAA,CAAe,WAAY,CAC7B,IAAA,IAAWE,KAAoBF,CAAe,CAAA,QAAA,EAAY,EACxD,CAAA,GAAI,CAACA,CAAe,CAAA,UAAA,CAAWE,CAAgB,CAC7C,CAAA,IAAA,IAAWP,CAAqBD,IAAAA,CAAAA,CAAoB,CAElD,IAAMS,CAAAA,CAAyBR,EAAkB,IAC7CrW,CAAAA,CAAAA,CAAQ,WAAyBqW,CAAkB,CAAA,IAAI,EACvDA,CAEJ,CAAA,GACEpB,GAAc,CAAE,MAAA,CAAQ4B,CAAuB,CAAC,CAAA,GAAM,SACtD,CACA,IAAMP,CAAsBK,CAAAA,EAAAA,CAAa,CACvC,OAAA3W,CAAAA,CAAAA,CACA,OAAQ,CACN,GAAG6W,EACH,IAAM,CAAA,QACR,EACA,KAAAxN,CAAAA,CACF,CAAC,CAOD,CAAA,GALA8L,EAAS,YAAehO,CAAAA,CAAAA,CACtBgO,EAAS,YACTmB,CAAAA,CAAAA,CAAoB,YACtB,CAAA,CAEIA,EAAoB,UAAaM,GAAAA,CAAgB,EAAG,CACtDF,CAAAA,CAAe,WAAWE,CAAgB,CAAA,CACxCN,EAAoB,UAAWM,CAAAA,CAAgB,EACjD,KACF,CACF,CACF,CAGJtB,CAAAA,CAAY,KAAKoB,CAAc,EACjC,CACF,CASA,GAPAvB,CAAW3N,CAAAA,CAAAA,CAAiB,CAC1B,KAAO8N,CAAAA,CAAAA,CACP,gBAAiB,KACjB,CAAA,mBAAA,CAAqB,KACrB,MAAQH,CAAAA,CACV,CAAC,CAEGrT,CAAAA,CAAAA,CAAO,YAAY,CAAG,CAAA,CAExB,IAAMgV,CAAsC,CAAA,CAC1C,CACE,IAAA,CAAM,MACR,CACF,CAAA,CAEIxB,EAAY,MACdwB,EAAAA,CAAAA,CAAY,QAAQ3B,CAAQ,CAAA,CAG9BA,EAAW,CACT,KAAA,CAAO2B,EACP,eAAiB,CAAA,IACnB,EAIIA,CAAY,CAAA,CAAC,EAAG,UAClB3B,GAAAA,CAAAA,CAAS,UAAa2B,CAAAA,CAAAA,CAAY,CAAC,CAAG,CAAA,UAAA,CAAA,CAKpCA,EAAY,CAAC,CAAA,CAAG,cAClB3B,CAAS,CAAA,WAAA,CAAc2B,EAAY,CAAC,CAAA,CAAG,aAE3C,CAEA,OAAO3B,CACT,CAEM4B,CAAAA,EAAAA,CAAY,CAAC,CACjB,OAAA,CAAA/W,CACA,CAAA,MAAA,CAAA8B,EACA,KAAAuH,CAAAA,CACF,IAIuB,CACrB,IAAI8L,EAAWc,EAAa,CAAA,CAAE,OAAAnU,CAAO,CAAC,EAEtCqT,CAAS,CAAA,IAAA,CAAO,OAEhB,IAAMG,CAAAA,CAAsC,EAE5C,CAAA,IAAA,GAAW,CAACtlB,CAAAA,CAAOgnB,CAAS,CAAKlV,GAAAA,CAAAA,CAAO,KAAK,OAAQ,EAAA,CAAG,CACtD,IAAMmV,CAAAA,CAAkB,OAAOD,CAC3BE,CAAAA,CAAAA,CAuBJ,GApBED,CAAoB,GAAA,QAAA,EACpBA,IAAoB,QACpBA,EAAAA,CAAAA,GAAoB,UAEpBC,CAAWD,CAAAA,CAAAA,CACFA,CAAoB,GAAA,QAAA,EAAY,MAAM,OAAQD,CAAAA,CAAS,EAChEE,CAAW,CAAA,OAAA,CACFF,IAAc,IAEnBlV,CAAAA,CAAAA,CAAO,YAAY,CACrBoV,GAAAA,CAAAA,CAAW,QAGb,OAAQ,CAAA,IAAA,CACN,YACA,CAAcD,WAAAA,EAAAA,CAAe,mBAAmBD,CAAS,CAAA,UAAA,CAAA,CACzDlV,CAAO,CAAA,IACT,EAGE,CAACoV,CAAAA,CACH,SAGF,IAAMC,CAAAA,CAAeR,GAAa,CAChC,OAAA,CAAA3W,EACA,MAAQ,CAAA,CACN,YAAa8B,CAAO,CAAA,qBAAqB,IAAI9R,CAAK,CAAA,CAClD,MACE8R,CAAO,CAAA,iBAAiB,CAAI9R,GAAAA,CAAK,GAAK8R,CAAO,CAAA,aAAa,IAAI9R,CAAK,CAAA,CAErE,KAAMknB,CAAa,GAAA,MAAA,CAAS,SAAWA,CACzC,CAAA,CACA,MAAA7N,CACF,CAAC,EAED8N,CAAa,CAAA,KAAA,CAAQH,EAGjBE,CAAa,GAAA,MAAA,GACfC,CAAa,CAAA,IAAA,CAAOD,GAGlBC,CAAa,CAAA,IAAA,GAAS,UACxBA,CAAa,CAAA,IAAA,CAAO,SAGtBhC,CAAS,CAAA,YAAA,CAAehO,EACtBgO,CAAS,CAAA,YAAA,CACTgC,EAAa,YACf,CAAA,CAEA7B,EAAY,IAAK6B,CAAAA,CAAY,EAC/B,CAEA,OAAAhC,CAAW3N,CAAAA,CAAAA,CAAiB,CAC1B,KAAO8N,CAAAA,CAAAA,CACP,OAAQH,CACV,CAAC,EAEMA,CACT,CAAA,CAEMpS,GAAW,CAAC,CAChB,QAAA/C,CACA,CAAA,MAAA,CAAA8B,EACA,KAAAuH,CAAAA,CACF,IAIuB,CACrB,IAAM8L,CAA4B,CAAA,GAalC,GATAA,CAAAA,CAAS,KAAO,SAAUrT,CAAAA,CAAAA,CAAO,IAAI,CAIrCqT,CAAAA,CAAAA,CAAS,KAAOA,CAAS,CAAA,IAAA,CAAK,QAC5B,0BACA,CAAA,yBACF,EAEI,CAAC9L,CAAAA,CAAM,yBAAyB,GAAIvH,CAAAA,CAAAA,CAAO,IAAI,CAAA,CAAG,CACpD,IAAMsV,CAAAA,CAAYpX,EAAQ,UAAyB8B,CAAAA,CAAAA,CAAO,IAAI,CACxD2U,CAAAA,CAAAA,CAAcjB,GAAiB,CACnC,OAAA,CAAAxV,EACA,MAAQoX,CAAAA,CAAAA,CACR,MAAO,CACL,GAAG/N,EACH,IAAMvH,CAAAA,CAAAA,CAAO,IACb,CAAA,UAAA,CAAY,KACd,CACF,CAAC,EACDqT,CAAS,CAAA,YAAA,CAAehO,EACtBgO,CAAS,CAAA,YAAA,CACTsB,EAAY,YACd,EACF,CAEA,OAAOtB,CACT,EAEMkC,EAAoB,CAAA,CAAC,CACzB,OAAArX,CAAAA,CAAAA,CACA,QAAAmV,CAAAA,CAAAA,CACA,OAAArT,CACA,CAAA,KAAA,CAAAuH,CACF,CAKuB,GAAA,CAChB8L,IACHA,CAAWc,CAAAA,EAAAA,CAAa,CAAE,MAAAnU,CAAAA,CAAO,CAAC,CAGpC,CAAA,CAAA,IAAMwV,EAAgC,EAAC,CAEvClC,GAAgB,CACd,QAAA,CAAUkC,CACV,CAAA,MAAA,CAAAxV,EACA,KAAAuH,CAAAA,CACF,CAAC,CAEGiO,CAAAA,CAAAA,CAAa,UAAY,IAG3B,EAAA,OAAOA,EAAa,OAGtB,CAAA,IAAMhC,EAAsC,CAC1CqB,EAAAA,CAAa,CACX,OAAA3W,CAAAA,CAAAA,CACA,SAAUsX,CACV,CAAA,MAAA,CAAAxV,CACA,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CACD,CACE,IAAM,CAAA,MACR,CACF,CAEA,CAAA,OAAA8L,EAAW3N,CAAiB,CAAA,CAC1B,MAAO8N,CACP,CAAA,MAAA,CAAQH,CACV,CAAC,CAAA,CAEMA,CACT,CAEMoC,CAAAA,EAAAA,CAAY,CAAC,CACjB,QAAAvX,CACA,CAAA,MAAA,CAAA8B,EACA,KAAAuH,CAAAA,CACF,IAIuB,CACrB,IAAM8L,EAAWc,EAAa,CAAA,CAAE,OAAAnU,CAAO,CAAC,EAExCsT,EAAgB,CAAA,CACd,SAAAD,CACA,CAAA,MAAA,CAAArT,CACA,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CAED,IAAMva,CAAOmmB,CAAAA,EAAAA,CAAc,CAAE,MAAAnT,CAAAA,CAAO,CAAC,CAErC,CAAA,OAAKhT,EAIDgT,CAAO,CAAA,YAAY,EACduV,EAAkB,CAAA,CACvB,QAAArX,CACA,CAAA,QAAA,CAAAmV,CACA,CAAA,MAAA,CAAQ,CACN,GAAGrT,CAAAA,CACH,KAAAhT,CACF,CAAA,CACA,MAAAua,CACF,CAAC,EAGIsN,EAAa,CAAA,CAClB,QAAA3W,CACA,CAAA,QAAA,CAAAmV,EACA,MAAQ,CAAA,CACN,GAAGrT,CACH,CAAA,IAAA,CAAAhT,CACF,CAAA,CACA,MAAAua,CACF,CAAC,EAvBQ8L,CAwBX,CAAA,CAEMwB,GAAe,CAAC,CACpB,QAAA3W,CACA,CAAA,QAAA,CAAAmV,EACA,MAAArT,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAKuB,CAWrB,OAVK8L,CAAAA,GACHA,CAAWc,CAAAA,EAAAA,CAAa,CAAE,MAAAnU,CAAAA,CAAO,CAAC,CAElCsT,CAAAA,EAAAA,CAAgB,CACd,QAAAD,CAAAA,CAAAA,CACA,OAAArT,CACA,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CAAA,CAGKvH,EAAO,IAAM,EACnB,KAAK,OACH,CAAA,OAAOuT,EAAW,CAAA,CAChB,QAAArV,CACA,CAAA,QAAA,CAAAmV,EACA,MAAArT,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAC,EACH,KAAK,SAAA,CACH,OAAOqM,EAAa,CAAA,CAElB,QAAA,CAAAP,CAGF,CAAC,CACH,CAAA,KAAK,UACL,KAAK,QAAA,CACH,OAAOQ,EAAY,CAAA,CAEjB,QAAA,CAAAR,EACA,MAAArT,CAAAA,CAEF,CAAC,EACH,KAAK,QAAA,CACH,OAAO8T,EAAAA,CAAY,CACjB,OAAA5V,CAAAA,CAAAA,CACA,SAAAmV,CACA,CAAA,MAAA,CAAArT,EACA,KAAAuH,CAAAA,CACF,CAAC,CACH,CAAA,KAAK,SACH,OAAO2M,EAAAA,CAAY,CAEjB,SAAAb,CAGF,CAAC,CAAA,CACH,QAEE,OAAOqC,EAAAA,CAAa,CAElB,SAAArC,CACA,CAAA,MAAA,CAAArT,EACA,KAAAuH,CAAAA,CACF,CAAC,CACL,CACF,EAEMmO,EAAe,CAAA,CAAC,CACpB,QAAA,CAAArC,EACA,MAAArT,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,IAMO8L,IACHA,CAAWc,CAAAA,EAAAA,CAAa,CAAE,MAAAnU,CAAAA,CAAO,CAAC,CAGpCqT,CAAAA,CAAAA,CAAAA,CAAS,KAAO,SAEhBC,CAAAA,EAAAA,CAAgB,CACd,QAAAD,CAAAA,CAAAA,CACA,MAAArT,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAC,EAEM8L,CAGIK,CAAAA,CAAAA,EAAAA,CAAmB,CAAC,CAC/B,OAAA,CAAAxV,EACA,MAAA8B,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,IAKOA,IACHA,CAAQ,CAAA,CACN,yBAA0B,IAAI,GAChC,CAGEA,CAAAA,CAAAA,CAAAA,CAAM,MACRA,CAAM,CAAA,wBAAA,CAAyB,IAAIA,CAAM,CAAA,IAAI,EAG3CvH,CAAO,CAAA,IAAA,CACFiB,GAAS,CACd,OAAA,CAAA/C,EACA,MAAQ8B,CAAAA,CAAAA,CACR,MAAAuH,CACF,CAAC,EAGCvH,CAAO,CAAA,IAAA,CACFiV,EAAU,CAAA,CACf,QAAA/W,CACA,CAAA,MAAA,CAAQ8B,EACR,KAAAuH,CAAAA,CACF,CAAC,CAGCvH,CAAAA,CAAAA,CAAO,MACFoU,EAAW,CAAA,CAChB,QAAAlW,CACA,CAAA,MAAA,CAAQ8B,EACR,KAAAuH,CAAAA,CACF,CAAC,CAICvH,CAAAA,CAAAA,CAAO,IAAQA,EAAAA,CAAAA,CAAO,WACjByV,EAAU,CAAA,CACf,QAAAvX,CACA,CAAA,MAAA,CAAQ8B,EACR,KAAAuH,CAAAA,CACF,CAAC,CAGImO,CAAAA,EAAAA,CAAa,CAElB,OAAA1V,CACA,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CAAA,CAGUoO,EAAc,CAAA,CAAC,CAC1B,IAAA1a,CAAAA,CAAAA,CACA,QAAAiD,CACA,CAAA,MAAA,CAAA8B,CACF,CAIM,GAAA,CACC9B,EAAQ,EAAG,CAAA,UAAA,GACdA,EAAQ,EAAG,CAAA,UAAA,CAAa,EAGrBA,CAAAA,CAAAA,CAAAA,CAAQ,GAAG,UAAW,CAAA,OAAA,GACzBA,CAAQ,CAAA,EAAA,CAAG,WAAW,OAAU,CAAA,IAGlCA,CAAQ,CAAA,EAAA,CAAG,WAAW,OAAQ/C,CAAAA,CAAAA,CAAUF,CAAI,CAAC,CAAA,CAAIyY,GAAiB,CAChE,OAAA,CAAAxV,EACA,MAAA8B,CAAAA,CAAAA,CACA,MAAO,CACL,IAAA,CAAA/E,CACA,CAAA,wBAAA,CAA0B,IAAI,GAChC,CACF,CAAC,EACH,CAAA,CCl2BA,IAAM2a,EACJvB,CAAAA,CAAAA,EAEAA,IAAe,SACfA,EAAAA,CAAAA,GAAe,WACfA,CAAe,GAAA,QAAA,EACfA,IAAe,QAGJwB,CAAAA,EAAAA,CAAkB,CAAC,CAC9B,OAAA,CAAA3X,CACA,CAAA,IAAA,CAAAjW,EACA,MAAA+X,CAAAA,CACF,IAUwB,CAItB,GAHyB+S,GACvB7U,CAAQ,CAAA,MAAA,CAAO,OAAO,UACxB,CAAA,CACqB,KAAKjW,CAAI,CAAA,CAC5B,OAAO,KAGT,CAAA,GAAI,SAAU+X,CAAQ,CAAA,CACpB,IAAM3B,CAAAA,CAAMH,EAAQ,UAClB8B,CAAAA,CAAAA,CAAO,MAAQ,EACjB,CAAA,CAEA,GAAI,IAAQ3B,GAAAA,CAAAA,EAAOA,EAAI,EAAI,CAAA,CACzB,IAAMiX,CACJ,CAAA,QAAA,GAAYjX,EACRA,CAAI,CAAA,MAAA,CACJ,CACE,GAAGA,CAAAA,CACH,EAAI,CAAA,MACN,EAEN,OAAOwX,EAAAA,CAAgB,CACrB,OAAA3X,CAAAA,CAAAA,CACA,KAAAjW,CACA,CAAA,MAAA,CAAQqtB,CACV,CAAC,CACH,CAEA,OAAOO,EAAAA,CAAgB,CACrB,OAAA3X,CAAAA,CAAAA,CACA,KAAAjW,CACA,CAAA,MAAA,CAAQoW,CACV,CAAC,CACH,CAEA,GAAI,OAAQ2B,CAAQ,CAAA,CAClB,GAAI,CAACA,CAAAA,CAAO,GACV,OAAO,MAAA,CAGT,IAAM8V,CACJ,CAAA,QAAA,GAAY9V,EACRA,CAAO,CAAA,MAAA,CACP,CACE,GAAGA,CAAAA,CACH,EAAI,CAAA,MACN,EAEN,OAAO6V,EAAAA,CAAgB,CACrB,OAAA3X,CAAAA,CAAAA,CACA,KAAAjW,CACA,CAAA,MAAA,CAAQ6tB,CACV,CAAC,CACH,CAEA,IAAW7tB,IAAAA,CAAAA,IAAQ+X,EAAO,UAKxB,CAAA,GAJyB+S,GACvB7U,CAAQ,CAAA,MAAA,CAAO,MAAO,CAAA,UACxB,EAEqB,IAAKjW,CAAAA,CAAI,EAAG,CAC/B,IAAM0Q,EAAWqH,CAAO,CAAA,UAAA,CAAW/X,CAAI,CAEvC,CAAA,GAAI,OAAO0Q,CAAa,EAAA,SAAA,EAAa,EAAE,MAAUA,GAAAA,CAAAA,CAAAA,CAAW,CAC1D,IAAM0b,CAAAA,CAAalB,EAAc,CAAA,CAAE,OAAQxa,CAAS,CAAC,EAGrD,GAAIid,EAAAA,CAAiBvB,CAAU,CAC7B,CAAA,OAAOpsB,CAEX,CACF,CAGF,QAAW8tB,CAAS/V,IAAAA,CAAAA,CAAO,OAAS,EAAC,CAAG,CACtC,IAAMgT,CAAAA,CAAa6C,EAAgB,CAAA,CACjC,QAAA3X,CACA,CAAA,IAAA,CAAAjW,EACA,MAAQ8tB,CAAAA,CACV,CAAC,CACD,CAAA,GAAI/C,EACF,OAAOA,CAEX,CAEA,OAAO,MACT,EChGA,IAAMgD,EAAAA,CAAsB,CAAC,CAC3B,WAAA,CAAAC,CACA,CAAA,SAAA,CAAA7X,CACF,CAGM,GAAA,CACAA,EAAU,UAAe,GAAA,MAAA,GAC3B6X,EAAY,UAAa7X,CAAAA,CAAAA,CAAU,YAGjCA,CAAU,CAAA,WAAA,GACZ6X,EAAY,WAAc7X,CAAAA,CAAAA,CAAU,aAGlCA,CAAU,CAAA,OAAA,GACZ6X,EAAY,OAAU7X,CAAAA,CAAAA,CAAU,OAG9BA,CAAAA,CAAAA,CAAAA,CAAU,MAAM,MAClB6X,GAAAA,CAAAA,CAAY,KAAO7X,CAAU,CAAA,IAAA,EAEjC,EAEM8X,EAAkB,CAAA,CAAC,CACvB,OAAAhY,CAAAA,CAAAA,CACA,OAAA6F,CACA,CAAA,SAAA,CAAA3F,EACA,IAAApH,CAAAA,CAAAA,CACA,MAAAuQ,CACF,CAAA,GAI0B,CACxB,IAAM0O,EAAkC,CACtC,EAAA,CAAI3O,GAAc,CAChB,OAAA,CAAApJ,EACA,EAAIE,CAAAA,CAAAA,CAAU,YACd,MAAA2F,CAAAA,CAAAA,CACA,KAAA/M,CACA,CAAA,KAAA,CAAAuQ,CACF,CAAC,CAAA,CACD,OAAAxD,CACA,CAAA,IAAA,CAAA/M,CACF,CAAA,CAEA,OAAIoH,CAAU,CAAA,WAAA,GACZ6X,EAAY,WAAc7X,CAAAA,CAAAA,CAAU,aAGtC4X,EAAoB,CAAA,CAClB,YAAAC,CACA,CAAA,SAAA,CAAA7X,CACF,CAAC,CAAA,CAEM6X,CACT,CAEME,CAAAA,EAAAA,CAAyB,CAAC,CAC9B,OAAA,CAAAjY,CACA,CAAA,MAAA,CAAA6F,EACA,SAAA3F,CAAAA,CAAAA,CACA,KAAApH,CACA,CAAA,kBAAA,CAAAof,EACA,KAAA7O,CAAAA,CACF,IAK0B,CACxB,IAAM0O,EAAcC,EAAgB,CAAA,CAClC,QAAAhY,CACA,CAAA,MAAA,CAAA6F,EACA,SAAA3F,CAAAA,CAAAA,CACA,IAAApH,CAAAA,CAAAA,CACA,MAAAuQ,CACF,CAAC,EAEGnJ,CAAU,CAAA,UAAA,GACZ6X,EAAY,UAAa7X,CAAAA,CAAAA,CAAU,YAGrC,IAAIiY,CAAAA,CAAwB,MACtBC,CAAkC,CAAA,CACtC,UAAW,EACX,CAAA,MAAA,CAAQ,CACN,UAAY,CAAA,EACZ,CAAA,QAAA,CAAU,EACV,CAAA,IAAA,CAAM,QACR,CACF,CAAA,CACMC,EAA2C,EAAC,CAElD,QAAWC,CAAwBpY,IAAAA,CAAAA,CAAU,aAAe,EAAC,CAAG,CAC9D,IAAMqY,CAAAA,CACJ,SAAUD,CACNtY,CAAAA,CAAAA,CAAQ,UAA4BsY,CAAAA,CAAAA,CAAqB,IAAI,CAC7DA,CAAAA,CAAAA,CACAxW,EACJyW,CAAY,CAAA,EAAA,GAAO,OACfA,CAAY,CAAA,MAAA,CACZ,CACE,GAAGA,CAAAA,CACH,OAAQA,CAAY,CAAA,IAAA,GAAS,OAAS,QAAWA,CAAAA,CAAAA,CAAY,OAC7D,QAAU,CAAA,MAAA,CACV,IAAMA,CAAAA,CAAAA,CAAY,OAAS,MAAS,CAAA,QAAA,CAAWA,EAAY,IAC7D,CAAA,CACAC,EAAW9D,EAAiB,CAAA,CAChC,UAAWxU,CAAU,CAAA,QAAA,CACrB,SAAU,CAAE,MAAA,CAAA4B,CAAO,CACrB,CAAC,EAEK2S,CACJ+D,CAAAA,CAAAA,CAAS,IAAM/D,CAAAA,CAAAA,EAAYA,EAAQ,IAAS,GAAA,MAAM,GAAK+D,CAAS,CAAA,CAAC,EAEnE,GAAI/D,CAAAA,CAAS,CACX,IAAMK,CAAAA,CAAa6C,GAAgB,CACjC,OAAA,CAAA3X,EACA,IAAM,CAAA,EAAA,CACN,OACEyU,CAAQ,CAAA,MAAA,EAAU,MAAUA,GAAAA,CAAAA,CAAQ,OAChC,CACE,KAAA,CAAO,CAAC,CAAE,GAAGA,EAAQ,MAAO,CAAC,EAC7B,WAAa8D,CAAAA,CAAAA,CAAY,WAC3B,CACA,CAAA,CACE,YAAaA,CAAY,CAAA,WAAA,CACzB,GAAG9D,CAAQ,CAAA,MACb,CACR,CAAC,EAEKU,CAAWK,CAAAA,EAAAA,CAAiB,CAChC,OAAAxV,CAAAA,CAAAA,CACA,OACE,MAAUuY,GAAAA,CAAAA,CACN,CACE,KAAO,CAAA,CACL,CACE,GAAGA,CAAAA,CACH,KAAMA,CAAY,CAAA,IAAA,CAClB,SAAU,EAAC,CACX,IAAM,CAAA,QACR,CACF,CACA,CAAA,WAAA,CAAaA,EAAY,WAC3B,CAAA,CACA9D,EAAQ,MAAU,EAAA,MAAA,GAAUA,EAAQ,MAClC,CAAA,CACE,MAAO,CAAC,CAAE,GAAGA,CAAQ,CAAA,MAAO,CAAC,CAC7B,CAAA,WAAA,CAAa8D,CAAY,CAAA,WAC3B,EACA,CACE,WAAA,CAAaA,EAAY,WACzB,CAAA,GAAG9D,EAAQ,MACb,CAAA,CACR,MAAO,MACT,CAAC,EAED2D,CAAkB,CAAA,SAAA,CAAY3D,EAAQ,SAElC8D,CAAAA,CAAAA,CAAY,KAAO,MACrBH,CAAAA,CAAAA,CAAkB,MAASjD,CAAAA,CAAAA,EAE3BiD,EAAkB,MAAO,CAAA,UAAA,CAAYG,EAAY,IAAI,CAAA,CAAIpD,EAErDoD,CAAY,CAAA,QAAA,EACdF,EAA0B,IAAKE,CAAAA,CAAAA,CAAY,IAAI,CAI/CzD,CAAAA,CAAAA,CAAAA,GACFsD,EAAkB,UAAatD,CAAAA,CAAAA,CAAAA,CAG7BL,EAAQ,IACV2D,GAAAA,CAAAA,CAAkB,IAAO3D,CAAAA,CAAAA,CAAQ,MAErC,CAEI8D,CAAAA,CAAY,WACdJ,CAAwB,CAAA,IAAA,EAE5B,CAEIC,CAAkB,CAAA,SAAA,GAChBC,EAA0B,MAC5BD,GAAAA,CAAAA,CAAkB,OAAO,QAAWC,CAAAA,CAAAA,CAAAA,CAGtCN,EAAY,IAAOK,CAAAA,CAAAA,CAEfD,IACFJ,CAAY,CAAA,IAAA,CAAK,QAAWI,CAAAA,CAAAA,CAAAA,CAAAA,CAIhC,QAAWpuB,CAAQmW,IAAAA,CAAAA,CAAU,UAAW,CACjC6X,CAAAA,CAAY,YACfA,CAAY,CAAA,SAAA,CAAY,EAG1B,CAAA,CAAA,IAAMxP,EAAWrI,CAAU,CAAA,SAAA,CAAUnW,CAAI,CACnC0uB,CAAAA,CAAAA,CACJ,SAAUlQ,CACNvI,CAAAA,CAAAA,CAAQ,UAA2BuI,CAAAA,CAAAA,CAAS,IAAI,CAChDA,CAAAA,CAAAA,CACAiQ,EAAW9D,EAAiB,CAAA,CAEhC,UAAWxU,CAAU,CAAA,QAAA,CAAWA,EAAU,QAAW,CAAA,CAAC,kBAAkB,CACxE,CAAA,QAAA,CAAUuY,CACZ,CAAC,CAAA,CAEKhE,EACJ+D,CAAS,CAAA,IAAA,CAAM/D,CAAYA,EAAAA,CAAAA,CAAQ,OAAS,MAAM,CAAA,EAAK+D,EAAS,CAAC,CAAA,CAE/D/D,EACFsD,CAAY,CAAA,SAAA,CAAUhuB,CAAI,CAAI,CAAA,CAC5B,UAAW0qB,CAAQ,CAAA,SAAA,CACnB,OAAQe,EAAiB,CAAA,CACvB,QAAAxV,CACA,CAAA,MAAA,CAAQ,CACN,WAAA,CAAayY,EAAe,WAC5B,CAAA,GAAGjE,GAAgB,CAAE,OAAA,CAAAC,CAAQ,CAAC,CAChC,EACA,KAAO,CAAA,MACT,CAAC,CACH,CAAA,CAEAsD,EAAY,SAAUhuB,CAAAA,CAAI,EAAI,CAC5B,MAAA,CAAQ,CACN,WAAA,CAAa0uB,EAAe,WAG5B,CAAA,IAAA,CAAM1uB,IAAS,KAAQ,CAAA,MAAA,CAAS,SAClC,CACF,EAEJ,CAEA,GAAImW,CAAAA,CAAU,SAAU,CACtB,IAAMwY,EAAkD,EAAC,CAEzD,QAAWC,CAA6BzY,IAAAA,CAAAA,CAAU,QAChD,CAAA,IAAA,IAAWnW,KAAQ4uB,CAA2B,CAAA,CAC5C,IAAMC,CAAuBV,CAAAA,CAAAA,CAAmB,IAAInuB,CAAI,CAAA,CAExD,GAAI,CAAC6uB,CAAAA,CACH,SAGF,IAAIC,CAAAA,CAcJ,GAZID,CAAqB,CAAA,IAAA,GAAS,WAChCC,CAAyBD,CAAAA,CAAAA,CAAAA,CAGvBA,CAAqB,CAAA,IAAA,GAAS,UAChCC,CAAyB,CAAA,CACvB,YAAaD,CAAqB,CAAA,WAAA,CAClC,OAAQ,OACR,CAAA,IAAA,CAAM,MACR,CAGEA,CAAAA,CAAAA,CAAAA,CAAqB,OAAS,QAOhC,CAAA,OANAC,EAAyB,CACvB,WAAA,CAAaD,EAAqB,WAClC,CAAA,KAAA,CAAO,EAAC,CACR,KAAM,QACR,CAAA,CAEQA,EAAqB,IAAM,EACjC,KAAK,YACHC,CAAAA,CAAAA,CAAuB,MAAM,iBAAoB,CAAA,CAC/C,iBAAkBD,CAAqB,CAAA,gBAAA,CACvC,OAAQA,CAAqB,CAAA,MAAA,CAC7B,SAAUA,CAAqB,CAAA,QACjC,CACA,CAAA,MACF,KAAK,aACHC,CAAAA,CAAAA,CAAuB,MAAM,iBAAoB,CAAA,CAC/C,OAAQD,CAAqB,CAAA,MAAA,CAC7B,SAAUA,CAAqB,CAAA,QACjC,EACA,MACF,KAAK,WACHC,CAAuB,CAAA,KAAA,CAAM,SAAW,CACtC,gBAAA,CAAkBD,CAAqB,CAAA,gBAAA,CACvC,OAAQA,CAAqB,CAAA,MAC/B,EACA,MACF,KAAK,WACHC,CAAuB,CAAA,KAAA,CAAM,SAAW,CACtC,MAAA,CAAQD,EAAqB,MAC7B,CAAA,QAAA,CAAUA,EAAqB,QACjC,CAAA,CACA,KACJ,CAGGC,CAAAA,EAILH,CAAsB,CAAA,IAAA,CAAKG,CAAsB,EACnD,CAGEH,EAAsB,MACxBX,GAAAA,CAAAA,CAAY,SAAWW,CAE3B,EAAA,CAKA,OAAOX,CACT,CAAA,CAEae,GAAiB,CAAC,CAC7B,QAAA9Y,CACA,CAAA,MAAA,CAAA6F,EACA,SAAA3F,CAAAA,CAAAA,CACA,IAAApH,CAAAA,CAAAA,CACA,mBAAAof,CACA,CAAA,KAAA,CAAA7O,CACF,CAUM,GAAA,CACCrJ,EAAQ,EAAG,CAAA,KAAA,GACdA,EAAQ,EAAG,CAAA,KAAA,CAAQ,EAGhBA,CAAAA,CAAAA,CAAAA,CAAQ,GAAG,KAAMlH,CAAAA,CAAI,IACxBkH,CAAQ,CAAA,EAAA,CAAG,KAAMlH,CAAAA,CAAI,EAAI,EAAC,CAAA,CAG5BkH,EAAQ,EAAG,CAAA,KAAA,CAAMlH,CAAI,CAAE+M,CAAAA,CAAM,EAAIoS,EAAuB,CAAA,CACtD,QAAAjY,CACA,CAAA,MAAA,CAAA6F,EACA,SAAA3F,CAAAA,CAAAA,CACA,KAAApH,CACA,CAAA,kBAAA,CAAAof,CACA,CAAA,KAAA,CAAA7O,CACF,CAAC,EACH,ECzWA,IAAM0P,EAAAA,CACJC,GACY,CACZ,OAAQA,GACN,KAAK,QACH,OAAO,KAAA,CACT,KAAK,KACL,CAAA,KAAK,QACL,KAAK,KAAA,CACL,KAAK,KAAA,CACL,QACE,OAAO,MACX,CACF,CAKMC,CAAAA,EAAAA,CACJC,GAC0C,CAC1C,OAAQA,GACN,KAAK,SACL,KAAK,MAAA,CACH,OAAO,QACT,CAAA,KAAK,QACL,QACE,OAAO,MACX,CACF,EAEaC,EAA0B,CAAA,CAAC,CACtC,OAAAnZ,CAAAA,CAAAA,CACA,UAAAE,CACA,CAAA,UAAA,CAAAtO,CACF,CAIuC,GAAA,CACrC,GAAI,CAACA,CAAAA,EAAc,CAAC,MAAO,CAAA,IAAA,CAAKA,CAAU,CAAE,CAAA,MAAA,CAC1C,OAGF,IAAMwnB,EAAwC,EAAC,CAE/C,QAAWC,CAAwBznB,IAAAA,CAAAA,CAAY,CAC7C,IAAMC,CAAAA,CACJ,SAAUwnB,CACNrZ,CAAAA,CAAAA,CAAQ,YAA6BqZ,CAAoB,CAAA,CACzDA,EAGN,GAAIxnB,CAAAA,CAAU,KAAO,MAAUA,EAAAA,CAAAA,CAAU,EAAO,GAAA,UAAA,CAAY,CAErDqO,CAAU,CAAA,WAAA,GAEbA,EAAU,WAAc,CAAA,IAI1BA,CAAU,CAAA,WAAA,CAAY,KAAKrO,CAAS,CAAA,CACpC,QACF,CAEKunB,CAAAA,CAAiBvnB,EAAU,EAAE,CAAA,GAChCunB,EAAiBvnB,CAAU,CAAA,EAAE,CAAI,CAAA,IAInCunB,CAAiBvnB,CAAAA,CAAAA,CAAU,EAAE,CAAGA,CAAAA,CAAAA,CAAU,KAAK,iBAAkB,EAAC,EAChEynB,EAAuB,CAAA,CACrB,QAAAtZ,CACA,CAAA,SAAA,CAAAnO,CACF,CAAC,EACL,CAEA,OAAOunB,CACT,CAEME,CAAAA,EAAAA,CAAyB,CAAC,CAC9B,OAAA,CAAAtZ,EACA,SAAAnO,CAAAA,CACF,IAG0B,CACxB,IAAMiQ,EAASjQ,CAET+lB,CAAAA,CAAAA,CACJ9V,GAAU,MAAUA,GAAAA,CAAAA,CAChB,CACE,KAAO,CAAA,CACL,CACE,GAAGA,CAAAA,CACH,IAAMA,CAAAA,CAAAA,CAAO,KACb,QAAU,CAAA,KAAA,CAAM,QAAQA,CAAO,CAAA,QAAQ,EAAIA,CAAO,CAAA,QAAA,CAAW,EAC7D,CAAA,IAAA,CAAMA,EAAO,IACf,CACF,EACA,WAAajQ,CAAAA,CAAAA,CAAU,WACzB,CACA,CAAA,CACE,WAAaA,CAAAA,CAAAA,CAAU,YACvB,GAAGiQ,CAAAA,CACH,SAAU,KAAM,CAAA,OAAA,CAAQA,EAAO,QAAQ,CAAA,CAAIA,EAAO,QAAW,CAAA,GAC7D,IAAMA,CAAAA,CAAAA,CAAO,IACf,CAEAgT,CAAAA,CAAAA,CAAa6C,GAAgB,CACjC,OAAA,CAAA3X,CACA,CAAA,IAAA,CAAMnO,EAAU,IAChB,CAAA,MAAA,CAAQ+lB,CACV,CAAC,CAAA,CAEK2B,EAAQN,EAAapnB,CAAAA,CAAAA,CAAU,EAAE,CAIjC2nB,CAAAA,CAAAA,CAAkC,CACtC,aAHoB,CAAA,KAAA,CAIpB,QALcT,EAAelnB,CAAAA,CAAAA,CAAU,gBAAgB,CAMvD,CAAA,QAAA,CAAUA,CAAU,CAAA,EAAA,CACpB,KAAMA,CAAU,CAAA,IAAA,CAChB,OAAQ2jB,EAAiB,CAAA,CACvB,QAAAxV,CACA,CAAA,MAAA,CAAQ4X,EACR,KAAO,CAAA,MACT,CAAC,CACD,CAAA,KAAA,CAAA2B,CACF,CAEA,CAAA,OAAI1nB,EAAU,WACZ2nB,GAAAA,CAAAA,CAAY,WAAc3nB,CAAAA,CAAAA,CAAU,aAGlCijB,CACF0E,GAAAA,CAAAA,CAAY,WAAa1E,CAGvBjjB,CAAAA,CAAAA,CAAAA,CAAU,WACZ2nB,CAAY,CAAA,QAAA,CAAW3nB,EAAU,QAG5B2nB,CAAAA,CAAAA,CACT,EC7JO,IAAMC,EAAAA,CAAe,CAAC,CAAE,OAAA,CAAAzZ,CAAQ,CAA+B,GAAA,CACpE,IAAI0Z,CAAAA,CAAiC1Z,EAAQ,IAAK,CAAA,OAAA,EAAW,EACzDvD,CAAAA,CAAAA,CAAOuD,EAAQ,IAAK,CAAA,IAAA,EAAQ,GAC1BlH,CAAOkH,CAAAA,CAAAA,CAAQ,KAAK,QAAY,EAAA,EAAA,CAEtC,GAAI,OAAOA,CAAAA,CAAQ,OAAO,KAAM,CAAA,IAAA,EAAS,QAAU,CAAA,CACjD,IAAMc,CAAMxE,CAAAA,EAAAA,CAAS0D,EAAQ,MAAO,CAAA,KAAA,CAAM,IAAI,CAEzC0Z,CAAAA,CAAAA,CAAQ,QACP5Y,CAAI,CAAA,QAAA,GACN4Y,EAAU,CAAC5Y,CAAAA,CAAI,QAAQ,CAItBrE,CAAAA,CAAAA,CAAAA,GACHA,EAAO,CAAGqE,EAAAA,CAAAA,CAAI,IAAI,CAAA,EAAGA,EAAI,IAAO,CAAA,CAAA,CAAA,EAAIA,EAAI,IAAI,CAAA,CAAA,CAAK,EAAE,CAEvD,CAAA,EAAA,CAEK4Y,EAAQ,MACXA,GAAAA,CAAAA,CAAU,CAAC,EAAE,CAAA,CAAA,CAGf,IAAMpZ,CAAUoZ,CAAAA,CAAAA,CACb,IAAKC,CAAW,EAAA,CAAA,EAAGA,CAAS,CAAA,CAAA,EAAGA,CAAM,CAAQ,GAAA,CAAA,CAAA,EAAE,GAAGld,CAAI,CAAA,EAAG3D,CAAI,CAAE,CAAA,CAAA,CAC/D,OAAO,OAAO,CAAA,CAEbwH,EAAQ,MACVN,GAAAA,CAAAA,CAAQ,GAAG,OAAUM,CAAAA,CAAAA,CAAQ,IAAKQ,CAAS,GAAA,CACzC,GAAAA,CAAAA,CACF,EAAE,CAEN,EAAA,CAAA,CC3BO,IAAM8Y,EAAuBhc,CAAAA,CAAAA,EAAyC,CAC3E,IAAMic,CAAAA,CAAgC,EAChCC,CAAAA,CAAAA,CAAe,IAAI,GAEzB,CAAA,GAAIlc,EAAK,KACP,CAAA,IAAA,IAAWsM,KAAS,MAAO,CAAA,OAAA,CAAQtM,CAAK,CAAA,KAAK,EAAG,CAC9C,IAAM9E,EAAOoR,CAAM,CAAA,CAAC,EACdvE,CAAWuE,CAAAA,CAAAA,CAAM,CAAC,CACxB,CAAA,IAAA,IAAWrE,KAAUsD,CAAa,CAAA,CAChC,GAAItD,CAAW,GAAA,OAAA,CACb,SAGF,IAAM3F,CAAAA,CAAYyF,CAASE,CAAAA,CAAM,EACjC,GAAI,CAAC3F,EACH,SAGF,IAAMyM,EAAe/E,CAAmB,CAAA,CAAE,OAAA/B,CAAQ,CAAA,IAAA,CAAA/M,CAAK,CAAC,CAAA,CAEpDoH,EAAU,WACP4Z,GAAAA,CAAAA,CAAa,IAAI5Z,CAAU,CAAA,WAAW,CAGzC2Z,CAAAA,CAAAA,CAAO,KAAK,CACV,IAAA,CAAM,gBACN,OAAS,CAAA,CACP,IAAK,aACL,CAAA,KAAA,CAAO3Z,EAAU,WACnB,CAAA,CACA,QACE,mEACF,CAAA,IAAA,CAAM,CAAC,OAASpH,CAAAA,CAAAA,CAAM+M,EAAQ,aAAa,CAAA,CAC3C,QAAU,CAAA,OACZ,CAAC,CAZDiU,CAAAA,CAAAA,CAAa,IAAI5Z,CAAU,CAAA,WAAA,CAAayM,CAAY,CAe1D,EAAA,CACF,CAGF,OAAO,CACL,OAAAkN,CACA,CAAA,KAAA,CAAO,CAACA,CAAO,CAAA,IAAA,CAAMzG,GAAUA,CAAM,CAAA,QAAA,GAAa,OAAO,CAC3D,CACF,CCxBO,CAAA,IAAM2G,GAAe/Z,CAAuC,EAAA,CACjE,GAAIA,CAAQ,CAAA,MAAA,CAAO,OAAO,qBAAuB,CAAA,CAC/C,IAAMtU,CAASkuB,CAAAA,EAAAA,CAAoB5Z,EAAQ,IAAI,CAAA,CAC/C2T,GAAsB,CAAE,OAAA,CAAA3T,CAAS,CAAA,MAAA,CAAAtU,CAAO,CAAC,EAC3C,CAGA,GADyBkf,EAAAA,CAAW5K,EAAQ,MAAO,CAAA,MAAA,CAAO,OAAO,CAC3C,CAAA,CACpB,IAAM4J,CAAUe,CAAAA,EAAAA,CAAc3K,EAAQ,MAAO,CAAA,MAAA,CAAO,QAASA,CAAQ,CAAA,IAAI,CACnE,CAAA,CAAE,MAAAqM,CAAM,CAAA,CAAI2D,GAAWhQ,CAAQ,CAAA,IAAI,EACnC,CAAE,gBAAA,CAAA+K,CAAiB,CAAIqB,CAAAA,EAAAA,CAAsBC,CAAK,CAClD2N,CAAAA,CAAAA,CAAO7N,GAA2B,CAAE,OAAA,CAAAvC,EAAS,gBAAAmB,CAAAA,CAAiB,CAAC,CAAA,CACrE6I,GAAW,CACT,GAAGoG,EACH,aAAepQ,CAAAA,CAAAA,CAAQ,cACvB,IAAM5J,CAAAA,CAAAA,CAAQ,IAChB,CAAC,EACH,CAEA4S,EAAqB,CAAA,CAAE,QAAA5S,CAAQ,CAAC,EAEhC,IAAMqJ,CAAAA,CAAe,CACnB,GAAA,CAAK,IAAI,GACX,CAAA,CACM6O,EAAqB,IAAI,GAAA,CAE/B,QAAWnuB,CAAQiW,IAAAA,CAAAA,CAAQ,KAAK,mBAAqB,CAAA,CACnD,IAAM4Y,CAAuB5Y,CAAAA,CAAAA,CAAQ,KAAK,mBAAoBjW,CAAAA,CAAI,EAClEmuB,CAAmB,CAAA,GAAA,CAAInuB,CAAM6uB,CAAAA,CAAoB,EACnD,CAEA,GAAI5Y,EAAQ,IAAK,CAAA,WAAA,CACf,QAAWjW,CAAQiW,IAAAA,CAAAA,CAAQ,KAAK,WAAa,CAAA,CAC3C,IAAMjD,CAAO,CAAA,CAAA,cAAA,EAAiBhT,CAAI,CAC5B+X,CAAAA,CAAAA,CAAAA,CAAS9B,EAAQ,IAAK,CAAA,WAAA,CAAYjW,CAAI,CAAA,CAE5C0tB,GAAY,CACV,IAAA,CAAA1a,EACA,OAAAiD,CAAAA,CAAAA,CACA,OAAA8B,CACF,CAAC,EACH,CAGF2X,EAAAA,CAAa,CAAE,OAAAzZ,CAAAA,CAAQ,CAAC,CAExB,CAAA,IAAA,IAAWlH,KAAQkH,CAAQ,CAAA,IAAA,CAAK,KAAO,CAAA,CACrC,GAAIlH,CAAK,CAAA,UAAA,CAAW,IAAI,CACtB,CAAA,SAGF,IAAM6M,CAAW3F,CAAAA,CAAAA,CAAQ,KAAK,KAAMlH,CAAAA,CAAgB,EAE9CmhB,CAAgBtU,CAAAA,CAAAA,CAAS,KAC3B,CACE,GAAG3F,EAAQ,UAA2B2F,CAAAA,CAAAA,CAAS,IAAI,CAAA,CACnD,GAAGA,CACL,CAAA,CACAA,EAEEuU,CAAmC,CAAA,CACvC,SAAUla,CAAQ,CAAA,IAAA,CAAK,SACvB,QAAUA,CAAAA,CAAAA,CAAQ,KAAK,QACvB,CAAA,SAAA,CAAW,EACX,CAAA,QAAA,CAAUA,EAAQ,IAAK,CAAA,QACzB,CACMma,CAAAA,CAAAA,CACJ,CACE,OAAAna,CAAAA,CAAAA,CACA,UAAW,CACT,GAAGka,EACH,UAAYf,CAAAA,EAAAA,CAAwB,CAClC,OAAAnZ,CAAAA,CAAAA,CACA,UAAWka,CACX,CAAA,UAAA,CAAYD,EAAc,UAC5B,CAAC,CACH,CACA,CAAA,IAAA,CAAMnhB,CACN,CAAA,kBAAA,CAAAof,EACA,KAAA7O,CAAAA,CACF,EAEF,GAAI4Q,CAAAA,CAAc,OAAQ,CACxB,IAAMroB,EAAaihB,CAAuB,CAAA,CACxC,OAAQsG,EAAwB,CAAA,CAC9B,QAAAnZ,CACA,CAAA,SAAA,CAAWia,EAAc,MACzB,CAAA,UAAA,CAAYA,CAAc,CAAA,MAAA,CAAO,UACnC,CAAC,CAAA,CACD,OAAQE,CAAc,CAAA,SAAA,CAAU,UAClC,CAAC,CAAA,CACDrB,GAAe,CACb,GAAGqB,EACH,MAAQ,CAAA,QAAA,CACR,UAAW,CACT,GAAGA,EAAc,SACjB,CAAA,GAAGF,CAAc,CAAA,MAAA,CACjB,WAAAroB,CACF,CACF,CAAC,EACH,CAEA,GAAIqoB,CAAc,CAAA,GAAA,CAAK,CACrB,IAAMroB,CAAAA,CAAaihB,EAAuB,CACxC,MAAA,CAAQsG,GAAwB,CAC9B,OAAA,CAAAnZ,EACA,SAAWia,CAAAA,CAAAA,CAAc,GACzB,CAAA,UAAA,CAAYA,EAAc,GAAI,CAAA,UAChC,CAAC,CACD,CAAA,MAAA,CAAQE,EAAc,SAAU,CAAA,UAClC,CAAC,CACDrB,CAAAA,EAAAA,CAAe,CACb,GAAGqB,CAAAA,CACH,OAAQ,KACR,CAAA,SAAA,CAAW,CACT,GAAGA,CAAAA,CAAc,SACjB,CAAA,GAAGF,EAAc,GACjB,CAAA,UAAA,CAAAroB,CACF,CACF,CAAC,EACH,CAEA,GAAIqoB,EAAc,IAAM,CAAA,CACtB,IAAMroB,CAAaihB,CAAAA,CAAAA,CAAuB,CACxC,MAAQsG,CAAAA,EAAAA,CAAwB,CAC9B,OAAAnZ,CAAAA,CAAAA,CACA,SAAWia,CAAAA,CAAAA,CAAc,KACzB,UAAYA,CAAAA,CAAAA,CAAc,KAAK,UACjC,CAAC,EACD,MAAQE,CAAAA,CAAAA,CAAc,UAAU,UAClC,CAAC,EACDrB,EAAe,CAAA,CACb,GAAGqB,CACH,CAAA,MAAA,CAAQ,OACR,SAAW,CAAA,CACT,GAAGA,CAAAA,CAAc,UACjB,GAAGF,CAAAA,CAAc,KACjB,UAAAroB,CAAAA,CACF,CACF,CAAC,EACH,CAEA,GAAIqoB,CAAAA,CAAc,QAAS,CACzB,IAAMroB,EAAaihB,CAAuB,CAAA,CACxC,OAAQsG,EAAwB,CAAA,CAC9B,OAAAnZ,CAAAA,CAAAA,CACA,UAAWia,CAAc,CAAA,OAAA,CACzB,WAAYA,CAAc,CAAA,OAAA,CAAQ,UACpC,CAAC,CAAA,CACD,OAAQE,CAAc,CAAA,SAAA,CAAU,UAClC,CAAC,CAAA,CACDrB,GAAe,CACb,GAAGqB,EACH,MAAQ,CAAA,SAAA,CACR,SAAW,CAAA,CACT,GAAGA,CAAc,CAAA,SAAA,CACjB,GAAGF,CAAc,CAAA,OAAA,CACjB,WAAAroB,CACF,CACF,CAAC,EACH,CAEA,GAAIqoB,CAAc,CAAA,KAAA,CAAO,CACvB,IAAMroB,CAAAA,CAAaihB,EAAuB,CACxC,MAAA,CAAQsG,EAAwB,CAAA,CAC9B,QAAAnZ,CACA,CAAA,SAAA,CAAWia,EAAc,KACzB,CAAA,UAAA,CAAYA,EAAc,KAAM,CAAA,UAClC,CAAC,CAAA,CACD,OAAQE,CAAc,CAAA,SAAA,CAAU,UAClC,CAAC,CAAA,CACDrB,GAAe,CACb,GAAGqB,CACH,CAAA,MAAA,CAAQ,QACR,SAAW,CAAA,CACT,GAAGA,CAAc,CAAA,SAAA,CACjB,GAAGF,CAAc,CAAA,KAAA,CACjB,WAAAroB,CACF,CACF,CAAC,EACH,CAEA,GAAIqoB,CAAc,CAAA,IAAA,CAAM,CACtB,IAAMroB,CAAAA,CAAaihB,CAAuB,CAAA,CACxC,OAAQsG,EAAwB,CAAA,CAC9B,QAAAnZ,CACA,CAAA,SAAA,CAAWia,EAAc,IACzB,CAAA,UAAA,CAAYA,EAAc,IAAK,CAAA,UACjC,CAAC,CACD,CAAA,MAAA,CAAQE,EAAc,SAAU,CAAA,UAClC,CAAC,CACDrB,CAAAA,EAAAA,CAAe,CACb,GAAGqB,EACH,MAAQ,CAAA,MAAA,CACR,UAAW,CACT,GAAGA,EAAc,SACjB,CAAA,GAAGF,EAAc,IACjB,CAAA,UAAA,CAAAroB,CACF,CACF,CAAC,EACH,CAEA,GAAIqoB,EAAc,GAAK,CAAA,CACrB,IAAMroB,CAAAA,CAAaihB,EAAuB,CACxC,MAAA,CAAQsG,GAAwB,CAC9B,OAAA,CAAAnZ,EACA,SAAWia,CAAAA,CAAAA,CAAc,IACzB,UAAYA,CAAAA,CAAAA,CAAc,IAAI,UAChC,CAAC,EACD,MAAQE,CAAAA,CAAAA,CAAc,UAAU,UAClC,CAAC,CACDrB,CAAAA,EAAAA,CAAe,CACb,GAAGqB,CAAAA,CACH,OAAQ,KACR,CAAA,SAAA,CAAW,CACT,GAAGA,CAAAA,CAAc,UACjB,GAAGF,CAAAA,CAAc,IACjB,UAAAroB,CAAAA,CACF,CACF,CAAC,EACH,CACF,CACF,CAAA,CCnPO,IAAMgiB,EAAAA,CAAa,CAAC,CACzB,UAAA,CAAA3H,EACA,UAAAra,CAAAA,CAAAA,CACA,cAAAiiB,CACA,CAAA,aAAA,CAAA/I,EACA,SAAAzC,CAAAA,CAAAA,CACA,QAAA2C,CACA,CAAA,IAAA,CAAApN,CACF,CAQM,GAAA,CACJ,GAAIA,CAAK,CAAA,UAAA,CAAY,CACnB,GAAIA,EAAK,UAAW,CAAA,UAAA,CAAY,CAC9B,IAAMkW,CAAAA,CAA8C,EAEpD,CAAA,GAAID,EACF,IAAW,GAAA,CAAC9pB,EAAM+oB,CAAM,CAAA,GAAK,OAAO,OAClClV,CAAAA,CAAAA,CAAK,WAAW,UAClB,CAAA,CACMhM,CAAW,CAAA,GAAA,CAAI4X,EAAa,WAAazf,CAAAA,CAAI,CAAC,CAChD+pB,GAAAA,CAAAA,CAAS/pB,CAAI,CAAI+oB,CAAAA,CAAAA,CAAAA,CAAAA,aAIVlnB,CAAOgG,IAAAA,CAAAA,CAAY,CAC5B,GAAM,CAAE,KAAA7H,CAAK,CAAA,CAAI0f,EAAgB7d,CAAG,CAAA,CAC9BknB,CAASlV,CAAAA,CAAAA,CAAK,WAAW,UAAW7T,CAAAA,CAAI,EAC1C+oB,CACFgB,GAAAA,CAAAA,CAAS/pB,CAAI,CAAI+oB,CAAAA,CAAAA,EAErB,CAGFlV,CAAK,CAAA,UAAA,CAAW,WAAakW,EAC/B,CAEA,GAAIlW,CAAK,CAAA,UAAA,CAAW,cAAe,CACjC,IAAMkW,CAAiD,CAAA,GAEvD,GAAID,CAAAA,CACF,OAAW,CAAC9pB,CAAAA,CAAM+oB,CAAM,CAAK,GAAA,MAAA,CAAO,QAClClV,CAAK,CAAA,UAAA,CAAW,aAClB,CACMkN,CAAAA,CAAAA,CAAc,IAAItB,CAAa,CAAA,MAAA,CAAQzf,CAAI,CAAC,CAAA,GAC9C+pB,CAAS/pB,CAAAA,CAAI,EAAI+oB,CAIrB,CAAA,CAAA,KAAA,IAAA,IAAWlnB,KAAOkf,CAAe,CAAA,CAC/B,GAAM,CAAE,IAAA,CAAA/gB,CAAK,CAAI0f,CAAAA,CAAAA,CAAgB7d,CAAG,CAC9BknB,CAAAA,CAAAA,CAASlV,EAAK,UAAW,CAAA,aAAA,CAAc7T,CAAI,CAC7C+oB,CAAAA,CAAAA,GACFgB,CAAS/pB,CAAAA,CAAI,EAAI+oB,CAErB,EAAA,CAGFlV,EAAK,UAAW,CAAA,aAAA,CAAgBkW,EAClC,CAEA,GAAIlW,EAAK,UAAW,CAAA,SAAA,CAAW,CAC7B,IAAMkW,CAAAA,CAA6C,EAEnD,CAAA,GAAID,EACF,IAAW,GAAA,CAAC9pB,CAAM+oB,CAAAA,CAAM,IAAK,MAAO,CAAA,OAAA,CAClClV,EAAK,UAAW,CAAA,SAClB,EACMyK,CAAU,CAAA,GAAA,CAAImB,EAAa,UAAYzf,CAAAA,CAAI,CAAC,CAC9C+pB,GAAAA,CAAAA,CAAS/pB,CAAI,CAAI+oB,CAAAA,CAAAA,CAAAA,CAAAA,aAIVlnB,CAAOyc,IAAAA,CAAAA,CAAW,CAC3B,GAAM,CAAE,IAAAte,CAAAA,CAAK,EAAI0f,CAAgB7d,CAAAA,CAAG,EAC9BknB,CAASlV,CAAAA,CAAAA,CAAK,WAAW,SAAU7T,CAAAA,CAAI,EACzC+oB,CACFgB,GAAAA,CAAAA,CAAS/pB,CAAI,CAAI+oB,CAAAA,CAAAA,EAErB,CAGFlV,CAAK,CAAA,UAAA,CAAW,SAAYkW,CAAAA,EAC9B,CAEA,GAAIlW,CAAAA,CAAK,WAAW,OAAS,CAAA,CAC3B,IAAMkW,CAA2C,CAAA,GAEjD,GAAID,CAAAA,CACF,OAAW,CAAC9pB,CAAAA,CAAM+oB,CAAM,CAAK,GAAA,MAAA,CAAO,QAAQlV,CAAK,CAAA,UAAA,CAAW,OAAO,CAAA,CAC7DoN,EAAQ,GAAIxB,CAAAA,CAAAA,CAAa,SAAUzf,CAAI,CAAC,IAC1C+pB,CAAS/pB,CAAAA,CAAI,EAAI+oB,CAIrB,CAAA,CAAA,KAAA,IAAA,IAAWlnB,KAAOof,CAAS,CAAA,CACzB,GAAM,CAAE,IAAA,CAAAjhB,CAAK,CAAI0f,CAAAA,CAAAA,CAAgB7d,CAAG,CAAA,CAC9BknB,EAASlV,CAAK,CAAA,UAAA,CAAW,QAAQ7T,CAAI,CAAA,CACvC+oB,IACFgB,CAAS/pB,CAAAA,CAAI,EAAI+oB,CAErB,EAAA,CAGFlV,EAAK,UAAW,CAAA,OAAA,CAAUkW,EAC5B,CACF,CAEA,GAAIlW,CAAK,CAAA,KAAA,CACP,IAAWsM,IAAAA,CAAAA,IAAS,OAAO,OAAQtM,CAAAA,CAAAA,CAAK,KAAK,CAAG,CAAA,CAC9C,IAAM9E,CAAOoR,CAAAA,CAAAA,CAAM,CAAC,CACdvE,CAAAA,CAAAA,CAAWuE,EAAM,CAAC,CAAA,CAExB,QAAWrE,CAAUsD,IAAAA,CAAAA,CAAa,CAEhC,GAAI,CADcxD,CAASE,CAAAA,CAAM,EAE/B,SAGF,IAAMja,EAAM4d,CACV,CAAA,WAAA,CACA5B,EAAmB,CAAE,MAAA,CAAA/B,EAAQ,IAAA/M,CAAAA,CAAK,CAAC,CACrC,CAAA,CACKmT,EAAW,GAAIrgB,CAAAA,CAAG,GACrB,OAAO+Z,CAAAA,CAASE,CAAM,EAE1B,CAGK,MAAO,CAAA,IAAA,CAAKF,CAAQ,CAAE,CAAA,MAAA,EACzB,OAAO/H,CAAK,CAAA,KAAA,CAAM9E,CAAI,EAE1B,CAEJ,EClIO,IAAM0b,EAAAA,CAAkB,CAAC,CAC9B,OAAA,CAAAC,CACF,CAEgC,GAAA,CAC9B,GAAM,CAAE,UAAAH,CAAW,CAAA,MAAA,CAAAxS,CAAO,CAAI2S,CAAAA,CAAAA,CAE9B,OAAI3S,CAAU,EAAA,MAAA,GAAUA,EACf,CACL,KAAA,CAAO,CAAC,CAAE,GAAGA,CAAO,CAAC,CACvB,EAGGA,CAWHA,CAAAA,CAAAA,CAAO,IAAS,GAAA,QAAA,EAChB,CAACA,CAAO,CAAA,MAAA,EACRuS,GAAoB,CAAE,SAAA,CAAAC,CAAU,CAAC,CAAA,CAE1B,CACL,GAAGxS,CAAAA,CACH,OAAQ,QACV,CAAA,CAGKA,EApBDuS,EAAoB,CAAA,CAAE,UAAAC,CAAU,CAAC,CAC5B,CAAA,CACL,OAAQ,QACR,CAAA,IAAA,CAAM,QACR,CAEF,CAAA,MAeJ,EAEaI,EAAmB,CAAA,CAAC,CAC/B,OAAAD,CAAAA,CACF,IAE8B,CAC5B,IAAMG,EAA0B,EAAC,CAEjC,QAAWN,CAAaG,IAAAA,CAAAA,CACtBG,CAAQ,CAAA,IAAA,CAAK,CACX,SAAAN,CAAAA,CAAAA,CACA,OAAQG,CAAQH,CAAAA,CAAS,EAAG,MAC5B,CAAA,IAAA,CAAMC,GAAuB,CAAE,SAAA,CAAAD,CAAU,CAAC,CAC5C,CAAC,CAGH,CAAA,OAAOM,CACT,CC1DO,CAAA,IAAMK,EAAgB,CAAA,CAAC,CAC5B,MAAAnT,CAAAA,CACF,IAE4C,CAC1C,GAAIA,EAAO,IACT,CAAA,OAAOA,EAAO,IAIhB,CAAA,GAAIA,EAAO,UACT,CAAA,OAAO,QAIX,CAEMoT,CAAAA,EAAAA,CAAmB,CAAC,CACxB,QAAA,CAAAC,CACA,CAAA,MAAA,CAAArT,CACF,CAGM,GAAA,CACAA,EAAO,UAAe,GAAA,MAAA,GACxBqT,EAAS,UAAarT,CAAAA,CAAAA,CAAO,YAG3BA,CAAO,CAAA,WAAA,GACTqT,EAAS,WAAcrT,CAAAA,CAAAA,CAAO,aAG5BA,CAAO,CAAA,KAAA,GACTqT,EAAS,KAAQrT,CAAAA,CAAAA,CAAO,KAE5B,EAAA,CAAA,CAEMsT,GAAkB,CAAC,CACvB,SAAAD,CACA,CAAA,MAAA,CAAArT,EACA,KAAAuH,CAAAA,CACF,IAIM,CACAvH,CAAAA,CAAO,UAAY,MACrBqT,GAAAA,CAAAA,CAAS,QAAUrT,CAAO,CAAA,OAAA,CAAA,CAGxBA,EAAO,gBACLA,CAAAA,CAAAA,CAAO,OAAY,GAAA,MAAA,GACrBqT,EAAS,gBAAmBrT,CAAAA,CAAAA,CAAO,SAE5BA,CAAO,CAAA,OAAA,GAAY,SAC5BqT,CAAS,CAAA,OAAA,CAAUrT,EAAO,OAGxBA,CAAAA,CAAAA,CAAAA,CAAO,iBACLA,CAAO,CAAA,OAAA,GAAY,SACrBqT,CAAS,CAAA,gBAAA,CAAmBrT,EAAO,OAE5BA,CAAAA,CAAAA,CAAAA,CAAO,OAAY,GAAA,MAAA,GAC5BqT,EAAS,OAAUrT,CAAAA,CAAAA,CAAO,SAGxBA,CAAO,CAAA,MAAA,GACTqT,EAAS,MAASrT,CAAAA,CAAAA,CAAO,QAGvBA,CAAO,CAAA,QAAA,GAAa,SACtBqT,CAAS,CAAA,QAAA,CAAWrT,EAAO,QAGzBA,CAAAA,CAAAA,CAAAA,CAAO,YAAc,MACvBqT,GAAAA,CAAAA,CAAS,SAAYrT,CAAAA,CAAAA,CAAO,WAG1BA,CAAO,CAAA,QAAA,GAAa,SACtBqT,CAAS,CAAA,QAAA,CAAWrT,EAAO,QAGzBA,CAAAA,CAAAA,CAAAA,CAAO,YAAc,MACvBqT,GAAAA,CAAAA,CAAS,UAAYrT,CAAO,CAAA,SAAA,CAAA,CAG1BA,EAAO,OACTqT,GAAAA,CAAAA,CAAS,QAAUrT,CAAO,CAAA,OAAA,CAAA,CAGxBA,CAAO,CAAA,QAAA,EACTqT,EAAS,WAAc,CAAA,MAAA,CACvBA,EAAS,YAAehO,CAAAA,CAAAA,CAAwBgO,EAAS,YAAc,CAAA,CACrE,MACF,CAAC,CAAA,EACQrT,EAAO,SAChBqT,EAAAA,CAAAA,CAAS,YAAc,OACvBA,CAAAA,CAAAA,CAAS,aAAehO,CAAwBgO,CAAAA,CAAAA,CAAS,YAAc,CAAA,CACrE,OACF,CAAC,CAAA,EACQ9L,EAAM,UACf8L,GAAAA,CAAAA,CAAS,aAAehO,CAAwBgO,CAAAA,CAAAA,CAAS,aAAc,CACrE,MACF,CAAC,CAEL,EAAA,CAAA,CAEME,GAAa,CAAC,CAClB,QAAArV,CACA,CAAA,QAAA,CAAAmV,CAAW,CAAA,GACX,MAAArT,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAKuB,CACjBvH,CAAO,CAAA,QAAA,EAAYA,EAAO,QAAaA,GAAAA,CAAAA,CAAO,SAChDqT,CAAS,CAAA,IAAA,CAAO,QAEhBA,CAAS,CAAA,IAAA,CAAO,QAGlB,IAAIG,CAAAA,CAAsC,EAAC,CAE3C,GAAIxT,CAAO,CAAA,KAAA,CAAO,CAChB,IAAMyT,CAAAA,CAAgBC,EAAiB,CACrC,OAAA,CAAAxV,EACA,MAAQ8B,CAAAA,CAAAA,CAAO,MACf,KAAAuH,CAAAA,CACF,CAAC,CAOD,CAAA,GALA8L,EAAS,YAAehO,CAAAA,CAAAA,CACtBgO,CAAS,CAAA,YAAA,CACTI,EAAc,YAChB,CAAA,CAGE,CAACD,CAAY,CAAA,MAAA,EACbxT,EAAO,QACPA,EAAAA,CAAAA,CAAO,WAAaA,CAAO,CAAA,QAAA,CAE3BwT,EAAc,KAAMxT,CAAAA,CAAAA,CAAO,QAAQ,CAAE,CAAA,IAAA,CAAKyT,CAAa,CAEnD,CAAA,KAAA,GAAA,MAAA,GAAUzT,CAAO,CAAA,KAAA,CACnBwT,EAAY,IAAKC,CAAAA,CAAa,OACzB,CACL,IAAME,EACJ3T,CAAO,CAAA,KAAA,CAAM,OAASA,CAAO,CAAA,KAAA,CAAM,OAASA,CAAO,CAAA,KAAA,CAAM,MACvD2T,CAAWA,EAAAA,CAAAA,CAAQ,OAAS,CAAK,EAAA,CAAC3T,CAAO,CAAA,KAAA,CAAM,SAEjDqT,CAAW,CAAA,CACT,GAAGA,CACH,CAAA,GAAGI,CACL,CAEAD,CAAAA,CAAAA,CAAY,KAAKC,CAAa,EAElC,CAEJ,CAEA,OAAAJ,EAAW3N,CAAiB,CAAA,CAC1B,MAAO8N,CACP,CAAA,MAAA,CAAQH,CACV,CAAC,EAEMA,CACT,CAAA,CAEMO,GAAe,CAAC,CACpB,SAAAP,CAAW,CAAA,EACb,CAMEA,IAAAA,CAAAA,CAAS,KAAO,SAETA,CAAAA,CAAAA,CAAAA,CAGHQ,GAAc,CAAC,CACnB,SAAAR,CAAW,CAAA,EACX,CAAA,MAAA,CAAArT,CACF,CAMEqT,IAAAA,CAAAA,CAAS,KAAOrT,CAAO,CAAA,IAAA,CAEhBqT,GAGHS,EAAc,CAAA,CAAC,CACnB,OAAA5V,CAAAA,CAAAA,CACA,SAAAmV,CAAW,CAAA,GACX,MAAArT,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAKuB,CACrB8L,CAAAA,CAAS,KAAO,QAEhB,CAAA,IAAMU,EAAoD,EAAC,CAE3D,QAAW9rB,CAAQ+X,IAAAA,CAAAA,CAAO,WAAY,CACpC,IAAMrH,EAAWqH,CAAO,CAAA,UAAA,CAAW/X,CAAI,CACvC,CAAA,GAAI,OAAO0Q,CAAa,EAAA,SAAA,CAEjB,CACL,IAAMqb,EAAmBN,CAAiB,CAAA,CACxC,QAAAxV,CACA,CAAA,MAAA,CAAQvF,EACR,KAAO,CAAA,CACL,GAAG4O,CACH,CAAA,UAAA,CAAY,IACd,CACF,CAAC,EACD8L,CAAS,CAAA,YAAA,CAAehO,EACtBgO,CAAS,CAAA,YAAA,CACTW,CAAiB,CAAA,YACnB,EACAD,CAAiB9rB,CAAAA,CAAI,EAAI+rB,EAC3B,CACF,CAMA,GAJI,MAAA,CAAO,KAAKD,CAAgB,CAAA,CAAE,SAChCV,CAAS,CAAA,UAAA,CAAaU,GAGpB/T,CAAO,CAAA,oBAAA,GAAyB,OAC7BqT,CAAS,CAAA,UAAA,GACZA,CAAS,CAAA,oBAAA,CAAuB,CAC9B,IAAM,CAAA,SACR,WAEO,OAAOrT,CAAAA,CAAO,sBAAyB,SAChDqT,CAAAA,CAAAA,CAAS,qBAAuB,CAC9B,IAAA,CAAMrT,EAAO,oBAAuB,CAAA,SAAA,CAAY,OAClD,CACK,CAAA,KAAA,CACL,IAAMiU,CAA+BP,CAAAA,CAAAA,CAAiB,CACpD,OAAA,CAAAxV,EACA,MAAQ8B,CAAAA,CAAAA,CAAO,qBACf,KAAAuH,CAAAA,CACF,CAAC,CACD8L,CAAAA,CAAAA,CAAS,qBAAuBY,EAClC,CAEA,OAAIjU,CAAO,CAAA,QAAA,GACTqT,EAAS,QAAWrT,CAAAA,CAAAA,CAAO,UAGtBqT,CACT,CAAA,CAEMa,EAAc,CAAA,CAAC,CACnB,QAAAb,CAAAA,CAAAA,CAAW,EACb,CAAA,IAMEA,EAAS,IAAO,CAAA,QAAA,CAETA,GAGHc,EAAe,CAAA,CAAC,CACpB,MAAAnU,CAAAA,CACF,IAEuB,CACrB,IAAMqT,EAA4B,EAAC,CAEnC,OAAAD,EAAAA,CAAiB,CACf,QAAAC,CAAAA,CAAAA,CACA,OAAArT,CACF,CAAC,EAEMqT,CACT,CAAA,CAEMe,GAAa,CAAC,CAClB,QAAAlW,CACA,CAAA,MAAA,CAAA8B,EACA,KAAAuH,CAAAA,CACF,IAIuB,CACrB,IAAI8L,CAAWc,CAAAA,EAAAA,CAAa,CAAE,MAAAnU,CAAAA,CAAO,CAAC,CAEhCwT,CAAAA,CAAAA,CAAsC,EACtCa,CAAAA,CAAAA,CAAalB,GAAc,CAAE,MAAA,CAAAnT,CAAO,CAAC,CAAA,CAErCsU,EAAqBtU,CAAO,CAAA,KAAA,CAElC,QAAWuU,CAAqBD,IAAAA,CAAAA,CAAoB,CAClD,IAAME,EAAsBd,CAAiB,CAAA,CAC3C,QAAAxV,CACA,CAAA,MAAA,CAAQqW,EACR,KAAAhN,CAAAA,CACF,CAAC,CAoBD,CAAA,GAlBA8L,EAAS,YAAehO,CAAAA,CAAAA,CACtBgO,EAAS,YACTmB,CAAAA,CAAAA,CAAoB,YACtB,CAEIxU,CAAAA,CAAAA,CAAO,QACLwU,GAAAA,CAAAA,CAAoB,SACtBA,CAAoB,CAAA,QAAA,CAAW,CAC7B,GAAGA,CAAAA,CAAoB,SACvB,GAAGxU,CAAAA,CAAO,QACZ,CAEAwU,CAAAA,CAAAA,CAAoB,SAAWxU,CAAO,CAAA,QAAA,CAAA,CAI1CwT,EAAY,IAAKgB,CAAAA,CAAmB,EAEhC,MAAUD,GAAAA,CAAAA,CAAmB,CAC/B,IAAMlW,EAAMH,CAAQ,CAAA,UAAA,CAAyBqW,EAAkB,IAAI,CAAA,CAEnE,GAAIlW,CAAI,CAAA,aAAA,EAAiBkJ,EAAM,IAAM,CAAA,CAKnC,IAAMkN,CAJSvB,CAAAA,EAAAA,CACb3L,EAAM,IACNlJ,CAAAA,CAAAA,CAAI,cAAc,OACpB,CAAA,CAC4D,GACzDtU,CAAAA,CAAAA,GAAW,CACV,KAAOA,CAAAA,CAAAA,CACP,KAAM,QACR,CAAA,CACF,EACM2qB,CAAyC,CAAA,CAC7C,WAAY,CACV,CAACrW,EAAI,aAAc,CAAA,YAAY,EAC7BoW,CAAa,CAAA,MAAA,CAAS,EAClB,CACE,KAAA,CAAOA,CACP,CAAA,eAAA,CAAiB,IACnB,CACAA,CAAAA,CAAAA,CAAa,CAAC,CACtB,CAAA,CACA,KAAM,QACR,CAAA,CACIpW,EAAI,QAAU,EAAA,QAAA,CAASA,EAAI,aAAc,CAAA,YAAY,IACvDqW,CAAsB,CAAA,QAAA,CAAW,CAACrW,CAAI,CAAA,aAAA,CAAc,YAAY,CAAA,CAAA,CAElEmV,EAAY,IAAKkB,CAAAA,CAAqB,EACxC,CAEA,GAAI,CAACnN,CAAM,CAAA,wBAAA,CAAyB,IAAIgN,CAAkB,CAAA,IAAI,EAAG,CAC/D,IAAMI,EAAcjB,CAAiB,CAAA,CACnC,QAAAxV,CACA,CAAA,MAAA,CAAQG,CACR,CAAA,KAAA,CAAO,CACL,GAAGkJ,CAAAA,CACH,KAAMgN,CAAkB,CAAA,IAC1B,CACF,CAAC,CAAA,CACDlB,EAAS,YAAehO,CAAAA,CAAAA,CACtBgO,EAAS,YACTsB,CAAAA,CAAAA,CAAY,YACd,EACF,CACF,CACF,CAEA,GAAIN,CAAe,GAAA,QAAA,CAAU,CAC3B,IAAMO,CAAAA,CAAiBC,GAAa,CAClC,OAAA,CAAA3W,EACA,MAAQ,CAAA,CACN,GAAG8B,CACH,CAAA,IAAA,CAAM,QACR,CACA,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CAOD,GALA8L,CAAS,CAAA,YAAA,CAAehO,CACtBgO,CAAAA,CAAAA,CAAS,aACTuB,CAAe,CAAA,YACjB,EAEIA,CAAe,CAAA,UAAA,CAAY,CAC7B,IAAWE,IAAAA,CAAAA,IAAoBF,EAAe,QAAY,EAAA,GACxD,GAAI,CAACA,EAAe,UAAWE,CAAAA,CAAgB,EAC7C,IAAWP,IAAAA,CAAAA,IAAqBD,CAAoB,CAAA,CAElD,IAAMS,CACJ,CAAA,MAAA,GAAUR,EACNrW,CAAQ,CAAA,UAAA,CAAyBqW,EAAkB,IAAI,CAAA,CACvDA,EAEN,GACEpB,EAAAA,CAAc,CAAE,MAAQ4B,CAAAA,CAAuB,CAAC,CAAM,GAAA,QAAA,CACtD,CACA,IAAMP,CAAAA,CAAsBK,EAAa,CAAA,CACvC,QAAA3W,CACA,CAAA,MAAA,CAAQ,CACN,GAAG6W,CAAAA,CACH,KAAM,QACR,CAAA,CACA,MAAAxN,CACF,CAAC,EAOD,GALA8L,CAAAA,CAAS,aAAehO,CACtBgO,CAAAA,CAAAA,CAAS,aACTmB,CAAoB,CAAA,YACtB,CAEIA,CAAAA,CAAAA,CAAoB,aAAaM,CAAgB,CAAA,CAAG,CACtDF,CAAe,CAAA,UAAA,CAAWE,CAAgB,CACxCN,CAAAA,CAAAA,CAAoB,WAAWM,CAAgB,CAAA,CACjD,KACF,CACF,CACF,CAGJtB,CAAY,CAAA,IAAA,CAAKoB,CAAc,EACjC,CACF,CASA,GAPAvB,EAAW3N,CAAiB,CAAA,CAC1B,MAAO8N,CACP,CAAA,eAAA,CAAiB,MACjB,mBAAqB,CAAA,IAAA,CACrB,OAAQH,CACV,CAAC,EAEGrT,CAAO,CAAA,QAAA,CAAU,CAEnB,IAAMgV,CAAAA,CAAsC,CAC1C,CACE,IAAA,CAAM,MACR,CACF,EAEIxB,CAAY,CAAA,MAAA,EACdwB,EAAY,OAAQ3B,CAAAA,CAAQ,EAG9BA,CAAW,CAAA,CACT,MAAO2B,CACP,CAAA,eAAA,CAAiB,IACnB,CAIIA,CAAAA,CAAAA,CAAY,CAAC,CAAG,CAAA,UAAA,GAClB3B,EAAS,UAAa2B,CAAAA,CAAAA,CAAY,CAAC,CAAA,CAAG,YAKpCA,CAAY,CAAA,CAAC,EAAG,WAClB3B,GAAAA,CAAAA,CAAS,YAAc2B,CAAY,CAAA,CAAC,EAAG,WAE3C,EAAA,CAEA,OAAO3B,CACT,CAAA,CAEMiF,GAAa,CAAC,CAClB,QAAApa,CACA,CAAA,MAAA,CAAA8B,CACA,CAAA,KAAA,CAAAuH,CACF,CAIuB,GAAA,CACrB,IAAI8L,CAAWc,CAAAA,EAAAA,CAAa,CAAE,MAAAnU,CAAAA,CAAO,CAAC,CAEhCwT,CAAAA,CAAAA,CAAsC,EACtCa,CAAAA,CAAAA,CAAalB,GAAc,CAAE,MAAA,CAAAnT,CAAO,CAAC,CAAA,CAErCsU,CAAqBtU,CAAAA,CAAAA,CAAO,MAElC,IAAWuU,IAAAA,CAAAA,IAAqBD,EAAoB,CAClD,IAAIE,EAAsBd,CAAiB,CAAA,CACzC,QAAAxV,CACA,CAAA,MAAA,CAAQqW,EACR,KAAAhN,CAAAA,CACF,CAAC,CAQD,CAAA,GANA8L,EAAS,YAAehO,CAAAA,CAAAA,CACtBgO,CAAS,CAAA,YAAA,CACTmB,EAAoB,YACtB,CAAA,CAGIxU,EAAO,aAAiB,EAAA,MAAA,GAAUuU,EAAmB,CAKvD,IAAME,EAJSvB,EACbqB,CAAAA,CAAAA,CAAkB,KAClBvU,CAAO,CAAA,aAAA,CAAc,OACvB,CAC4D,CAAA,GAAA,CACzDjW,IAAW,CACV,KAAA,CAAOA,CACP,CAAA,IAAA,CAAM,QACR,CACF,CAAA,CAAA,CAaAyqB,EAAsB,CACpB,KAAA,CAAO,CAbsC,CAC7C,UAAA,CAAY,CACV,CAACxU,CAAAA,CAAO,cAAc,YAAY,EAChCyU,EAAa,MAAS,CAAA,CAAA,CAClB,CACE,KAAOA,CAAAA,CAAAA,CACP,eAAiB,CAAA,IACnB,EACAA,CAAa,CAAA,CAAC,CACtB,CACA,CAAA,IAAA,CAAM,QACR,CAEiCD,CAAAA,CAAmB,EAClD,eAAiB,CAAA,KACnB,EACF,CAEAhB,CAAAA,CAAY,KAAKgB,CAAmB,EACtC,CAYA,GAVIxU,CAAAA,CAAO,QACTwT,EAAAA,CAAAA,CAAY,KAAK,CAAE,IAAA,CAAM,MAAO,CAAC,CAAA,CAGnCH,EAAW3N,CAAiB,CAAA,CAC1B,MAAO8N,CACP,CAAA,mBAAA,CAAqB,KACrB,MAAQH,CAAAA,CACV,CAAC,CAEGgB,CAAAA,CAAAA,GAAe,SAAU,CAE3B,IAAMO,CAAiBC,CAAAA,EAAAA,CAAa,CAClC,OAAA3W,CAAAA,CAAAA,CACA,OAAQ,CACN,GAAG8B,EACH,IAAM,CAAA,QACR,EACA,KAAAuH,CAAAA,CACF,CAAC,CAED8L,CAAAA,CAAAA,CAAS,aAAehO,CACtBgO,CAAAA,CAAAA,CAAS,aACTuB,CAAe,CAAA,YACjB,CAEIA,CAAAA,CAAAA,CAAe,aACjBvB,CAAW,CAAA,CACT,MAAO,CAACA,CAAAA,CAAUuB,CAAc,CAChC,CAAA,eAAA,CAAiB,KACnB,CAEJ,EAAA,CAEA,OAAOvB,CACT,CAAA,CAEM4B,GAAY,CAAC,CACjB,QAAA/W,CACA,CAAA,MAAA,CAAA8B,CACA,CAAA,KAAA,CAAAuH,CACF,CAIuB,GAAA,CACrB,IAAI8L,CAAWc,CAAAA,EAAAA,CAAa,CAAE,MAAAnU,CAAAA,CAAO,CAAC,CAEtCqT,CAAAA,CAAAA,CAAS,KAAO,MAEhB,CAAA,IAAMG,EAAsC,EAAC,CAE7C,OAAW,CAACtlB,CAAAA,CAAOgnB,CAAS,CAAA,GAAKlV,EAAO,IAAK,CAAA,OAAA,GAAW,CACtD,IAAMmV,EAAkB,OAAOD,CAAAA,CAC3BE,EAuBJ,GApBED,CAAAA,GAAoB,UACpBA,CAAoB,GAAA,QAAA,EACpBA,IAAoB,SAEpBC,CAAAA,CAAAA,CAAWD,EACFA,CAAoB,GAAA,QAAA,EAAY,KAAM,CAAA,OAAA,CAAQD,CAAS,CAChEE,CAAAA,CAAAA,CAAW,QACFF,CAAc,GAAA,IAAA,CAEnBlV,EAAO,QACToV,GAAAA,CAAAA,CAAW,QAGb,OAAQ,CAAA,IAAA,CACN,YACA,CAAcD,WAAAA,EAAAA,CAAe,mBAAmBD,CAAS,CAAA,UAAA,CAAA,CACzDlV,EAAO,IACT,CAAA,CAGE,CAACoV,CAAAA,CACH,SAGF,IAAMC,CAAAA,CAAeR,GAAa,CAChC,OAAA,CAAA3W,EACA,MAAQ,CAAA,CACN,YAAa8B,CAAO,CAAA,qBAAqB,IAAI9R,CAAK,CAAA,CAClD,MACE8R,CAAO,CAAA,iBAAiB,IAAI9R,CAAK,CAAA,EAAK8R,CAAO,CAAA,aAAa,IAAI9R,CAAK,CAAA,CAErE,KAAMknB,CAAa,GAAA,MAAA,CAAS,SAAWA,CACzC,CAAA,CACA,MAAA7N,CACF,CAAC,EAED8N,CAAa,CAAA,KAAA,CAAQH,EAGjBE,CAAa,GAAA,MAAA,GACfC,EAAa,IAAOD,CAAAA,CAAAA,CAAAA,CAGlBC,CAAa,CAAA,IAAA,GAAS,UACxBA,CAAa,CAAA,IAAA,CAAO,SAGtBhC,CAAS,CAAA,YAAA,CAAehO,EACtBgO,CAAS,CAAA,YAAA,CACTgC,EAAa,YACf,CAAA,CAEA7B,EAAY,IAAK6B,CAAAA,CAAY,EAC/B,CAEA,OAAAhC,EAAW3N,CAAiB,CAAA,CAC1B,KAAO8N,CAAAA,CAAAA,CACP,OAAQH,CACV,CAAC,EAEMA,CACT,CAAA,CAEMkF,GAAa,CAAC,CAClB,QAAAra,CACA,CAAA,MAAA,CAAA8B,EACA,KAAAuH,CAAAA,CACF,IAIuB,CACrB,IAAI8L,EAAWc,EAAa,CAAA,CAAE,MAAAnU,CAAAA,CAAO,CAAC,CAElCwT,CAAAA,CAAAA,CAAsC,EACpCa,CAAAA,CAAAA,CAAalB,GAAc,CAAE,MAAA,CAAAnT,CAAO,CAAC,CAAA,CAErCsU,EAAqBtU,CAAO,CAAA,KAAA,CAElC,QAAWuU,CAAqBD,IAAAA,CAAAA,CAAoB,CAClD,IAAIE,CAAAA,CAAsBd,CAAiB,CAAA,CACzC,QAAAxV,CACA,CAAA,MAAA,CAAQqW,EACR,KAAAhN,CAAAA,CACF,CAAC,CAQD,CAAA,GANA8L,EAAS,YAAehO,CAAAA,CAAAA,CACtBgO,EAAS,YACTmB,CAAAA,CAAAA,CAAoB,YACtB,CAGIxU,CAAAA,CAAAA,CAAO,eAAiB,MAAUuU,GAAAA,CAAAA,CAAmB,CAKvD,IAAME,EAJSvB,EACbqB,CAAAA,CAAAA,CAAkB,KAClBvU,CAAO,CAAA,aAAA,CAAc,OACvB,CAC4D,CAAA,GAAA,CACzDjW,IAAW,CACV,KAAA,CAAOA,EACP,IAAM,CAAA,QACR,EACF,CAcAyqB,CAAAA,CAAAA,CAAsB,CACpB,KAAO,CAAA,CAdsC,CAC7C,UAAA,CAAY,CACV,CAACxU,CAAAA,CAAO,cAAc,YAAY,EAChCyU,EAAa,MAAS,CAAA,CAAA,CAClB,CACE,KAAOA,CAAAA,CAAAA,CACP,gBAAiB,IACnB,CAAA,CACAA,EAAa,CAAC,CACtB,EACA,QAAU,CAAA,CAACzU,CAAO,CAAA,aAAA,CAAc,YAAY,CAC5C,CAAA,IAAA,CAAM,QACR,CAEiCwU,CAAAA,CAAmB,EAClD,eAAiB,CAAA,KACnB,EACF,CAMEA,CAAAA,CAAoB,kBAAoB,IACxCA,EAAAA,CAAAA,CAAoB,OAAS,OAC7BA,EAAAA,CAAAA,CAAoB,MAEpBhB,CAAcA,CAAAA,CAAAA,CAAY,MAAOgB,CAAAA,CAAAA,CAAoB,KAAK,CAE1DhB,CAAAA,CAAAA,CAAY,KAAKgB,CAAmB,EAExC,CAYA,GAVIxU,CAAAA,CAAO,UACTwT,CAAY,CAAA,IAAA,CAAK,CAAE,IAAM,CAAA,MAAO,CAAC,CAGnCH,CAAAA,CAAAA,CAAW3N,EAAiB,CAC1B,KAAA,CAAO8N,CACP,CAAA,mBAAA,CAAqB,KACrB,MAAQH,CAAAA,CACV,CAAC,CAEGgB,CAAAA,CAAAA,GAAe,SAAU,CAE3B,IAAMO,EAAiBC,EAAa,CAAA,CAClC,QAAA3W,CACA,CAAA,MAAA,CAAQ,CACN,GAAG8B,CAAAA,CACH,KAAM,QACR,CAAA,CACA,KAAAuH,CAAAA,CACF,CAAC,CAED8L,CAAAA,CAAAA,CAAS,aAAehO,CACtBgO,CAAAA,CAAAA,CAAS,aACTuB,CAAe,CAAA,YACjB,EAEIA,CAAe,CAAA,UAAA,GACjBvB,EAAW,CACT,KAAA,CAAO,CAACA,CAAUuB,CAAAA,CAAc,EAChC,eAAiB,CAAA,KACnB,CAEJ,EAAA,CAEA,OAAOvB,CACT,CAAA,CAEMpS,GAAW,CAAC,CAChB,QAAA/C,CACA,CAAA,MAAA,CAAA8B,EACA,KAAAuH,CAAAA,CACF,IAIuB,CACrB,IAAM8L,EAA4B,EAAC,CAMnC,GAFAA,CAAS,CAAA,IAAA,CAAO,SAAUrT,CAAAA,CAAAA,CAAO,IAAI,CAEjC,CAAA,CAACuH,EAAM,wBAAyB,CAAA,GAAA,CAAIvH,EAAO,IAAI,CAAA,CAAG,CACpD,IAAMsV,CAAAA,CAAYpX,EAAQ,UAAyB8B,CAAAA,CAAAA,CAAO,IAAI,CACxD2U,CAAAA,CAAAA,CAAcjB,EAAiB,CACnC,OAAA,CAAAxV,CACA,CAAA,MAAA,CAAQoX,EACR,KAAO,CAAA,CACL,GAAG/N,CACH,CAAA,IAAA,CAAMvH,EAAO,IACb,CAAA,UAAA,CAAY,KACd,CACF,CAAC,EACDqT,CAAS,CAAA,YAAA,CAAehO,EACtBgO,CAAS,CAAA,YAAA,CACTsB,EAAY,YACd,EACF,CAEA,OAAOtB,CACT,CAEMkC,CAAAA,EAAAA,CAAoB,CAAC,CACzB,OAAA,CAAArX,EACA,QAAAmV,CAAAA,CAAAA,CACA,OAAArT,CACA,CAAA,KAAA,CAAAuH,CACF,CAKuB,GAAA,CAChB8L,IACHA,CAAWc,CAAAA,EAAAA,CAAa,CAAE,MAAAnU,CAAAA,CAAO,CAAC,CAAA,CAAA,CAGpC,IAAMwV,CAAgC,CAAA,GAEtClC,EAAgB,CAAA,CACd,SAAUkC,CACV,CAAA,MAAA,CAAAxV,EACA,KAAAuH,CAAAA,CACF,CAAC,CAEGiO,CAAAA,CAAAA,CAAa,UAAY,IAG3B,EAAA,OAAOA,EAAa,OAGtB,CAAA,IAAMhC,CAAsC,CAAA,CAC1CqB,GAAa,CACX,OAAA,CAAA3W,EACA,QAAUsX,CAAAA,CAAAA,CACV,OAAAxV,CACA,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CACD,CACE,IAAM,CAAA,MACR,CACF,CAEA,CAAA,OAAA8L,EAAW3N,CAAiB,CAAA,CAC1B,KAAO8N,CAAAA,CAAAA,CACP,OAAQH,CACV,CAAC,EAEMA,CACT,CAAA,CAEMoC,GAAY,CAAC,CACjB,QAAAvX,CACA,CAAA,MAAA,CAAA8B,EACA,KAAAuH,CAAAA,CACF,IAIuB,CACrB,IAAM8L,EAAWc,EAAa,CAAA,CAAE,MAAAnU,CAAAA,CAAO,CAAC,CAExCsT,CAAAA,EAAAA,CAAgB,CACd,QAAAD,CAAAA,CAAAA,CACA,OAAArT,CACA,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CAED,IAAMva,CAAOmmB,CAAAA,EAAAA,CAAc,CAAE,MAAAnT,CAAAA,CAAO,CAAC,CAErC,CAAA,OAAKhT,CAIAgT,CAAAA,CAAAA,CAAO,SAYLuV,EAAkB,CAAA,CACvB,QAAArX,CACA,CAAA,QAAA,CAAAmV,EACA,MAAQ,CAAA,CACN,GAAGrT,CACH,CAAA,IAAA,CAAAhT,CACF,CACA,CAAA,KAAA,CAAAua,CACF,CAAC,CAAA,CAnBQsN,GAAa,CAClB,OAAA,CAAA3W,CACA,CAAA,QAAA,CAAAmV,EACA,MAAQ,CAAA,CACN,GAAGrT,CACH,CAAA,IAAA,CAAAhT,CACF,CACA,CAAA,KAAA,CAAAua,CACF,CAAC,CAAA,CAZM8L,CAwBX,CAEMwB,CAAAA,EAAAA,CAAe,CAAC,CACpB,OAAA,CAAA3W,EACA,QAAAmV,CAAAA,CAAAA,CACA,MAAArT,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAKuB,CAWrB,OAVK8L,CAAAA,GACHA,EAAWc,EAAa,CAAA,CAAE,OAAAnU,CAAO,CAAC,EAElCsT,EAAgB,CAAA,CACd,SAAAD,CACA,CAAA,MAAA,CAAArT,EACA,KAAAuH,CAAAA,CACF,CAAC,CAAA,CAAA,CAGKvH,EAAO,IAAM,EACnB,KAAK,OACH,CAAA,OAAOuT,GAAW,CAChB,OAAA,CAAArV,EACA,QAAAmV,CAAAA,CAAAA,CACA,OAAArT,CACA,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CACH,KAAK,SACH,CAAA,OAAOqM,EAAa,CAAA,CAElB,QAAA,CAAAP,CAGF,CAAC,EACH,KAAK,SAAA,CACL,KAAK,QACH,CAAA,OAAOQ,GAAY,CAEjB,QAAAR,CAAAA,CAAAA,CACA,MAAArT,CAAAA,CAEF,CAAC,EACH,KAAK,QAAA,CACH,OAAO8T,EAAY,CAAA,CACjB,QAAA5V,CACA,CAAA,QAAA,CAAAmV,EACA,MAAArT,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAC,EACH,KAAK,QAAA,CACH,OAAO2M,EAAAA,CAAY,CAEjB,SAAAb,CAGF,CAAC,CACH,CAAA,QAEE,OAAOqC,EAAa,CAAA,CAElB,QAAA,CAAArC,EACA,MAAArT,CAAAA,CAAAA,CACA,KAAAuH,CAAAA,CACF,CAAC,CACL,CACF,EAEMmO,EAAe,CAAA,CAAC,CACpB,QAAArC,CAAAA,CAAAA,CACA,OAAArT,CACA,CAAA,KAAA,CAAAuH,CACF,CAMO8L,IAAAA,CAAAA,GACHA,EAAWc,EAAa,CAAA,CAAE,OAAAnU,CAAO,CAAC,CAGpCqT,CAAAA,CAAAA,CAAAA,CAAS,KAAO,SAEhBC,CAAAA,EAAAA,CAAgB,CACd,QAAAD,CAAAA,CAAAA,CACA,OAAArT,CACA,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CAEM8L,GAGIK,CAAmB,CAAA,CAAC,CAC/B,OAAAxV,CAAAA,CAAAA,CACA,OAAA8B,CACA,CAAA,KAAA,CAAAuH,CACF,CAAA,IAKOA,IACHA,CAAQ,CAAA,CACN,yBAA0B,IAAI,GAChC,GAGEA,CAAM,CAAA,IAAA,EACRA,EAAM,wBAAyB,CAAA,GAAA,CAAIA,EAAM,IAAI,CAAA,CAG3C,SAAUvH,CACLiB,CAAAA,EAAAA,CAAS,CACd,OAAA/C,CAAAA,CAAAA,CACA,MAAA8B,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAC,EAGCvH,CAAO,CAAA,IAAA,CACFiV,GAAU,CACf,OAAA,CAAA/W,EACA,MAAQ8B,CAAAA,CAAAA,CACR,MAAAuH,CACF,CAAC,EAGCvH,CAAO,CAAA,KAAA,CACFoU,GAAW,CAChB,OAAA,CAAAlW,CACA,CAAA,MAAA,CAAQ8B,EACR,KAAAuH,CAAAA,CACF,CAAC,CAGCvH,CAAAA,CAAAA,CAAO,MACFsY,EAAW,CAAA,CAChB,QAAApa,CACA,CAAA,MAAA,CAAQ8B,EACR,KAAAuH,CAAAA,CACF,CAAC,CAGCvH,CAAAA,CAAAA,CAAO,MACFuY,EAAW,CAAA,CAChB,OAAAra,CAAAA,CAAAA,CACA,OAAQ8B,CACR,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CAICvH,EAAO,IAAQA,EAAAA,CAAAA,CAAO,WACjByV,EAAU,CAAA,CACf,QAAAvX,CACA,CAAA,MAAA,CAAQ8B,EACR,KAAAuH,CAAAA,CACF,CAAC,CAGImO,CAAAA,EAAAA,CAAa,CAElB,MAAA1V,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAC,GAGUoO,EAAc,CAAA,CAAC,CAC1B,IAAA1a,CAAAA,CAAAA,CACA,QAAAiD,CACA,CAAA,MAAA,CAAA8B,CACF,CAIM,GAAA,CACC9B,EAAQ,EAAG,CAAA,UAAA,GACdA,CAAQ,CAAA,EAAA,CAAG,WAAa,EAAC,CAAA,CAGtBA,EAAQ,EAAG,CAAA,UAAA,CAAW,UACzBA,CAAQ,CAAA,EAAA,CAAG,WAAW,OAAU,CAAA,IAGlCA,CAAQ,CAAA,EAAA,CAAG,WAAW,OAAQ/C,CAAAA,CAAAA,CAAUF,CAAI,CAAC,CAAA,CAAIyY,CAAiB,CAAA,CAChE,QAAAxV,CACA,CAAA,MAAA,CAAA8B,EACA,KAAO,CAAA,CACL,KAAA/E,CACA,CAAA,wBAAA,CAA0B,IAAI,GAChC,CACF,CAAC,EACH,CAAA,CCpkCA,IAAM2a,EACJvB,CAAAA,CAAAA,EAEAA,IAAe,SACfA,EAAAA,CAAAA,GAAe,SACfA,EAAAA,CAAAA,GAAe,UACfA,CAAe,GAAA,QAAA,CAGJwB,GAAkB,CAAC,CAC9B,QAAA3X,CACA,CAAA,IAAA,CAAAjW,EACA,MAAA+X,CAAAA,CACF,IAIwB,CAItB,GAHyB+S,GACvB7U,CAAQ,CAAA,MAAA,CAAO,OAAO,UACxB,CAAA,CACqB,IAAKjW,CAAAA,CAAI,EAC5B,OAAO,KAAA,CAGT,GAAI,MAAU+X,GAAAA,CAAAA,CAAQ,CACpB,IAAM3B,CAAAA,CAAMH,EAAQ,UAElB8B,CAAAA,CAAAA,CAAO,IAAI,CAEb,CAAA,GAAI,YAAa3B,CAAO,EAAA,IAAA,GAAQA,EAAK,CACnC,IAAIiX,CAMJ,CAAA,GAJI,OAAQjX,CACViX,GAAAA,CAAAA,CAAYjX,EAAI,MAGd,CAAA,CAAA,CAACiX,EAAW,CAEd,IAAMoB,EAAW9D,EAAiB,CAAA,CAAE,QAASvU,CAAI,CAAA,OAAQ,CAAC,CAEpDsU,CAAAA,CAAAA,CACJ+D,EAAS,IAAM/D,CAAAA,CAAAA,EAAYA,CAAQ,CAAA,IAAA,GAAS,MAAM,CAAK+D,EAAAA,CAAAA,CAAS,CAAC,CAC/D/D,CAAAA,CAAAA,EAAS,SACX2C,CAAY3C,CAAAA,CAAAA,CAAQ,QAExB,CAEA,OAAK2C,EAIEO,EAAgB,CAAA,CACrB,QAAA3X,CACA,CAAA,IAAA,CAAAjW,EACA,MAAQqtB,CAAAA,CACV,CAAC,CAAA,CAPQ,KAQX,CAEA,OAAOO,GAAgB,CACrB,OAAA,CAAA3X,EACA,IAAAjW,CAAAA,CAAAA,CACA,OAAQoW,CACV,CAAC,CACH,CAEA,IAAA,IAAWpW,KAAQ+X,CAAO,CAAA,UAAA,CAKxB,GAJyB+S,EACvB7U,CAAAA,CAAAA,CAAQ,MAAO,CAAA,MAAA,CAAO,UACxB,CAEqB,CAAA,IAAA,CAAKjW,CAAI,CAAG,CAAA,CAC/B,IAAM0Q,CAAWqH,CAAAA,CAAAA,CAAO,WAAW/X,CAAI,CAAA,CAEvC,GAAI,OAAO0Q,CAAAA,EAAa,WAAa,EAAE,MAAA,GAAUA,GAAW,CAC1D,IAAM0b,CAAalB,CAAAA,EAAAA,CAAc,CAAE,MAAQxa,CAAAA,CAAS,CAAC,CAGrD,CAAA,GAAIid,GAAiBvB,CAAU,CAAA,CAC7B,OAAOpsB,CAEX,CACF,CAGF,IAAW8tB,IAAAA,CAAAA,IAAS/V,EAAO,KAAS,EAAA,GAAI,CACtC,IAAMgT,CAAa6C,CAAAA,EAAAA,CAAgB,CACjC,OAAA3X,CAAAA,CAAAA,CACA,KAAAjW,CACA,CAAA,MAAA,CAAQ8tB,CACV,CAAC,CAAA,CACD,GAAI/C,CACF,CAAA,OAAOA,CAEX,CAEA,OAAO,MACT,CC3FA,CAAA,IAAMgD,GAAsB,CAAC,CAC3B,WAAAC,CAAAA,CAAAA,CACA,UAAA7X,CACF,CAAA,GAGM,CACAA,CAAU,CAAA,UAAA,GAAe,SAC3B6X,CAAY,CAAA,UAAA,CAAa7X,EAAU,UAGjCA,CAAAA,CAAAA,CAAAA,CAAU,cACZ6X,CAAY,CAAA,WAAA,CAAc7X,EAAU,WAGlCA,CAAAA,CAAAA,CAAAA,CAAU,UACZ6X,CAAY,CAAA,OAAA,CAAU7X,CAAU,CAAA,OAAA,CAAA,CAG9BA,EAAU,IAAM,EAAA,MAAA,GAClB6X,EAAY,IAAO7X,CAAAA,CAAAA,CAAU,MAEjC,CAEM8X,CAAAA,EAAAA,CAAkB,CAAC,CACvB,OAAA,CAAAhY,EACA,MAAA6F,CAAAA,CAAAA,CACA,UAAA3F,CACA,CAAA,IAAA,CAAApH,EACA,KAAAuQ,CAAAA,CACF,CAI0B,GAAA,CACxB,IAAM0O,CAAkC,CAAA,CACtC,GAAI3O,EAAc,CAAA,CAChB,QAAApJ,CACA,CAAA,EAAA,CAAIE,EAAU,WACd,CAAA,MAAA,CAAA2F,EACA,IAAA/M,CAAAA,CAAAA,CACA,MAAAuQ,CACF,CAAC,EACD,MAAAxD,CAAAA,CAAAA,CACA,IAAA/M,CAAAA,CACF,EAEA,OAAIoH,CAAAA,CAAU,cACZ6X,CAAY,CAAA,WAAA,CAAc7X,EAAU,WAGtC4X,CAAAA,CAAAA,EAAAA,CAAoB,CAClB,WAAAC,CAAAA,CAAAA,CACA,UAAA7X,CACF,CAAC,EAEM6X,CACT,CAAA,CAEME,GAAyB,CAAC,CAC9B,OAAAjY,CAAAA,CAAAA,CACA,OAAA6F,CACA,CAAA,SAAA,CAAA3F,EACA,IAAApH,CAAAA,CAAAA,CACA,mBAAAof,CACA,CAAA,KAAA,CAAA7O,CACF,CAK0B,GAAA,CACxB,IAAM0O,CAAcC,CAAAA,EAAAA,CAAgB,CAClC,OAAAhY,CAAAA,CAAAA,CACA,OAAA6F,CACA,CAAA,SAAA,CAAA3F,CACA,CAAA,IAAA,CAAApH,EACA,KAAAuQ,CAAAA,CACF,CAAC,CAMD,CAAA,GAJInJ,EAAU,UACZ6X,GAAAA,CAAAA,CAAY,WAAa7X,CAAU,CAAA,UAAA,CAAA,CAGjCA,EAAU,WAAa,CAAA,CACzB,IAAMqY,CACJ,CAAA,MAAA,GAAUrY,EAAU,WAChBF,CAAAA,CAAAA,CAAQ,UAA8BE,CAAAA,CAAAA,CAAU,YAAY,IAAI,CAAA,CAChEA,EAAU,WACVsY,CAAAA,CAAAA,CAAW9D,GAAiB,CAAE,OAAA,CAAS6D,EAAY,OAAQ,CAAC,EAE5D9D,CACJ+D,CAAAA,CAAAA,CAAS,KAAM/D,CAAYA,EAAAA,CAAAA,CAAQ,OAAS,MAAM,CAAA,EAAK+D,CAAS,CAAA,CAAC,EAEnE,GAAI/D,CAAAA,CAAS,CACX,IAAMK,CAAAA,CAAa6C,GAAgB,CACjC,OAAA,CAAA3X,EACA,IAAM,CAAA,EAAA,CACN,OACEyU,CAAQ,CAAA,MAAA,EAAU,SAAUA,CAAQ,CAAA,MAAA,CAChC,CACE,KAAO,CAAA,CAAC,CAAE,GAAGA,EAAQ,MAAO,CAAC,EAC7B,WAAa8D,CAAAA,CAAAA,CAAY,WAC3B,CACA,CAAA,CACE,YAAaA,CAAY,CAAA,WAAA,CACzB,GAAG9D,CAAQ,CAAA,MACb,CACR,CAAC,CAAA,CAEDsD,EAAY,IAAO,CAAA,CACjB,SAAWtD,CAAAA,CAAAA,CAAQ,UACnB,MAAQe,CAAAA,CAAAA,CAAiB,CACvB,OAAAxV,CAAAA,CAAAA,CACA,OACE,MAAUE,GAAAA,CAAAA,CAAU,YAChB,CACE,KAAA,CAAO,CAAC,CAAE,GAAGA,EAAU,WAAY,CAAC,EACpC,WAAaqY,CAAAA,CAAAA,CAAY,WAC3B,CAAA,CACA9D,EAAQ,MAAU,EAAA,MAAA,GAAUA,EAAQ,MAClC,CAAA,CACE,MAAO,CAAC,CAAE,GAAGA,CAAAA,CAAQ,MAAO,CAAC,CAAA,CAC7B,YAAa8D,CAAY,CAAA,WAC3B,EACA,CACE,WAAA,CAAaA,CAAY,CAAA,WAAA,CACzB,GAAG9D,CAAQ,CAAA,MACb,EACR,KAAO,CAAA,MACT,CAAC,CACH,CAAA,CAEIK,IACFiD,CAAY,CAAA,IAAA,CAAK,WAAajD,CAG5ByD,CAAAA,CAAAA,CAAAA,CAAY,WACdR,CAAY,CAAA,IAAA,CAAK,SAAWQ,CAAY,CAAA,QAAA,CAAA,CAGtC9D,CAAQ,CAAA,IAAA,GACVsD,EAAY,IAAK,CAAA,IAAA,CAAOtD,EAAQ,IAEpC,EAAA,CACF,CAEA,IAAW1qB,IAAAA,CAAAA,IAAQmW,EAAU,SAAW,CAAA,CACjC6X,EAAY,SACfA,GAAAA,CAAAA,CAAY,UAAY,EAAC,CAAA,CAG3B,IAAMxP,CAAWrI,CAAAA,CAAAA,CAAU,SAAUnW,CAAAA,CAAI,EACnC0uB,CACJ,CAAA,MAAA,GAAUlQ,EACNvI,CAAQ,CAAA,UAAA,CAA2BuI,EAAS,IAAI,CAAA,CAChDA,EACAiQ,CAAW9D,CAAAA,EAAAA,CAAiB,CAAE,OAAS+D,CAAAA,CAAAA,CAAe,OAAQ,CAAC,CAAA,CAE/DhE,EACJ+D,CAAS,CAAA,IAAA,CAAM/D,CAAYA,EAAAA,CAAAA,CAAQ,OAAS,MAAM,CAAA,EAAK+D,EAAS,CAAC,CAAA,CAE/D/D,EACFsD,CAAY,CAAA,SAAA,CAAUhuB,CAAI,CAAI,CAAA,CAC5B,UAAW0qB,CAAQ,CAAA,SAAA,CACnB,OAAQe,CAAiB,CAAA,CACvB,QAAAxV,CACA,CAAA,MAAA,CAAQ,CACN,WAAA,CAAayY,EAAe,WAC5B,CAAA,GAAGjE,GAAgB,CAAE,OAAA,CAAAC,CAAQ,CAAC,CAChC,EACA,KAAO,CAAA,MACT,CAAC,CACH,CAAA,CAEAsD,EAAY,SAAUhuB,CAAAA,CAAI,EAAI,CAC5B,MAAA,CAAQ,CACN,WAAA,CAAa0uB,EAAe,WAG5B,CAAA,IAAA,CAAM1uB,IAAS,KAAQ,CAAA,MAAA,CAAS,SAClC,CACF,EAEJ,CAEA,GAAImW,CAAAA,CAAU,SAAU,CACtB,IAAMwY,EAAkD,EAAC,CAEzD,QAAWC,CAA6BzY,IAAAA,CAAAA,CAAU,QAChD,CAAA,IAAA,IAAWnW,KAAQ4uB,CAA2B,CAAA,CAC5C,IAAMC,CAAuBV,CAAAA,CAAAA,CAAmB,IAAInuB,CAAI,CAAA,CAEnD6uB,GAILF,CAAsB,CAAA,IAAA,CAAKE,CAAoB,EACjD,CAGEF,EAAsB,MACxBX,GAAAA,CAAAA,CAAY,SAAWW,CAE3B,EAAA,CAKA,OAAOX,CACT,EAEae,EAAiB,CAAA,CAAC,CAC7B,OAAA9Y,CAAAA,CAAAA,CACA,OAAA6F,CACA,CAAA,SAAA,CAAA3F,EACA,IAAApH,CAAAA,CAAAA,CACA,mBAAAof,CACA,CAAA,KAAA,CAAA7O,CACF,CAUM,GAAA,CACCrJ,EAAQ,EAAG,CAAA,KAAA,GACdA,CAAQ,CAAA,EAAA,CAAG,MAAQ,EAAC,CAAA,CAGjBA,EAAQ,EAAG,CAAA,KAAA,CAAMlH,CAAI,CACxBkH,GAAAA,CAAAA,CAAQ,GAAG,KAAMlH,CAAAA,CAAI,EAAI,EAAC,CAAA,CAGxBoH,EAAU,OACZF,GAAAA,CAAAA,CAAQ,GAAG,OAAU,CAAA,CAAC,GAAIA,CAAAA,CAAQ,GAAG,OAAW,EAAA,GAAK,GAAGE,CAAAA,CAAU,OAAO,CAG3EF,CAAAA,CAAAA,CAAAA,CAAQ,GAAG,KAAMlH,CAAAA,CAAI,EAAE+M,CAAM,CAAA,CAAIoS,GAAuB,CACtD,OAAA,CAAAjY,EACA,MAAA6F,CAAAA,CAAAA,CACA,SAAA3F,CAAAA,CAAAA,CACA,KAAApH,CACA,CAAA,kBAAA,CAAAof,EACA,KAAA7O,CAAAA,CACF,CAAC,EACH,CAAA,CC9PA,IAAMiR,EACJpB,CAAAA,CAAAA,EACwB,CACxB,OAAQA,CAAAA,EAEN,KAAK,OAAA,CACH,OAAO,MACT,CAAA,QACE,MACJ,CACF,EAKMH,EAAkBQ,CAAAA,CAAAA,EAAuD,CAC7E,OAAQA,CAAAA,EAGN,KAAK,YAAA,CACL,KAAK,MACH,CAAA,OAAO,MACT,QACE,OAAO,MACX,CACF,CAAA,CAKMN,GACJC,CAC0C,EAAA,CAC1C,OAAQA,CAAAA,EACN,KAAK,QAAA,CACL,KAAK,MACH,CAAA,OAAO,SACT,KAAK,QAAA,CACL,KAAK,OACH,CAAA,OAAO,MACX,CACF,CAAA,CAEaC,GAA0B,CAAC,CACtC,QAAAnZ,CACA,CAAA,UAAA,CAAApO,CACF,CAAA,GAGuC,CACrC,GAAI,CAACA,GAAc,CAAC,MAAA,CAAO,KAAKA,CAAU,CAAA,CAAE,OAC1C,OAGF,IAAMwnB,EAAwC,EAAC,CAE/C,QAAWC,CAAwBznB,IAAAA,CAAAA,CAAY,CAC7C,IAAMC,CAAAA,CACJ,MAAUwnB,GAAAA,CAAAA,CACNrZ,EAAQ,WAA6BqZ,CAAAA,CAAoB,EACzDA,CAEDD,CAAAA,CAAAA,CAAiBvnB,EAAU,EAAE,CAAA,GAChCunB,EAAiBvnB,CAAU,CAAA,EAAE,EAAI,EAAC,CAAA,CAIpCunB,EAAiBvnB,CAAU,CAAA,EAAE,EAAGA,CAAU,CAAA,IAAA,CAAK,iBAAkB,EAAC,EAChEynB,EAAuB,CAAA,CACrB,QAAAtZ,CACA,CAAA,SAAA,CAAAnO,CACF,CAAC,EACL,CAEA,OAAOunB,CACT,EAEME,EAAyB,CAAA,CAAC,CAC9B,OAAAtZ,CAAAA,CAAAA,CACA,UAAAnO,CACF,CAAA,GAG0B,CAExB,IAAIiQ,EAASjQ,CAAU,CAAA,MAAA,CAEvB,GAAI,CAACiQ,CAAAA,CAAQ,CACX,IAAM0W,CAAAA,CAAW9D,GAAiB,CAAE,OAAA,CAAS7iB,EAAU,OAAQ,CAAC,EAE1D4iB,CACJ+D,CAAAA,CAAAA,CAAS,KAAM/D,CAAYA,EAAAA,CAAAA,CAAQ,IAAS,GAAA,MAAM,GAAK+D,CAAS,CAAA,CAAC,EAC/D/D,CACF3S,GAAAA,CAAAA,CAAS2S,EAAQ,MAErB,EAAA,CAEA,IAAMmD,CACJ9V,CAAAA,CAAAA,EAAU,SAAUA,CAChB,CAAA,CACE,MAAO,CAAC,CAAE,GAAGA,CAAO,CAAC,CACrB,CAAA,UAAA,CAAYjQ,EAAU,UACtB,CAAA,WAAA,CAAaA,EAAU,WACzB,CAAA,CACA,CACE,UAAYA,CAAAA,CAAAA,CAAU,WACtB,WAAaA,CAAAA,CAAAA,CAAU,YACvB,GAAGiQ,CACL,EAEAgT,CAAa6C,CAAAA,EAAAA,CAAgB,CACjC,OAAA3X,CAAAA,CAAAA,CACA,IAAMnO,CAAAA,CAAAA,CAAU,KAChB,MAAQ+lB,CAAAA,CACV,CAAC,CAEK2B,CAAAA,CAAAA,CAAQ1nB,EAAU,KAASonB,EAAAA,EAAAA,CAAapnB,EAAU,EAAE,CAAA,CACpD0oB,EACJ1oB,CAAU,CAAA,OAAA,GAAY,OAAYA,CAAU,CAAA,OAAA,CAAUknB,GAAeQ,CAAK,CAAA,CAMtEC,CAAkC,CAAA,CACtC,cALA3nB,CAAU,CAAA,aAAA,GAAkB,OACxBA,CAAU,CAAA,aAAA,CACVyoB,GAAqBzoB,CAAU,CAAA,EAAE,EAIrC,OAAA0oB,CAAAA,CAAAA,CACA,SAAU1oB,CAAU,CAAA,EAAA,CACpB,KAAMA,CAAU,CAAA,IAAA,CAChB,OAAQ2jB,CAAiB,CAAA,CACvB,OAAAxV,CAAAA,CAAAA,CACA,OAAQ4X,CACR,CAAA,KAAA,CAAO,MACT,CAAC,CAAA,CACD,MAAA2B,CACF,CAAA,CAEA,OAAI1nB,CAAU,CAAA,UAAA,GACZ2nB,EAAY,UAAa3nB,CAAAA,CAAAA,CAAU,YAGjCA,CAAU,CAAA,WAAA,GACZ2nB,EAAY,WAAc3nB,CAAAA,CAAAA,CAAU,WAGlCijB,CAAAA,CAAAA,CAAAA,GACF0E,EAAY,UAAa1E,CAAAA,CAAAA,CAAAA,CAGvBjjB,EAAU,QACZ2nB,GAAAA,CAAAA,CAAY,SAAW3nB,CAAU,CAAA,QAAA,CAAA,CAG5B2nB,CACT,CAEagB,CAAAA,EAAAA,CAAiB,CAAC,CAC7B,IAAA,CAAAzd,EACA,OAAAiD,CAAAA,CAAAA,CACA,UAAAnO,CACF,CAAA,GAIM,CACCmO,CAAAA,CAAQ,GAAG,UACdA,GAAAA,CAAAA,CAAQ,GAAG,UAAa,CAAA,IAGrBA,CAAQ,CAAA,EAAA,CAAG,WAAW,UACzBA,GAAAA,CAAAA,CAAQ,GAAG,UAAW,CAAA,UAAA,CAAa,EAGrCA,CAAAA,CAAAA,CAAAA,CAAQ,GAAG,UAAW,CAAA,UAAA,CAAW/C,CAAUF,CAAAA,CAAI,CAAC,CAAIuc,CAAAA,EAAAA,CAAuB,CACzE,OAAAtZ,CAAAA,CAAAA,CACA,UAAAnO,CACF,CAAC,EACH,CCzLA,CAAA,IAAM4oB,GAA6B,CAAC,CAClC,QAAAza,CACA,CAAA,WAAA,CAAAuY,CACF,CAG4B,GAAA,CAE1B,IAAMC,CAAAA,CAAW9D,GAAiB,CAAE,OAAA,CAAS6D,EAAY,OAAQ,CAAC,EAE5D9D,CACJ+D,CAAAA,CAAAA,CAAS,KAAM/D,CAAYA,EAAAA,CAAAA,CAAQ,OAAS,MAAM,CAAA,EAAK+D,EAAS,CAAC,CAAA,CAC7D1W,EAAS2S,CAAUA,CAAAA,CAAAA,CAAQ,MAAS,CAAA,MAAA,CAEpCmD,EAA4B,CAChC,WAAA,CAAaW,EAAY,WACzB,CAAA,GAAGzW,CACL,CAEM4Y,CAAAA,CAAAA,CAAsC,CAC1C,MAAQlF,CAAAA,CAAAA,CAAiB,CACvB,OAAAxV,CAAAA,CAAAA,CACA,OAAQ4X,CACR,CAAA,KAAA,CAAO,MACT,CAAC,CACH,CAEA,CAAA,OAAIW,EAAY,WACdmC,GAAAA,CAAAA,CAAc,YAAcnC,CAAY,CAAA,WAAA,CAAA,CAGtCA,EAAY,QACdmC,GAAAA,CAAAA,CAAc,SAAWnC,CAAY,CAAA,QAAA,CAAA,CAGhCmC,CACT,CAEaC,CAAAA,EAAAA,CAAmB,CAAC,CAC/B,IAAA,CAAA5d,EACA,OAAAiD,CAAAA,CAAAA,CACA,WAAAuY,CAAAA,CACF,IAIM,CACCvY,CAAAA,CAAQ,GAAG,UACdA,GAAAA,CAAAA,CAAQ,GAAG,UAAa,CAAA,IAGrBA,CAAQ,CAAA,EAAA,CAAG,WAAW,aACzBA,GAAAA,CAAAA,CAAQ,GAAG,UAAW,CAAA,aAAA,CAAgB,EAGxCA,CAAAA,CAAAA,CAAAA,CAAQ,EAAG,CAAA,UAAA,CAAW,cAAc/C,CAAUF,CAAAA,CAAI,CAAC,CACjD0d,CAAAA,EAAAA,CAA2B,CACzB,OAAAza,CAAAA,CAAAA,CACA,YAAAuY,CACF,CAAC,EACL,CC/DO,CAAA,IAAMkB,GAAe,CAAC,CAAE,QAAAzZ,CAAQ,CAAA,GAA+B,CACpE,GAAIA,EAAQ,IAAK,CAAA,OAAA,CAAS,CACxBA,CAAQ,CAAA,EAAA,CAAG,QAAUA,CAAQ,CAAA,IAAA,CAAK,QAClC,MACF,CAEA,GAAI,OAAOA,CAAAA,CAAQ,OAAO,KAAM,CAAA,IAAA,EAAS,SAAU,CACjD,IAAMc,CAAMxE,CAAAA,EAAAA,CAAS0D,EAAQ,MAAO,CAAA,KAAA,CAAM,IAAI,CAC9CA,CAAAA,CAAAA,CAAQ,GAAG,OAAU,CAAA,CACnB,CACE,GAAK,CAAA,CAAA,EAAGc,EAAI,QAAW,CAAA,CAAA,EAAGA,EAAI,QAAQ,CAAA,GAAA,CAAA,CAAQ,EAAE,CAAGA,EAAAA,CAAAA,CAAI,IAAI,CAAA,EAAGA,EAAI,IAAO,CAAA,CAAA,CAAA,EAAIA,EAAI,IAAI,CAAA,CAAA,CAAK,EAAE,CAC9F,CAAA,CACF,EACF,CAEKd,CAAAA,CAAQ,GAAG,OACdA,GAAAA,CAAAA,CAAQ,GAAG,OAAU,CAAA,CACnB,CACE,GAAK,CAAA,GACP,CACF,CAAA,EAEJ,ECjBO,IAAM4Z,EAAAA,CAAuBhc,GAAyC,CAC3E,IAAMic,EAAgC,EAAC,CACjCC,EAAe,IAAI,GAAA,CAEzB,GAAIlc,CAAK,CAAA,KAAA,CACP,QAAWsM,CAAS,IAAA,MAAA,CAAO,QAAQtM,CAAK,CAAA,KAAK,CAAG,CAAA,CAC9C,IAAM9E,CAAOoR,CAAAA,CAAAA,CAAM,CAAC,CACdvE,CAAAA,CAAAA,CAAWuE,EAAM,CAAC,CAAA,CACxB,QAAWrE,CAAUsD,IAAAA,CAAAA,CAAa,CAChC,IAAMjJ,CAAAA,CAAYyF,EAASE,CAAM,CAAA,CACjC,GAAI,CAAC3F,CAAAA,CACH,SAGF,IAAMyM,EAAe/E,CAAmB,CAAA,CAAE,OAAA/B,CAAQ,CAAA,IAAA,CAAA/M,CAAK,CAAC,CAAA,CAEpDoH,EAAU,WACP4Z,GAAAA,CAAAA,CAAa,IAAI5Z,CAAU,CAAA,WAAW,EAGzC2Z,CAAO,CAAA,IAAA,CAAK,CACV,IAAM,CAAA,eAAA,CACN,OAAS,CAAA,CACP,IAAK,aACL,CAAA,KAAA,CAAO3Z,EAAU,WACnB,CAAA,CACA,QACE,mEACF,CAAA,IAAA,CAAM,CAAC,OAASpH,CAAAA,CAAAA,CAAM+M,EAAQ,aAAa,CAAA,CAC3C,SAAU,OACZ,CAAC,EAZDiU,CAAa,CAAA,GAAA,CAAI5Z,CAAU,CAAA,WAAA,CAAayM,CAAY,CAe1D,EAAA,CACF,CAGF,GAAI/O,CAAAA,CAAK,QAAS,CACZ,CAAA,OAAOA,EAAK,OAAY,EAAA,QAAA,EAAY,CAAC,KAAM,CAAA,OAAA,CAAQA,EAAK,OAAO,CAAA,GACjEic,EAAO,IAAK,CAAA,CACV,IAAM,CAAA,cAAA,CACN,QAAS,6BACT,CAAA,IAAA,CAAM,EACN,CAAA,QAAA,CAAU,OACZ,CAAC,CAAA,CAGH,QAAS7pB,CAAQ,CAAA,CAAA,CAAGA,EAAQ4N,CAAK,CAAA,OAAA,CAAQ,OAAQ5N,CAAS,EAAA,CAAA,CACxD,IAAM0V,CAAS9H,CAAAA,CAAAA,CAAK,OAAQ5N,CAAAA,CAAK,EAC7B,CAAC0V,CAAAA,EAAU,OAAOA,CAAW,EAAA,QAAA,CAC/BmU,EAAO,IAAK,CAAA,CACV,KAAM,cACN,CAAA,OAAA,CAAS,CACP,MAAQ,CAAA,OAAOnU,EACf,QAAU,CAAA,QACZ,EACA,OAAS,CAAA,4CAAA,CACT,IAAM,CAAA,CAAC,UAAW1V,CAAK,CAAA,CACvB,SAAU,OACZ,CAAC,EAEI0V,CAAO,CAAA,GAAA,EACVmU,EAAO,IAAK,CAAA,CACV,KAAM,wBACN,CAAA,OAAA,CAAS,CACP,KAAO,CAAA,KACT,EACA,OAAS,CAAA,gDAAA,CACT,IAAM,CAAA,CAAC,UAAW7pB,CAAK,CAAA,CACvB,SAAU,OACZ,CAAC,EAGP,CACF,CAEA,OAAO,CACL,MAAA,CAAA6pB,EACA,KAAO,CAAA,CAACA,EAAO,IAAMzG,CAAAA,CAAAA,EAAUA,EAAM,QAAa,GAAA,OAAO,CAC3D,CACF,EC5DO,IAAMwH,EAAAA,CAAe5a,GAAuC,CACjE,GAAIA,EAAQ,MAAO,CAAA,MAAA,CAAO,sBAAuB,CAC/C,IAAMtU,EAASkuB,EAAoB5Z,CAAAA,CAAAA,CAAQ,IAAI,CAC/C2T,CAAAA,EAAAA,CAAsB,CAAE,OAAA3T,CAAAA,CAAAA,CAAS,MAAAtU,CAAAA,CAAO,CAAC,EAC3C,CAGA,GADyBkf,EAAW5K,CAAAA,CAAAA,CAAQ,OAAO,MAAO,CAAA,OAAO,EAC3C,CACpB,IAAM4J,EAAUe,EAAc3K,CAAAA,CAAAA,CAAQ,OAAO,MAAO,CAAA,OAAA,CAASA,EAAQ,IAAI,CAAA,CACnE,CAAE,KAAA,CAAAqM,CAAM,CAAI2D,CAAAA,EAAAA,CAAWhQ,EAAQ,IAAI,CAAA,CACnC,CAAE,gBAAA+K,CAAAA,CAAiB,EAAIqB,EAAsBC,CAAAA,CAAK,EAClD2N,CAAO7N,CAAAA,EAAAA,CAA2B,CAAE,OAAAvC,CAAAA,CAAAA,CAAS,iBAAAmB,CAAiB,CAAC,CACrE6I,CAAAA,EAAAA,CAAW,CACT,GAAGoG,CAAAA,CACH,cAAepQ,CAAQ,CAAA,aAAA,CACvB,KAAM5J,CAAQ,CAAA,IAChB,CAAC,EACH,CAEA4S,GAAqB,CAAE,OAAA,CAAA5S,CAAQ,CAAC,CAAA,CAEhC,IAAMqJ,CAAe,CAAA,CACnB,GAAK,CAAA,IAAI,GACX,CACM6O,CAAAA,CAAAA,CAAqB,IAAI,GAG/B,CAAA,GAAIlY,EAAQ,IAAK,CAAA,UAAA,CAAY,CAC3B,IAAWjW,IAAAA,CAAAA,IAAQiW,EAAQ,IAAK,CAAA,UAAA,CAAW,gBAAiB,CAC1D,IAAM6a,EACJ7a,CAAQ,CAAA,IAAA,CAAK,UAAW,CAAA,eAAA,CAAgBjW,CAAI,CACxC6uB,CAAAA,CAAAA,CACJ,SAAUiC,CACN7a,CAAAA,CAAAA,CAAQ,WAAiC6a,CAAoB,CAAA,IAAI,EACjEA,CACN3C,CAAAA,CAAAA,CAAmB,IAAInuB,CAAM6uB,CAAAA,CAAoB,EACnD,CAEA,IAAA,IAAW7uB,KAAQiW,CAAQ,CAAA,IAAA,CAAK,UAAW,CAAA,UAAA,CAAY,CACrD,IAAMjD,CAAAA,CAAO,2BAA2BhT,CAAI,CAAA,CAAA,CACtCsvB,EAAuBrZ,CAAQ,CAAA,IAAA,CAAK,WAAW,UAAWjW,CAAAA,CAAI,EAC9D8H,CACJ,CAAA,MAAA,GAAUwnB,EACNrZ,CAAQ,CAAA,UAAA,CAA4BqZ,EAAqB,IAAI,CAAA,CAC7DA,CAENmB,CAAAA,EAAAA,CAAe,CACb,IAAAzd,CAAAA,CAAAA,CACA,QAAAiD,CACA,CAAA,SAAA,CAAAnO,CACF,CAAC,EACH,CAEA,IAAW9H,IAAAA,CAAAA,IAAQiW,EAAQ,IAAK,CAAA,UAAA,CAAW,cAAe,CACxD,IAAMjD,EAAO,CAA8BhT,2BAAAA,EAAAA,CAAI,CACzC+wB,CAAAA,CAAAA,CAAAA,CACJ9a,EAAQ,IAAK,CAAA,UAAA,CAAW,cAAcjW,CAAI,CAAA,CACtCwuB,EACJ,MAAUuC,GAAAA,CAAAA,CACN9a,EAAQ,UAA8B8a,CAAAA,CAAAA,CAAuB,IAAI,CACjEA,CAAAA,CAAAA,CAENH,GAAiB,CACf,IAAA,CAAA5d,EACA,OAAAiD,CAAAA,CAAAA,CACA,WAAAuY,CAAAA,CACF,CAAC,EACH,CAEA,QAAWxuB,CAAQiW,IAAAA,CAAAA,CAAQ,KAAK,UAAW,CAAA,OAAA,CAAS,CAClD,IAAMjD,CAAAA,CAAO,wBAAwBhT,CAAI,CAAA,CAAA,CACnC+X,EAAS9B,CAAQ,CAAA,IAAA,CAAK,WAAW,OAAQjW,CAAAA,CAAI,CAEnD0tB,CAAAA,EAAAA,CAAY,CACV,IAAA1a,CAAAA,CAAAA,CACA,QAAAiD,CACA,CAAA,MAAA,CAAA8B,CACF,CAAC,EACH,CACF,CAEA2X,EAAAA,CAAa,CAAE,OAAAzZ,CAAAA,CAAQ,CAAC,CAExB,CAAA,IAAA,IAAWlH,KAAQkH,CAAQ,CAAA,IAAA,CAAK,KAAO,CAAA,CACrC,IAAM2F,CAAW3F,CAAAA,CAAAA,CAAQ,KAAK,KAAMlH,CAAAA,CAAyB,EAEvDmhB,CAAgBtU,CAAAA,CAAAA,CAAS,KAC3B,CACE,GAAG3F,EAAQ,UAA2B2F,CAAAA,CAAAA,CAAS,IAAI,CACnD,CAAA,GAAGA,CACL,CACAA,CAAAA,CAAAA,CAEEwU,CAQF,CAAA,CACF,QAAAna,CACA,CAAA,SAAA,CAAW,CACT,WAAaia,CAAAA,CAAAA,CAAc,YAC3B,UAAYd,CAAAA,EAAAA,CAAwB,CAClC,OAAAnZ,CAAAA,CAAAA,CACA,WAAYia,CAAc,CAAA,UAC5B,CAAC,CACD,CAAA,QAAA,CAAUja,EAAQ,IAAK,CAAA,QAAA,CACvB,OAASia,CAAAA,CAAAA,CAAc,QACvB,OAASA,CAAAA,CAAAA,CAAc,OACzB,CACA,CAAA,IAAA,CAAMnhB,EACN,kBAAAof,CAAAA,CAAAA,CACA,MAAA7O,CACF,CAAA,CAEI4Q,EAAc,MAChBnB,EAAAA,EAAAA,CAAe,CACb,GAAGqB,CAAAA,CACH,OAAQ,QACR,CAAA,SAAA,CAAW,CACT,GAAGA,EAAc,SACjB,CAAA,GAAGF,EAAc,MACjB,CAAA,UAAA,CAAYpH,EAAuB,CACjC,MAAA,CAAQsG,GAAwB,CAC9B,OAAA,CAAAnZ,EACA,UAAYia,CAAAA,CAAAA,CAAc,OAAO,UACnC,CAAC,EACD,MAAQE,CAAAA,CAAAA,CAAc,SAAU,CAAA,UAClC,CAAC,CACH,CACF,CAAC,CAGCF,CAAAA,CAAAA,CAAc,KAChBnB,EAAe,CAAA,CACb,GAAGqB,CACH,CAAA,MAAA,CAAQ,MACR,SAAW,CAAA,CACT,GAAGA,CAAc,CAAA,SAAA,CACjB,GAAGF,CAAc,CAAA,GAAA,CACjB,UAAYpH,CAAAA,CAAAA,CAAuB,CACjC,MAAQsG,CAAAA,EAAAA,CAAwB,CAC9B,OAAAnZ,CAAAA,CAAAA,CACA,WAAYia,CAAc,CAAA,GAAA,CAAI,UAChC,CAAC,CAAA,CACD,OAAQE,CAAc,CAAA,SAAA,CAAU,UAClC,CAAC,CACH,CACF,CAAC,CAAA,CAGCF,CAAc,CAAA,IAAA,EAChBnB,GAAe,CACb,GAAGqB,EACH,MAAQ,CAAA,MAAA,CACR,UAAW,CACT,GAAGA,EAAc,SACjB,CAAA,GAAGF,EAAc,IACjB,CAAA,UAAA,CAAYpH,EAAuB,CACjC,MAAA,CAAQsG,GAAwB,CAC9B,OAAA,CAAAnZ,CACA,CAAA,UAAA,CAAYia,EAAc,IAAK,CAAA,UACjC,CAAC,CACD,CAAA,MAAA,CAAQE,EAAc,SAAU,CAAA,UAClC,CAAC,CACH,CACF,CAAC,CAGCF,CAAAA,CAAAA,CAAc,SAChBnB,EAAe,CAAA,CACb,GAAGqB,CACH,CAAA,MAAA,CAAQ,SACR,CAAA,SAAA,CAAW,CACT,GAAGA,CAAAA,CAAc,UACjB,GAAGF,CAAAA,CAAc,QACjB,UAAYpH,CAAAA,CAAAA,CAAuB,CACjC,MAAQsG,CAAAA,EAAAA,CAAwB,CAC9B,OAAAnZ,CAAAA,CAAAA,CACA,WAAYia,CAAc,CAAA,OAAA,CAAQ,UACpC,CAAC,CAAA,CACD,MAAQE,CAAAA,CAAAA,CAAc,UAAU,UAClC,CAAC,CACH,CACF,CAAC,EAGCF,CAAc,CAAA,KAAA,EAChBnB,GAAe,CACb,GAAGqB,EACH,MAAQ,CAAA,OAAA,CACR,UAAW,CACT,GAAGA,EAAc,SACjB,CAAA,GAAGF,CAAc,CAAA,KAAA,CACjB,WAAYpH,CAAuB,CAAA,CACjC,OAAQsG,EAAwB,CAAA,CAC9B,QAAAnZ,CACA,CAAA,UAAA,CAAYia,EAAc,KAAM,CAAA,UAClC,CAAC,CACD,CAAA,MAAA,CAAQE,EAAc,SAAU,CAAA,UAClC,CAAC,CACH,CACF,CAAC,CAAA,CAGCF,EAAc,IAChBnB,EAAAA,EAAAA,CAAe,CACb,GAAGqB,CAAAA,CACH,OAAQ,MACR,CAAA,SAAA,CAAW,CACT,GAAGA,CAAAA,CAAc,UACjB,GAAGF,CAAAA,CAAc,KACjB,UAAYpH,CAAAA,CAAAA,CAAuB,CACjC,MAAQsG,CAAAA,EAAAA,CAAwB,CAC9B,OAAA,CAAAnZ,EACA,UAAYia,CAAAA,CAAAA,CAAc,KAAK,UACjC,CAAC,EACD,MAAQE,CAAAA,CAAAA,CAAc,UAAU,UAClC,CAAC,CACH,CACF,CAAC,EAGCF,CAAc,CAAA,GAAA,EAChBnB,GAAe,CACb,GAAGqB,CACH,CAAA,MAAA,CAAQ,MACR,SAAW,CAAA,CACT,GAAGA,CAAc,CAAA,SAAA,CACjB,GAAGF,CAAc,CAAA,GAAA,CACjB,WAAYpH,CAAuB,CAAA,CACjC,OAAQsG,EAAwB,CAAA,CAC9B,QAAAnZ,CACA,CAAA,UAAA,CAAYia,EAAc,GAAI,CAAA,UAChC,CAAC,CAAA,CACD,OAAQE,CAAc,CAAA,SAAA,CAAU,UAClC,CAAC,CACH,CACF,CAAC,CAAA,CAGCF,EAAc,KAChBnB,EAAAA,EAAAA,CAAe,CACb,GAAGqB,CAAAA,CACH,OAAQ,OACR,CAAA,SAAA,CAAW,CACT,GAAGA,CAAAA,CAAc,SACjB,CAAA,GAAGF,EAAc,KACjB,CAAA,UAAA,CAAYpH,EAAuB,CACjC,MAAA,CAAQsG,GAAwB,CAC9B,OAAA,CAAAnZ,EACA,UAAYia,CAAAA,CAAAA,CAAc,MAAM,UAClC,CAAC,EACD,MAAQE,CAAAA,CAAAA,CAAc,UAAU,UAClC,CAAC,CACH,CACF,CAAC,EAEL,CACF,EC1RO,IAAMvG,EAAAA,CAAa,CAAC,CACzB,UAAA,CAAA3H,EACA,UAAAra,CAAAA,CAAAA,CACA,cAAAiiB,CACA,CAAA,aAAA,CAAA/I,EACA,SAAAzC,CAAAA,CAAAA,CACA,QAAA2C,CACA,CAAA,IAAA,CAAApN,CACF,CAAA,GAQM,CACJ,GAAIA,CAAAA,CAAK,WAAY,CACnB,GAAIA,EAAK,UAAW,CAAA,UAAA,CAAY,CAC9B,IAAMkW,CAAAA,CAA8C,EAEpD,CAAA,GAAID,EACF,IAAW,GAAA,CAAC9pB,EAAM+oB,CAAM,CAAA,GAAK,MAAO,CAAA,OAAA,CAClClV,EAAK,UAAW,CAAA,UAClB,EACMhM,CAAW,CAAA,GAAA,CAAI4X,EAAa,WAAazf,CAAAA,CAAI,CAAC,CAChD+pB,GAAAA,CAAAA,CAAS/pB,CAAI,CAAI+oB,CAAAA,CAAAA,CAAAA,CAAAA,aAIVlnB,CAAOgG,IAAAA,CAAAA,CAAY,CAC5B,GAAM,CAAE,IAAA7H,CAAAA,CAAK,EAAI0f,CAAgB7d,CAAAA,CAAG,EAC9BknB,CAASlV,CAAAA,CAAAA,CAAK,WAAW,UAAW7T,CAAAA,CAAI,EAC1C+oB,CACFgB,GAAAA,CAAAA,CAAS/pB,CAAI,CAAI+oB,CAAAA,CAAAA,EAErB,CAGFlV,CAAK,CAAA,UAAA,CAAW,WAAakW,EAC/B,CAEA,GAAIlW,CAAAA,CAAK,WAAW,aAAe,CAAA,CACjC,IAAMkW,CAAiD,CAAA,GAEvD,GAAID,CAAAA,CACF,OAAW,CAAC9pB,CAAAA,CAAM+oB,CAAM,CAAK,GAAA,MAAA,CAAO,QAClClV,CAAK,CAAA,UAAA,CAAW,aAClB,CACMkN,CAAAA,CAAAA,CAAc,GAAItB,CAAAA,CAAAA,CAAa,OAAQzf,CAAI,CAAC,IAC9C+pB,CAAS/pB,CAAAA,CAAI,EAAI+oB,CAIrB,CAAA,CAAA,KAAA,IAAA,IAAWlnB,KAAOkf,CAAe,CAAA,CAC/B,GAAM,CAAE,IAAA,CAAA/gB,CAAK,CAAI0f,CAAAA,CAAAA,CAAgB7d,CAAG,CAC9BknB,CAAAA,CAAAA,CAASlV,CAAK,CAAA,UAAA,CAAW,cAAc7T,CAAI,CAAA,CAC7C+oB,IACFgB,CAAS/pB,CAAAA,CAAI,EAAI+oB,CAErB,EAAA,CAGFlV,EAAK,UAAW,CAAA,aAAA,CAAgBkW,EAClC,CAEA,GAAIlW,EAAK,UAAW,CAAA,SAAA,CAAW,CAC7B,IAAMkW,CAAAA,CAA6C,EAAC,CAEpD,GAAID,CACF,CAAA,IAAA,GAAW,CAAC9pB,CAAM+oB,CAAAA,CAAM,IAAK,MAAO,CAAA,OAAA,CAClClV,EAAK,UAAW,CAAA,SAClB,EACMyK,CAAU,CAAA,GAAA,CAAImB,EAAa,UAAYzf,CAAAA,CAAI,CAAC,CAC9C+pB,GAAAA,CAAAA,CAAS/pB,CAAI,CAAA,CAAI+oB,QAIVlnB,IAAAA,IAAAA,CAAAA,IAAOyc,EAAW,CAC3B,GAAM,CAAE,IAAAte,CAAAA,CAAK,EAAI0f,CAAgB7d,CAAAA,CAAG,EAC9BknB,CAASlV,CAAAA,CAAAA,CAAK,WAAW,SAAU7T,CAAAA,CAAI,EACzC+oB,CACFgB,GAAAA,CAAAA,CAAS/pB,CAAI,CAAA,CAAI+oB,GAErB,CAGFlV,CAAAA,CAAK,WAAW,SAAYkW,CAAAA,EAC9B,CAEA,GAAIlW,CAAAA,CAAK,WAAW,OAAS,CAAA,CAC3B,IAAMkW,CAA2C,CAAA,GAEjD,GAAID,CAAAA,CACF,OAAW,CAAC9pB,CAAAA,CAAM+oB,CAAM,CAAA,GAAK,OAAO,OAAQlV,CAAAA,CAAAA,CAAK,WAAW,OAAO,CAAA,CAC7DoN,EAAQ,GAAIxB,CAAAA,CAAAA,CAAa,SAAUzf,CAAI,CAAC,IAC1C+pB,CAAS/pB,CAAAA,CAAI,EAAI+oB,CAIrB,CAAA,CAAA,KAAA,IAAA,IAAWlnB,KAAOof,CAAS,CAAA,CACzB,GAAM,CAAE,KAAAjhB,CAAK,CAAA,CAAI0f,EAAgB7d,CAAG,CAAA,CAC9BknB,EAASlV,CAAK,CAAA,UAAA,CAAW,QAAQ7T,CAAI,CAAA,CACvC+oB,IACFgB,CAAS/pB,CAAAA,CAAI,EAAI+oB,CAErB,EAAA,CAGFlV,EAAK,UAAW,CAAA,OAAA,CAAUkW,EAC5B,CACF,CAEA,GAAIlW,CAAAA,CAAK,MACP,IAAWsM,IAAAA,CAAAA,IAAS,OAAO,OAAQtM,CAAAA,CAAAA,CAAK,KAAK,CAAG,CAAA,CAC9C,IAAM9E,CAAOoR,CAAAA,CAAAA,CAAM,CAAC,CACdvE,CAAAA,CAAAA,CAAWuE,EAAM,CAAC,CAAA,CAExB,IAAWrE,IAAAA,CAAAA,IAAUsD,EAAa,CAEhC,GAAI,CADcxD,CAASE,CAAAA,CAAM,EAE/B,SAGF,IAAMja,EAAM4d,CACV,CAAA,WAAA,CACA5B,EAAmB,CAAE,MAAA,CAAA/B,EAAQ,IAAA/M,CAAAA,CAAK,CAAC,CACrC,CAAA,CACKmT,CAAW,CAAA,GAAA,CAAIrgB,CAAG,CACrB,EAAA,OAAO+Z,EAASE,CAAM,EAE1B,CAGK,MAAO,CAAA,IAAA,CAAKF,CAAQ,CAAE,CAAA,MAAA,EACzB,OAAO/H,CAAK,CAAA,KAAA,CAAM9E,CAAI,EAE1B,CAEJ,ECtIO,IAAM0b,EAAAA,CAAkB,CAAC,CAC9B,QAAAC,CACF,CAAA,GAEgC,CAC9B,GAAM,CAAE,UAAAH,CAAW,CAAA,MAAA,CAAAxS,CAAO,CAAI2S,CAAAA,CAAAA,CAE9B,OAAK3S,CAWHA,CAAAA,CAAAA,CAAO,OAAS,QAChB,EAAA,CAACA,EAAO,MACRuS,EAAAA,EAAAA,CAAoB,CAAE,SAAA,CAAAC,CAAU,CAAC,CAAA,CAE1B,CACL,GAAGxS,CAAAA,CACH,OAAQ,QACV,CAAA,CAGKA,EApBDuS,EAAoB,CAAA,CAAE,UAAAC,CAAU,CAAC,EAC5B,CACL,MAAA,CAAQ,SACR,IAAM,CAAA,QACR,CAEF,CAAA,MAeJ,EAEaI,EAAmB,CAAA,CAAC,CAC/B,OAAAD,CAAAA,CACF,IAE8B,CAC5B,IAAMG,EAA0B,EAAC,CAEjC,QAAWN,CAAaG,IAAAA,CAAAA,CACtBG,EAAQ,IAAK,CAAA,CACX,UAAAN,CACA,CAAA,MAAA,CAAQG,CAAQH,CAAAA,CAAS,EAAG,MAC5B,CAAA,IAAA,CAAMC,GAAuB,CAAE,SAAA,CAAAD,CAAU,CAAC,CAC5C,CAAC,CAGH,CAAA,OAAOM,CACT,CCjDO,CAAA,IAAMmG,GAAiB,CAAC,CAC7B,OAAAjZ,CACF,CAAA,GAGM,OAAOA,CAAAA,CAAO,MAAS,QAClB,CAAA,CAACA,EAAO,IAAI,CAAA,CAGjBA,EAAO,IACFA,CAAAA,CAAAA,CAAO,KAIZA,CAAO,CAAA,UAAA,CACF,CAAC,QAAQ,CAAA,CAGX,EAGHoT,CAAAA,EAAAA,CAAmB,CAAC,CACxB,QAAA,CAAAC,CACA,CAAA,MAAA,CAAArT,CACF,CAGM,GAAA,CACAA,EAAO,UAAe,GAAA,MAAA,GACxBqT,EAAS,UAAarT,CAAAA,CAAAA,CAAO,YAG3BA,CAAO,CAAA,WAAA,GACTqT,EAAS,WAAcrT,CAAAA,CAAAA,CAAO,aAG5BA,CAAO,CAAA,KAAA,GACTqT,EAAS,KAAQrT,CAAAA,CAAAA,CAAO,KAE5B,EAAA,CAAA,CAEMsT,GAAkB,CAAC,CACvB,SAAAD,CACA,CAAA,MAAA,CAAArT,CACF,CAGM,GAAA,CACJ,GAAIA,CAAO,CAAA,KAAA,GAAU,SACnBqT,CAAS,CAAA,KAAA,CAAQrT,EAAO,KAGpB,CAAA,CAACA,EAAO,IACV,CAAA,CAAA,GAAIA,CAAO,CAAA,KAAA,GAAU,KACnBqT,CAAS,CAAA,IAAA,CAAO,YAER,OAAA,OAAOrT,EAAO,KAAO,EAC3B,KAAK,QACL,CAAA,KAAK,SACHqT,CAAS,CAAA,IAAA,CAAO,SAChB,MACF,KAAK,UACHA,CAAS,CAAA,IAAA,CAAO,SAChB,CAAA,MACF,KAAK,QACHA,CAAAA,CAAAA,CAAS,KAAO,QAChB,CAAA,KACJ,CAKFrT,CAAO,CAAA,OAAA,GAAY,SACrBqT,CAAS,CAAA,OAAA,CAAUrT,EAAO,OAGxBA,CAAAA,CAAAA,CAAAA,CAAO,mBAAqB,MAC9BqT,GAAAA,CAAAA,CAAS,iBAAmBrT,CAAO,CAAA,gBAAA,CAAA,CAGjCA,CAAO,CAAA,gBAAA,GAAqB,SAC9BqT,CAAS,CAAA,gBAAA,CAAmBrT,EAAO,gBAGjCA,CAAAA,CAAAA,CAAAA,CAAO,SACTqT,CAAS,CAAA,MAAA,CAASrT,EAAO,MAGvBA,CAAAA,CAAAA,CAAAA,CAAO,UAAY,MACrBqT,GAAAA,CAAAA,CAAS,QAAUrT,CAAO,CAAA,OAAA,CAAA,CAGxBA,EAAO,QAAa,GAAA,MAAA,GACtBqT,CAAS,CAAA,QAAA,CAAWrT,EAAO,QAGzBA,CAAAA,CAAAA,CAAAA,CAAO,YAAc,MACvBqT,GAAAA,CAAAA,CAAS,UAAYrT,CAAO,CAAA,SAAA,CAAA,CAG1BA,EAAO,OAAY,GAAA,MAAA,GACrBqT,EAAS,OAAUrT,CAAAA,CAAAA,CAAO,SAGxBA,CAAO,CAAA,QAAA,GAAa,SACtBqT,CAAS,CAAA,QAAA,CAAWrT,CAAO,CAAA,QAAA,CAAA,CAGzBA,EAAO,SAAc,GAAA,MAAA,GACvBqT,EAAS,SAAYrT,CAAAA,CAAAA,CAAO,WAG1BA,CAAO,CAAA,OAAA,GACTqT,EAAS,OAAUrT,CAAAA,CAAAA,CAAO,SAGxBA,CAAO,CAAA,QAAA,CACTqT,EAAS,WAAc,CAAA,MAAA,CACdrT,EAAO,SAChBqT,GAAAA,CAAAA,CAAS,WAAc,CAAA,OAAA,EAE3B,EAEME,EAAa,CAAA,CAAC,CAClB,OAAArV,CAAAA,CAAAA,CACA,SAAAmV,CAAW,CAAA,GACX,MAAArT,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAKuB,CAElBvH,CAAO,CAAA,WAAA,EAAeA,EAAO,WAAY,CAAA,MAAA,EACzCA,CAAO,CAAA,QAAA,EAAYA,EAAO,QAAaA,GAAAA,CAAAA,CAAO,UAC/CA,CAAO,CAAA,KAAA,GAAU,OAEjBqT,CAAS,CAAA,IAAA,CAAO,QAEhBA,CAAS,CAAA,IAAA,CAAO,QAGlB,IAAIG,CAAAA,CAAsC,EAE1C,CAAA,IAAA,IAAWhf,KAAQwL,CAAO,CAAA,WAAA,EAAe,EAAC,CAAG,CAC3C,IAAMkZ,CAAAA,CAAexF,EAAiB,CACpC,OAAA,CAAAxV,EACA,MAAQ1J,CAAAA,CAAAA,CACR,MAAA+S,CACF,CAAC,EACDiM,CAAY,CAAA,IAAA,CAAK0F,CAAY,EAC/B,CAEA,GAAIlZ,CAAO,CAAA,KAAA,CAAO,CAChB,IAAMyT,EAAgBC,CAAiB,CAAA,CACrC,QAAAxV,CACA,CAAA,MAAA,CAAQ8B,EAAO,KACf,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CAED,GACE,CAACiM,CAAAA,CAAY,QACbxT,CAAO,CAAA,QAAA,EACPA,EAAO,QAAaA,GAAAA,CAAAA,CAAO,QAE3BwT,CAAAA,CAAAA,CAAc,MAAMxT,CAAO,CAAA,QAAQ,EAAE,IAAKyT,CAAAA,CAAa,OAClD,CACL,IAAME,EACJ3T,CAAO,CAAA,KAAA,CAAM,OAASA,CAAO,CAAA,KAAA,CAAM,OAASA,CAAO,CAAA,KAAA,CAAM,MAEzD2T,CACAA,EAAAA,CAAAA,CAAQ,MAAS,CAAA,CAAA,EACjB,CAACsF,EAAe,CAAA,CAAE,OAAQjZ,CAAO,CAAA,KAAM,CAAC,CAAE,CAAA,QAAA,CAAS,MAAM,CAGzDqT,CAAAA,CAAAA,CAAW,CACT,GAAGA,CAAAA,CACH,GAAGI,CACL,CAAA,CAEAD,EAAY,IAAKC,CAAAA,CAAa,EAElC,CACF,CAEA,OAAAJ,CAAAA,CAAW3N,EAAiB,CAC1B,KAAA,CAAO8N,EACP,MAAQH,CAAAA,CACV,CAAC,CAEMA,CAAAA,CACT,EAEMO,EAAe,CAAA,CAAC,CACpB,QAAAP,CAAAA,CAAAA,CAAW,EACb,CAAA,IAKEA,CAAS,CAAA,IAAA,CAAO,UAETA,CAGH8F,CAAAA,CAAAA,EAAAA,CAAY,CAAC,CACjB,QAAA,CAAA9F,EAAW,EACb,KAKEA,CAAS,CAAA,IAAA,CAAO,OAETA,CAGHQ,CAAAA,CAAAA,EAAAA,CAAc,CAAC,CACnB,QAAA,CAAAR,EAAW,EAAC,CACZ,MAAArT,CAAAA,CACF,KAOEqT,CAAS,CAAA,IAAA,CAAOrT,EAAO,IAEhBqT,CAAAA,CAAAA,CAAAA,CAGHS,GAAc,CAAC,CACnB,QAAA5V,CACA,CAAA,QAAA,CAAAmV,EAAW,EAAC,CACZ,OAAArT,CACA,CAAA,KAAA,CAAAuH,CACF,CAKuB,GAAA,CACrB8L,CAAS,CAAA,IAAA,CAAO,SAEhB,IAAMU,CAAAA,CAAoD,EAE1D,CAAA,IAAA,IAAW9rB,KAAQ+X,CAAO,CAAA,UAAA,CAAY,CACpC,IAAMrH,CAAAA,CAAWqH,EAAO,UAAW/X,CAAAA,CAAI,EACvC,GAAI,OAAO0Q,GAAa,SAEjB,CAAA,CACL,IAAMqb,CAAAA,CAAmBN,EAAiB,CACxC,OAAA,CAAAxV,EACA,MAAQvF,CAAAA,CAAAA,CACR,MAAO,CACL,GAAG4O,EACH,UAAY,CAAA,IACd,CACF,CAAC,CAAA,CACDwM,EAAiB9rB,CAAI,CAAA,CAAI+rB,EAC3B,CACF,CAMA,GAJI,MAAA,CAAO,KAAKD,CAAgB,CAAA,CAAE,SAChCV,CAAS,CAAA,UAAA,CAAaU,GAGpB/T,CAAO,CAAA,oBAAA,GAAyB,OAC7BqT,CAAS,CAAA,UAAA,GACZA,EAAS,oBAAuB,CAAA,CAC9B,KAAM,SACR,CAAA,CAAA,CAAA,KAAA,GAEO,OAAOrT,CAAO,CAAA,oBAAA,EAAyB,SAChDqT,CAAAA,CAAAA,CAAS,qBAAuB,CAC9B,IAAA,CAAMrT,EAAO,oBAAuB,CAAA,SAAA,CAAY,OAClD,CACK,CAAA,KAAA,CACL,IAAMiU,CAA+BP,CAAAA,CAAAA,CAAiB,CACpD,OAAAxV,CAAAA,CAAAA,CACA,OAAQ8B,CAAO,CAAA,oBAAA,CACf,MAAAuH,CACF,CAAC,CACD8L,CAAAA,CAAAA,CAAS,qBAAuBY,EAClC,CAEA,OAAIjU,CAAO,CAAA,aAAA,GACTqT,EAAS,aAAgBK,CAAAA,CAAAA,CAAiB,CACxC,OAAAxV,CAAAA,CAAAA,CACA,OAAQ8B,CAAO,CAAA,aAAA,CACf,MAAAuH,CACF,CAAC,GAGCvH,CAAO,CAAA,QAAA,GACTqT,CAAS,CAAA,QAAA,CAAWrT,EAAO,QAGtBqT,CAAAA,CAAAA,CACT,EAEMa,EAAc,CAAA,CAAC,CACnB,QAAAb,CAAAA,CAAAA,CAAW,EACb,CAAA,IAKEA,EAAS,IAAO,CAAA,QAAA,CAETA,GAGHc,EAAe,CAAA,CAAC,CACpB,MAAAnU,CAAAA,CACF,CAEuB,GAAA,CACrB,IAAMqT,CAA4B,CAAA,GAElC,OAAAD,EAAAA,CAAiB,CACf,QAAAC,CAAAA,CAAAA,CACA,OAAArT,CACF,CAAC,EAEMqT,CACT,CAAA,CAEMe,GAAa,CAAC,CAClB,QAAAlW,CACA,CAAA,MAAA,CAAA8B,CACA,CAAA,KAAA,CAAAuH,CACF,CAIuB,GAAA,CACrB,IAAI8L,CAAWc,CAAAA,EAAAA,CAAa,CAAE,MAAAnU,CAAAA,CAAO,CAAC,CAEhCwT,CAAAA,CAAAA,CAAsC,EACtC4F,CAAAA,CAAAA,CAAcH,GAAe,CAAE,MAAA,CAAAjZ,CAAO,CAAC,CAAA,CAEvCsU,CAAqBtU,CAAAA,CAAAA,CAAO,MAElC,IAAWuU,IAAAA,CAAAA,IAAqBD,EAAoB,CAClD,IAAME,EAAsBd,CAAiB,CAAA,CAC3C,QAAAxV,CACA,CAAA,MAAA,CAAQqW,EACR,KAAAhN,CAAAA,CACF,CAAC,CAeD,CAAA,GAbIvH,EAAO,QACLwU,GAAAA,CAAAA,CAAoB,QACtBA,CAAAA,CAAAA,CAAoB,SAAW,CAC7B,GAAGA,EAAoB,QACvB,CAAA,GAAGxU,EAAO,QACZ,CAAA,CAEAwU,EAAoB,QAAWxU,CAAAA,CAAAA,CAAO,UAI1CwT,CAAY,CAAA,IAAA,CAAKgB,CAAmB,CAEhCD,CAAAA,CAAAA,CAAkB,KAAM,CAC1B,IAAMlW,CAAMH,CAAAA,CAAAA,CAAQ,WAAyBqW,CAAkB,CAAA,IAAI,EAEnE,GAAIlW,CAAAA,CAAI,eAAiBkJ,CAAM,CAAA,IAAA,CAAM,CAKnC,IAAMkN,CAAAA,CAJSvB,GACb3L,CAAM,CAAA,IAAA,CACNlJ,EAAI,aAAc,CAAA,OACpB,EAC4D,GACzDtU,CAAAA,CAAAA,GAAW,CACV,KAAA,CAAOA,EACP,IAAM,CAAA,QACR,EACF,CACM2qB,CAAAA,CAAAA,CAAyC,CAC7C,UAAY,CAAA,CACV,CAACrW,CAAI,CAAA,aAAA,CAAc,YAAY,EAC7BoW,CAAAA,CAAa,OAAS,CAClB,CAAA,CACE,MAAOA,CACP,CAAA,eAAA,CAAiB,IACnB,CAAA,CACAA,EAAa,CAAC,CACtB,EACA,IAAM,CAAA,QACR,EACIpW,CAAI,CAAA,QAAA,EAAU,SAASA,CAAI,CAAA,aAAA,CAAc,YAAY,CACvDqW,GAAAA,CAAAA,CAAsB,SAAW,CAACrW,CAAAA,CAAI,cAAc,YAAY,CAAA,CAAA,CAElEmV,CAAY,CAAA,IAAA,CAAKkB,CAAqB,EACxC,CAEKnN,EAAM,wBAAyB,CAAA,GAAA,CAAIgN,EAAkB,IAAI,CAAA,EAC5Db,EAAiB,CACf,OAAA,CAAAxV,EACA,MAAQG,CAAAA,CAAAA,CACR,MAAO,CACL,GAAGkJ,EACH,IAAMgN,CAAAA,CAAAA,CAAkB,IAC1B,CACF,CAAC,EAEL,CACF,CAEA,GAAI6E,CAAAA,CAAY,SAAS,QAAQ,CAAA,CAAG,CAClC,IAAMxE,CAAAA,CAAiBC,GAAa,CAClC,OAAA,CAAA3W,EACA,MAAQ,CAAA,CACN,GAAG8B,CACH,CAAA,IAAA,CAAM,QACR,CAAA,CACA,MAAAuH,CACF,CAAC,EAED,GAAIqN,CAAAA,CAAe,WAAY,CAC7B,IAAA,IAAWE,KAAoBF,CAAe,CAAA,QAAA,EAAY,EACxD,CAAA,GAAI,CAACA,CAAe,CAAA,UAAA,CAAWE,CAAgB,CAC7C,CAAA,IAAA,IAAWP,CAAqBD,IAAAA,CAAAA,CAAoB,CAElD,IAAMS,CAAAA,CAAyBR,EAAkB,IAC7CrW,CAAAA,CAAAA,CAAQ,WAAyBqW,CAAkB,CAAA,IAAI,EACvDA,CAEJ,CAAA,GACE0E,GAAe,CAAE,MAAA,CAAQlE,CAAuB,CAAC,CAAA,CAAE,SACjD,QACF,CAAA,CACA,CACA,IAAMP,EAAsBK,EAAa,CAAA,CACvC,QAAA3W,CACA,CAAA,MAAA,CAAQ,CACN,GAAG6W,CAAAA,CACH,KAAM,QACR,CAAA,CACA,MAAAxN,CACF,CAAC,EAED,GAAIiN,CAAAA,CAAoB,aAAaM,CAAgB,CAAA,CAAG,CACtDF,CAAAA,CAAe,WAAWE,CAAgB,CAAA,CACxCN,EAAoB,UAAWM,CAAAA,CAAgB,EACjD,KACF,CACF,CACF,CAGJtB,CAAAA,CAAY,KAAKoB,CAAc,EACjC,CACF,CASA,GAPAvB,EAAW3N,CAAiB,CAAA,CAC1B,KAAO8N,CAAAA,CAAAA,CACP,gBAAiB,KACjB,CAAA,mBAAA,CAAqB,KACrB,MAAQH,CAAAA,CACV,CAAC,CAEG+F,CAAAA,CAAAA,CAAY,SAAS,MAAM,CAAA,CAAG,CAEhC,IAAMpE,CAAAA,CAAsC,CAC1C,CACE,IAAA,CAAM,MACR,CACF,CAAA,CAEIxB,CAAY,CAAA,MAAA,EACdwB,EAAY,OAAQ3B,CAAAA,CAAQ,EAG9BA,CAAW,CAAA,CACT,MAAO2B,CACP,CAAA,eAAA,CAAiB,IACnB,EACF,CAEA,OAAO3B,CACT,CAAA,CAEMiF,GAAa,CAAC,CAClB,QAAApa,CACA,CAAA,MAAA,CAAA8B,CACA,CAAA,KAAA,CAAAuH,CACF,CAIuB,GAAA,CACrB,IAAI8L,CAAWc,CAAAA,EAAAA,CAAa,CAAE,MAAAnU,CAAAA,CAAO,CAAC,CAEhCwT,CAAAA,CAAAA,CAAsC,EACtC4F,CAAAA,CAAAA,CAAcH,GAAe,CAAE,MAAA,CAAAjZ,CAAO,CAAC,CAAA,CAEvCsU,CAAqBtU,CAAAA,CAAAA,CAAO,MAElC,IAAWuU,IAAAA,CAAAA,IAAqBD,EAAoB,CAClD,IAAIE,EAAsBd,CAAiB,CAAA,CACzC,OAAAxV,CAAAA,CAAAA,CACA,OAAQqW,CACR,CAAA,KAAA,CAAAhN,CACF,CAAC,CAAA,CAGD,GAAIvH,CAAO,CAAA,aAAA,EAAiBuU,CAAkB,CAAA,IAAA,CAAM,CAKlD,IAAME,CAAAA,CAJSvB,GACbqB,CAAkB,CAAA,IAAA,CAClBvU,EAAO,aAAc,CAAA,OACvB,EAC4D,GACzDjW,CAAAA,CAAAA,GAAW,CACV,KAAOA,CAAAA,CAAAA,CACP,KAAM,QACR,CAAA,CACF,EAaAyqB,CAAsB,CAAA,CACpB,KAAO,CAAA,CAbsC,CAC7C,UAAY,CAAA,CACV,CAACxU,CAAO,CAAA,aAAA,CAAc,YAAY,EAChCyU,CAAAA,CAAa,OAAS,CAClB,CAAA,CACE,MAAOA,CACP,CAAA,eAAA,CAAiB,IACnB,CACAA,CAAAA,CAAAA,CAAa,CAAC,CACtB,CAAA,CACA,IAAM,CAAA,QACR,EAEiCD,CAAmB,CAAA,CAClD,gBAAiB,KACnB,EACF,CAEAhB,CAAY,CAAA,IAAA,CAAKgB,CAAmB,EACtC,CAYA,GAVI4E,CAAY,CAAA,QAAA,CAAS,MAAM,CAC7B5F,EAAAA,CAAAA,CAAY,KAAK,CAAE,IAAA,CAAM,MAAO,CAAC,EAGnCH,CAAW3N,CAAAA,CAAAA,CAAiB,CAC1B,KAAO8N,CAAAA,CAAAA,CACP,oBAAqB,IACrB,CAAA,MAAA,CAAQH,CACV,CAAC,CAAA,CAEG+F,EAAY,QAAS,CAAA,QAAQ,EAAG,CAElC,IAAMxE,EAAiBC,EAAa,CAAA,CAClC,OAAA3W,CAAAA,CAAAA,CACA,OAAQ,CACN,GAAG8B,EACH,IAAM,CAAA,QACR,EACA,KAAAuH,CAAAA,CACF,CAAC,CAEGqN,CAAAA,CAAAA,CAAe,aACjBvB,CAAW,CAAA,CACT,MAAO,CAACA,CAAAA,CAAUuB,CAAc,CAChC,CAAA,eAAA,CAAiB,KACnB,CAAA,EAEJ,CAEA,OAAOvB,CACT,EAEM4B,EAAY,CAAA,CAAC,CACjB,OAAA/W,CAAAA,CAAAA,CACA,OAAA8B,CACA,CAAA,KAAA,CAAAuH,CACF,CAIuB,GAAA,CACrB,IAAI8L,CAAWc,CAAAA,EAAAA,CAAa,CAAE,MAAAnU,CAAAA,CAAO,CAAC,CAAA,CAEtCqT,EAAS,IAAO,CAAA,MAAA,CAEhB,IAAMG,CAAsC,CAAA,GACtC4F,CAAcH,CAAAA,EAAAA,CAAe,CAAE,MAAAjZ,CAAAA,CAAO,CAAC,CAE7C,CAAA,IAAA,GAAW,CAAC9R,CAAOgnB,CAAAA,CAAS,IAAKlV,CAAO,CAAA,IAAA,CAAK,OAAQ,EAAA,CAAG,CACtD,IAAMmV,CAAAA,CAAkB,OAAOD,CAC3BE,CAAAA,CAAAA,CAuBJ,GApBED,CAAoB,GAAA,QAAA,EACpBA,IAAoB,QACpBA,EAAAA,CAAAA,GAAoB,UAEpBC,CAAWD,CAAAA,CAAAA,CACFA,IAAoB,QAAY,EAAA,KAAA,CAAM,QAAQD,CAAS,CAAA,CAChEE,CAAW,CAAA,OAAA,CACFF,IAAc,IAEnBkE,CAAAA,CAAAA,CAAY,SAAS,MAAM,CAAA,GAC7BhE,EAAW,MAGb,CAAA,CAAA,OAAA,CAAQ,KACN,WACA,CAAA,CAAA,WAAA,EAAcD,CAAe,CAAmBD,gBAAAA,EAAAA,CAAS,aACzDlV,CAAO,CAAA,IACT,EAGE,CAACoV,CAAAA,CACH,SAGF,IAAMC,EAAeR,EAAa,CAAA,CAChC,QAAA3W,CACA,CAAA,MAAA,CAAQ,CACN,KAAOgX,CAAAA,CAAAA,CACP,YAAalV,CAAO,CAAA,qBAAqB,IAAI9R,CAAK,CAAA,CAClD,MACE8R,CAAO,CAAA,iBAAiB,IAAI9R,CAAK,CAAA,EAAK8R,CAAO,CAAA,aAAa,IAAI9R,CAAK,CAAA,CACrE,KAAMknB,CACR,CAAA,CACA,MAAA7N,CACF,CAAC,EAEDiM,CAAY,CAAA,IAAA,CAAK6B,CAAY,EAC/B,CAEA,OAAAhC,CAAW3N,CAAAA,CAAAA,CAAiB,CAC1B,KAAO8N,CAAAA,CAAAA,CACP,MAAQH,CAAAA,CACV,CAAC,CAEMA,CAAAA,CACT,EAEMkF,EAAa,CAAA,CAAC,CAClB,OAAAra,CAAAA,CAAAA,CACA,OAAA8B,CACA,CAAA,KAAA,CAAAuH,CACF,CAIuB,GAAA,CACrB,IAAI8L,CAAWc,CAAAA,EAAAA,CAAa,CAAE,MAAAnU,CAAAA,CAAO,CAAC,CAAA,CAElCwT,EAAsC,EAAC,CACrC4F,EAAcH,EAAe,CAAA,CAAE,OAAAjZ,CAAO,CAAC,EAEvCsU,CAAqBtU,CAAAA,CAAAA,CAAO,MAElC,IAAWuU,IAAAA,CAAAA,IAAqBD,EAAoB,CAClD,IAAIE,EAAsBd,CAAiB,CAAA,CACzC,OAAAxV,CAAAA,CAAAA,CACA,OAAQqW,CACR,CAAA,KAAA,CAAAhN,CACF,CAAC,CAAA,CAGD,GAAIvH,CAAO,CAAA,aAAA,EAAiBuU,EAAkB,IAAM,CAAA,CAKlD,IAAME,CAJSvB,CAAAA,EAAAA,CACbqB,EAAkB,IAClBvU,CAAAA,CAAAA,CAAO,cAAc,OACvB,CAAA,CAC4D,GACzDjW,CAAAA,CAAAA,GAAW,CACV,KAAOA,CAAAA,CAAAA,CACP,KAAM,QACR,CAAA,CACF,EAcAyqB,CAAsB,CAAA,CACpB,MAAO,CAdsC,CAC7C,WAAY,CACV,CAACxU,EAAO,aAAc,CAAA,YAAY,EAChCyU,CAAa,CAAA,MAAA,CAAS,CAClB,CAAA,CACE,MAAOA,CACP,CAAA,eAAA,CAAiB,IACnB,CACAA,CAAAA,CAAAA,CAAa,CAAC,CACtB,CAAA,CACA,SAAU,CAACzU,CAAAA,CAAO,cAAc,YAAY,CAAA,CAC5C,KAAM,QACR,CAAA,CAEiCwU,CAAmB,CAClD,CAAA,eAAA,CAAiB,KACnB,EACF,CAMEA,CAAoB,CAAA,eAAA,GAAoB,MACxCA,CAAoB,CAAA,IAAA,GAAS,SAC7BA,CAAoB,CAAA,KAAA,CAEpBhB,EAAcA,CAAY,CAAA,MAAA,CAAOgB,EAAoB,KAAK,CAAA,CAE1DhB,EAAY,IAAKgB,CAAAA,CAAmB,EAExC,CAYA,GAVI4E,CAAY,CAAA,QAAA,CAAS,MAAM,CAC7B5F,EAAAA,CAAAA,CAAY,KAAK,CAAE,IAAA,CAAM,MAAO,CAAC,CAAA,CAGnCH,EAAW3N,CAAiB,CAAA,CAC1B,MAAO8N,CACP,CAAA,mBAAA,CAAqB,KACrB,MAAQH,CAAAA,CACV,CAAC,CAEG+F,CAAAA,CAAAA,CAAY,QAAS,CAAA,QAAQ,EAAG,CAElC,IAAMxE,EAAiBC,EAAa,CAAA,CAClC,QAAA3W,CACA,CAAA,MAAA,CAAQ,CACN,GAAG8B,CAAAA,CACH,KAAM,QACR,CAAA,CACA,MAAAuH,CACF,CAAC,EAEGqN,CAAe,CAAA,UAAA,GACjBvB,CAAW,CAAA,CACT,MAAO,CAACA,CAAAA,CAAUuB,CAAc,CAChC,CAAA,eAAA,CAAiB,KACnB,CAEJ,EAAA,CAEA,OAAOvB,CACT,CAAA,CAEMpS,GAAW,CAAC,CAChB,QAAA/C,CACA,CAAA,MAAA,CAAA8B,EACA,KAAAuH,CAAAA,CACF,CAIuB,GAAA,CACrB,IAAI8L,CAAWc,CAAAA,EAAAA,CAAa,CAAE,MAAAnU,CAAAA,CAAO,CAAC,CAEhC2U,CAAAA,CAAAA,CAA+B,EAMrC,CAAA,GAFAA,EAAY,IAAO,CAAA,SAAA,CAAU3U,EAAO,IAAI,CAAA,CAEpC,CAACuH,CAAM,CAAA,wBAAA,CAAyB,GAAIvH,CAAAA,CAAAA,CAAO,IAAI,CAAG,CAAA,CACpD,IAAMsV,CAAYpX,CAAAA,CAAAA,CAAQ,WAAyB8B,CAAO,CAAA,IAAI,EAC9D0T,CAAiB,CAAA,CACf,QAAAxV,CACA,CAAA,MAAA,CAAQoX,EACR,KAAO,CAAA,CACL,GAAG/N,CACH,CAAA,IAAA,CAAMvH,CAAO,CAAA,IAAA,CACb,WAAY,KACd,CACF,CAAC,EACH,CAEA,IAAMwT,CAAsC,CAAA,GAC5C,OAAAA,CAAAA,CAAY,KAAKmB,CAAW,CAAA,CAExB3U,EAAO,IAAQ,EAAA,OAAOA,EAAO,IAAS,EAAA,QAAA,EACpCA,CAAO,CAAA,IAAA,CAAK,SAAS,MAAM,CAAA,EAC7BwT,EAAY,IAAK,CAAA,CAAE,KAAM,MAAO,CAAC,EAIrCH,CAAW3N,CAAAA,CAAAA,CAAiB,CAC1B,KAAO8N,CAAAA,CAAAA,CACP,oBAAqB,IACrB,CAAA,MAAA,CAAQH,CACV,CAAC,CAAA,CAEMA,CACT,CAAA,CAEMwB,GAAe,CAAC,CACpB,QAAA3W,CACA,CAAA,QAAA,CAAAmV,EACA,MAAArT,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAOuB,CAMrB,OALK8L,CAAAA,GACHA,EAAWc,EAAa,CAAA,CAAE,OAAAnU,CAAO,CAAC,CAClCsT,CAAAA,EAAAA,CAAgB,CAAE,QAAAD,CAAAA,CAAAA,CAAU,OAAArT,CAAO,CAAC,GAG9BA,CAAO,CAAA,IAAA,EACb,KAAK,OAAA,CACH,OAAOuT,EAAW,CAAA,CAChB,QAAArV,CACA,CAAA,QAAA,CAAAmV,EACA,MAAArT,CAAAA,CAAAA,CACA,KAAAuH,CAAAA,CACF,CAAC,CACH,CAAA,KAAK,UACH,OAAOqM,EAAAA,CAAa,CAElB,SAAAP,CAEF,CAAC,CAAA,CACH,KAAK,SACL,CAAA,KAAK,SACH,OAAOQ,EAAAA,CAAY,CAEjB,QAAAR,CAAAA,CAAAA,CACA,OAAArT,CACF,CAAC,EACH,KAAK,MAAA,CACH,OAAOmZ,EAAU,CAAA,CAEf,QAAA,CAAA9F,CAEF,CAAC,CACH,CAAA,KAAK,QACH,CAAA,OAAOS,GAAY,CACjB,OAAA,CAAA5V,EACA,QAAAmV,CAAAA,CAAAA,CACA,OAAArT,CACA,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CACH,KAAK,QACH,CAAA,OAAO2M,GAAY,CAEjB,QAAAb,CAAAA,CAEF,CAAC,CACH,CAAA,QAEE,OAAOqC,EAAa,CAAA,CAAW,QAAA,CAAArC,EAAU,MAAArT,CAAAA,CAAO,CAAC,CACrD,CACF,EAEMqZ,EAAiB,CAAA,CAAC,CACtB,OAAAnb,CAAAA,CAAAA,CACA,QAAAmV,CAAAA,CAAAA,CACA,OAAArT,CACA,CAAA,KAAA,CAAAuH,CACF,CAOuB,GAAA,CAChB8L,IACHA,CAAWc,CAAAA,EAAAA,CAAa,CAAE,MAAAnU,CAAAA,CAAO,CAAC,CAGpC,CAAA,CAAA,IAAMwV,EAAgC,EAAC,CAEvClC,GAAgB,CAAE,QAAA,CAAUkC,CAAc,CAAA,MAAA,CAAAxV,CAAO,CAAC,CAAA,CAE9CA,EAAO,IAAK,CAAA,QAAA,CAAS,MAAM,CAAKwV,EAAAA,CAAAA,CAAa,UAAY,IAG3D,EAAA,OAAOA,EAAa,OAGtB,CAAA,IAAMhC,EAAsC,EAAC,CAE7C,QAAWxmB,CAAQgT,IAAAA,CAAAA,CAAO,IACxB,CAAA,GAAIhT,IAAS,MACXwmB,CAAAA,CAAAA,CAAY,KAAK,CAAE,IAAA,CAAM,MAAO,CAAC,CAAA,CAAA,KAC5B,CACL,IAAM6B,CAAAA,CAAeR,GAAa,CAChC,OAAA,CAAA3W,EACA,QAAUsX,CAAAA,CAAAA,CACV,OAAQ,CACN,GAAGxV,CACH,CAAA,IAAA,CAAAhT,CACF,CACA,CAAA,KAAA,CAAAua,CACF,CAAC,CAAA,CAEDiM,EAAY,IAAK6B,CAAAA,CAAY,EAC/B,CAGF,OAAAhC,EAAW3N,CAAiB,CAAA,CAC1B,MAAO8N,CACP,CAAA,MAAA,CAAQH,CACV,CAAC,CAAA,CAEMA,CACT,CAAA,CAEMoC,GAAY,CAAC,CACjB,QAAAvX,CACA,CAAA,MAAA,CAAA8B,EACA,KAAAuH,CAAAA,CACF,IAIuB,CACrB,IAAM8L,EAAWc,EAAa,CAAA,CAAE,OAAAnU,CAAO,CAAC,EAExCsT,EAAgB,CAAA,CAAE,QAAAD,CAAAA,CAAAA,CAAU,OAAArT,CAAO,CAAC,EAEpC,IAAMoZ,CAAAA,CAAcH,GAAe,CAAE,MAAA,CAAAjZ,CAAO,CAAC,CAAA,CAE7C,OAAIoZ,CAAY,CAAA,MAAA,GAAW,EAClBvE,EAAa,CAAA,CAClB,QAAA3W,CACA,CAAA,QAAA,CAAAmV,CACA,CAAA,MAAA,CAAQ,CACN,GAAGrT,CAAAA,CACH,KAAMoZ,CAAY,CAAA,CAAC,CACrB,CACA,CAAA,KAAA,CAAA7R,CACF,CAAC,CAAA,CAGI8R,GAAe,CACpB,OAAA,CAAAnb,EACA,QAAAmV,CAAAA,CAAAA,CACA,OAAQ,CACN,GAAGrT,CACH,CAAA,IAAA,CAAMoZ,CACR,CACA,CAAA,KAAA,CAAA7R,CACF,CAAC,CACH,EAEMmO,EAAe,CAAA,CAAC,CACpB,QAAArC,CAAAA,CAAAA,CACA,OAAArT,CACF,CAAA,IAKOqT,IACHA,CAAWc,CAAAA,EAAAA,CAAa,CAAE,MAAAnU,CAAAA,CAAO,CAAC,CAAA,CAAA,CAGpCqT,EAAS,IAAO,CAAA,SAAA,CAEhBC,GAAgB,CAAE,QAAA,CAAAD,EAAU,MAAArT,CAAAA,CAAO,CAAC,CAE7BqT,CAAAA,CAAAA,CAAAA,CAGIK,EAAmB,CAAC,CAC/B,QAAAxV,CACA,CAAA,MAAA,CAAA8B,EACA,KAAAuH,CAAAA,CACF,CAKOA,IAAAA,CAAAA,GACHA,EAAQ,CACN,wBAAA,CAA0B,IAAI,GAChC,CAAA,CAAA,CAGEA,EAAM,IACRA,EAAAA,CAAAA,CAAM,yBAAyB,GAAIA,CAAAA,CAAAA,CAAM,IAAI,CAG3CvH,CAAAA,CAAAA,CAAO,KACFiB,EAAS,CAAA,CACd,QAAA/C,CACA,CAAA,MAAA,CAAQ8B,CACR,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CAGCvH,EAAO,IACFiV,CAAAA,EAAAA,CAAU,CACf,OAAA/W,CAAAA,CAAAA,CACA,OAAQ8B,CACR,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CAGCvH,EAAO,KACFoU,CAAAA,EAAAA,CAAW,CAChB,OAAAlW,CAAAA,CAAAA,CACA,MAAQ8B,CAAAA,CAAAA,CACR,MAAAuH,CACF,CAAC,EAGCvH,CAAO,CAAA,KAAA,CACFsY,GAAW,CAChB,OAAA,CAAApa,EACA,MAAQ8B,CAAAA,CAAAA,CACR,MAAAuH,CACF,CAAC,EAGCvH,CAAO,CAAA,KAAA,CACFuY,GAAW,CAChB,OAAA,CAAAra,CACA,CAAA,MAAA,CAAQ8B,EACR,KAAAuH,CAAAA,CACF,CAAC,CAICvH,CAAAA,CAAAA,CAAO,MAAQA,CAAO,CAAA,UAAA,CACjByV,GAAU,CACf,OAAA,CAAAvX,EACA,MAAQ8B,CAAAA,CAAAA,CACR,MAAAuH,CACF,CAAC,EAGImO,EAAa,CAAA,CAAW,OAAA1V,CAAO,CAAC,GAG5B2V,EAAc,CAAA,CAAC,CAC1B,IAAA1a,CAAAA,CAAAA,CACA,QAAAiD,CACA,CAAA,MAAA,CAAA8B,CACF,CAIM,GAAA,CACC9B,EAAQ,EAAG,CAAA,UAAA,GACdA,EAAQ,EAAG,CAAA,UAAA,CAAa,EAAC,CAAA,CAGtBA,EAAQ,EAAG,CAAA,UAAA,CAAW,UACzBA,CAAQ,CAAA,EAAA,CAAG,WAAW,OAAU,CAAA,IAGlCA,CAAQ,CAAA,EAAA,CAAG,WAAW,OAAQ/C,CAAAA,CAAAA,CAAUF,CAAI,CAAC,CAAA,CAAIyY,EAAiB,CAChE,OAAA,CAAAxV,CACA,CAAA,MAAA,CAAA8B,EACA,KAAO,CAAA,CACL,KAAA/E,CACA,CAAA,wBAAA,CAA0B,IAAI,GAChC,CACF,CAAC,EACH,CAAA,CCziCA,IAAM2a,EACJwD,CAAAA,CAAAA,EAEAA,EAAY,QAAS,CAAA,SAAS,GAC9BA,CAAY,CAAA,QAAA,CAAS,SAAS,CAAA,EAC9BA,EAAY,QAAS,CAAA,QAAQ,GAC7BA,CAAY,CAAA,QAAA,CAAS,QAAQ,CAGlBvD,CAAAA,EAAAA,CAAkB,CAAC,CAC9B,OAAA,CAAA3X,EACA,IAAAjW,CAAAA,CAAAA,CACA,OAAA+X,CACF,CAAA,GAIwB,CAItB,GAHyB+S,EAAAA,CACvB7U,CAAQ,CAAA,MAAA,CAAO,OAAO,UACxB,CAAA,CACqB,KAAKjW,CAAI,CAAA,CAC5B,OAAO,KAGT,CAAA,GAAI+X,EAAO,IAAM,CAAA,CACf,IAAM3B,CAAMH,CAAAA,CAAAA,CAAQ,WAElB8B,CAAO,CAAA,IAAI,EAEb,GAAI,SAAA,GAAa3B,CAAO,EAAA,IAAA,GAAQA,EAAK,CACnC,IAAIiX,EAMJ,GAJI,IAAA,GAAQjX,IACViX,CAAYjX,CAAAA,CAAAA,CAAI,QAGd,CAACiX,CAAAA,CAAW,CAEd,IAAMoB,CAAAA,CAAW9D,GAAiB,CAAE,OAAA,CAASvU,EAAI,OAAQ,CAAC,CAEpDsU,CAAAA,CAAAA,CACJ+D,EAAS,IAAM/D,CAAAA,CAAAA,EAAYA,EAAQ,IAAS,GAAA,MAAM,GAAK+D,CAAS,CAAA,CAAC,EAC/D/D,CAAS,EAAA,MAAA,GACX2C,EAAY3C,CAAQ,CAAA,MAAA,EAExB,CAEA,OAAK2C,CAAAA,CAIEO,GAAgB,CACrB,OAAA,CAAA3X,CACA,CAAA,IAAA,CAAAjW,EACA,MAAQqtB,CAAAA,CACV,CAAC,CAPQ,CAAA,KAQX,CAEA,OAAOO,EAAAA,CAAgB,CACrB,OAAA3X,CAAAA,CAAAA,CACA,KAAAjW,CACA,CAAA,MAAA,CAAQoW,CACV,CAAC,CACH,CAEA,IAAWpW,IAAAA,CAAAA,IAAQ+X,CAAO,CAAA,UAAA,CAKxB,GAJyB+S,EACvB7U,CAAAA,CAAAA,CAAQ,OAAO,MAAO,CAAA,UACxB,EAEqB,IAAKjW,CAAAA,CAAI,EAAG,CAC/B,IAAM0Q,EAAWqH,CAAO,CAAA,UAAA,CAAW/X,CAAI,CAEvC,CAAA,GAAI,OAAO0Q,CAAa,EAAA,SAAA,CAAW,CAEjC,IAAMygB,EAAcH,EAAe,CAAA,CAAE,OAAQtgB,CAAS,CAAC,EAEvD,GAAI,CAACygB,EAAY,MAAQ,CAAA,CAEvB,IAAME,CADqB3gB,CAAAA,CAAAA,CAAAA,CAAS,OAASA,CAAS,CAAA,KAAA,EACG,EAAI,EAAA,MAAA,CAC1DqH,CAAWA,EAAAA,CAAAA,CAAO,OAAS,MAC9B,CAAA,CACA,GAAIsZ,CAA0B,CAAA,MAAA,GAAW,EAAG,CAC1C,IAAMF,EAAcH,EAAe,CAAA,CACjC,OAAQK,CAA0B,CAAA,CAAC,CACrC,CAAC,CAAA,CACD,GAAI1D,EAAiBwD,CAAAA,CAAW,CAC9B,CAAA,OAAOnxB,CAEX,CACF,CAEA,GAAI2tB,EAAiBwD,CAAAA,CAAW,EAC9B,OAAOnxB,CAEX,CACF,CAGF,IAAA,IAAW8tB,KAAS/V,CAAO,CAAA,KAAA,EAAS,EAAI,CAAA,CACtC,IAAMgT,CAAa6C,CAAAA,EAAAA,CAAgB,CACjC,OAAA,CAAA3X,EACA,IAAAjW,CAAAA,CAAAA,CACA,OAAQ8tB,CACV,CAAC,EACD,GAAI/C,CAAAA,CACF,OAAOA,CAEX,CAEA,OAAO,MACT,CAAA,CCtGA,IAAMgD,EAAsB,CAAA,CAAC,CAC3B,WAAAC,CAAAA,CAAAA,CACA,SAAA7X,CAAAA,CACF,IAGM,CACAA,CAAAA,CAAU,aAAe,MAC3B6X,GAAAA,CAAAA,CAAY,WAAa7X,CAAU,CAAA,UAAA,CAAA,CAGjCA,EAAU,WACZ6X,GAAAA,CAAAA,CAAY,YAAc7X,CAAU,CAAA,WAAA,CAAA,CAGlCA,EAAU,OACZ6X,GAAAA,CAAAA,CAAY,QAAU7X,CAAU,CAAA,OAAA,CAAA,CAG9BA,CAAU,CAAA,IAAA,EAAM,SAClB6X,CAAY,CAAA,IAAA,CAAO7X,EAAU,IAEjC,EAAA,CAAA,CAEM8X,GAAkB,CAAC,CACvB,QAAAhY,CACA,CAAA,MAAA,CAAA6F,EACA,SAAA3F,CAAAA,CAAAA,CACA,KAAApH,CACA,CAAA,KAAA,CAAAuQ,CACF,CAI0B,GAAA,CACxB,IAAM0O,CAAAA,CAAkC,CACtC,EAAI3O,CAAAA,EAAAA,CAAc,CAChB,OAAApJ,CAAAA,CAAAA,CACA,GAAIE,CAAU,CAAA,WAAA,CACd,OAAA2F,CACA,CAAA,IAAA,CAAA/M,EACA,KAAAuQ,CAAAA,CACF,CAAC,CACD,CAAA,MAAA,CAAAxD,EACA,IAAA/M,CAAAA,CACF,CAEA,CAAA,OAAIoH,EAAU,WACZ6X,GAAAA,CAAAA,CAAY,YAAc7X,CAAU,CAAA,WAAA,CAAA,CAGtC4X,GAAoB,CAClB,WAAA,CAAAC,EACA,SAAA7X,CAAAA,CACF,CAAC,CAEM6X,CAAAA,CACT,EAEME,EAAyB,CAAA,CAAC,CAC9B,OAAAjY,CAAAA,CAAAA,CACA,MAAA6F,CAAAA,CAAAA,CACA,UAAA3F,CACA,CAAA,IAAA,CAAApH,EACA,kBAAAof,CAAAA,CAAAA,CACA,MAAA7O,CACF,CAAA,GAK0B,CACxB,IAAM0O,CAAAA,CAAcC,GAAgB,CAClC,OAAA,CAAAhY,EACA,MAAA6F,CAAAA,CAAAA,CACA,UAAA3F,CACA,CAAA,IAAA,CAAApH,CACA,CAAA,KAAA,CAAAuQ,CACF,CAAC,CAAA,CAMD,GAJInJ,CAAU,CAAA,UAAA,GACZ6X,EAAY,UAAa7X,CAAAA,CAAAA,CAAU,YAGjCA,CAAU,CAAA,WAAA,CAAa,CACzB,IAAMqY,CAAAA,CACJ,SAAUrY,CAAU,CAAA,WAAA,CAChBF,EAAQ,UAA8BE,CAAAA,CAAAA,CAAU,WAAY,CAAA,IAAI,EAChEA,CAAU,CAAA,WAAA,CACVsY,EAAW9D,EAAiB,CAAA,CAAE,QAAS6D,CAAY,CAAA,OAAQ,CAAC,CAE5D9D,CAAAA,CAAAA,CACJ+D,EAAS,IAAM/D,CAAAA,CAAAA,EAAYA,EAAQ,IAAS,GAAA,MAAM,GAAK+D,CAAS,CAAA,CAAC,CAEnE,CAAA,GAAI/D,EAAS,CACX,IAAMK,EAAa6C,EAAgB,CAAA,CACjC,QAAA3X,CACA,CAAA,IAAA,CAAM,GACN,MAAQ,CAAA,CACN,YAAauY,CAAY,CAAA,WAAA,CACzB,GAAG9D,CAAQ,CAAA,MACb,CACF,CAAC,CAAA,CAEDsD,CAAY,CAAA,IAAA,CAAO,CACjB,SAAWtD,CAAAA,CAAAA,CAAQ,UACnB,MAAQe,CAAAA,CAAAA,CAAiB,CACvB,OAAAxV,CAAAA,CAAAA,CACA,OAAQ,CACN,WAAA,CAAauY,EAAY,WACzB,CAAA,GAAI,SAAUrY,CAAU,CAAA,WAAA,CACpBA,EAAU,WACVuU,CAAAA,CAAAA,CAAQ,MACd,CAAA,CACA,MAAO,MACT,CAAC,CACH,CAEIK,CAAAA,CAAAA,GACFiD,EAAY,IAAK,CAAA,UAAA,CAAajD,GAG5ByD,CAAY,CAAA,QAAA,GACdR,EAAY,IAAK,CAAA,QAAA,CAAWQ,EAAY,QAGtC9D,CAAAA,CAAAA,CAAAA,CAAQ,OACVsD,CAAY,CAAA,IAAA,CAAK,IAAOtD,CAAAA,CAAAA,CAAQ,MAEpC,CACF,CAEA,QAAW1qB,CAAQmW,IAAAA,CAAAA,CAAU,UAAW,CACjC6X,CAAAA,CAAY,YACfA,CAAY,CAAA,SAAA,CAAY,EAG1B,CAAA,CAAA,IAAMxP,EAAWrI,CAAU,CAAA,SAAA,CAAUnW,CAAI,CACnC0uB,CAAAA,CAAAA,CACJ,MAAUlQ,GAAAA,CAAAA,CACNvI,EAAQ,UAA2BuI,CAAAA,CAAAA,CAAS,IAAI,CAChDA,CAAAA,CAAAA,CACAiQ,EAAW9D,EAAiB,CAAA,CAAE,QAAS+D,CAAe,CAAA,OAAQ,CAAC,CAE/DhE,CAAAA,CAAAA,CACJ+D,EAAS,IAAM/D,CAAAA,CAAAA,EAAYA,EAAQ,IAAS,GAAA,MAAM,CAAK+D,EAAAA,CAAAA,CAAS,CAAC,CAE/D/D,CAAAA,CAAAA,CACFsD,EAAY,SAAUhuB,CAAAA,CAAI,EAAI,CAC5B,SAAA,CAAW0qB,EAAQ,SACnB,CAAA,MAAA,CAAQe,EAAiB,CACvB,OAAA,CAAAxV,EACA,MAAQ,CAAA,CACN,YAAayY,CAAe,CAAA,WAAA,CAC5B,GAAGjE,EAAAA,CAAgB,CAAE,OAAAC,CAAAA,CAAQ,CAAC,CAChC,CAAA,CACA,MAAO,MACT,CAAC,CACH,CAEAsD,CAAAA,CAAAA,CAAY,UAAUhuB,CAAI,CAAA,CAAI,CAC5B,MAAQ,CAAA,CACN,YAAa0uB,CAAe,CAAA,WAAA,CAG5B,IAAM1uB,CAAAA,CAAAA,GAAS,MAAQ,MAAS,CAAA,SAClC,CACF,EAEJ,CAEA,GAAImW,CAAU,CAAA,QAAA,CAAU,CACtB,IAAMwY,CAAAA,CAAkD,EAExD,CAAA,IAAA,IAAWC,KAA6BzY,CAAU,CAAA,QAAA,CAChD,QAAWnW,CAAQ4uB,IAAAA,CAAAA,CAA2B,CAC5C,IAAMC,EAAuBV,CAAmB,CAAA,GAAA,CAAInuB,CAAI,CAEnD6uB,CAAAA,CAAAA,EAILF,EAAsB,IAAKE,CAAAA,CAAoB,EACjD,CAGEF,CAAAA,CAAsB,SACxBX,CAAY,CAAA,QAAA,CAAWW,GAE3B,CAKA,OAAOX,CACT,CAEae,CAAAA,EAAAA,CAAiB,CAAC,CAC7B,QAAA9Y,CACA,CAAA,MAAA,CAAA6F,EACA,SAAA3F,CAAAA,CAAAA,CACA,KAAApH,CACA,CAAA,kBAAA,CAAAof,EACA,KAAA7O,CAAAA,CACF,IAUM,CACCrJ,CAAAA,CAAQ,GAAG,KACdA,GAAAA,CAAAA,CAAQ,GAAG,KAAQ,CAAA,EAGhBA,CAAAA,CAAAA,CAAAA,CAAQ,GAAG,KAAMlH,CAAAA,CAAI,IACxBkH,CAAQ,CAAA,EAAA,CAAG,MAAMlH,CAAI,CAAA,CAAI,EAGvBoH,CAAAA,CAAAA,CAAAA,CAAU,UACZF,CAAQ,CAAA,EAAA,CAAG,QAAU,CAAC,GAAIA,EAAQ,EAAG,CAAA,OAAA,EAAW,EAAC,CAAI,GAAGE,CAAU,CAAA,OAAO,GAG3EF,CAAQ,CAAA,EAAA,CAAG,MAAMlH,CAAI,CAAA,CAAE+M,CAAM,CAAIoS,CAAAA,EAAAA,CAAuB,CACtD,OAAAjY,CAAAA,CAAAA,CACA,OAAA6F,CACA,CAAA,SAAA,CAAA3F,EACA,IAAApH,CAAAA,CAAAA,CACA,kBAAAof,CAAAA,CAAAA,CACA,MAAA7O,CACF,CAAC,EACH,CC/OA,CAAA,IAAMiR,GACJpB,CACwB,EAAA,CACxB,OAAQA,CAAK,EAEX,KAAK,OACH,CAAA,OAAO,OACT,QACE,MACJ,CACF,CAKMH,CAAAA,EAAAA,CAAkBQ,CAAuD,EAAA,CAC7E,OAAQA,CAAO,EAGb,KAAK,YACL,CAAA,KAAK,OACH,OAAO,KAAA,CACT,QACE,OAAO,MACX,CACF,CAKMN,CAAAA,EAAAA,CACJC,GACuC,CACvC,OAAQA,GACN,KAAK,QACL,CAAA,KAAK,OACH,OAAO,QAAA,CACT,KAAK,QACL,CAAA,KAAK,QACH,OAAO,MACX,CACF,CAEaC,CAAAA,EAAAA,CAA0B,CAAC,CACtC,OAAA,CAAAnZ,EACA,UAAApO,CAAAA,CACF,IAGuC,CACrC,GAAI,CAACA,CAAAA,EAAc,CAAC,MAAO,CAAA,IAAA,CAAKA,CAAU,CAAE,CAAA,MAAA,CAC1C,OAGF,IAAMwnB,CAAAA,CAAwC,EAE9C,CAAA,IAAA,IAAWC,KAAwBznB,CAAY,CAAA,CAC7C,IAAMC,CACJ,CAAA,MAAA,GAAUwnB,EACNrZ,CAAQ,CAAA,WAAA,CAA6BqZ,CAAoB,CAAA,CACzDA,EAEDD,CAAiBvnB,CAAAA,CAAAA,CAAU,EAAE,CAChCunB,GAAAA,CAAAA,CAAiBvnB,EAAU,EAAE,CAAA,CAAI,EAInCunB,CAAAA,CAAAA,CAAAA,CAAiBvnB,EAAU,EAAE,CAAA,CAAGA,EAAU,IAAK,CAAA,iBAAA,EAAmB,CAChEynB,CAAAA,EAAAA,CAAuB,CACrB,OAAA,CAAAtZ,EACA,SAAAnO,CAAAA,CACF,CAAC,EACL,CAEA,OAAOunB,CACT,CAAA,CAEME,GAAyB,CAAC,CAC9B,QAAAtZ,CACA,CAAA,SAAA,CAAAnO,CACF,CAG0B,GAAA,CAExB,IAAIiQ,CAASjQ,CAAAA,CAAAA,CAAU,MAEvB,CAAA,GAAI,CAACiQ,CAAQ,CAAA,CACX,IAAM0W,CAAW9D,CAAAA,EAAAA,CAAiB,CAAE,OAAS7iB,CAAAA,CAAAA,CAAU,OAAQ,CAAC,CAAA,CAE1D4iB,EACJ+D,CAAS,CAAA,IAAA,CAAM/D,GAAYA,CAAQ,CAAA,IAAA,GAAS,MAAM,CAAK+D,EAAAA,CAAAA,CAAS,CAAC,CAAA,CAC/D/D,IACF3S,CAAS2S,CAAAA,CAAAA,CAAQ,QAErB,CAEA,IAAMmD,EAA4B,CAChC,UAAA,CAAY/lB,EAAU,UACtB,CAAA,WAAA,CAAaA,EAAU,WACvB,CAAA,GAAGiQ,CACL,CAEMgT,CAAAA,CAAAA,CAAa6C,GAAgB,CACjC,OAAA,CAAA3X,CACA,CAAA,IAAA,CAAMnO,EAAU,IAChB,CAAA,MAAA,CAAQ+lB,CACV,CAAC,CAAA,CAEK2B,EAAQ1nB,CAAU,CAAA,KAAA,EAASonB,GAAapnB,CAAU,CAAA,EAAE,EACpD0oB,CACJ1oB,CAAAA,CAAAA,CAAU,UAAY,MAAYA,CAAAA,CAAAA,CAAU,QAAUknB,EAAeQ,CAAAA,CAAK,CAMtEC,CAAAA,CAAAA,CAAkC,CACtC,aALA3nB,CAAAA,CAAAA,CAAU,gBAAkB,MACxBA,CAAAA,CAAAA,CAAU,cACVyoB,EAAqBzoB,CAAAA,CAAAA,CAAU,EAAE,CAIrC,CAAA,OAAA,CAAA0oB,EACA,QAAU1oB,CAAAA,CAAAA,CAAU,GACpB,IAAMA,CAAAA,CAAAA,CAAU,KAChB,MAAQ2jB,CAAAA,CAAAA,CAAiB,CACvB,OAAA,CAAAxV,EACA,MAAQ4X,CAAAA,CAAAA,CACR,MAAO,MACT,CAAC,EACD,KAAA2B,CAAAA,CACF,EAEA,OAAI1nB,CAAAA,CAAU,aACZ2nB,CAAY,CAAA,UAAA,CAAa3nB,EAAU,UAGjCA,CAAAA,CAAAA,CAAAA,CAAU,cACZ2nB,CAAY,CAAA,WAAA,CAAc3nB,CAAU,CAAA,WAAA,CAAA,CAGlCijB,IACF0E,CAAY,CAAA,UAAA,CAAa1E,GAGvBjjB,CAAU,CAAA,QAAA,GACZ2nB,EAAY,QAAW3nB,CAAAA,CAAAA,CAAU,UAG5B2nB,CACT,CAAA,CAEagB,GAAiB,CAAC,CAC7B,KAAAzd,CACA,CAAA,OAAA,CAAAiD,EACA,SAAAnO,CAAAA,CACF,CAIM,GAAA,CACCmO,EAAQ,EAAG,CAAA,UAAA,GACdA,EAAQ,EAAG,CAAA,UAAA,CAAa,EAGrBA,CAAAA,CAAAA,CAAAA,CAAQ,GAAG,UAAW,CAAA,UAAA,GACzBA,EAAQ,EAAG,CAAA,UAAA,CAAW,WAAa,EAAC,CAAA,CAGtCA,EAAQ,EAAG,CAAA,UAAA,CAAW,UAAW/C,CAAAA,CAAAA,CAAUF,CAAI,CAAC,CAAA,CAAIuc,GAAuB,CACzE,OAAA,CAAAtZ,EACA,SAAAnO,CAAAA,CACF,CAAC,EACH,CAAA,CClLA,IAAM4oB,EAA6B,CAAA,CAAC,CAClC,OAAAza,CAAAA,CAAAA,CACA,YAAAuY,CACF,CAAA,GAG4B,CAE1B,IAAMC,EAAW9D,EAAiB,CAAA,CAAE,QAAS6D,CAAY,CAAA,OAAQ,CAAC,CAE5D9D,CAAAA,CAAAA,CACJ+D,EAAS,IAAM/D,CAAAA,CAAAA,EAAYA,EAAQ,IAAS,GAAA,MAAM,GAAK+D,CAAS,CAAA,CAAC,EAC7D1W,CAAS2S,CAAAA,CAAAA,CAAUA,CAAQ,CAAA,MAAA,CAAS,OAEpCmD,CAA4B,CAAA,CAChC,YAAaW,CAAY,CAAA,WAAA,CACzB,GAAGzW,CACL,CAAA,CAEM4Y,EAAsC,CAC1C,MAAA,CAAQlF,EAAiB,CACvB,OAAA,CAAAxV,EACA,MAAQ4X,CAAAA,CAAAA,CACR,MAAO,MACT,CAAC,CACH,CAAA,CAEA,OAAIW,CAAY,CAAA,WAAA,GACdmC,EAAc,WAAcnC,CAAAA,CAAAA,CAAY,aAGtCA,CAAY,CAAA,QAAA,GACdmC,EAAc,QAAWnC,CAAAA,CAAAA,CAAY,UAGhCmC,CACT,CAAA,CAEaC,GAAmB,CAAC,CAC/B,KAAA5d,CACA,CAAA,OAAA,CAAAiD,CACA,CAAA,WAAA,CAAAuY,CACF,CAIM,GAAA,CACCvY,EAAQ,EAAG,CAAA,UAAA,GACdA,EAAQ,EAAG,CAAA,UAAA,CAAa,EAGrBA,CAAAA,CAAAA,CAAAA,CAAQ,GAAG,UAAW,CAAA,aAAA,GACzBA,EAAQ,EAAG,CAAA,UAAA,CAAW,cAAgB,EAAC,CAAA,CAGzCA,CAAQ,CAAA,EAAA,CAAG,WAAW,aAAc/C,CAAAA,CAAAA,CAAUF,CAAI,CAAC,CAAA,CACjD0d,GAA2B,CACzB,OAAA,CAAAza,EACA,WAAAuY,CAAAA,CACF,CAAC,EACL,CAAA,CC/DO,IAAMkB,EAAe,CAAA,CAAC,CAAE,OAAAzZ,CAAAA,CAAQ,CAA+B,GAAA,CACpE,GAAIA,CAAQ,CAAA,IAAA,CAAK,QAAS,CACxBA,CAAAA,CAAQ,GAAG,OAAUA,CAAAA,CAAAA,CAAQ,KAAK,OAClC,CAAA,MACF,CAEA,GAAI,OAAOA,EAAQ,MAAO,CAAA,KAAA,CAAM,MAAS,QAAU,CAAA,CACjD,IAAMc,CAAAA,CAAMxE,GAAS0D,CAAQ,CAAA,MAAA,CAAO,MAAM,IAAI,CAAA,CAC9CA,EAAQ,EAAG,CAAA,OAAA,CAAU,CACnB,CACE,GAAA,CAAK,GAAGc,CAAI,CAAA,QAAA,CAAW,GAAGA,CAAI,CAAA,QAAQ,MAAQ,EAAE,CAAA,EAAGA,CAAI,CAAA,IAAI,GAAGA,CAAI,CAAA,IAAA,CAAO,IAAIA,CAAI,CAAA,IAAI,GAAK,EAAE,CAAA,CAC9F,CACF,EACF,CAEKd,EAAQ,EAAG,CAAA,OAAA,GACdA,EAAQ,EAAG,CAAA,OAAA,CAAU,CACnB,CACE,GAAA,CAAK,GACP,CACF,GAEJ,CCjBO,CAAA,IAAM4Z,GAAuBhc,CAAyC,EAAA,CAC3E,IAAMic,CAAgC,CAAA,GAChCC,CAAe,CAAA,IAAI,IAEzB,GAAIlc,CAAAA,CAAK,MACP,IAAWsM,IAAAA,CAAAA,IAAS,OAAO,OAAQtM,CAAAA,CAAAA,CAAK,KAAK,CAAA,CAAG,CAC9C,IAAM9E,CAAAA,CAAOoR,EAAM,CAAC,CAAA,CACdvE,EAAWuE,CAAM,CAAA,CAAC,EACxB,IAAWrE,IAAAA,CAAAA,IAAUsD,EAAa,CAChC,IAAMjJ,EAAYyF,CAASE,CAAAA,CAAM,EACjC,GAAI,CAAC3F,CACH,CAAA,SAGF,IAAMyM,CAAe/E,CAAAA,CAAAA,CAAmB,CAAE,MAAA/B,CAAAA,CAAAA,CAAQ,KAAA/M,CAAK,CAAC,EAEpDoH,CAAU,CAAA,WAAA,GACP4Z,EAAa,GAAI5Z,CAAAA,CAAAA,CAAU,WAAW,CAGzC2Z,CAAAA,CAAAA,CAAO,KAAK,CACV,IAAA,CAAM,eACN,CAAA,OAAA,CAAS,CACP,GAAK,CAAA,aAAA,CACL,MAAO3Z,CAAU,CAAA,WACnB,EACA,OACE,CAAA,mEAAA,CACF,KAAM,CAAC,OAAA,CAASpH,EAAM+M,CAAQ,CAAA,aAAa,EAC3C,QAAU,CAAA,OACZ,CAAC,CAZDiU,CAAAA,CAAAA,CAAa,GAAI5Z,CAAAA,CAAAA,CAAU,YAAayM,CAAY,CAAA,EAe1D,CACF,CAGF,GAAI/O,EAAK,OAAS,CAAA,CAAA,CACZ,OAAOA,CAAK,CAAA,OAAA,EAAY,UAAY,CAAC,KAAA,CAAM,QAAQA,CAAK,CAAA,OAAO,IACjEic,CAAO,CAAA,IAAA,CAAK,CACV,IAAA,CAAM,eACN,OAAS,CAAA,6BAAA,CACT,KAAM,EAAC,CACP,SAAU,OACZ,CAAC,EAGH,IAAS7pB,IAAAA,CAAAA,CAAQ,EAAGA,CAAQ4N,CAAAA,CAAAA,CAAK,QAAQ,MAAQ5N,CAAAA,CAAAA,EAAAA,CAAS,CACxD,IAAM0V,CAAAA,CAAS9H,CAAK,CAAA,OAAA,CAAQ5N,CAAK,CAC7B,CAAA,CAAC0V,GAAU,OAAOA,CAAAA,EAAW,SAC/BmU,CAAO,CAAA,IAAA,CAAK,CACV,IAAM,CAAA,cAAA,CACN,QAAS,CACP,MAAA,CAAQ,OAAOnU,CACf,CAAA,QAAA,CAAU,QACZ,CACA,CAAA,OAAA,CAAS,4CACT,CAAA,IAAA,CAAM,CAAC,SAAW1V,CAAAA,CAAK,EACvB,QAAU,CAAA,OACZ,CAAC,CAEI0V,CAAAA,CAAAA,CAAO,KACVmU,CAAO,CAAA,IAAA,CAAK,CACV,IAAM,CAAA,wBAAA,CACN,QAAS,CACP,KAAA,CAAO,KACT,CACA,CAAA,OAAA,CAAS,gDACT,CAAA,IAAA,CAAM,CAAC,SAAW7pB,CAAAA,CAAK,EACvB,QAAU,CAAA,OACZ,CAAC,EAGP,CACF,CAEA,OAAO,CACL,OAAA6pB,CACA,CAAA,KAAA,CAAO,CAACA,CAAO,CAAA,IAAA,CAAMzG,GAAUA,CAAM,CAAA,QAAA,GAAa,OAAO,CAC3D,CACF,CC5DO,CAAA,IAAMiI,GAAerb,CAAuC,EAAA,CACjE,GAAIA,CAAQ,CAAA,MAAA,CAAO,OAAO,qBAAuB,CAAA,CAC/C,IAAMtU,CAASkuB,CAAAA,EAAAA,CAAoB5Z,EAAQ,IAAI,CAAA,CAC/C2T,GAAsB,CAAE,OAAA,CAAA3T,CAAS,CAAA,MAAA,CAAAtU,CAAO,CAAC,EAC3C,CAGA,GADyBkf,EAAAA,CAAW5K,EAAQ,MAAO,CAAA,MAAA,CAAO,OAAO,CAC3C,CAAA,CACpB,IAAM4J,CAAUe,CAAAA,EAAAA,CAAc3K,EAAQ,MAAO,CAAA,MAAA,CAAO,QAASA,CAAQ,CAAA,IAAI,CACnE,CAAA,CAAE,MAAAqM,CAAM,CAAA,CAAI2D,GAAWhQ,CAAQ,CAAA,IAAI,EACnC,CAAE,gBAAA,CAAA+K,CAAiB,CAAIqB,CAAAA,EAAAA,CAAsBC,CAAK,CAClD2N,CAAAA,CAAAA,CAAO7N,GAA2B,CAAE,OAAA,CAAAvC,EAAS,gBAAAmB,CAAAA,CAAiB,CAAC,CAAA,CACrE6I,GAAW,CACT,GAAGoG,EACH,aAAepQ,CAAAA,CAAAA,CAAQ,cACvB,IAAM5J,CAAAA,CAAAA,CAAQ,IAChB,CAAC,EACH,CAEA4S,EAAqB,CAAA,CAAE,QAAA5S,CAAQ,CAAC,EAEhC,IAAMqJ,CAAAA,CAAe,CACnB,GAAA,CAAK,IAAI,GACX,CAAA,CACM6O,EAAqB,IAAI,GAAA,CAG/B,GAAIlY,CAAQ,CAAA,IAAA,CAAK,WAAY,CAC3B,IAAA,IAAWjW,KAAQiW,CAAQ,CAAA,IAAA,CAAK,WAAW,eAAiB,CAAA,CAC1D,IAAM6a,CACJ7a,CAAAA,CAAAA,CAAQ,IAAK,CAAA,UAAA,CAAW,gBAAgBjW,CAAI,CAAA,CACxC6uB,EACJ,MAAUiC,GAAAA,CAAAA,CACN7a,EAAQ,UAAiC6a,CAAAA,CAAAA,CAAoB,IAAI,CACjEA,CAAAA,CAAAA,CACN3C,EAAmB,GAAInuB,CAAAA,CAAAA,CAAM6uB,CAAoB,EACnD,CAEA,QAAW7uB,CAAQiW,IAAAA,CAAAA,CAAQ,IAAK,CAAA,UAAA,CAAW,WAAY,CACrD,IAAMjD,EAAO,CAA2BhT,wBAAAA,EAAAA,CAAI,GACtCsvB,CAAuBrZ,CAAAA,CAAAA,CAAQ,KAAK,UAAW,CAAA,UAAA,CAAWjW,CAAI,CAC9D8H,CAAAA,CAAAA,CACJ,SAAUwnB,CACNrZ,CAAAA,CAAAA,CAAQ,WAA4BqZ,CAAqB,CAAA,IAAI,CAC7DA,CAAAA,CAAAA,CAENmB,GAAe,CACb,IAAA,CAAAzd,EACA,OAAAiD,CAAAA,CAAAA,CACA,UAAAnO,CACF,CAAC,EACH,CAEA,IAAA,IAAW9H,KAAQiW,CAAQ,CAAA,IAAA,CAAK,WAAW,aAAe,CAAA,CACxD,IAAMjD,CAAO,CAAA,CAAA,2BAAA,EAA8BhT,CAAI,CAAA,CAAA,CACzC+wB,EACJ9a,CAAQ,CAAA,IAAA,CAAK,WAAW,aAAcjW,CAAAA,CAAI,EACtCwuB,CACJ,CAAA,MAAA,GAAUuC,EACN9a,CAAQ,CAAA,UAAA,CAA8B8a,EAAuB,IAAI,CAAA,CACjEA,EAENH,EAAiB,CAAA,CACf,KAAA5d,CACA,CAAA,OAAA,CAAAiD,CACA,CAAA,WAAA,CAAAuY,CACF,CAAC,EACH,CAEA,IAAWxuB,IAAAA,CAAAA,IAAQiW,EAAQ,IAAK,CAAA,UAAA,CAAW,QAAS,CAClD,IAAMjD,EAAO,CAAwBhT,qBAAAA,EAAAA,CAAI,GACnC+X,CAAS9B,CAAAA,CAAAA,CAAQ,KAAK,UAAW,CAAA,OAAA,CAAQjW,CAAI,CAAA,CAEnD0tB,GAAY,CACV,IAAA,CAAA1a,EACA,OAAAiD,CAAAA,CAAAA,CACA,OAAA8B,CACF,CAAC,EACH,CACF,CAEA2X,GAAa,CAAE,OAAA,CAAAzZ,CAAQ,CAAC,CAAA,CAExB,QAAWlH,CAAQkH,IAAAA,CAAAA,CAAQ,IAAK,CAAA,KAAA,CAAO,CACrC,IAAM2F,CAAAA,CAAW3F,EAAQ,IAAK,CAAA,KAAA,CAAMlH,CAAyB,CAEvDmhB,CAAAA,CAAAA,CAAgBtU,EAAS,IAC3B,CAAA,CACE,GAAG3F,CAAQ,CAAA,UAAA,CAA2B2F,EAAS,IAAI,CAAA,CACnD,GAAGA,CACL,CAAA,CACAA,CAEEwU,CAAAA,CAAAA,CACJ,CACE,OAAAna,CAAAA,CAAAA,CACA,UAAW,CACT,WAAA,CAAaia,EAAc,WAC3B,CAAA,UAAA,CAAYd,GAAwB,CAClC,OAAA,CAAAnZ,EACA,UAAYia,CAAAA,CAAAA,CAAc,UAC5B,CAAC,CAAA,CACD,SAAUja,CAAQ,CAAA,IAAA,CAAK,QACvB,CAAA,OAAA,CAASia,EAAc,OACvB,CAAA,OAAA,CAASA,EAAc,OACzB,CAAA,CACA,KAAMnhB,CACN,CAAA,kBAAA,CAAAof,EACA,KAAA7O,CAAAA,CACF,EAEE4Q,CAAc,CAAA,MAAA,EAChBnB,GAAe,CACb,GAAGqB,EACH,MAAQ,CAAA,QAAA,CACR,SAAW,CAAA,CACT,GAAGA,CAAc,CAAA,SAAA,CACjB,GAAGF,CAAc,CAAA,MAAA,CACjB,WAAYpH,CAAuB,CAAA,CACjC,OAAQsG,EAAwB,CAAA,CAC9B,QAAAnZ,CACA,CAAA,UAAA,CAAYia,EAAc,MAAO,CAAA,UACnC,CAAC,CACD,CAAA,MAAA,CAAQE,CAAc,CAAA,SAAA,CAAU,UAClC,CAAC,CACH,CACF,CAAC,CAAA,CAGCF,EAAc,GAChBnB,EAAAA,EAAAA,CAAe,CACb,GAAGqB,CAAAA,CACH,OAAQ,KACR,CAAA,SAAA,CAAW,CACT,GAAGA,CAAAA,CAAc,UACjB,GAAGF,CAAAA,CAAc,GACjB,CAAA,UAAA,CAAYpH,EAAuB,CACjC,MAAA,CAAQsG,GAAwB,CAC9B,OAAA,CAAAnZ,EACA,UAAYia,CAAAA,CAAAA,CAAc,IAAI,UAChC,CAAC,EACD,MAAQE,CAAAA,CAAAA,CAAc,UAAU,UAClC,CAAC,CACH,CACF,CAAC,CAGCF,CAAAA,CAAAA,CAAc,MAChBnB,EAAe,CAAA,CACb,GAAGqB,CACH,CAAA,MAAA,CAAQ,OACR,SAAW,CAAA,CACT,GAAGA,CAAc,CAAA,SAAA,CACjB,GAAGF,CAAc,CAAA,IAAA,CACjB,WAAYpH,CAAuB,CAAA,CACjC,OAAQsG,EAAwB,CAAA,CAC9B,OAAAnZ,CAAAA,CAAAA,CACA,WAAYia,CAAc,CAAA,IAAA,CAAK,UACjC,CAAC,CAAA,CACD,OAAQE,CAAc,CAAA,SAAA,CAAU,UAClC,CAAC,CACH,CACF,CAAC,CAAA,CAGCF,EAAc,OAChBnB,EAAAA,EAAAA,CAAe,CACb,GAAGqB,CAAAA,CACH,MAAQ,CAAA,SAAA,CACR,UAAW,CACT,GAAGA,EAAc,SACjB,CAAA,GAAGF,EAAc,OACjB,CAAA,UAAA,CAAYpH,EAAuB,CACjC,MAAA,CAAQsG,GAAwB,CAC9B,OAAA,CAAAnZ,EACA,UAAYia,CAAAA,CAAAA,CAAc,QAAQ,UACpC,CAAC,CACD,CAAA,MAAA,CAAQE,EAAc,SAAU,CAAA,UAClC,CAAC,CACH,CACF,CAAC,CAGCF,CAAAA,CAAAA,CAAc,OAChBnB,EAAe,CAAA,CACb,GAAGqB,CACH,CAAA,MAAA,CAAQ,QACR,SAAW,CAAA,CACT,GAAGA,CAAc,CAAA,SAAA,CACjB,GAAGF,CAAAA,CAAc,MACjB,UAAYpH,CAAAA,CAAAA,CAAuB,CACjC,MAAQsG,CAAAA,EAAAA,CAAwB,CAC9B,OAAAnZ,CAAAA,CAAAA,CACA,UAAYia,CAAAA,CAAAA,CAAc,MAAM,UAClC,CAAC,EACD,MAAQE,CAAAA,CAAAA,CAAc,UAAU,UAClC,CAAC,CACH,CACF,CAAC,CAGCF,CAAAA,CAAAA,CAAc,MAChBnB,EAAe,CAAA,CACb,GAAGqB,CACH,CAAA,MAAA,CAAQ,OACR,SAAW,CAAA,CACT,GAAGA,CAAc,CAAA,SAAA,CACjB,GAAGF,CAAc,CAAA,IAAA,CACjB,WAAYpH,CAAuB,CAAA,CACjC,MAAQsG,CAAAA,EAAAA,CAAwB,CAC9B,OAAAnZ,CAAAA,CAAAA,CACA,WAAYia,CAAc,CAAA,IAAA,CAAK,UACjC,CAAC,CAAA,CACD,OAAQE,CAAc,CAAA,SAAA,CAAU,UAClC,CAAC,CACH,CACF,CAAC,CAAA,CAGCF,EAAc,GAChBnB,EAAAA,EAAAA,CAAe,CACb,GAAGqB,EACH,MAAQ,CAAA,KAAA,CACR,UAAW,CACT,GAAGA,EAAc,SACjB,CAAA,GAAGF,EAAc,GACjB,CAAA,UAAA,CAAYpH,EAAuB,CACjC,MAAA,CAAQsG,GAAwB,CAC9B,OAAA,CAAAnZ,EACA,UAAYia,CAAAA,CAAAA,CAAc,GAAI,CAAA,UAChC,CAAC,CACD,CAAA,MAAA,CAAQE,EAAc,SAAU,CAAA,UAClC,CAAC,CACH,CACF,CAAC,CAGCF,CAAAA,CAAAA,CAAc,OAChBnB,EAAe,CAAA,CACb,GAAGqB,CACH,CAAA,MAAA,CAAQ,QACR,SAAW,CAAA,CACT,GAAGA,CAAAA,CAAc,UACjB,GAAGF,CAAAA,CAAc,MACjB,UAAYpH,CAAAA,CAAAA,CAAuB,CACjC,MAAQsG,CAAAA,EAAAA,CAAwB,CAC9B,OAAAnZ,CAAAA,CAAAA,CACA,WAAYia,CAAc,CAAA,KAAA,CAAM,UAClC,CAAC,CAAA,CACD,OAAQE,CAAc,CAAA,SAAA,CAAU,UAClC,CAAC,CACH,CACF,CAAC,EAEL,CACF,CAAA,CCzRO,IAAMmB,EAAoB,CAAA,uBAAA,CCI1B,IAAMC,EAAqB,CAAA,CAAC,CACjC,MAAA3xB,CAAAA,CAAAA,CACA,KAAAG,CACF,CAAA,GAGM,CACJ,IAAMC,CAAAA,CAASJ,CAAO,CAAA,OAAA,CAAQ,cAAc,CAC5C,CAAA,GAAII,GAAQ,MAAO,CAAA,gBAAA,CAAkB,CACnC,IAAIoY,CAAAA,CAAa,GAEjB,OAAI,OAAOpY,EAAO,MAAO,CAAA,gBAAA,EAAqB,WAC5CoY,CAAapY,CAAAA,CAAAA,CAAO,OAAO,gBAAiBD,CAAAA,CAAI,CAEhDqY,CAAAA,CAAAA,CAAapY,EAAO,MAAO,CAAA,gBAAA,CAAiB,QAAQ,UAAYD,CAAAA,CAAI,EAG/DqY,CACT,CAEA,OAAOrY,CACT,CAAA,CAEayxB,GAAqBzxB,CACjBG,EAAAA,CAAAA,GACJ,OAAQ,CAAA,qBAAqB,GAAG,MAAO,CAAA,KAAA,GAAU,YACnDiV,CAAAA,CAAAA,CAAW,CAChB,IAAM,CAAA,YAAA,CACN,MAAOpV,CACT,CAAC,EAEIA,CAeI0xB,CAAAA,EAAAA,CAA6B1xB,GAAiB,CACzD,IAAM2xB,EAAcF,EAAkBzxB,CAAAA,CAAI,EAG1C,OAFgB+e,EAAAA,CAA0C4S,CAAW,CAC9C,CAAA,OAAA,CAAQ5uB,EAAkC,CAAA,KAAK,CAExE,CCzDO,CAAA,SAAS6uB,GAAU9vB,CAAUmE,CAAAA,CAAAA,CAAe4rB,EAAmB,CACpE,OAAOA,EAAI,OAAQ/vB,CAAAA,CAAK,IAAMmE,CAChC,CCFO,SAAS6rB,EAAKzwB,CAAAA,CAAAA,CAAWC,EAAmB,CACjD,IAAMywB,CAAQ1wB,CAAAA,CAAAA,CAAE,mBACV2wB,CAAAA,CAAAA,CAAQ1wB,EAAE,iBAAkB,EAAA,CAClC,OAAOywB,CAAM,CAAA,aAAA,CAAcC,EAAO,IAAI,CACxC,CAEO,IAAMC,EAAAA,CAAe,CAA6B5wB,CAAMC,CAAAA,CAAAA,GAC7DwwB,GAAKzwB,CAAE,CAAA,IAAA,CAAMC,CAAE,CAAA,IAAI,EAEd,SAAS4wB,EAAAA,CAAuC1U,EAAiB,CACtE,OAAOA,EAAM,IAAKyU,CAAAA,EAAY,CAChC,CCKO,IAAME,GAAU,CAACrwB,CAAAA,CAAyBuW,IAAwB,CACvE,GAAIA,EACF,OAAOA,CAAAA,CAGT,GAAI,OAAOvW,GAAU,QACnB,CAAA,OAAO,KAAKA,CAAK,CAAA,CAAA,CAAA,CAGnB,IAAID,CAAM,CAAA,EAAA,CACV,OAAI,OAAOC,CAAAA,EAAU,WACnBD,CAAMC,CAAAA,CAAAA,CACH,QAAQ,mCAAqC,CAAA,GAAG,EAChD,OAAQ,CAAA,uBAAA,CAAyB,KAAK,CAAA,CACtC,QAAQ,mCAAqC,CAAA,OAAO,GAEzDD,CAAMA,CAAAA,CAAAA,CAAI,MACLA,CAAAA,CAAAA,GACHA,EAAM,cAEDA,CAAAA,CAAAA,CAAAA,CAAI,aACb,CAAA,CAEauwB,GAAiBC,CAC5BA,EAAAA,CAAAA,CACG,IAAKC,CAAerF,EAAAA,EAAAA,CAAUqF,CAAW,CAAA,KAAA,CAAO,IAAI,CAAC,CAAA,CACrD,OAAOV,EAAM,CAAA,CACb,KAAK,KAAK,CAAA,CAEF3E,GAAY,CAACnrB,CAAAA,CAAyBywB,EAAiB,KAC9D,GAAA,OAAOzwB,GAAU,QACfA,CAAAA,CAAAA,CAAM,SAAS,GAAG,CAAA,EAAKywB,CAClB,CAAA,CAAA,CAAA,EAAIzwB,CAAK,CAEX,CAAA,CAAA,CAAA,CAAA,CAAA,EAAIA,CAAK,CAEXA,CAAAA,CAAAA,CAAAA,CAAAA,CAGI0wB,GAAaF,CAAqB,EAAA,CAC7C,IAAMzwB,CAAMswB,CAAAA,EAAAA,CAAQG,EAAW,KAAOA,CAAAA,CAAAA,CAAW,UAAU,CACrDxwB,CAAAA,CAAAA,CAAQmrB,GAAUqF,CAAW,CAAA,KAAK,CACxC,CAAA,OAAO,CAAE,GAAAzwB,CAAAA,CAAAA,CAAK,MAAAC,CAAM,CACtB,EC1BO,IAAM2wB,EAAAA,CAAkBC,GAA2B,CACxD,IAAM1yB,EAAO0xB,EAA0BgB,CAAAA,CAAc,EAKrD,OAJa,CACX,KAAMnB,EAAoBmB,CAAAA,CAAAA,CAC1B,IAAA1yB,CAAAA,CACF,CAEF,CCzBO,CAAA,IAAM2yB,GAAeC,CAC1BA,EAAAA,CAAAA,CAAM,SAAW,MAAUA,EAAAA,CAAAA,CAAM,SAAW,WAExClsB,CAAAA,EAAAA,CAAQksB,GAAiB,CAC7B,IAAM/yB,EAASM,CAAU,EAAA,CAEzB,OAAIyyB,CAAM,CAAA,IAAA,GAAS,QACVrhB,CAAAA,CAAAA,CAAS,cAAc,CAC5B,KAAA,CAAO,CAAC,MAAQ,CAAA,MAAM,CACxB,CAAC,CAAA,CAID1R,EAAO,OAAQ,CAAA,uBAAuB,GAAG,MAAO,CAAA,KAAA,EAChD8yB,GAAYC,CAAK,CAAA,CAEVrhB,EAAS,QAAS,CAAA,MAAM,CAG1BA,CAAAA,CAAAA,CAAS,SAASqhB,CAAM,CAAA,IAAI,CACrC,CAEMC,CAAAA,EAAAA,CAAiBD,GAAiB,CAEtC,IAAMxiB,EAAawiB,CAAM,CAAA,IAAA,GAAS,OAAS,KAAQA,CAAAA,CAAAA,CAAM,WACrDE,CAAWpsB,CAAAA,EAAAA,CAAKksB,CAAK,CAOzB,CAAA,GAAIA,CAAM,CAAA,MAAA,GAAW,aAAeA,CAAM,CAAA,KAAA,CAAM,SAAW,CACrDA,EAAAA,CAAAA,CAAM,MAAM,CAAC,CAAA,CAAG,WAAWrB,EAAiB,CAAA,CAAG,CACjD,IAAMwB,CAAAA,CAAON,GAAeG,CAAM,CAAA,IAAI,EACtCE,CAAWvhB,CAAAA,CAAAA,CAAS,QAASwhB,CAAAA,CAAAA,CAAK,IAAI,EACxC,CAMF,OAJkBxhB,CAAS,CAAA,aAAA,CAAc,CACvC,UAAAnB,CAAAA,CAAAA,CACA,MAAO,CAAC0iB,CAAQ,CAClB,CAAC,CAEH,EAEME,EAAaJ,CAAAA,CAAAA,EAAiB,CAClC,GAAIA,CAAAA,CAAM,IAAM,CAAA,CAEd,GAAI,KAAM,CAAA,OAAA,CAAQA,EAAM,IAAI,CAAA,CAAG,CAC7B,IAAMxqB,CAAAA,CAAQwqB,EAAM,IAAK,CAAA,GAAA,CAAKK,GAAMC,EAAOD,CAAAA,CAAC,CAAC,CAK7C,CAAA,OAJc1hB,EAAS,aAAc,CAAA,CACnC,UAAYqhB,CAAAA,CAAAA,CAAM,WAClB,KAAAxqB,CAAAA,CACF,CAAC,CAEH,CAGA,GACEwqB,CAAM,CAAA,MAAA,GAAW,SACjBA,CAAM,CAAA,QAAA,EACNA,EAAM,QACNA,EAAAA,CAAAA,CAAM,WAAaA,CAAM,CAAA,QAAA,EACzBA,EAAM,QAAY,EAAA,GAAA,CAClB,CACA,IAAMxqB,EAAQ,KAAMwqB,CAAAA,CAAAA,CAAM,QAAQ,CAAE,CAAA,IAAA,CAAKM,GAAON,CAAM,CAAA,IAAI,CAAC,CAK3D,CAAA,OAJcrhB,EAAS,aAAc,CAAA,CACnC,WAAYqhB,CAAM,CAAA,UAAA,CAClB,MAAAxqB,CACF,CAAC,CAEH,CAEA,OAAOmJ,CAAS,CAAA,aAAA,CAAc,CAAC2hB,EAAON,CAAAA,CAAAA,CAAM,IAAI,CAAC,CAAA,CAAGA,EAAM,UAAU,CACtE,CAEA,OAAOrhB,CAAAA,CAAS,cAAc,CAAC7K,EAAAA,CAAKksB,CAAK,CAAC,CAAA,CAAGA,CAAM,CAAA,UAAU,CAC/D,CAEMO,CAAAA,EAAAA,CAAYP,GAAiB,CACjC,IAAMzhB,EAASyhB,CAAM,CAAA,IAAA,CAAK,IAAKN,CAAerF,EAAAA,EAAAA,CAAUqF,EAAW,KAAK,CAAC,EACzE,OAAO/gB,CAAAA,CAAS,cAAc,CAC5B,UAAA,CAAYqhB,CAAM,CAAA,UAAA,CAClB,MAAOzhB,CACT,CAAC,CACH,CAEMiiB,CAAAA,EAAAA,CAAYR,GAAiB,CACjC,IAAM7tB,EACJ6tB,CAAM,CAAA,IAAA,EAAQ,CAAC,KAAM,CAAA,OAAA,CAAQA,EAAM,IAAI,CAAA,CAAIM,GAAON,CAAM,CAAA,IAAI,CAAIlsB,CAAAA,EAAAA,CAAKksB,CAAK,CAC5E,CAAA,OAAOrhB,EAAS,cAAe,CAAA,CAAC,QAAQ,CAAG,CAAA,CAACxM,CAAI,CAAG6tB,CAAAA,CAAAA,CAAM,WAAY,IAAI,CAC3E,EAEMS,EAA0B,CAAA,CAAC,CAC/B,KAAAT,CAAAA,CAAAA,CACA,KAAApD,CAAAA,CACF,IAGM,CACJ,IAAMpnB,EAAQwqB,CAAM,CAAA,UAAA,CACjB,IAAKA,CACQrhB,EAAAA,CAAAA,CAAS,aAAa,CAChC,IAAA,CAAM2hB,GAAON,CAAK,CAAA,CAClB,SAAU,IACZ,CAAC,CAEF,CACA,CAAA,MAAA,CAAOhB,EAAM,CAAA,CAEV1tB,EACJsrB,CAAU,GAAA,OAAA,CACNje,EAAS,aAAc,CAAA,CAErB,WACEqhB,CAAM,CAAA,UAAA,EACN,CAACA,CAAM,CAAA,UAAA,CAAW,KAAMliB,CAAaA,EAAAA,CAAAA,CAAS,UAAU,CAC1D,CAAA,KAAA,CAAAtI,CACF,CAAC,CAAA,CACDmJ,CAAS,CAAA,oBAAA,CAAqB,CAC5B,UAAYqhB,CAAAA,CAAAA,CAAM,WAClB,KAAAxqB,CAAAA,CACF,CAAC,CAGP,CAAA,OAAIwqB,EAAM,IACD1uB,CAAAA,CAAAA,CAGFqN,EAAS,qBAAsB,CAAA,CACpC,KAAMrN,CACR,CAAC,CACH,CAEMovB,CAAAA,EAAAA,CAAiBV,CAAiB,EAAA,CACtC,GAAI,CAACA,CAAAA,CAAM,WAAW,MACpB,CAAA,OAAOrhB,EAAS,QAAS,CAAA,SAAS,EAGpC,IAAM1R,CAAAA,CAASM,GAETozB,CAAAA,CAAAA,CAAWlzB,EAAeR,CAAM,CAAA,CAEhCkK,EAAyB6oB,CAAM,CAAA,UAAA,CAAW,GAAKliB,CAAAA,CAAAA,EAAa,CAChE,IAAI8iB,CAAAA,CAAgB9iB,EAAS,UAAa,CAAA,EAAA,CAAK,IAC3C5O,CAAQoxB,CAAAA,EAAAA,CAAOxiB,CAAQ,CACvB1Q,CAAAA,CAAAA,CAAQuzB,EAKR,QAAS,CAAA,IAAA,CAAK7iB,EAAS,IAAI,CAAA,CACzBvN,GAAWuN,CAAS,CAAA,IAAI,CACxBA,CAAAA,CAAAA,CAAS,KANXvN,EAAWC,CAAAA,EAAAA,CAAaqwB,GAAqB/iB,CAAS,CAAA,IAAI,CAAC,CAAC,CAAA,CAQhE,OAAIA,CAAS,CAAA,IAAA,GAAS,kBACpB1Q,CAAO0Q,CAAAA,CAAAA,CAAS,KACZ8iB,CACFA,GAAAA,CAAAA,CAAgB,GAChB1xB,CAAQyP,CAAAA,CAAAA,CAAS,aAAc,CAAA,CAC7B,MAAO,CAACzP,CAAAA,CAAO,WAAW,CAC5B,CAAC,IAGE,CACL,OAAA,CAAS,CACP4O,CAAS,CAAA,WAAA,EAAerN,EAAcqN,CAAS,CAAA,WAAW,EAC1DA,CAAS,CAAA,UAAA,EAAc,aACzB,CACA,CAAA,UAAA,CAAYA,CAAS,CAAA,UAAA,CACrB,WAAY8iB,CAAkB,GAAA,EAAA,CAC9B,KAAAxzB,CACA,CAAA,IAAA,CAAM8B,CACR,CACF,CAAC,EAED,OAAOyP,CAAAA,CAAS,kBAAkB,CAChC,UAAA,CAAYqhB,EAAM,UAClB,CAAA,UAAA,CAAA7oB,EACA,mBAAqB,CAAA,IACvB,CAAC,CACH,EAEampB,EAAUN,CAAAA,CAAAA,EAA8B,CACnD,OAAQA,CAAAA,CAAM,QACZ,KAAK,SACH,OAAOS,EAAAA,CAAwB,CAC7B,KAAAT,CAAAA,CAAAA,CACA,MAAO,cACT,CAAC,EACH,KAAK,QAAA,CACL,KAAK,QAAA,CACH,OAAOS,EAAwB,CAAA,CAC7B,MAAAT,CACA,CAAA,KAAA,CAAO,OACT,CAAC,CAAA,CACH,KAAK,OACH,CAAA,OAAOI,GAAUJ,CAAK,CAAA,CACxB,KAAK,YACH,CAAA,OAAOQ,GAASR,CAAK,CAAA,CACvB,KAAK,MAAA,CACH,OAAOO,EAASP,CAAAA,CAAK,EACvB,KAAK,WAAA,CACH,OAAOU,EAAcV,CAAAA,CAAK,EAC5B,KAAK,OAAA,CACL,KAAK,SACL,CAAA,KAAK,YACL,QACE,OAAOC,GAAcD,CAAK,CAC9B,CACF,CAAA,CAyBac,GAAoB,CAAC,CAChC,OAAA5zB,CACA,CAAA,KAAA,CAAA6a,EAAQ,CACR,CAAA,MAAA,CAAAC,EAAS,KACT,CAAA,IAAA,CAAAmY,EACA,eAAAlY,CAAAA,CACF,IAK+B,CAC7B,IAAIlZ,EAAkC,CACpC,OAAA,CAAS,KACT,CAAA,IAAA,CAAM,EACR,CACI3B,CAAAA,CAAAA,CAAO+yB,EAAK,IACZlY,CAAAA,CAAAA,GACF7a,EAAO6a,CAAgB7a,CAAAA,CAAI,GAEzB2a,CAAQ,CAAA,CAAA,GACV3a,EAAO,CAAGA,EAAAA,CAAI,GAAG2a,CAAK,CAAA,CAAA,CAAA,CAExB,IAAM5V,CAAOjF,CAAAA,CAAAA,CAAO,KAAME,CAAAA,CAAI,EAC9B,OAAK+E,CAAAA,CAQMA,EAAK,IAASguB,GAAAA,CAAAA,CAAK,KAC5BpxB,CAAS,CAAA,CACP,QAAS,KACT,CAAA,IAAA,CAAA3B,CACF,CAEA2B,CAAAA,CAAAA,CAAS+xB,GAAkB,CACzB,MAAA,CAAA5zB,EACA,KAAO6a,CAAAA,CAAAA,CAAQ,CACf,CAAA,MAAA,CAAAC,EACA,IAAAmY,CAAAA,CAAAA,CACA,gBAAAlY,CACF,CAAC,EAnBGD,CACF9a,GAAAA,CAAAA,CAAO,MAAME,CAAI,CAAA,CAAI+yB,EACrBpxB,CAAS,CAAA,CACP,QAAS,IACT,CAAA,IAAA,CAAA3B,CACF,CAgBG2B,CAAAA,CAAAA,CACT,CAaagyB,CAAAA,EAAAA,CAAsB,CAAC,CAClC,MAAA,CAAA7zB,EACA,IAAAE,CAAAA,CACF,IAGiC,CAC/B,IAAI2B,EAAoC,CACtC,OAAA,CAAS,MACT,IAAM,CAAA,EACR,EACA,OAAK7B,CAAAA,CAAO,MAAME,CAAI,CAAA,GAGtB,OAAOF,CAAAA,CAAO,MAAME,CAAI,CAAA,CACxB2B,EAAS,CACP,OAAA,CAAS,KACT,IAAA3B,CAAAA,CACF,GACO2B,CACT,CAAA,CAMa8xB,GAAwB3xB,CAA0B,EAAA,CAC7D,IAAMjC,CAASM,CAAAA,CAAAA,GAGf,OAAKE,CAAAA,CAAeR,CAAM,CAAA,CAIbuV,EAAW,CACtB,IAAA,CAAM,YACN,KAAO8J,CAAAA,EAAAA,CAA+Bpd,CAAK,CAC7C,CAAC,EAAE,OAAQiB,CAAAA,EAAAA,CAAkC,KAAK,CANzCjB,CAAAA,CAQX,ECnUO,IAAM8xB,EAAAA,CACX/rB,GAEmBA,CAAW,CAAA,IAAA,CAAMC,CAAcA,EAAAA,CAAAA,CAAU,UAAU,CCkCjE,CAAA,IAAM+rB,GAAmB,CAAC,CAC/B,OAAAh0B,CACA,CAAA,IAAA,CAAAgU,CACF,CAG8B,GAAA,CAC5B,IAAMoC,CAAU,CAAA,IAAI+F,GAAU,CAC5B,MAAA,CAAAnc,EACA,IAAMgU,CAAAA,CACR,CAAC,CAAA,CAED,GAAI,SAAaoC,GAAAA,CAAAA,CAAQ,KACvB,OAAA+Z,EAAAA,CAAY/Z,CAAqC,CAC1CA,CAAAA,CAAAA,CAGT,OAAQA,CAAQ,CAAA,IAAA,CAAK,SACnB,KAAK,QACL,KAAK,OAAA,CACL,KAAK,OACL,CAAA,KAAK,OACL,CAAA,KAAK,QACH,OAAA4a,EAAAA,CAAY5a,CAAqC,CAC1CA,CAAAA,CAAAA,CACT,KAAK,OACL,CAAA,KAAK,QACH,OAAAqb,EAAAA,CAAYrb,CAAqC,CAC1CA,CAAAA,CAAAA,CAGX,CAEA,MAAM,IAAI,KAAA,CAAM,mCAAmC,CACrD,EC1FA,IAAM6d,EAAAA,CAA0B,CAC9B/b,CACAgc,CAAAA,CAAAA,GACW,CACX,IAAMl0B,CAAAA,CAASM,GAEf,CAAA,GAAI,MAAM,OAAQ4X,CAAAA,CAAM,EACtB,OAAOA,CAAAA,CAAO,IAAKxL,CAASunB,EAAAA,EAAAA,CAAwBvnB,CAAI,CAAC,EAG3D,GAAI,OAAOwL,GAAW,QAAYA,EAAAA,CAAAA,GAAW,KAC3C,OAAOA,CAAAA,CAGT,IAAMpW,CAAS,CAAA,CAAE,GAAGoW,CAAO,CAAA,CAC3B,cAAO,OAAQpW,CAAAA,CAAM,EAAE,OAAQ,CAAA,CAAC,CAACE,CAAAA,CAAKC,CAAK,CAAM,GAAA,CAC/C,GAAIjC,CAAO,CAAA,OAAA,CAAQ,kBAAkB,CAAG,EAAA,MAAA,CAAO,OAAS,MAEpD,EAAA,CACE,cACA,qBACA,CAAA,iBAAA,CACA,cACA,OACF,CAAA,CAAE,SAASgC,CAAG,CAAA,EACdkyB,CAAc,GAAA,YAAA,CACd,CAEA,OAAOpyB,CAAAA,CAAOE,CAAG,CACjB,CAAA,MACF,CAKEA,CAAQ,GAAA,MAAA,EAAU,OAAOC,CAAU,EAAA,QAAA,GAErCH,EAAOE,CAAG,CAAA,CAAI,mBAAmBC,CAAK,CAAA,CAAA,CAGpCA,GAAS,OAAOA,CAAAA,EAAU,QAE5BH,GAAAA,CAAAA,CAAOE,CAAG,CAAIiyB,CAAAA,EAAAA,CAAwBhyB,EAAOD,CAAG,CAAA,EAEpD,CAAC,CACMF,CAAAA,CACT,EAEMqyB,EAAe,CAAA,CACnBh0B,EACA+X,CACW,GAAA,CACX,IAAMlY,CAASM,CAAAA,CAAAA,GAET8zB,CAAYlV,CAAAA,EAAAA,CAA0C/e,CAAI,CAAA,CAE1DC,EAASJ,CAAO,CAAA,OAAA,CAAQ,kBAAkB,CAEhD,CAAA,OAAII,GAAQ,MAAO,CAAA,WAAA,CACb,OAAOA,CAAO,CAAA,MAAA,CAAO,aAAgB,UAChCA,CAAAA,CAAAA,CAAO,OAAO,WAAYg0B,CAAAA,CAAAA,CAAWlc,CAAM,CAE3C9X,CAAAA,CAAAA,CAAO,MAAO,CAAA,WAAA,CAAY,QAAQ,UAAYg0B,CAAAA,CAAS,EAI3D,CAAGA,EAAAA,CAAS,QACrB,CAEaC,CAAAA,EAAAA,CAAsD,CAAC,CAClE,KAAA,CAAAC,EACA,OAAAC,CAAAA,CAAAA,CACA,OAAAn0B,CACF,CAAA,GAAM,CACJ,IAAMJ,CAAAA,CAASM,CAAU,EAAA,CAEzBg0B,EAAM,OAAU,CAAA,IAAIzb,GAAe,CACjC,GAAA,CAAK7Y,EAAO,MAAO,CAAA,IAAA,CACnB,gBAAiBI,CAAO,CAAA,MAAA,CAAO,gBAC/B,EAAI,CAAA,SAAA,CACJ,KAAM,YACR,CAAC,EAED,IAAMo0B,CAAAA,CAAY,CAChBr0B,CAAAA,CACA+X,IACG,CACH,IAAMjO,EAAMgqB,EAAwB/b,CAAAA,CAAM,EACpChR,CAAawK,CAAAA,CAAAA,CAAS,iBAAiB,CAAE,GAAA,CAAAzH,CAAI,CAAC,CAAA,CAC9C+B,EAAY0F,CAAS,CAAA,aAAA,CAAc,CACvC,SAAW,CAAA,OAAA,CACX,WAAa,CAAA,IAAA,CACb,WAAAxK,CACA,CAAA,IAAA,CAAMitB,GAAah0B,CAAM+X,CAAAA,CAAM,CACjC,CAAC,CAAA,CACDoc,EAAM,OAAS,CAAA,GAAA,CAAItoB,CAAS,EAC9B,CAAA,CAGI,YAAauoB,CACf,EAAA,MAAA,CAAO,QAAQA,CAAQ,CAAA,WAAA,EAAe,EAAE,EAAE,OAAQ,CAAA,CAAC,CAACp0B,CAAMs0B,CAAAA,CAAU,IAAM,CACxED,CAAAA,CAAUr0B,EAAMs0B,CAAU,EAC5B,CAAC,CAIC,CAAA,SAAA,GAAaF,GACf,MAAO,CAAA,OAAA,CAAQA,EAAQ,UAAY,EAAA,OAAA,EAAW,EAAE,EAAE,OAChD,CAAA,CAAC,CAACp0B,CAAM+X,CAAAA,CAAM,IAAM,CAClBsc,CAAAA,CAAUr0B,EAAM+X,CAAM,EACxB,CACF,EAEJ,CAAA,KCnHaP,EAA+C,CAAA,CAC1D,OAAQ,CACN,eAAA,CAAiB,KACjB,CAAA,WAAA,CAAcxX,GAAS,CAAGA,EAAAA,CAAI,SAC9B,IAAM,CAAA,MACR,EACA,OAAAyY,CAAAA,EAAAA,CACA,cAAAyb,EACA,CAAA,IAAA,CAAM,mBACN,MAAQ,CAAA,SACV,ECTO,IAAMK,EAAyB,CAAA,CAAC,CACrC,SAAApe,CAAAA,CACF,IAE4B,CAC1B,IAAM9P,EAA0B,EAAC,CAEjC,OAAI8P,CAAU,CAAA,OAAA,EACZ9P,EAAS,IAAKhD,CAAAA,CAAAA,CAAc8S,EAAU,OAAO,CAAC,CAG5CA,CAAAA,CAAAA,CAAU,aACZ9P,CAAS,CAAA,IAAA,CAAKhD,EAAc8S,CAAU,CAAA,WAAW,CAAC,CAGhDA,CAAAA,CAAAA,CAAU,YACZ9P,CAAS,CAAA,IAAA,CAAK,aAAa,CAGtBA,CAAAA,CAAAA,CAAS,OAASA,CAAW,CAAA,MACtC,EAEamuB,EAA6B,CAAA,CAAC,CACzC,OAAA,CAAAve,EACA,SAAAE,CAAAA,CACF,IAGe,CAEb,IAAMse,EADS10B,CAAgBkW,CAAAA,CAAAA,CAAQ,MAAM,CACjB,CAAA,IAAA,GAAS,uBAC/BhW,CAASgW,CAAAA,CAAAA,CAAQ,OAAO,OAAQ,CAAA,cAAc,EACpD,OACGhW,CAAAA,EAAU,CAACA,CAAAA,CAAO,OAAO,MAAU,EAAA,CAACA,EAAO,MAAO,CAAA,QAAA,EACnDw0B,GACA7W,EAAyBzH,CAAAA,CAAS,CAEtC,CC3CO,CAAA,IAAMue,GAAqB,aACrBC,CAAAA,EAAAA,CAAkB,WAClBC,EAAmB,CAAA,MAAA,CAEnBC,GAAQ,KCJrB,CCmBO,IAAMC,EAA2C,CAAA,CAAC,CACvD,cAAAC,CAAAA,CAAAA,CACA,OAAAhd,CACF,CAAA,GAAM,CACJ,GAAIA,CAAAA,CAAO,OAAS,SAAaA,EAAAA,CAAAA,CAAO,SAAW,OACjD,CAAA,OAGF,IAAMid,CACJD,CAAAA,CAAAA,GAAmB,MACfxjB,CAAAA,CAAAA,CAAS,eAAe,CACtB,YAAA,CAAc,SACd,UAAY,CAAA,CACVA,EAAS,cAAe,CAAA,CACtB,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYwjB,CAAAA,CAAAA,CACZ,KAAM,UACR,CAAC,CACH,CAAC,CACH,CACF,CAAC,EACD,MAEN,CAAA,GAAIC,EAAsB,CACxB,GAAI,OAAOD,CAAmB,EAAA,QAAA,CAC5B,OAAO,CAACC,CAAoB,EAG9B,GAAID,CAAAA,CACF,OAAO,CACLxjB,CAAAA,CAAS,WAAW,CAClB,IAAA,CAAMwjB,CACN,CAAA,KAAA,CAAOC,CACT,CAAC,CACH,CAEJ,CAGF,CAAA,CAEaC,GAAyC,CAAC,CACrD,eAAAF,CACA,CAAA,MAAA,CAAAhd,CACF,CAAM,GAAA,CACJ,GACEA,CAAO,CAAA,IAAA,GAAS,UAChB,EAAEA,CAAAA,CAAO,MAAW,GAAA,MAAA,EAAUA,EAAO,MAAW,GAAA,WAAA,CAAA,CAEhD,OAGF,IAAMmd,CAAAA,CAAiB3jB,EAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,EAE3D,GAAI,OAAOwjB,GAAmB,QAC5B,CAAA,OAAO,CACLxjB,CAAS,CAAA,aAAA,CAAc,CACrB,cAAA,CAAgB,CAACA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAMwjB,CAAAA,CAAe,CAAC,CAAC,CAAA,CAC9D,WAAYG,CACd,CAAC,CACH,CAGF,CAAA,GAAIH,EACF,OAAO,CACLxjB,EAAS,UAAW,CAAA,CAClB,IAAMwjB,CAAAA,CAAAA,CACN,MAAOxjB,CAAS,CAAA,aAAA,CAAc,CAC5B,cAAgB,CAAA,CAACwjB,CAAc,CAC/B,CAAA,UAAA,CAAYG,CACd,CAAC,CACH,CAAC,CACH,CAIJ,EDzEO,IAAMC,EAAAA,CAA4B,CAAC,CACxC,EAAA,CAAA1f,CACA,CAAA,IAAA,CAAA1Q,CACF,CAEc,GAAA,CACZ,IAAI4Q,CAAQ,CAAA,EAAA,CACZ,OAAQ5Q,CAAM,EACZ,KAAK,MACH4Q,CAAAA,CAAAA,CAAQ,0BACR,MACF,KAAK,QACHA,CAAQ,CAAA,0BAAA,CACR,MACF,KAAK,UAAA,CACHA,CAAQ,CAAA,qBAAA,CACR,KACJ,CACA,OAAO,GAAG7C,EAAK,CAAA,EAAGsC,EAAW,CAE3B,IAAA,CAAM,YACN,KAAOK,CAAAA,CACT,CAAC,CAAC,CAAA,EAAGE,CAAK,CACZ,CAAA,CAAA,CAEMyf,GAAc,CAAC,CACnB,IAAApiB,CAAAA,CAAAA,CACA,KAAAjO,CACF,CAAA,GAGc,CACZ,IAAI4Q,CAAAA,CAAQ,GACZ,OAAQ5Q,CAAAA,EACN,KAAK,UAAA,CACH4Q,EAAQ,2BACR,CAAA,KACJ,CACA,IAAMhO,CAAAA,CAAQqL,EAAK,KAAM,CAAA,GAAG,CAC5B,CAAA,OAAO,GAAGrL,CAAM,CAAA,KAAA,CAAM,EAAGA,CAAM,CAAA,MAAA,CAAS,CAAC,CAAE,CAAA,IAAA,CAAK,GAAG,CAAC,CAAA,CAAA,EAAIyN,EAAW,CACjE,IAAA,CAAM,YACN,KAAOzN,CAAAA,CAAAA,CAAMA,EAAM,MAAS,CAAA,CAAC,CAC/B,CAAC,CAAC,CAAGgO,EAAAA,CAAK,EACZ,CAEa0f,CAAAA,EAAAA,CAA+B,CAAC,CAC3C,IAAA,CAAAriB,CACF,CAEcoiB,GAAAA,EAAAA,CAAY,CAAE,IAAApiB,CAAAA,CAAAA,CAAM,KAAM,UAAW,CAAC,EAEvCsiB,EAAiB,CAAA,cAAA,CACxBC,EAAmB,CAAA,MAAA,CAEnBC,GACJjnB,CAEAA,EAAAA,CAAAA,CAAM,IAAKrK,CACTR,EAAAA,kBAAAA,CAAG,YAAYQ,CAAI,CAAA,CACfA,EACAqN,CAAS,CAAA,qBAAA,CAAsB,CAAE,UAAYrN,CAAAA,CAAK,CAAC,CACzD,CAAA,CAEIuxB,GAAwB,CAAC,CAC7B,IAAAvxB,CAAAA,CACF,IAEMA,CAAK,CAAA,IAAA,GAASR,mBAAG,UAAW,CAAA,eAAA,CAE5BgyB,GAAiC,CAAC,CACtC,OAAAz1B,CACA,CAAA,MAAA,CAAA8X,CACF,CAG2C,GAAA,CACzC,IAAM4d,CAAiBpkB,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAMgkB,EAAiB,CAAC,EAC/DhnB,CAAQqnB,CAAAA,EAAAA,CAAkB,CAC9B,cAAgBD,CAAAA,CAAAA,CAChB,OAAA11B,CACA,CAAA,MAAA,CAAA8X,CACF,CAAC,CAAA,CAED,OACExJ,CAAM,CAAA,MAAA,EACN,CAACknB,EAAsB,CAAA,CAAE,KAAMlnB,CAAMA,CAAAA,CAAAA,CAAM,MAAS,CAAA,CAAC,CAAG,CAAC,CAAA,EAEzDA,EAAM,IAAKgD,CAAAA,CAAAA,CAAS,gBAAgB,CAAE,UAAA,CAAYokB,CAAe,CAAC,CAAC,EAE9DpnB,CACT,CAAA,CAEMqnB,GAAoB,CAAC,CACzB,eAAAb,CACA,CAAA,MAAA,CAAA90B,CACA,CAAA,MAAA,CAAA8X,CACF,CAI2C,GAAA,CACzC,IAAM7B,CAAOjW,CAAAA,CAAAA,CAAO,QAAQ,IAAK,CAAA,CAAE,GAAIq1B,EAAe,CAAC,EAEvD,GAAIvd,CAAAA,CAAO,KAAM,CACf,IAAIzC,EAAaY,CAAK,CAAA,UAAA,CAAW,CAC/B,IAAA,CAAMmf,GAA6B,CAAE,IAAA,CAAMtd,EAAO,IAAK,CAAC,EACxD,MAAQ,CAAA,IAAA,CACR,UAAW,OACb,CAAC,EAED,GAAIzC,CAAAA,CAAW,SAAWA,CAAW,CAAA,IAAA,CAAM,CAEzC,IAAM+X,CAAAA,CAAYptB,CAAO,CAAA,OAAA,CAAQ,aAC/B8X,CAAO,CAAA,IACT,EACMxJ,CAAQmnB,CAAAA,EAAAA,CAA+B,CAC3C,MAAAz1B,CAAAA,CAAAA,CACA,OAAQotB,CACV,CAAC,EACD,GAAI9e,CAAAA,CAAM,OAAQ,CAChB,IAAMrK,EAAOqN,CAAS,CAAA,aAAA,CAAc,CAClC,UAAA,CAAYA,EAAS,aAAc,CAAA,CACjC,MAAO,KACP,CAAA,SAAA,CAAW,KACX,UAAY,CAAA,CACV,CACE,IAAMgkB,CAAAA,EAAAA,CAEN,KAAMhkB,CAAS,CAAA,eAAA,CAAgB,CAAE,OAAS,CAAA,KAAM,CAAC,CACnD,CACF,CACA,CAAA,UAAA,CAAYikB,GAAiBjnB,CAAK,CACpC,CAAC,CACD,CAAA,IAAA,CAAM+G,EAAW,IACnB,CAAC,EACDY,CAAK,CAAA,GAAA,CAAIhS,CAAI,EACf,CAAA,KAGEoR,EAAaY,CAAK,CAAA,eAAA,CAAgB,CAChC,IAAMmf,CAAAA,EAAAA,CAA6B,CAAE,IAAA,CAAMtd,EAAO,IAAK,CAAC,EACxD,SAAW,CAAA,OACb,CAAC,EAEL,CAEA,GAAIzC,CAAW,CAAA,IAAA,CAAM,CACnB,IAAMugB,CAAAA,CAAiBtkB,EAAS,cAAe,CAAA,CAC7C,aAAc+D,CAAW,CAAA,IAAA,CACzB,UAAY,CAAA,CAACyf,CAAc,CAC7B,CAAC,EAED,GAAIA,CAAAA,CAEF,OAAI,OAAOA,CAAAA,EAAmB,UAAYA,CAAmB,GAAA,MAAA,CACpD,CACLxjB,CAAS,CAAA,eAAA,CAAgB,CACvB,UAAYskB,CAAAA,CACd,CAAC,CACH,CAAA,CAGK,CACL,OAAOd,GAAmB,QACtBc,CAAAA,CAAAA,CACAtkB,EAAS,UAAW,CAAA,CAClB,KAAMwjB,CACN,CAAA,KAAA,CAAOc,CACT,CAAC,CACP,CAEJ,CAEA,OAAO,EACT,CAEA,GAAI9d,CAAO,CAAA,IAAA,GAAS,OAAS,CAAA,CAC3B,GAAI,CAACgd,CAAAA,EAAkB,OAAOA,CAAmB,EAAA,QAAA,CAC/C,OAAO,EAAC,CAIV,IAAMxmB,CAASwJ,CAAAA,CAAAA,CAAO,MAElB6d,EAAkB,CAAA,CAChB,eAAgB,MAChB,CAAA,MAAA,CAAA31B,EACA,MAAQ8X,CAAAA,CAAAA,CAAO,KAAQ,GAAA,CAAC,EACpBA,CAAO,CAAA,KAAA,CAAM,CAAC,CACd,CAAA,CACE,GAAGA,CACH,CAAA,IAAA,CAAM,MACR,CACN,CAAC,EAVD,EAAC,CAYL,GAAI,CAACxJ,CAAAA,CAAM,OACT,OAAO,EAIT,CAAA,IAAMunB,EAAwBN,EAAiBjnB,CAAAA,CAAK,EAKpD,OAJ2BunB,CAAAA,CAAsB,KAAMC,CACrDN,EAAAA,EAAAA,CAAsB,CAAE,IAAMM,CAAAA,CAAK,CAAC,CACtC,CAAA,EAGED,EAAsB,IACpBvkB,CAAAA,CAAAA,CAAS,gBAAgB,CACvB,UAAA,CAAYA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,MAAO,CAAC,CAClD,CAAC,CACH,CAGK,CAAA,CACLA,EAAS,UAAW,CAAA,CAClB,KAAMwjB,CACN,CAAA,KAAA,CAAOxjB,EAAS,cAAe,CAAA,CAC7B,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAA,CAAYwjB,EACZ,IAAM,CAAA,KACR,CAAC,CACD,CAAA,UAAA,CAAY,CACVxjB,CAAS,CAAA,aAAA,CAAc,CACrB,SAAW,CAAA,IAAA,CACX,WAAY,CACV,CACE,KAAM,MACN,CAAA,IAAA,CAAM,KACR,CACF,CAAA,CACA,UAAYukB,CAAAA,CACd,CAAC,CACH,CACF,CAAC,CACH,CAAC,CACH,CACF,CAEA,GAAI/d,CAAO,CAAA,IAAA,GAAS,SAAU,CAC5B,IAAIxJ,EAA6C,EAAC,CAC5C/C,EAAWuM,CAAO,CAAA,QAAA,EAAY,EAAC,CAErC,QAAW/X,CAAQ+X,IAAAA,CAAAA,CAAO,WAAY,CACpC,IAAMrH,EAAWqH,CAAO,CAAA,UAAA,CAAW/X,CAAI,CACjCg2B,CAAAA,CAAAA,CAA2BzkB,EAAS,wBAAyB,CAAA,CACjE,WAAYwjB,CAAkBQ,EAAAA,EAAAA,CAC9B,KAAAv1B,CACF,CAAC,CACKi2B,CAAAA,CAAAA,CAAgBL,GAAkB,CACtC,cAAA,CAAgBI,EAChB,MAAA/1B,CAAAA,CAAAA,CACA,OAAQyQ,CACV,CAAC,EACD,GAAI,CAACulB,EAAc,MACjB,CAAA,SAEF,IAAMC,CAA0B,CAAA,CAACxlB,EAAS,KAAO,EAAA,IAAA,CAC9CylB,CAAMA,EAAAA,CAAAA,CAAE,OAAS,MACpB,CAAA,CACsB3qB,EAAS,QAASxL,CAAAA,CAAI,GAGvBk2B,CACnB3nB,CAAAA,CAAAA,CAAQA,EAAM,MAAO0nB,CAAAA,CAAa,EAElC1nB,CAAM,CAAA,IAAA,CAIJgD,EAAS,WAAY,CAAA,CACnB,WAAYykB,CACZ,CAAA,aAAA,CAAezkB,CAAS,CAAA,KAAA,CAAM,CAC5B,UAAYikB,CAAAA,EAAAA,CAAiBS,CAAa,CAC5C,CAAC,CACH,CAAC,CACH,EAEJ,CAEA,OAAO1nB,CACT,CAEA,GAAIwJ,EAAO,KAAO,CAAA,CAChB,GAAIA,CAAO,CAAA,KAAA,CAAM,MAAW,GAAA,CAAA,CAC1B,OAAO6d,EAAkB,CAAA,CACvB,eAAgB,MAChB,CAAA,MAAA,CAAA31B,EACA,MAAQ8X,CAAAA,CAAAA,CAAO,MAAM,CAAC,CACxB,CAAC,CAGH,CAAA,IAAIqe,EAAkD,EAAC,CAEvD,GACEre,CAAO,CAAA,eAAA,GAAoB,KAC1BA,EAAAA,CAAAA,CAAO,MAAM,MAAW,GAAA,CAAA,EACvBA,EAAO,KAAM,CAAA,IAAA,CACVxL,GAASA,CAAK,CAAA,IAAA,GAAS,QAAUA,CAAK,CAAA,IAAA,GAAS,MAClD,CACF,CAAA,CACA,QAAWA,CAAQwL,IAAAA,CAAAA,CAAO,MAAO,CAC/B,IAAMxJ,CAAQqnB,CAAAA,EAAAA,CAAkB,CAC9B,cAAgBb,CAAAA,CAAAA,EAAkB,OAClC,MAAA90B,CAAAA,CAAAA,CACA,OAAQsM,CACV,CAAC,EACD,GAAIgC,CAAAA,CAAM,OACR,GAAIwmB,CAAAA,CACFqB,EAAaA,CAAW,CAAA,MAAA,CAAO7nB,CAAK,CAC/B,CAAA,KAAA,CACL,IAAM8nB,CAAAA,CAAiB9kB,EAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,EAE3D6kB,CAAW,CAAA,IAAA,CACT7kB,EAAS,WAAY,CAAA,CACnB,WAAY8kB,CACZ,CAAA,aAAA,CAAe9kB,EAAS,KAAM,CAAA,CAC5B,WAAYikB,EAAiBjnB,CAAAA,CAAK,CACpC,CAAC,CACH,CAAC,CAAA,CACDgD,EAAS,eAAgB,CAAA,CAAE,WAAY8kB,CAAe,CAAC,CACzD,EACF,CAEJ,CACA,OAAOD,CACT,CAGIre,CAAO,CAAA,IAAA,GAAS,UAEdA,CAAO,CAAA,KAAA,EAAS,EAAC,EAAG,MAAOxL,CAEzB,EAAA,CAAC,UAAW,SAAW,CAAA,MAAA,CAAQ,SAAU,QAAQ,CAAA,CAGjD,SAASA,CAAK,CAAA,IAAI,CACtB,CAEA,EAAA,OAAA,CAAQ,KACN,CAAmC,0CAAA,EAAA,IAAA,CAAK,UAAUwL,CAAM,CAAC,CAC3D,8NAAA,CAAA,CAAA,EAGN,CAEA,IAAW2C,IAAAA,CAAAA,IAAeza,EAAO,MAAO,CAAA,YAAA,EAAgB,EAAI,CAAA,CAC1D,IAAMq2B,CAAI5b,CAAAA,CAAAA,CAAY,CACpB,MAAQza,CAAAA,CAAAA,CAAO,OACf,cAAA80B,CAAAA,CAAAA,CACA,KAAA7e,CACA,CAAA,MAAA,CAAA6B,CACF,CAAC,EACD,GAAIue,CAAAA,CACF,OAAOA,CAEX,CAEA,OAAO,EACT,EAGa7d,EAA+C,CAAA,CAAC,CAAE,MAAAxY,CAAAA,CAAO,IAAM,CAC1E,IAAMiW,EAAOjW,CAAO,CAAA,UAAA,CAAW,CAC7B,EAAA,CAAIq1B,GACJ,IAAMr1B,CAAAA,CAAAA,CAAO,MACf,CAAC,CAAA,CAEGA,EAAO,MAAO,CAAA,KAAA,GAChBA,EAAO,MAAO,CAAA,YAAA,CAAe,CAC3B,GAAIA,CAAAA,CAAO,OAAO,YAAgB,EAAA,GAClCg1B,EACF,CAAA,CAAA,CAGEh1B,CAAO,CAAA,MAAA,CAAO,SAChBA,CAAO,CAAA,MAAA,CAAO,aAAe,CAC3B,GAAIA,EAAO,MAAO,CAAA,YAAA,EAAgB,EAClC60B,CAAAA,EACF,GAGF70B,CAAO,CAAA,OAAA,CAAQ,YAAa,CAAC,CAAE,UAAAkW,CAAU,CAAA,GAAM,CAC7C,GAAM,CAAE,QAAAqI,CAAAA,CAAS,EAAIJ,EAAsBjI,CAAAA,CAAS,EAEpD,GAAI,CAACqI,EACH,OAGF,GAAIA,EAAS,KAASA,EAAAA,CAAAA,CAAS,MAAM,MAAS,CAAA,CAAA,CAAG,CAC3Cve,CAAO,CAAA,OAAA,CAAQ,MAAO,CAAA,IAAA,CAAK,QAAU,OACvC,EAAA,OAAA,CAAQ,KACN,CAAkC4d,yCAAAA,EAAAA,CAAAA,CAAmB1H,CAAS,CAAC,CAAA,KAAA,EAAQqI,EAAS,KAAM,CAAA,MAAM,0MAC9F,CAEF,CAAA,MACF,CAEA,IAAM+X,CAAAA,CAAqBt2B,EAAO,OAC/B,CAAA,IAAA,CAAK,CAAE,EAAA,CAAI4V,CAAQ,CAAC,CAAA,CACpB,WAAW,CACV,IAAA,CAAML,EAAe,CACnB,MAAA,CAAQvV,EAAO,OAAQ,CAAA,MAAA,CACvB,GAAIkW,CAAU,CAAA,EAAA,CACd,KAAM,UACR,CAAC,EACD,SAAW,CAAA,MACb,CAAC,CAAA,CACH,GAAI,CAACogB,CAAAA,CAAmB,KACtB,OAGF,IAAIC,EAAgCtgB,CAAK,CAAA,UAAA,CAAW,CAClD,IAAMif,CAAAA,EAAAA,CAA0B,CAAE,EAAIhf,CAAAA,CAAAA,CAAU,GAAI,IAAM,CAAA,UAAW,CAAC,CACtE,CAAA,MAAA,CAAQ,IACR,CAAA,SAAA,CAAW,OACb,CAAC,CAAA,CACD,GAAI,CAACqgB,CAAAA,CAA8B,KACjC,OAIF,IAAMjoB,EAAQmnB,EAA+B,CAAA,CAAE,OAAAz1B,CAAQ,CAAA,MAAA,CAAQue,CAAS,CAAC,CAAA,CACzE,GAAIjQ,CAAM,CAAA,MAAA,CAAQ,CAChB2H,CAAAA,CAAK,OAAO,CACV,MAAA,CAAQ,KACR,MAAQA,CAAAA,CAAAA,CAAK,mBAAmB,CAC9B,OAAA,CAASjW,EAAO,OAChB,CAAA,EAAA,CAAI4V,CACN,CAAC,CAAA,CACD,KAAM0gB,CAAmB,CAAA,IAC3B,CAAC,CACD,CAAA,IAAME,CAA0BllB,CAAAA,CAAAA,CAAS,cAAc,CACrD,WAAA,CAAa,KACb,UAAYA,CAAAA,CAAAA,CAAS,cAAc,CACjC,KAAA,CAAO,KACP,SAAW,CAAA,IAAA,CACX,WAAY,CACV,CACE,KAAMgkB,EAEN,CAAA,IAAA,CAAMhkB,EAAS,eAAgB,CAAA,CAAE,OAAS,CAAA,KAAM,CAAC,CACnD,CACF,EACA,UAAYA,CAAAA,CAAAA,CAAS,kBAAkB,CACrC,aAAA,CAAe,CACbA,CAAS,CAAA,iBAAA,CAAkB,CACzB,QAAUglB,CAAAA,CAAAA,CAAmB,IAC/B,CAAC,CACH,EACA,QAAU,CAAA,SACZ,CAAC,CAAA,CACD,WAAYf,EAAiBjnB,CAAAA,CAAK,CACpC,CAAC,CAAA,CACD,KAAMioB,CAA8B,CAAA,IACtC,CAAC,CACDtgB,CAAAA,CAAAA,CAAK,IAAIugB,CAAuB,EAClC,MAGED,CAAgCtgB,CAAAA,CAAAA,CAAK,gBAAgB,CACnD,IAAA,CAAMif,EAA0B,CAAA,CAC9B,GAAIhf,CAAU,CAAA,EAAA,CACd,KAAM,UACR,CAAC,EACD,SAAW,CAAA,OACb,CAAC,EAEL,CAAC,EACH,CEreA,CAAA,IAAMugB,GAAmC,CAAC,CACxC,qBAAA7H,CACF,CAAA,GAEwB,CACtB,GAAIA,EAAqB,IAAS,GAAA,eAAA,CAChC,OAAO,CACL,MAAA,CAAQ,SACR,IAAM,CAAA,MACR,EAGF,GAAIA,CAAAA,CAAqB,OAAS,QAChC,CAAA,OACEA,EAAqB,KAAM,CAAA,QAAA,EAC3BA,EAAqB,KAAM,CAAA,iBAAA,EAC3BA,CAAqB,CAAA,KAAA,CAAM,mBAC3BA,CAAqB,CAAA,KAAA,CAAM,SAEpB,CACL,MAAA,CAAQ,SACR,IAAM,CAAA,MACR,EAGF,MAGF,CAAA,GAAIA,EAAqB,IAAS,GAAA,QAAA,CAChC,OAAIA,CAAqB,CAAA,EAAA,GAAO,SACvB,CACL,IAAA,CAAMA,CAAqB,CAAA,IAAA,CAC3B,KAAM,QACR,CAAA,CAIAA,EAAqB,EAAO,GAAA,OAAA,EAC5BA,EAAqB,EAAM,EAAA,QAAA,CAEpB,CACL,EAAIA,CAAAA,CAAAA,CAAqB,GACzB,IAAMA,CAAAA,CAAAA,CAAqB,KAC3B,IAAM,CAAA,QACR,EAGF,MAGF,CAAA,GAAIA,CAAqB,CAAA,IAAA,GAAS,OAAQ,CACxC,IAAMe,EAASf,CAAqB,CAAA,MAAA,CAAO,aAC3C,CAAA,OAAIe,IAAW,QAAYA,EAAAA,CAAAA,GAAW,QAC7B,CACL,MAAA,CAAQA,EACR,IAAM,CAAA,MACR,EAGF,MACF,CAGF,CAEa+G,CAAAA,EAAAA,CAAgB,CAAC,CAC5B,SAAA,CAAAxgB,EACA,MAAAlW,CAAAA,CACF,IAImB,CACjB,GAAI,CAACkW,CAAU,CAAA,QAAA,EAAY,CAAClW,CAAO,CAAA,MAAA,CAAO,KACxC,OAAO,GAGT,IAAM22B,CAAAA,CAAoB,EAAC,CAE3B,QAAW/H,CAAwB1Y,IAAAA,CAAAA,CAAU,SAAU,CACrD,IAAM0gB,EAAaH,EAAiC,CAAA,CAClD,qBAAA7H,CACF,CAAC,EACGgI,CACFD,CAAAA,CAAAA,CAAK,KAAKC,CAAU,CAAA,CAEpB,QAAQ,IACN,CAAA,CAAA;AAAA,EAA0I,KAAK,SAAUhI,CAAAA,CAAAA,CAAsB,IAAM,CAAA,CAAC,CAAC,CACzL,CAAA,EAEJ,CAEA,OAAO+H,CACT,CC9FO,CAAA,IAAME,EAAyB,CAAA,CAAC,CACrC,SAAA3gB,CAAAA,CAAAA,CACA,MAAAlW,CAAAA,CACF,IAGM,CACJ,GAAI,CAACA,CAAAA,CAAO,OAAO,SAAU,CAAA,OAAA,CAC3B,OAGF,IAAM82B,EAAkB92B,CAAO,CAAA,SAAA,CAAUA,CAAO,CAAA,MAAA,CAAO,UAAU,OAAO,CAAA,CACxE,GAAI,EAAA,CAAC82B,GAAmB,CAACA,CAAAA,CAAgB,GAAI,CAAA,sBAAA,CAAA,CAI7C,OAAOA,CAAgB,CAAA,GAAA,CAAI,sBAAuB,CAAA,CAChD,KAAM92B,CAAO,CAAA,OAAA,CAAQ,IAAK,CAAA,CAAE,GAAI40B,EAAM,CAAC,CACvC,CAAA,SAAA,CAAA1e,EAEA,MAAQ4gB,CAAAA,CACV,CAAC,CACH,EAEaC,EAA0B,CAAA,CAAC,CACtC,SAAA,CAAA7gB,EACA,MAAAlW,CAAAA,CACF,IAGM,CACJ,GAAI,CAACA,CAAO,CAAA,MAAA,CAAO,SAAU,CAAA,QAAA,CAC3B,OAGF,IAAM82B,CAAAA,CAAkB92B,CAAO,CAAA,SAAA,CAAUA,EAAO,MAAO,CAAA,SAAA,CAAU,QAAQ,CAAA,CACzE,GAAI,EAAC82B,CAAAA,CAAAA,EAAmB,CAACA,CAAAA,CAAgB,IAAI,uBAI7C,CAAA,CAAA,OAAOA,CAAgB,CAAA,GAAA,CAAI,wBAAwB,CACjD,IAAA,CAAM92B,CAAO,CAAA,OAAA,CAAQ,KAAK,CAAE,EAAA,CAAI40B,EAAM,CAAC,EACvC,SAAA1e,CAAAA,CAAAA,CAEA,OAAQ4gB,CACV,CAAC,CACH,CCZA,CAAA,IAAME,EAAqB,CAAA,CAAC,CAC1B,OAAAhhB,CAAAA,CAAAA,CACA,KAAAnU,CAAAA,CACF,IAGM,CACJ,IAAM9B,CAAOoV,CAAAA,CAAAA,CAAW,CACtB,IAAM,CAAA,YAAA,CACN,KAAO6J,CAAAA,EAAAA,CAA4Bnd,CAAK,CAC1C,CAAC,CACD,CAAA,OAAO0vB,GAAmB,CACxB,MAAA,CAAQvb,CAAQ,CAAA,MAAA,CAChB,KAAAjW,CACF,CAAC,CACH,CAAA,CAEMk3B,GAAyB,CAAC,CAC9B,UAAA/gB,CACA,CAAA,MAAA,CAAAlW,CACF,CASMA,GAAAA,CAAAA,CAAO,MAAO,CAAA,iBAAA,CACTA,EAAO,MAAO,CAAA,iBAAA,CAAkBkW,CAAS,CAAA,CAG5B,CAAClW,CAAO,CAAA,MAAA,CAAO,OAChBkW,EAAAA,CAAAA,CAAU,GAAG,KAAMpT,CAAAA,EAAgC,CAC/D,CAAA,CAAA,EAAGoT,EAAU,EAAE,CAAA,CAAA,CAAA,CAGjBA,CAAU,CAAA,EAAA,CAMNghB,GAAmB,CAAC,CAC/B,OAAAlhB,CAAAA,CAAAA,CACA,UAAAE,CACA,CAAA,MAAA,CAAAlW,CACF,CAAA,GASmC,CACjC,IAAMm3B,CAAAA,CAAa,IAAI,GAEnBC,CAAAA,CAAAA,CACAC,EACAC,CAAiC,CAAA,EAErC,CAAA,GAAIt3B,EAAO,MAAO,CAAA,cAAA,GAAmB,MAAUkW,EAAAA,CAAAA,CAAU,cACvDohB,CAAkBphB,CAAAA,CAAAA,CAAU,WAAY,CAAA,KAAA,CAAM,MAAM,CAAE,CAAA,MAAA,CAAO,OAAO,CAAA,CAChEohB,EAAgB,MAAS,CAAA,CAAA,CAAA,CAAG,CAC9B,IAAMC,EAAkBD,CAAgB,CAAA,GAAA,EACxCD,CAAAA,CAAAA,CAAaliB,EAAW,CACtB,IAAA,CAAM,WACN,CAAA,KAAA,CAAO6J,GAA4BuY,CAAe,CACpD,CAAC,CACDH,CAAAA,CAAAA,CAAYE,EAAgB,GAAI,GAClC,CAGF,IAAME,EAAcx3B,CAAO,CAAA,MAAA,CAAO,QAC9B,CAAA,CAACA,EAAO,MAAO,CAAA,QAAkB,CAChCkW,CAAAA,CAAAA,CAAU,MAAQ,CAAC,SAAS,CAEjC,CAAA,IAAA,IAAWuhB,KAAaD,CAAa,CAAA,CACnC,IAAME,CAAAA,CAAiBV,GAAmB,CACxC,OAAA,CAAAhhB,CACA,CAAA,KAAA,CAAOohB,GAAaK,CACtB,CAAC,CACDN,CAAAA,CAAAA,CAAW,IAAIM,CAAW,CAAA,CACxB,UAAWC,CACX,CAAA,UAAA,CAAYL,GAAcJ,EAAuB,CAAA,CAAE,SAAA/gB,CAAAA,CAAAA,CAAW,OAAAlW,CAAO,CAAC,CACtE,CAAA,IAAA,CAAA,CAAOo3B,EACH,CAACK,CAAAA,CAAW,GAAGH,CAAAA,CAAiBF,CAAS,CACzC,CAAA,CAACK,CAAS,CAAA,EACZ,IAAK51B,CACLm1B,EAAAA,EAAAA,CAAmB,CACjB,OAAA,CAAAhhB,EACA,KAAAnU,CAAAA,CACF,CAAC,CACH,CACF,CAAC,EACH,CAEA,OAAOs1B,CACT,CAEaQ,CAAAA,EAAAA,CAAuB,CAAC,CACnC,OAAA,CAAA3hB,EACA,IAAAC,CAAAA,CAAAA,CACA,SAAAC,CAAAA,CAAAA,CACA,aAAA0hB,CACF,CAAA,GAKM,CAEJ,IAAMpD,EADS10B,CAAgBkW,CAAAA,CAAAA,CAAQ,MAAM,CAAA,CACjB,OAAS,sBAE/B0f,CAAAA,CAAAA,CAAiB3f,EAAiB,CAAA,CACtC,QAAAC,CACA,CAAA,IAAA,CAAAC,CACA,CAAA,SAAA,CAAAC,EACA,IAAM,CAAA,MACR,CAAC,CAAA,CACKogB,EAAqBvgB,EAAiB,CAAA,CAC1C,OAAAC,CAAAA,CAAAA,CACA,KAAAC,CACA,CAAA,SAAA,CAAAC,EACA,IAAMse,CAAAA,CAAAA,CAAe,WAAa,WACpC,CAAC,CAEKqD,CAAAA,CAAAA,CAAczlB,EAAU,OAAQ,CAAA,IAAA,CAEtC,OAAIoiB,CAAAA,CACK,GAAGqD,CAAW,CAAA,CAAA,EAAIpD,EAAkB,CAAA,EAAA,EAAKiB,EAAe,IAAQ,EAAA,SAAS,CAAKY,EAAAA,EAAAA,CAAAA,CAAmB,MAAQ,SAAS,CAAA,EAAA,EAAK5B,EAAe,CAAA,CAAA,CAAA,CAI3IkD,EACK,CAAGC,EAAAA,CAAW,CAAInC,CAAAA,EAAAA,CAAAA,CAAe,MAAQ,SAAS,CAAA,EAAA,EAAKkC,CAAY,CAAA,CAAA,CAAA,CAErElC,EAAe,IAClB,CAAA,CAAA,EAAGmC,CAAW,CAAInC,CAAAA,EAAAA,CAAAA,CAAe,IAAI,CACrCmC,CAAAA,CAAAA,CAAAA,CACN,CAWMC,CAAAA,EAAAA,CACJC,GAQe,CACf,GAAI,CAACA,CAAAA,CACH,OAGF,IAAMC,CAAAA,CAAeD,CAAY,CAAA,KAAA,CAAM,GAAG,CAAE,CAAA,CAAC,CAAG,EAAA,IAAA,GAEhD,GAAKC,CAAAA,CAIL,CACEA,GAAAA,CAAAA,CAAa,WAAW,kBAAkB,CAAA,EAC1CA,CAAa,CAAA,QAAA,CAAS,OAAO,CAE7B,CAAA,OAAO,MAQT,CAAA,GACE,CAAC,cAAgB,CAAA,QAAA,CAAU,SAAU,QAAQ,CAAA,CAAE,KAAMlzB,CACnDkzB,EAAAA,CAAAA,CAAa,UAAWlzB,CAAAA,CAAI,CAC9B,CAEA,CAAA,OAAO,MAGT,CAAA,GAAIkzB,EAAa,UAAW,CAAA,OAAO,CACjC,CAAA,OAAO,OAIX,CAEaC,CAAAA,EAAAA,CAAsB,CAAC,CAClC,QAAAjiB,CACA,CAAA,iBAAA,CAAAkiB,CACA,CAAA,SAAA,CAAAhiB,EACA,MAAAlW,CAAAA,CACF,CAK2B,GAAA,CACzB,IAAMiW,CAAOD,CAAAA,CAAAA,CAAQ,IAAK,CAAA,CAAE,GAAI4e,EAAM,CAAC,EACjCuD,CAAYliB,CAAAA,CAAAA,CAAK,sBAEjBpW,CAAAA,CAAAA,CAASC,CAAgBkW,CAAAA,CAAAA,CAAQ,MAAM,CACvCwe,CAAAA,CAAAA,CAAe30B,CAAO,CAAA,IAAA,GAAS,uBAE/Bu4B,CAAkBriB,CAAAA,EAAAA,CAAiB,CACvC,OAAA,CAAAC,EACA,IAAAC,CAAAA,CAAAA,CACA,SAAAC,CAAAA,CAAAA,CACA,KAAMse,CAAe,CAAA,OAAA,CAAU,QACjC,CAAC,EACK8B,CAAqBvgB,CAAAA,EAAAA,CAAiB,CAC1C,OAAA,CAAAC,EACA,IAAAC,CAAAA,CAAAA,CACA,SAAAC,CAAAA,CAAAA,CACA,KAAMse,CAAe,CAAA,UAAA,CAAa,WACpC,CAAC,CAAA,CAkBK6D,EAAgC,EAAC,CAEvC,GAAIniB,CAAAA,CAAU,KACZ,OAAQA,CAAAA,CAAU,IAAK,CAAA,IAAA,EACrB,KAAK,WAAA,CACHmiB,CAAe,CAAA,IAAA,CAAK,CAAE,MAAQ,CAAA,wBAAyB,CAAC,CAAA,CACxDpiB,EAAK,MAAO,CAAA,CACV,MAAQhE,CAAAA,CAAAA,CAAiB,CACvB,MAAQ+D,CAAAA,CAAAA,CAAQ,MAChB,CAAA,YAAA,CAAcmiB,CAChB,CAAC,CAAA,CACD,IAAM,CAAA,wBACR,CAAC,CACD,CAAA,MACF,KAAK,MAEH,CAAA,MACF,KAAK,MACL,CAAA,KAAK,cAEHE,CAAAA,CAAAA,CAAe,KAAK,CAClB,GAAA,CAAK,gBACL,CAAA,KAAA,CAAO,IACT,CAAC,CAAA,CACD,MACF,KAAK,oBACHA,CAAe,CAAA,IAAA,CAAK,CAAE,MAAA,CAAQ,+BAAgC,CAAC,CAAA,CAC/DpiB,CAAK,CAAA,MAAA,CAAO,CACV,MAAQhE,CAAAA,CAAAA,CAAiB,CACvB,MAAA,CAAQ+D,EAAQ,MAChB,CAAA,YAAA,CAAcmiB,CAChB,CAAC,EACD,IAAM,CAAA,+BACR,CAAC,CACD,CAAA,KACJ,CAOF,IAAWp4B,IAAAA,CAAAA,IAAQmW,CAAU,CAAA,UAAA,EAAY,MAAO,CAC9C,IAAMrO,CAAYqO,CAAAA,CAAAA,CAAU,WAAW,KAAMnW,CAAAA,CAAI,CACjD,CAAA,GAAA,CACG8H,EAAU,MAAO,CAAA,IAAA,GAAS,OACzBA,EAAAA,CAAAA,CAAU,OAAO,IAAS,GAAA,OAAA,IAC3BA,CAAU,CAAA,KAAA,GAAU,QAAU,CAACA,CAAAA,CAAU,OAC1C,CAAA,CAAA,CAEAwwB,EAAe,IAAK,CAAA,CAClB,GAAK,CAAA,iBAAA,CACL,MAAO,CACL,CACE,IAAK,OACL,CAAA,KAAA,CAAO,CACL,CACE,GAAA,CAAK,SACL,CAAA,KAAA,CAAO,KACT,CACA,CAAA,CACE,GAAK,CAAA,OAAA,CACL,MAAO,MACT,CACF,CACF,CACF,CACF,CAAC,CAAA,CACD,KACF,CACF,CAEA,IAAMC,CAAAA,CAAmBzB,EAAuB,CAAA,CAAE,UAAA3gB,CAAW,CAAA,MAAA,CAAAlW,CAAO,CAAC,EAQrE,GAPIs4B,CAAAA,EACFD,CAAe,CAAA,IAAA,CAAK,CAClB,GAAK,CAAA,kBAAA,CACL,KAAOC,CAAAA,CACT,CAAC,CAGCt4B,CAAAA,CAAAA,CAAO,MAAO,CAAA,WAAA,GAAgB,wBAAyB,CACzD,IAAMu4B,CAAwBviB,CAAAA,CAAAA,CAC3B,KAAK,CAAE,EAAA,CAAIqf,EAAe,CAAC,EAC3B,UAAW,CAAA,CACV,IAAMH,CAAAA,EAAAA,CAA0B,CAAE,EAAIhf,CAAAA,CAAAA,CAAU,EAAI,CAAA,IAAA,CAAM,UAAW,CAAC,CAAA,CACtE,SAAW,CAAA,OACb,CAAC,CAECqiB,CAAAA,CAAAA,CAAsB,IACxBtiB,GAAAA,CAAAA,CAAK,OAAO,CACV,MAAA,CAAQA,EAAK,kBAAmB,CAAA,CAC9B,QAAAD,CACA,CAAA,EAAA,CAAIqf,EACN,CAAC,EACD,IAAMkD,CAAAA,CAAAA,CAAsB,IAC9B,CAAC,EAEDF,CAAe,CAAA,IAAA,CAAK,CAClB,GAAA,CAAK,sBACL,KAAOE,CAAAA,CAAAA,CAAsB,IAC/B,CAAC,GAEL,CAEA,GAAI14B,CAAO,CAAA,IAAA,GAAS,yBAIlB,IAAWqe,IAAAA,CAAAA,IAAchI,CAAU,CAAA,SAAA,CAEjC,GAAI+H,EAAkB,CAAA,CAAE,UAAAC,CAAAA,CAAW,CAAC,CAAM,GAAA,KAAA,CAAO,CAC/C,IAAMK,CAAAA,CAAWrI,EAAU,SAAUgI,CAAAA,CAAU,CACzCsa,CAAAA,EAAAA,CAAeV,GAAgBvZ,CAAU,EAAA,SAAS,CACxD,CAAA,GAAIia,GAAc,CAChBH,CAAAA,CAAe,IAAK,CAAA,CAClB,IAAK,cACL,CAAA,KAAA,CAAOG,EACT,CAAC,EACD,KACF,CACF,CAIJ,CAAA,IAAMC,EAAoB1B,EAAwB,CAAA,CAAE,SAAA7gB,CAAAA,CAAAA,CAAW,OAAAlW,CAAO,CAAC,CACnEy4B,CAAAA,CAAAA,EACFJ,EAAe,IAAK,CAAA,CAClB,IAAK,mBACL,CAAA,KAAA,CAAOI,CACT,CAAC,CAAA,CAGCz4B,CAAO,CAAA,MAAA,CAAO,gBAAkB,MAClCq4B,EAAAA,CAAAA,CAAe,IAAK,CAAA,CAClB,IAAK,eACL,CAAA,KAAA,CAAOr4B,CAAO,CAAA,MAAA,CAAO,aACvB,CAAC,CAAA,CAGH,IAAM22B,CAAAA,CAAOD,GAAc,CAAW,SAAA,CAAAxgB,EAAW,MAAAlW,CAAAA,CAAO,CAAC,CAAA,CAgBzD,GAfI22B,CAAK,CAAA,MAAA,EACP0B,CAAe,CAAA,IAAA,CAAK,CAClB,GAAK,CAAA,UAAA,CACL,MAAO/mB,CAAS,CAAA,sBAAA,CAAuB,CAAE,QAAUqlB,CAAAA,CAAK,CAAC,CAC3D,CAAC,CAGH0B,CAAAA,CAAAA,CAAe,IAAK,CAAA,CAClB,IAAK,KACL,CAAA,KAAA,CAAOniB,CAAU,CAAA,IACnB,CAAC,CAGDmiB,CAAAA,CAAAA,CAAe,IAAK,CAAA,CAAE,OAAQ,SAAU,CAAC,CAErCniB,CAAAA,CAAAA,CAAU,KAAM,CAClB,IAAMwiB,CAAuBxiB,CAAAA,CAAAA,CAAU,YAAY,MAAS,GAAA,cAAc,CAG1E,CAAA,GAAI,CAF2B,CAAQwiB,CAAAA,CAAAA,EAAsB,SAEhC,CAC3B,IAAMC,GAASrnB,CAAS,CAAA,wBAAA,CAAyB,CAC/C,UAAA,CAAYA,EAAS,UAAW,CAAA,CAAE,IAAM,CAAA,SAAU,CAAC,CACnD,CAAA,UAAA,CAAY,CAAC4mB,CAAAA,CACb,KAAM,SACR,CAAC,CACDG,CAAAA,CAAAA,CAAe,KAAK,CAClB,GAAA,CAAK,SACL,CAAA,KAAA,CAAO,CACL,CACE,GAAA,CAAKK,CAAsB,EAAA,IAAA,EAAQ,eAEnC,KACExiB,CAAAA,CAAAA,CAAU,IAAK,CAAA,IAAA,GAAS,YACpB,IACAA,CAAAA,CAAAA,CAAU,KAAK,SACvB,CAAA,CACA,CACE,MAAAyiB,CAAAA,EACF,CACF,CACF,CAAC,EACH,CACF,CAEA,IAAMH,EAAelC,CAAmB,CAAA,IAAA,EAAQ,SAC1CsC,CAAAA,CAAAA,CAAYR,EAAgB,IAAQ,EAAA,SAAA,CAEpCS,CAAe74B,CAAAA,CAAAA,CAAO,OAAO,MAC/BiW,CAAAA,CAAAA,CAAK,MAAO,CAAA,CACV,MAAO,eACP,CAAA,MAAA,CAAQA,CAAK,CAAA,kBAAA,CAAmB,CAC9B,OAAAD,CAAAA,CAAAA,CACA,EAAItW,CAAAA,EACN,CAAC,CACD,CAAA,IAAA,CAAM,QACR,CAAC,CAAA,CACD,OAEEo5B,CAAgBxnB,CAAAA,CAAAA,CAAS,wBAAyB,CAAA,CACtD,WAAYA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAA,CAAM,SAAU,CAAC,CAAA,CACnD,UAAY,CAAA,CAAC4mB,EACb,IAAM,CAAA,QACR,CAAC,CAAA,CAEGa,EAEA/4B,CAAO,CAAA,MAAA,CAAO,QAChB+4B,CAAAA,CAAAA,CAAmBznB,EAAS,gBAAiB,CAAA,CAC3C,IAAMwnB,CAAAA,CAAAA,CACN,SAAU,IACV,CAAA,KAAA,CAAOxnB,CAAS,CAAA,wBAAA,CAAyB,CACvC,UAAYA,CAAAA,CAAAA,CAAS,MACrB,CAAA,IAAA,CAAM,SACR,CAAC,CACH,CAAC,CAAA,CACQunB,GAAc,IACvBE,CAAAA,CAAAA,CAAmBznB,CAAS,CAAA,gBAAA,CAAiB,CAC3C,IAAMwnB,CAAAA,CAAAA,CACN,QAAU,CAAA,IAAA,CACV,MAAOxnB,CAAS,CAAA,UAAA,CAAW,CAAE,IAAA,CAAMunB,EAAa,IAAK,CAAC,CACxD,CAAC,EAEDE,CAAmBD,CAAAA,CAAAA,CAGrB,IAAM3wB,CAAAA,CAA0C,EAChD,CAAA,OAAIqsB,CACFrsB,CAAAA,CAAAA,CAAM,KACJssB,EACA,CAAA,CAAA,EAAG+D,CAAY,CAAM9D,GAAAA,EAAAA,EAAe,GACpCkE,CACAlE,CAAAA,EACF,CAEAvsB,CAAAA,CAAAA,CAAM,KAAKqwB,CAAcI,CAAAA,CAAAA,CAAW,cAAc,CAAA,CAGhD54B,EAAO,MAAO,CAAA,aAAA,GAAkB,MAClCmI,EAAAA,CAAAA,CAAM,KAAKmJ,CAAS,CAAA,aAAA,CAAc,CAAE,IAAA,CAAMtR,EAAO,MAAO,CAAA,aAAc,CAAC,CAAC,EAGnE,CACLsR,CAAAA,CAAS,kBAAmB,CAAA,CAC1B,KAAM,CACJA,CAAAA,CAAS,gBAAiB,CAAA,CACxB,YAAa,CAAC,qBAAqB,EACnC,GAAK+mB,CAAAA,CACP,CAAC,CACH,CAAA,CACA,IAAM/mB,CAAAA,CAAAA,CAAS,yBAAyB,CACtC,UAAA,CAAYynB,CACZ,CAAA,IAAA,CAAMznB,EAAS,UAAW,CAAA,CAAE,IAAM4E,CAAAA,CAAAA,CAAU,MAAO,CAAC,CACtD,CAAC,CAAA,CACD,MAAA/N,CACF,CAAC,CACH,CACF,ECxfO,IAAM6wB,EAAAA,CAAiB,CAAC,CAC7B,KAAAlG,CACA,CAAA,QAAA,CAAAmG,CACA,CAAA,GAAGC,CACL,CAGQ,GAAA,CAEN,GAAI,CAACpG,CAAAA,CAMH,OAAO,CAAE,OAAA,CAAS,KAAO,CAAA,IAAA,CAAM,EAAG,CAGpC,CAAA,GAAM,CAAE,OAAA,CAAAqG,EAAS,IAAAp5B,CAAAA,CAAK,CAAI0zB,CAAAA,EAAAA,CAAkB,CAC1C,IAAAX,CAAAA,CAAAA,CACA,GAAGoG,CACL,CAAC,CACD,CAAA,OAAIn5B,CACFk5B,EAAAA,CAAAA,CAASl5B,CAAI,CAER,CAAA,CAAE,OAAAo5B,CAAAA,CAAAA,CAAS,KAAAp5B,CAAK,CACzB,CAEaq5B,CAAAA,EAAAA,CAAoCr5B,GAC/C,CAAGA,EAAAA,CAAI,2BAEIs5B,EAAyBt5B,CAAAA,CAAAA,EACpC,GAAGoV,CAAW,CAAA,CACZ,IAAM,CAAA,YAAA,CACN,MAAOpV,CACT,CAAC,CAAC,CAAA,IAAA,CAAA,CAESu5B,GAA0Bv5B,CACrC,EAAA,CAAA,EAAGoV,CAAW,CAAA,CACZ,KAAM,YACN,CAAA,KAAA,CAAOpV,CACT,CAAC,CAAC,CAGSw5B,KAAAA,CAAAA,CAAAA,EAAAA,CAAwCx5B,CACnD,EAAA,CAAA,EAAGA,CAAI,CAEIy5B,WAAAA,CAAAA,CAAAA,EAAAA,CAA6Bz5B,CACxC,EAAA,CAAA,EAAGoV,EAAW,CACZ,IAAA,CAAM,YACN,CAAA,KAAA,CAAOpV,CACT,CAAC,CAAC,WAMS05B,EAAmC,CAAA,CAAC,CAC/C,YAAAC,CAAAA,CAAAA,CACA,YAAA9B,CAAAA,CACF,IAGM,CACJ,IAAMC,CAAczlB,CAAAA,CAAAA,CAAU,oBAAoB,IAElD,CAAA,OAAIwlB,CACK,CAAA,CAAA,EAAGC,CAAW,CAAI6B,CAAAA,EAAAA,CAAAA,EAAgB,SAAS,CAAA,EAAA,EAAK9B,CAAY,CAE9D8B,CAAAA,CAAAA,CAAAA,CAAAA,CAAe,CAAG7B,EAAAA,CAAW,IAAI6B,CAAY,CAAA,CAAA,CAAA,CAAM7B,CAC5D,CAAA,CAEM8B,GAAuB,CAC3B95B,CAAAA,CACAqW,CACwB,GAAA,CACxB,IAAMtW,CAASM,CAAAA,CAAAA,GAET,CAAE,IAAA,CAAMw5B,CAAa,CAAIjG,CAAAA,EAAAA,CAAkB,CAC/C,MAAA,CAAA5zB,EACA,IAAM,CAAA,CAGJ,IAAMqW,CAAAA,CAAAA,CAAU,KAChB,IAAMA,CAAAA,CAAAA,CAAU,IAClB,CAAA,CACA,gBAAiBmjB,EACnB,CAAC,CAEKO,CAAAA,CAAAA,CAAajG,GAA6Bzd,CAAU,CAAA,UAAU,CAEpE,CAAA,GAAI,CAAC9V,CAAeR,CAAAA,CAAM,CACxB,CAAA,OAAO,CACL,CACE,UAAA,CAAAg6B,CACA,CAAA,IAAA,CAAM,UACN,IAAMH,CAAAA,EAAAA,CAAiC,CACrC,YAAAC,CAAAA,CAAAA,CACA,aAAc,cAChB,CAAC,CACH,CACF,EAGF,GAAI,CAACxjB,CAAU,CAAA,UAAA,CAAW,OACxB,OAAO,EAGT,CAAA,IAAM2jB,EACJC,CACuB,EAAA,CACvB,GAAIA,CAAAA,CAAE,UAAY,MAGlB,CAAA,OAAO,IAAK,CAAA,SAAA,CAAUA,EAAE,OAAS,CAAA,IAAA,CAAM,CAAC,CAC1C,EAGA,OAAKl6B,CAAAA,CAAO,UAaL,CAAA,CACL,CACE,OAASg6B,CAAAA,CAAAA,CAAa,MAAY,CAAA,GAClC,IAAM,CAAA,MAAA,CACN,IAAMF,CAAAA,CACR,CACF,CAlBSxjB,CAAAA,CAAAA,CAAU,UAAW,CAAA,GAAA,CAAK4jB,GAAM,CACrC,IAAMC,CAAW,CAAA,CAAA,EAAGL,CAAY,CAAKI,EAAAA,EAAAA,CAAAA,CAAE,IAAI,CAAA,EAAA,CAAA,CAC3C,OAAO,CACL,OAAA,CAASA,CAAG,EAAA,OAAA,CACZ,YACG,CAACA,CAAAA,CAAE,UAAc,EAAA,CAACD,EAAoBC,CAAC,CAAA,CAAI,GAAM,CAAA,EAAA,GAAQ,GAC5D,IAAMA,CAAAA,CAAAA,CAAE,KACR,IAAMC,CAAAA,CACR,CACF,CAAC,CAUL,CAEMC,CAAAA,EAAAA,CAAwB,CAACn6B,CAAgBqW,CAAAA,CAAAA,GAAyB,CACtE,IAAMtW,EAASM,CAAU,EAAA,CAErBmJ,CAAaiI,CAAAA,CAAAA,CAAS,SAAS,MAAM,CAAA,CASzC,GAPyB4E,CAAAA,CAAU,UAAU,MAAQqI,CAAAA,CAAAA,EACnDA,CAAS,CAAA,aAAA,CAAc,SAAS,SAAS,CAC3C,CAKqB,CAAA,MAAA,CAAQ,CAC3B,GAAM,CAAE,IAAMmb,CAAAA,CAAa,EAAIjG,EAAkB,CAAA,CAC/C,OAAA5zB,CACA,CAAA,IAAA,CAAM,CAGJ,IAAMqW,CAAAA,CAAAA,CAAU,IAChB,CAAA,IAAA,CAAMA,EAAU,IAClB,CAAA,CACA,eAAiBsjB,CAAAA,EACnB,CAAC,CACDnwB,CAAAA,CAAAA,CAAaiI,CAAS,CAAA,aAAA,CAAc,CAClC,KAAO,CAAA,CAACooB,CAAY,CACtB,CAAC,EACH,CAEA,OACE95B,CAAAA,CAAO,YACPA,CAAO,CAAA,OAAA,CAAQ,cAAc,CAAA,EAAG,OAAO,QAAa,GAAA,UAAA,GAEpDyJ,CAAaiI,CAAAA,CAAAA,CAAS,SAAS,WAAa,CAAA,CAACjI,CAAU,CAAC,CAAA,CAAA,CAGrCvJ,EAAgBF,CAAM,CAAA,CAC1B,IAAS,GAAA,gBAAA,CACxByJ,EAAaiI,CAAS,CAAA,QAAA,CAAS,YAAc,CAAA,CAACjI,CAAU,CAAC,CAAA,CAEzDA,CAAaiI,CAAAA,CAAAA,CAAS,SAAS,mBAAqB,CAAA,CAACjI,CAAU,CAAC,EAG3DA,CACT,CAAA,CAEM4wB,EAAsB/jB,CAAAA,CAAAA,EAAmC,CAC7D,IAAMtW,CAAAA,CAASM,CAAU,EAAA,CAEzB,GAAI,CAACE,CAAAA,CAAeR,CAAM,CAAA,CAMxB,OALgB,CACdsW,CAAAA,CAAU,YAAc,aACxBA,CAAAA,CAAAA,CAAU,SAAW9S,CAAc8S,CAAAA,CAAAA,CAAU,OAAO,CAAA,CACpDA,EAAU,WAAe9S,EAAAA,CAAAA,CAAc8S,CAAU,CAAA,WAAW,CAC9D,CAIF,CAAA,IAAIgkB,CAAmB,CAAA,GAEnBhkB,CAAU,CAAA,UAAA,CAAW,MACnBtW,GAAAA,CAAAA,CAAO,WACTs6B,CAAS,CAAA,CACP,uCACA,CAAA,GAAGhkB,EAAU,UAAW,CAAA,GAAA,CACrBrO,CACC,EAAA,CAAA,YAAA,EAAeA,EAAU,IAAI,CAAA,CAAA,EAAIA,CAAU,CAAA,WAAA,CAAczE,EAAcyE,CAAU,CAAA,WAAW,EAAI,EAAE,CAAA,CACtG,CACF,CAEAqyB,CAAAA,CAAAA,CAAShkB,CAAU,CAAA,UAAA,CAAW,IAC3BrO,CACC,EAAA,CAAA,OAAA,EAAUA,CAAU,CAAA,IAAI,IAAIA,CAAU,CAAA,WAAA,CAAczE,CAAcyE,CAAAA,CAAAA,CAAU,WAAW,CAAI,CAAA,EAAE,CACjG,CAAA,CAAA,CAAA,CAIJ,IAAMsyB,CAAmBjkB,CAAAA,CAAAA,CAAU,SAAU,CAAA,MAAA,CAAQqI,GACnDA,CAAS,CAAA,aAAA,CAAc,QAAS,CAAA,SAAS,CAC3C,CAaA,CAAA,OAXgB,CACdrI,CAAAA,CAAU,YAAc,aACxBA,CAAAA,CAAAA,CAAU,SAAW9S,CAAc8S,CAAAA,CAAAA,CAAU,OAAO,CACpDA,CAAAA,CAAAA,CAAU,WAAe9S,EAAAA,CAAAA,CAAc8S,EAAU,WAAW,CAAA,CAC5D,GAAGgkB,CAAAA,CACH,GAAGC,CAAiB,CAAA,GAAA,CACjB5b,CACC,EAAA,CAAA,SAAA,EAAYA,EAAS,IAAI,CAAA,CAAA,EAAIA,CAAS,CAAA,WAAA,CAAcnb,EAAcmb,CAAS,CAAA,WAAW,CAAI,CAAA,EAAE,EAChG,CACA,CAAA,kBACF,CAEF,CAAA,CAEM6b,GAAmB,CAAC,CACxB,MAAAv6B,CAAAA,CAAAA,CACA,eAAAw6B,CACA,CAAA,QAAA,CAAApB,EACA,SAAA/iB,CAAAA,CACF,IAKM,CACJ,IAAMtW,CAASM,CAAAA,CAAAA,GAETH,CAAOy5B,CAAAA,EAAAA,CAA0BtjB,CAAU,CAAA,IAAI,EAC/C,CAAE,IAAA,CAAMokB,CAAwB,CAAA,CAAI7G,GAAkB,CAC1D,MAAA,CAAA5zB,CACA,CAAA,IAAA,CAAM,CACJ,IAAM,CAAA,CAAA,aAAA,EAAgBE,CAAI,CAAA,CAAA,CAC1B,KAAAA,CACF,CAAA,CACA,eAAiBw5B,CAAAA,EACnB,CAAC,CAMD,CAAA,GAJIe,CACFrB,EAAAA,CAAAA,CAASqB,CAAuB,CAG9B,CAAA,CAACl6B,EAAeR,CAAM,CAAA,CAAG,CAC3B,IAAIiK,CAAAA,CAAqB,CACvB,CACE,OAAQ,SACV,CACF,CAKM2kB,CAAAA,CAAAA,CAHiBtY,EAAU,UAAW,CAAA,MAAA,CACzCrO,CAAcA,EAAAA,CAAAA,CAAU,KAAO,MAAUA,EAAAA,CAAAA,CAAU,EAAO,GAAA,UAC7D,EAEG,GACEA,CAAAA,CAAAA,EACCA,CAAU,CAAA,SAAA,GACTA,EAAU,EAAO,GAAA,UAAA,CAAa,qBAAwB,CAAA,MAAA,CAC3D,EACC,MAAO,CAAA,OAAO,CACd,CAAA,MAAA,CAAO8pB,EAAM,CAChB,CAAA,OAAInD,EAAS,MAAW,GAAA,CAAA,GAClBA,EAAS,CAAC,CAAA,GAAM,qBAClB3kB,GAAAA,CAAAA,CAAM,CACJ,GAAGA,CAAAA,CACH,CACE,MAAA,CAAQ,wBACV,CACA,CAAA,CACE,GAAK,CAAA,SAAA,CACL,MAAO,CACL,CAEE,GAAK,CAAA,cAAA,CACL,MAAO,IACT,CAAA,CACA,CACE,MAAA,CAAQ,kBACV,CACF,CACF,CACF,CAAA,CACAwwB,IAAiB,wBAAwB,CAAA,CAAA,CAGvC7L,CAAS,CAAA,CAAC,IAAM,mCAClB3kB,GAAAA,CAAAA,CAAM,CACJ,GAAGA,CAAAA,CACH,CACE,MAAQ,CAAA,+BACV,CACA,CAAA,CACE,IAAK,SACL,CAAA,KAAA,CAAO,CACL,CACE,IAAK,cACL,CAAA,KAAA,CAAO2kB,CAAS,CAAA,CAAC,CACnB,CACA,CAAA,CACE,MAAQ,CAAA,kBACV,CACF,CACF,CACF,CACA6L,CAAAA,CAAAA,GAAiB,+BAA+B,CAQpDxwB,CAAAA,CAAAA,CAAAA,CAAAA,CAAM,CACJ,GAAGA,EACH,CACE,GAAA,CAAK,KACL,CAAA,KAAA,CAAOqM,EAAU,IACnB,CACF,EAEIokB,CACFzwB,GAAAA,CAAAA,CAAM,CACJ,GAAGA,CAAAA,CACH,CACE,GAAA,CAAK,sBACL,KAAOywB,CAAAA,CACT,CACF,CAAA,CAAA,CAGKhpB,EAAS,gBAAiB,CAAA,CAC/B,WAAa,CAAA,CAAC,qBAAqB,CACnC,CAAA,GAAA,CAAAzH,CACF,CAAC,CACH,CAEA,IAAM0wB,CAAS3yB,CAAAA,CAAAA,EACbA,EAAW,MACT,CAAA,CAAC4yB,CAAMC,CAAAA,CAAAA,GAAS,CACd,IAAM74B,CAAAA,CAAM64B,CAAK,CAAA,IAAA,CACX54B,EAAQjC,CAAO,CAAA,UAAA,CAAa,QAAQ66B,CAAK,CAAA,IAAI,GAAKA,CAAK,CAAA,IAAA,CAC7D,OAAI74B,CAAAA,GAAQC,EACV24B,CAAK54B,CAAAA,CAAG,CAAIA,CAAAA,CAAAA,CACHsB,GAAWtB,CAAG,CAAA,GAAMA,CAC7B44B,CAAAA,CAAAA,CAAK54B,CAAG,CAAIC,CAAAA,CAAAA,CAEZ24B,CAAK,CAAA,CAAA,CAAA,EAAI54B,CAAG,CAAG,CAAA,CAAA,CAAA,CAAIC,CAEd24B,CAAAA,CACT,EACA,EACF,CAEI3wB,CAAAA,CAAAA,CAA2B,CAC/B,MAAQqM,CAAAA,CAAAA,CAAU,MAClB,CAAA,GAAA,CAAKA,EAAU,IACjB,CAAA,CAEIA,EAAU,cAAe,CAAA,MAAA,GAC3BrM,EAAI,IAAO0wB,CAAAA,CAAAA,CAAMrkB,CAAU,CAAA,cAAc,GAGvCA,CAAU,CAAA,gBAAA,CAAiB,MAC7BrM,GAAAA,CAAAA,CAAI,QAAU0wB,CAAMrkB,CAAAA,CAAAA,CAAU,gBAAgB,CAAA,CAAA,CAG5CA,EAAU,gBAAiB,CAAA,MAAA,GAC7BrM,CAAI,CAAA,OAAA,CAAU0wB,EAAMrkB,CAAU,CAAA,gBAAgB,CAG5CA,CAAAA,CAAAA,CAAAA,CAAU,gBAAgB,MAC5BrM,GAAAA,CAAAA,CAAI,KAAQ0wB,CAAAA,CAAAA,CAAMrkB,EAAU,eAAe,CAAA,CAAA,CAGzCA,CAAU,CAAA,cAAA,CAAe,SAC3BrM,CAAI,CAAA,QAAA,CAAW0wB,EAAMrkB,CAAU,CAAA,cAAc,GAG3CA,CAAU,CAAA,cAAA,GACRA,CAAU,CAAA,cAAA,CAAe,KAAO,UAC9BtW,GAAAA,CAAAA,CAAO,UACTiK,CAAAA,CAAAA,CAAI,SAAW,CAAQqM,KAAAA,EAAAA,CAAAA,CAAU,cAAe,CAAA,IAAI,GAEpDrM,CAAI,CAAA,QAAA,CAAWqM,CAAU,CAAA,cAAA,CAAe,MAGxCA,CAAU,CAAA,cAAA,CAAe,EAAO,GAAA,MAAA,GAC9BtW,EAAO,UACTiK,CAAAA,CAAAA,CAAI,IAAO,CAAA,CAAA,KAAA,EAAQqM,EAAU,cAAe,CAAA,IAAI,CAEhDrM,CAAAA,CAAAA,CAAAA,CAAI,KAAOqM,CAAU,CAAA,cAAA,CAAe,OAKtCA,CAAU,CAAA,cAAA,EAAgB,YAC5BrM,CAAI,CAAA,SAAA,CAAYqM,CAAU,CAAA,cAAA,EAAgB,WAGxCA,CAAU,CAAA,cAAA,GACZrM,CAAI,CAAA,cAAA,CAAiBqM,EAAU,cAG7BokB,CAAAA,CAAAA,CAAAA,GACFzwB,CAAI,CAAA,mBAAA,CAAsBywB,GAG5B,IAAMI,CAAAA,CAAiBxkB,CAAU,CAAA,SAAA,CAAU,OAAQqI,CACjDA,EAAAA,CAAAA,CAAS,aAAc,CAAA,QAAA,CAAS,OAAO,CACzC,CAAA,CACA,GAAImc,CAAAA,CAAe,OAAS,CAAG,CAAA,CAC7B,IAAMtc,CAAAA,CAA0C,EAChDsc,CAAAA,CAAAA,CAAe,OAASnc,CAAAA,CAAAA,EAAa,CACnCH,CAAOG,CAAAA,CAAAA,CAAS,IAAI,CAAA,CAAIA,EAAS,WAAe,EAAA,GAClD,CAAC,CAAA,CACD1U,EAAI,MAASuU,CAAAA,EACf,CAEA,OAAO9M,EAAS,gBAAiB,CAAA,CAC/B,WAAa,CAAA,CACX,OACA,SACA,CAAA,UAAA,CACA,SACA,CAAA,MAAA,CACA,QACA,qBACF,CAAA,CACA,GAAAzH,CAAAA,CAAAA,CACA,UAAW,IACb,CAAC,CACH,CAAA,CAEa8wB,GAA4B,CAAC,CACxC,OAAA/6B,CACA,CAAA,aAAA,CAAAg7B,EACA,EAAAplB,CAAAA,CAAAA,CACA,SAAAU,CAAAA,CACF,IAMMtW,CAAO,CAAA,OAAA,CAAQ,cAAc,CAAA,EAAG,OAAO,iBAClCA,CAAAA,CAAAA,CAAO,OAAQ,CAAA,cAAc,EAAE,MAAO,CAAA,iBAAA,CAAkBsW,CAAS,CAAA,CAGtE0kB,GAAiBplB,CAAG,CAAA,KAAA,CAAM1S,EAAgC,CAAA,CACrD,GAAG0S,CAAE,CAAA,CAAA,CAAA,CAGPA,CAGHqlB,CAAAA,EAAAA,CAAwB,CAAC,CAC7B,MAAA,CAAAh7B,CACA,CAAA,cAAA,CAAAw6B,EACA,QAAApB,CAAAA,CAAAA,CACA,UAAA/iB,CACF,CAAA,GAKM,CACJ,IAAMtW,CAAAA,CAASM,CAAU,EAAA,CAEnB6Z,EAAUqgB,EAAiB,CAAA,CAC/B,MAAAv6B,CAAAA,CAAAA,CACA,eAAAw6B,CACA,CAAA,QAAA,CAAApB,CACA,CAAA,SAAA,CAAA/iB,CACF,CAAC,CAAA,CAED,GAAI,CAAC9V,EAAeR,CAAM,CAAA,CAAG,CAC3B,IAAMg5B,EAAYnF,EAAkB,CAAA,CAClC,MAAA5zB,CAAAA,CAAAA,CACA,KAAM,CAGJ,IAAA,CAAMqW,CAAU,CAAA,IAAA,CAChB,KAAMA,CAAU,CAAA,IAClB,EACA,eAAiBojB,CAAAA,EACnB,CAAC,CAAE,CAAA,IAAA,CAIGd,CAHmBtiB,CAAAA,CAAAA,CAAU,UAAU,MAAQqI,CAAAA,CAAAA,EACnDA,CAAS,CAAA,aAAA,CAAc,SAAS,SAAS,CAC3C,CACsC,CAAA,MAAA,CAClCkV,GAAkB,CAChB,MAAA,CAAA5zB,CACA,CAAA,IAAA,CAAM,CAGJ,IAAMqW,CAAAA,CAAAA,CAAU,IAChB,CAAA,IAAA,CAAMA,EAAU,IAClB,CAAA,CACA,eAAiBsjB,CAAAA,EACnB,CAAC,CAAE,CAAA,IAAA,CACH,MACJ,CAAA,OAAO,CACLloB,CAAS,CAAA,kBAAA,CAAmB,CAC1B,IAAM,CAAA,CAACyI,CAAO,CACd,CAAA,IAAA,CAAM,CAA+B7D,4BAAAA,EAAAA,CAAAA,CAAU,OAAO,iBAAkB,EAAC,CACzE,CAAA,CAAA,KAAA,CACE0iB,GAAaJ,CACT,CAAA,CAACA,CAAcI,CAAAA,CAAAA,CAAW,cAAc,CACxCA,CAAAA,CAAAA,CACE,CAAC,SAAA,CAAWA,EAAW,cAAc,CAAA,CACrCJ,CACE,CAAA,CAACA,EAAc,SAAW,CAAA,cAAc,CACxC,CAAA,EACZ,CAAC,CACH,CACF,CAEA,OAAIn4B,EAAqBT,CAAAA,CAAM,EACtB,CACL0R,CAAAA,CAAS,mBAAmB,CAC1B,IAAA,CAAM,CAACyI,CAAO,EACd,IAAM,CAAA,0BACR,CAAC,CACH,EAGmBja,CAAgBF,CAAAA,CAAM,CAC1B,CAAA,IAAA,GAAS,iBACjB,CACL0R,CAAAA,CAAS,kBAAmB,CAAA,CAC1B,KAAM,CAAC,SAAA,CAAW,WAAayI,CAAAA,CAAO,EACtC,IAAM,CAAA,WACR,CAAC,CACH,EAGK,CACLzI,CAAAA,CAAS,kBAAmB,CAAA,CAC1B,KAAM,CAAC,SAAA,CAAWyI,CAAO,CACzB,CAAA,IAAA,CAAM,WACR,CAAC,CACH,CACF,CAAA,CAEM+gB,GAAiB,CAAC,CACtB,MAAAj7B,CAAAA,CAAAA,CACA,eAAAw6B,CACA,CAAA,QAAA,CAAApB,CACA,CAAA,MAAA,CAAA8B,EACA,OAAAC,CAAAA,CACF,CAMM,GAAA,CACJ,IAAMp7B,CAASM,CAAAA,CAAAA,EAET+6B,CAAAA,CAAAA,CAAen7B,EAAgBF,CAAM,CAAA,CACrC0zB,CAAWlzB,CAAAA,CAAAA,CAAeR,CAAM,CAEtC,CAAA,IAAA,IAAWsW,CAAa8kB,IAAAA,CAAAA,CAAQ,WAC1B9kB,CAAU,CAAA,UAAA,CAAW,QACvB8iB,EAAe,CAAA,CACb,OAAAn5B,CACA,CAAA,IAAA,CAAM,CAGJ,IAAA,CAAMqW,EAAU,IAChB,CAAA,IAAA,CAAMA,CAAU,CAAA,IAClB,EACA,eAAiBmjB,CAAAA,EAAAA,CACjB,QAAAJ,CAAAA,CACF,CAAC,CAGE3F,CAAAA,CAAAA,EACH0F,EAAe,CAAA,CACb,OAAAn5B,CACA,CAAA,IAAA,CAAM,CAGJ,IAAA,CAAMqW,EAAU,IAChB,CAAA,IAAA,CAAMA,CAAU,CAAA,IAClB,EACA,eAAiBojB,CAAAA,EAAAA,CACjB,QAAAL,CAAAA,CACF,CAAC,CAGsB/iB,CAAAA,CAAAA,CAAU,UAAU,MAAQqI,CAAAA,CAAAA,EACnDA,EAAS,aAAc,CAAA,QAAA,CAAS,SAAS,CAC3C,EACqB,MACnBya,EAAAA,EAAAA,CAAe,CACb,MAAA,CAAAn5B,EACA,IAAM,CAAA,CAGJ,IAAMqW,CAAAA,CAAAA,CAAU,KAChB,IAAMA,CAAAA,CAAAA,CAAU,IAClB,CAAA,CACA,gBAAiBsjB,EACjB,CAAA,QAAA,CAAAP,CACF,CAAC,EAIL,IAAMiC,CAAAA,CAAiD,CACrD,OAAA,CAAA,CACG,iBAAkBD,CAAa,CAAA,MAAA,CAC5BA,CAAa,CAAA,MAAA,CAAO,aACpB,KAAU,GAAA,KAAA,CAChB,QAAS,SACT,CAAA,IAAA,CAAM,cACR,CAEA,CAAA,GACE,CAACr7B,CAAAA,CAAO,QAAQ,cAAc,CAAA,EAAG,MAAO,CAAA,OAAA,EACxC,CAACS,EAAqBT,CAAAA,CAAM,CAC5B,CAAA,CACA,QAAWsW,CAAa8kB,IAAAA,CAAAA,CAAQ,UAAY,CAAA,CAC1C,IAAMG,CAAwB,CAAA,CAC5B,UAAYxB,CAAAA,EAAAA,CAAqB95B,EAAQqW,CAAS,CAAA,CAClD,UAAaod,CAAAA,CAAAA,CAET0G,GAAsBn6B,CAAQqW,CAAAA,CAAS,CADvC,CAAA,MAAA,CAEJ,WAAY2kB,EAAsB,CAAA,CAChC,OAAAh7B,CACA,CAAA,cAAA,CAAAw6B,EACA,QAAApB,CAAAA,CAAAA,CACA,SAAA/iB,CAAAA,CACF,CAAC,CACD,CAAA,KAAA,CAAQod,CAAuC,CAAA,MAAA,CAA5B,CAAC4H,CAAuB,CAC7C,CACMp0B,CAAAA,CAAAA,CACJm0B,EAAa,IAAS,GAAA,gBAAA,CAClB3pB,CAAS,CAAA,iBAAA,CAAkB6pB,CAAqB,CAChD7pB,CAAAA,CAAAA,CAAS,aAAc6pB,CAAAA,CAAqB,EAC5CvvB,CAAY0F,CAAAA,CAAAA,CAAS,aAAc,CAAA,CACvC,QAAS2oB,EAAmB/jB,CAAAA,CAAS,CACrC,CAAA,WAAA,CAAa,KACb,UAAApP,CAAAA,CAAAA,CACA,KAAM6zB,EAA0B,CAAA,CAC9B,OAAA/6B,CACA,CAAA,aAAA,CAAe,IACf,CAAA,EAAA,CAAIsW,EAAU,IACd,CAAA,SAAA,CAAAA,CACF,CAAC,CACH,CAAC,CAAA,CACD6kB,CAAOnvB,CAAAA,CAAS,EAClB,CACA,MACF,CAEA,IAAIjD,EAA6BqyB,CAAQ,CAAA,UAAA,CAAW,GAAK9kB,CAAAA,CAAAA,EAC1C5E,EAAS,iBAAkB,CAAA,CACtC,WAAa,CAAA,QAAA,CACb,QAAS2oB,EAAmB/jB,CAAAA,CAAS,CACrC,CAAA,QAAA,CACE7V,GAAqBT,CAAM,CAAA,GAAM,QACjCq7B,CAAa,CAAA,IAAA,GAAS,iBACxB,IAAMN,CAAAA,EAAAA,CAA0B,CAC9B,MAAA,CAAA/6B,EACA,EAAIsW,CAAAA,CAAAA,CAAU,IACd,CAAA,SAAA,CAAAA,CACF,CAAC,CAAA,CACD,UAAYyjB,CAAAA,EAAAA,CAAqB95B,EAAQqW,CAAS,CAAA,CAClD,UAAaod,CAAAA,CAAAA,CAET0G,GAAsBn6B,CAAQqW,CAAAA,CAAS,CADvC,CAAA,MAAA,CAEJ,WAAY2kB,EAAsB,CAAA,CAChC,MAAAh7B,CAAAA,CAAAA,CACA,eAAAw6B,CACA,CAAA,QAAA,CAAApB,CACA,CAAA,SAAA,CAAA/iB,CACF,CAAC,CAAA,CACD,MAAQod,CAAuC,CAAA,MAAA,CAA5B,CAAC4H,CAAuB,CAC7C,CAAC,CAEF,EAED,GAAI,CAACvyB,CAAQ,CAAA,MAAA,CACX,OAIEtI,EAAqBT,CAAAA,CAAM,CAC7B+I,CAAAA,CAAAA,CAAU,CACR2I,CAAS,CAAA,sBAAA,CAAuB,CAC9B,SAAA,CAAW,MACX,UAAY,CAAA,CACV,CACE,WAAA,CAAa,SACb,UAAY,CAAA,IAAA,CACZ,IAAM,CAAA,aAAA,CACN,KAAM,iBACR,CACF,CACF,CAAC,EACD,GAAG3I,CACL,EACSsyB,CAAa,CAAA,IAAA,GAAS,mBAC/BtyB,CAAU,CAAA,CACR2I,CAAS,CAAA,sBAAA,CAAuB,CAC9B,SAAW,CAAA,KAAA,CACX,UAAY,CAAA,CACV,CACE,WAAa,CAAA,QAAA,CACb,UAAY,CAAA,IAAA,CACZ,KAAM,MACN,CAAA,IAAA,CAAM,YACR,CACF,CACF,CAAC,CAAA,CACD,GAAG3I,CACL,GAGF,IAAMyyB,CAAAA,CAAmC,EAAC,CAC1CzyB,EAAQ,OAAQ,CAAA,CAAC0yB,CAAQr1B,CAAAA,CAAAA,GAAU,CAE7BA,CAEFo1B,EAAAA,CAAAA,CAAS,KAAK9pB,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA;AAAA,CAAK,CAAC,CAAC,CAGnD8pB,CAAAA,CAAAA,CAAS,KAAKC,CAAM,EACtB,CAAC,CAED,CAAA,IAAMzvB,EAAY0F,CAAS,CAAA,gBAAA,CAAiB,CAC1C,SACE2pB,CAAAA,CAAAA,CAAa,OAAS,gBAClB,CAAA,CAAE,IAAM,CAAA,CAAC,CAAE,UAAA,CAAY,MAAO,CAAC,CAAA,CAAG,KAAM,YAAa,CAAA,CACrD,OACN,WAAa,CAAA,IAAA,CACb,IAAM1J,CAAAA,EAAAA,CAAmB,CACvB,MAAA,CAAA3xB,EACA,IAAMo7B,CAAAA,CAAAA,CAAQ,IAChB,CAAC,CAAA,CACD,MAAOI,CACT,CAAC,CACDL,CAAAA,CAAAA,CAAOnvB,CAAS,EAClB,EAEaqoB,EAAkD,CAAA,CAAC,CAC9D,MAAAp0B,CAAAA,CAAAA,CACA,MAAAq0B,CACA,CAAA,MAAA,CAAAl0B,CACF,CAAM,GAAA,CACJ,IAAMJ,CAASM,CAAAA,CAAAA,GAETozB,CAAWlzB,CAAAA,CAAAA,CAAeR,CAAM,CAEhCu4B,CAAAA,CAAAA,CAAY,KAUlB,CAAA,GARAjE,CAAM,CAAA,GAAA,CAAM,IAAIzb,EAAe,CAAA,CAC7B,IAAK7Y,CAAO,CAAA,MAAA,CAAO,KACnB,eAAiBI,CAAAA,CAAAA,CAAO,MAAO,CAAA,eAAA,CAC/B,EAAI,CAAA,KAAA,CACJ,KAAM,CAAGm4B,EAAAA,CAAS,KACpB,CAAC,CAAA,CAGG,CAAC7E,CACHY,CAAAA,CAAAA,CAAM,GAAI,CAAA,MAAA,CAAO,CACf,MAAA,CAAQjiB,EAAiB,CAAE,MAAA,CAAArS,EAAQ,YAAcu4B,CAAAA,CAAU,CAAC,CAC5D,CAAA,IAAA,CAAM,cACR,CAAC,CAAA,CACDjE,EAAM,GAAI,CAAA,MAAA,CAAO,CACf,MAAQjiB,CAAAA,CAAAA,CAAiB,CAAE,MAAArS,CAAAA,CAAAA,CAAQ,YAAcu4B,CAAAA,CAAU,CAAC,CAAA,CAC5D,KAAM,cACR,CAAC,EACDjE,CAAM,CAAA,GAAA,CAAI,OAAO,CACf,GAAG9hB,CAAU,CAAA,mBAAA,CACb,MAAQH,CAAAA,CAAAA,CAAiB,CAAE,MAAArS,CAAAA,CAAAA,CAAQ,aAAcu4B,CAAU,CAAC,CAC9D,CAAC,CAAA,CAAA,KAAA,GAEoBr4B,CAAgBF,CAAAA,CAAM,CAC1B,CAAA,IAAA,GAAS,kBACxBs0B,CAAM,CAAA,GAAA,CAAI,OAAO,CACf,MAAA,CAAQ,gBACR,IAAM,CAAA,YACR,CAAC,CAAA,CAEI7zB,EAAqBT,CAAAA,CAAM,GAC9Bs0B,CAAM,CAAA,GAAA,CAAI,OAAO,CACf,MAAA,CAAQ,uBACR,IAAM,CAAA,YACR,CAAC,CAAA,CAGHA,CAAM,CAAA,GAAA,CAAI,OAAO,CACf,MAAA,CAAQ,KACR,MAAQ,CAAA,MAAA,CACR,KAAM,YACR,CAAC,CAEDA,EAAAA,CAAAA,CAAM,GAAI,CAAA,MAAA,CAAO,CACf,MAAQ,CAAA,IAAA,CACR,OAAQ,0BACR,CAAA,IAAA,CAAM,mBACR,CAAC,CAAA,CAGCt0B,CAAO,CAAA,OAAA,CAAQ,cAAc,CAAA,EAAG,OAAO,QAAa,GAAA,UAAA,EACtDs0B,EAAM,GAAI,CAAA,MAAA,CAAO,CACf,MAAQ,CAAA,IAAA,CACR,OAAQ,kBACR,CAAA,IAAA,CAAM,WACR,CAAC,CAAA,CAGC7zB,GAAqBT,CAAM,CAAA,CAAG,CAChC,IAAMq7B,CAAAA,CAAen7B,CAAgBF,CAAAA,CAAM,CAC3Cs0B,CAAAA,CAAAA,CAAM,IAAI,MAAO,CAAA,CACf,OAAQ+G,CAAa,CAAA,IAAA,GAAS,iBAC9B,MAAQ,CAAA,wBAAA,CACR,IAAM,CAAA,iBACR,CAAC,EACH,MACE/G,CAAM,CAAA,GAAA,CAAI,OAAO,CACf,MAAA,CAAQ,iBACR,IAAM,CAAA,SACR,CAAC,CAAA,CACDA,CAAM,CAAA,GAAA,CAAI,OAAO,CACf,KAAA,CAAO,YACP,MAAQ,CAAA,gBAAA,CACR,KAAM,SACR,CAAC,CAKL,CAAA,GAAI,CAACZ,CAAAA,CAAU,CACb,IAAM2H,CAAAA,CAAen7B,EAAgBF,CAAM,CAAA,CACrCgM,EAAY0F,CAAS,CAAA,aAAA,CAAc,CACvC,WAAA,CAAa,IACb,CAAA,UAAA,CAAYA,EAAS,cAAe,CAAA,CAClC,aAAc,cACd,CAAA,UAAA,CAAY,CACVA,CAAS,CAAA,cAAA,CAAe,CACtB,YAAA,CAAc,cACd,CAAA,UAAA,CAAY,CACV,cAAkB2pB,GAAAA,CAAAA,EAAgBA,EAAa,YAC3C3pB,CAAAA,CAAAA,CAAS,iBAAiB,CACxB,GAAA,CAAK,CACH,CACE,GAAK,CAAA,cAAA,CACL,MAAO,IACT,CACF,CACF,CAAC,CAAA,CACD,MACN,CACF,CAAC,CACH,CACF,CAAC,EACD,IAAM,CAAA,QACR,CAAC,CACD4iB,CAAAA,CAAAA,CAAM,IAAI,GAAItoB,CAAAA,CAAS,EACzB,CAEA,IAAWovB,IAAAA,CAAAA,IAAWn7B,EAAO,QAC3Bi7B,CAAAA,EAAAA,CAAe,CACb,MAAAj7B,CAAAA,CAAAA,CACA,eAAiBy7B,CAAa,EAAA,CAC5BpH,CAAM,CAAA,GAAA,CAAK,MAAO,CAAA,CAChB,OAAQjiB,CAAiB,CAAA,CAAE,OAAArS,CAAQ,CAAA,YAAA,CAAcu4B,CAAU,CAAC,CAAA,CAC5D,IAAMmD,CAAAA,CACR,CAAC,EACH,EACA,QAAWA,CAAAA,CAAAA,EAAa,CACtBpH,CAAM,CAAA,GAAA,CAAK,OAAO,CAEhB,MAAA,CAAQ,CAACoH,CAAAA,CAAS,QAAS,CAAA,aAAa,EACxC,MAAQ,CAAA,CAAA,EAAA,EAAKpH,EAAM,KAAO,CAAA,oBAAA,EAAsB,CAChD,CAAA,CAAA,IAAA,CAAMoH,CACR,CAAC,EACH,CAAA,CACA,OAASr3B,CAAS,EAAA,CAChBiwB,EAAM,GAAK,CAAA,GAAA,CAAIjwB,CAAI,EACrB,CAAA,CACA,OAAA+2B,CAAAA,CACF,CAAC,EAEL,ECt6BO,IAAMO,EAAAA,CAAoB,CAAC,CAChC,aAAA,CAAA7kB,EACA,OAAAV,CAAAA,CAAAA,CACA,MAAAhW,CAAAA,CACF,CAIM,GAAA,CACJ,IAAMiW,CAAOD,CAAAA,CAAAA,CAAQ,KAAK,CAAE,EAAA,CAAI4e,EAAM,CAAC,CAAA,CAEjCJ,EADS10B,CAAgBkW,CAAAA,CAAAA,CAAQ,MAAM,CACjB,CAAA,IAAA,GAAS,uBAE/BQ,CAAevE,CAAAA,CAAAA,CAAiB,CACpC,MAAQ+D,CAAAA,CAAAA,CAAQ,MAChB,CAAA,YAAA,CAAcC,CAAK,CAAA,oBAAA,EACrB,CAAC,CAAA,CACKulB,EAAavlB,CAAK,CAAA,MAAA,CAAO,CAC7B,MAAQ,CAAA,IAAA,CACR,MAAQO,CAAAA,CAAAA,CACR,IAAM,CAAA,YACR,CAAC,CACKilB,CAAAA,CAAAA,CAAaxlB,EAAK,MAAO,CAAA,CAC7B,OAAQ,IACR,CAAA,MAAA,CAAQO,CACR,CAAA,IAAA,CAAM,QACR,CAAC,EAEKklB,CAAcpqB,CAAAA,CAAAA,CAAS,qBAAqB,CAChD,UAAA,CAAY,KACZ,IAAM,CAAA,SAAA,CACN,KAAMA,CAAS,CAAA,oBAAA,CAAqB,CAClC,KAAO,CAAA,CACLA,EAAS,iBAAkB,CAAA,CACzB,cAAekjB,CACX,CAAA,CACEljB,CAAS,CAAA,iBAAA,CAAkB,CAAE,QAAA,CAAU,aAAc,CAAC,CAAA,CACtDA,EAAS,iBAAkB,CAAA,CAAE,SAAU,OAAQ,CAAC,CAChDA,CAAAA,CAAAA,CAAS,iBAAkB,CAAA,CAAE,SAAUqjB,EAAiB,CAAC,EACzDrjB,CAAS,CAAA,iBAAA,CAAkB,CAAE,QAAUojB,CAAAA,EAAgB,CAAC,CAC1D,CACA,CAAA,CACEpjB,EAAS,iBAAkB,CAAA,CAAE,SAAU,OAAQ,CAAC,EAChDA,CAAS,CAAA,iBAAA,CAAkB,CAAE,QAAU,CAAA,cAAe,CAAC,CACzD,CAAA,CACJ,SAAUoF,CAAc,CAAA,IAC1B,CAAC,CACDpF,CAAAA,CAAAA,CAAS,iBAAkB,CAAA,CACzB,UAAY,CAAA,CACV,CACE,OAAS,CAAA,CACP,4EACA,0EACA,CAAA,gBACF,EACA,UAAY,CAAA,CAACtR,CAAO,CAAA,MAAA,CAAO,MAC3B,CAAA,IAAA,CAAM,SACN,IAAMsR,CAAAA,CAAAA,CAAS,kBAAkB,CAAE,QAAA,CAAUmqB,EAAW,IAAK,CAAC,CAChE,CAAA,CACA,CACE,OAAA,CAAS,CACP,sEACA,CAAA,wEACF,EACA,UAAY,CAAA,KAAA,CACZ,KAAM,MACN,CAAA,IAAA,CAAMnqB,CAAS,CAAA,iBAAA,CAAkB,CAC/B,aAAA,CAAe,CACbA,CAAS,CAAA,eAAA,CAAgB,CAAE,OAAS,CAAA,QAAS,CAAC,CAC9CA,CAAAA,CAAAA,CAAS,eAAgB,CAAA,CAAE,OAAS,CAAA,SAAU,CAAC,CACjD,CAAA,CACA,SAAU,QACZ,CAAC,CACH,CACF,CAAA,CACA,mBAAqB,CAAA,KACvB,CAAC,CACH,CACF,CAAC,CAAA,CACD,eAAgBkjB,CACZ,CAAA,CACEljB,EAAS,wBAAyB,CAAA,CAChC,UAAYA,CAAAA,CAAAA,CAAS,iBAAkB,CAAA,CAAE,SAAU,YAAa,CAAC,EACjE,IAAM,CAAA,aACR,CAAC,CACDA,CAAAA,CAAAA,CAAS,yBAAyB,CAChC,UAAA,CAAYA,EAAS,iBAAkB,CAAA,CACrC,SAAUkqB,CAAW,CAAA,IACvB,CAAC,CACD,CAAA,WAAA,CAAalqB,CAAS,CAAA,iBAAA,CAAkB,CACtC,QAAA,CAAUkqB,EAAW,IACvB,CAAC,EACD,IAAM,CAAA,OACR,CAAC,CACDlqB,CAAAA,CAAAA,CAAS,wBAAyB,CAAA,CAChC,WAAaA,CAAAA,CAAAA,CAAS,gBAAgB,CAAE,OAAA,CAAS,SAAU,CAAC,CAAA,CAC5D,KAAMqjB,EACR,CAAC,CACDrjB,CAAAA,CAAAA,CAAS,wBAAyB,CAAA,CAChC,YAAaA,CAAS,CAAA,eAAA,CAAgB,CAAE,OAAS,CAAA,WAAY,CAAC,CAC9D,CAAA,IAAA,CAAMojB,EACR,CAAC,CACH,CAAA,CACA,CACEpjB,CAAS,CAAA,wBAAA,CAAyB,CAChC,UAAYA,CAAAA,CAAAA,CAAS,kBAAkB,CACrC,QAAA,CAAUkqB,CAAW,CAAA,IACvB,CAAC,CAAA,CACD,YAAalqB,CAAS,CAAA,iBAAA,CAAkB,CACtC,QAAUkqB,CAAAA,CAAAA,CAAW,IACvB,CAAC,CAAA,CACD,IAAM,CAAA,OACR,CAAC,CAAA,CACDlqB,EAAS,wBAAyB,CAAA,CAChC,WAAYA,CAAS,CAAA,eAAA,CAAgB,CAAE,OAAS,CAAA,SAAU,CAAC,CAAA,CAC3D,WAAaA,CAAAA,CAAAA,CAAS,gBAAgB,CAAE,OAAA,CAAS,SAAU,CAAC,CAAA,CAC5D,KAAM,cACR,CAAC,CACH,CACN,CAAC,EAED2E,CAAK,CAAA,GAAA,CAAIylB,CAAW,EACtB,CAAA,CC7GA,IAAMC,EAAyB,CAAA,CAAC,CAC9B,MAAA,CAAA37B,CACF,CAAA,GAEsC,CACpC,IAAM47B,CAAAA,CAA4BtqB,EAAS,qBAAsB,CAAA,CAC/D,WAAYA,CAAS,CAAA,gBAAA,CAAiB,CACpC,IAAA,CAAMA,CAAS,CAAA,wBAAA,CAAyB,CACtC,UAAYA,CAAAA,CAAAA,CAAS,MACrB,CAAA,IAAA,CAAM,SACR,CAAC,CAAA,CACD,QAAU,CAAA,GAAA,CACV,KAAOA,CAAAA,CAAAA,CAAS,yBAAyB,CACvC,UAAA,CAAYA,EAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,CAChD,CAAA,IAAA,CAAM,QACR,CAAC,CACH,CAAC,CACH,CAAC,CAED,CAAA,OAAO,CACLA,CAAS,CAAA,mBAAA,CAAoB,CAC3B,WAAA,CAAatR,CAAO,CAAA,MAAA,CAAO,OACvBsR,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,eAAgB,CAAC,CAC7C,CAAA,MAAA,CACJ,QAAU,CAAA,WAAA,CACV,IAAM,CAAA,SAAA,CACN,KAAM7N,kBAAG,CAAA,OAAA,CAAQ,wBAAwB,QAAQ,CACnD,CAAC,CAED6N,CAAAA,CAAAA,CAAS,UAAW,CAAA,CAAE,IAAM,CAAA;AAAA,CAAK,CAAC,EAClCA,CAAS,CAAA,sBAAA,CAAuB,CAC9B,SAAW,CAAA,IAAA,CACX,WAAY,CACV,CACE,WAAY,CAACtR,CAAAA,CAAO,OAAO,MAC3B,CAAA,IAAA,CAAM,OACN,IAAMsR,CAAAA,CAAAA,CAAS,iBAAkB,CAAA,CAC/B,UAAY,CAAA,CACV,CACE,UAAY,CAAA,CAACtR,EAAO,MAAO,CAAA,MAAA,CAC3B,KAAM,QACN,CAAA,IAAA,CAAM,QACR,CACF,CAAA,CACA,oBAAqB,KACvB,CAAC,CACH,CACF,CAAA,CACA,WAAY,CACTA,CAAAA,CAAO,MAAO,CAAA,MAAA,CAEXsR,CAAS,CAAA,WAAA,CAAY,CACnB,UAAYA,CAAAA,CAAAA,CAAS,yBAAyB,CAC5C,UAAA,CAAYA,EAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,EAChD,UAAY,CAAA,IAAA,CACZ,KAAM,QACR,CAAC,EACD,aAAeA,CAAAA,CAAAA,CAAS,KAAM,CAAA,CAC5B,UAAY,CAAA,CAACsqB,CAAyB,CACxC,CAAC,CACH,CAAC,CAAA,CAVDA,CAWN,CACF,CAAC,CACH,CACF,CAAA,CAyBMC,GAAmB,CAAC,CACxB,OAAA77B,CACF,CAAA,GAEM,CACJ,IAAMH,CAAAA,CAASC,CAAgBE,CAAAA,CAAAA,CAAO,OAAQ,CAAA,MAAM,EAC9Cw0B,CAAe30B,CAAAA,CAAAA,CAAO,OAAS,sBAC/BoW,CAAAA,CAAAA,CAAOjW,EAAO,OAAQ,CAAA,IAAA,CAAK,CAAE,EAAI40B,CAAAA,EAAM,CAAC,CACxCkH,CAAAA,CAAAA,CAAa,IAAI,GAIjBC,CAAAA,CAAAA,CAAmB,IAAI,GAEvBC,CAAAA,CAAAA,CAAmBh8B,CAAO,CAAA,MAAA,CAAO,QACnC27B,CAAAA,EAAAA,CAAuB,CAAE,MAAA37B,CAAAA,CAAO,CAAC,CACjC,CAAA,GAEJA,CAAO,CAAA,OAAA,CAAQ,YAAa,CAAC,CAAE,UAAAkW,CAAU,CAAA,GAAM,CAC7C,IAAMgiB,CAAAA,CAAoB3D,GAA2B,CACnD,OAAA,CAASv0B,CAAO,CAAA,OAAA,CAChB,SAAAkW,CAAAA,CACF,CAAC,CACKogB,CAAAA,CAAAA,CAAqBvgB,GAAiB,CAC1C,OAAA,CAAS/V,EAAO,OAChB,CAAA,IAAA,CAAAiW,EACA,SAAAC,CAAAA,CAAAA,CACA,KAAM,UACR,CAAC,EAEK+lB,CAAU/E,CAAAA,EAAAA,CAAiB,CAC/B,OAASl3B,CAAAA,CAAAA,CAAO,OAChB,CAAA,SAAA,CAAAkW,CACA,CAAA,MAAA,CAAAlW,CACF,CAAC,CAAA,CAED,QAAWkgB,CAAS+b,IAAAA,CAAAA,CAAQ,QAC1B/b,CAAAA,CAAAA,CAAM,KAAK,OAAQ,CAAA,CAACgc,EAAkBl2B,CAAU,GAAA,CACzC81B,EAAW,GAAII,CAAAA,CAAgB,GAClCJ,CAAW,CAAA,GAAA,CAAII,CAAkB,CAAA,CAC/B,SAAWA,CAAAA,CAAAA,CACX,QAAS,IAAI,GAAA,CACb,QAAS,IAAI,GAAA,CACb,MAAO,EAAC,CACR,KAAM,CAACl2B,CACT,CAAC,CAGH,CAAA,IAAMm2B,EAAkBjc,CAAM,CAAA,IAAA,CAAKla,EAAQ,CAAC,CAAA,CAC5C,GAAIm2B,CAAAA,CAAiB,CACnB,IAAMC,EAAcN,CAAW,CAAA,GAAA,CAAIK,CAAe,CAClDC,CAAAA,CAAAA,CAAY,QAAQ,GAAIF,CAAAA,CAAgB,EACxCJ,CAAW,CAAA,GAAA,CAAIK,EAAiBC,CAAW,EAC7C,CAIA,GAAI,EAFWlc,EAAM,IAAK,CAAA,MAAA,GAAWla,CAAQ,CAAA,CAAA,CAAA,CAG3C,OAGF,IAAMq2B,EAAeP,CAAW,CAAA,GAAA,CAAII,CAAgB,CAGpD,CAAA,GAAIG,EAAa,OAAQ,CAAA,GAAA,CAAInc,EAAM,UAAU,CAAA,CAC3C,OAGF,IAAMoc,CAAAA,CAAehrB,EAAS,iBAAkB,CAAA,CAC9C,YAAa,QACb,CAAA,OAAA,CAASgjB,EAAuB,CAAA,CAAE,SAAApe,CAAAA,CAAU,CAAC,CAC7C,CAAA,QAAA,CAAU,CAAClW,CAAO,CAAA,MAAA,CAAO,SACzB,IAAMkgB,CAAAA,CAAAA,CAAM,WACZ,UAAY,CAAA,CACV,CACE,UAAYgY,CAAAA,CAAAA,CACZ,KAAM,SACN,CAAA,IAAA,CAAMP,GAAqB,CACzB,OAAA,CAAS33B,CAAO,CAAA,OAAA,CAChB,IAAAiW,CAAAA,CAAAA,CACA,UAAAC,CACA,CAAA,YAAA,CAAcse,EAAe,MAAY,CAAA,cAC3C,CAAC,CACH,CACF,EACA,UAAY,CAAA,MAAA,CACZ,WAAYyD,EAAoB,CAAA,CAC9B,QAASj4B,CAAO,CAAA,OAAA,CAChB,kBAAAk4B,CACA,CAAA,SAAA,CAAAhiB,CACA,CAAA,MAAA,CAAAlW,CACF,CAAC,EACD,KAAOw0B,CAAAA,CAAAA,CACH,CACE,CAEE,OAAA,CAASljB,EAAS,QAAS,CAAA,YAAY,EACvC,IAAMmjB,CAAAA,EACR,EACA,CACE,OAAA,CAAS6B,EAAmB,IACxBhlB,CAAAA,CAAAA,CAAS,kBAAkB,CACzB,QAAA,CAAUglB,CAAmB,CAAA,IAC/B,CAAC,CAAA,CACDhlB,EAAS,QAAS,CAAA,WAAW,EACjC,OAASglB,CAAAA,CAAAA,CAAmB,KACxBhlB,CAAS,CAAA,iBAAA,CAAkB,CACzB,QAAUglB,CAAAA,CAAAA,CAAmB,IAC/B,CAAC,CAAA,CACD,OACJ,IAAM5B,CAAAA,EACR,CACF,CACA,CAAA,CACE,CACE,OAAA,CAAA,CACG,cAAkB70B,GAAAA,CAAAA,CAAO,OACtBA,CAAO,CAAA,MAAA,CAAO,aACd,KAAU,GAAA,KAAA,CAChB,QAAS,SACT,CAAA,IAAA,CAAM,cACR,CACF,CACN,CAAC,CAEIw8B,CAAAA,CAAAA,CAAa,MAAM,MAGtBA,CAAAA,CAAAA,CAAa,MAAM,IAEjB/qB,CAAAA,CAAAA,CAAS,UAAW,CAAA,CAAE,IAAM,CAAA;AAAA,CAAK,CAAC,CAClCgrB,CAAAA,CACF,EANAD,CAAa,CAAA,KAAA,CAAM,KAAKC,CAAY,CAAA,CAStCD,EAAa,OAAQ,CAAA,GAAA,CAAInc,EAAM,UAAU,CAAA,CAEzC4b,EAAW,GAAII,CAAAA,CAAAA,CAAkBG,CAAY,EAC/C,CAAC,EAEL,CAAC,EAED,IAAME,CAAAA,CAAiBF,GAAgC,CACrD,GAAIN,EAAiB,GAAIM,CAAAA,CAAAA,CAAa,SAAS,CAC7C,CAAA,OAGF,GAAIA,CAAa,CAAA,OAAA,CAAQ,KACvB,IAAWG,IAAAA,CAAAA,IAAkBH,EAAa,OAAS,CAAA,CACjD,IAAMI,CAAAA,CAAaX,EAAW,GAAIU,CAAAA,CAAc,EAChDD,CAAcE,CAAAA,CAAU,EAExBJ,CAAa,CAAA,KAAA,CAAM,KACjB/qB,CAAS,CAAA,mBAAA,CAAoB,CAC3B,WAAatR,CAAAA,CAAAA,CAAO,OAAO,QACvBsR,CAAAA,CAAAA,CAAS,cAAc,CACrB,cAAA,CAAgBtR,CAAO,CAAA,MAAA,CAAO,SAC1B,CACEsR,CAAAA,CAAS,iBAAiB,CACxB,SAAA,CAAW,MACX,GAAK,CAAA,CACH,CACE,GAAK,CAAA,QAAA,CACL,MAAOA,CAAS,CAAA,wBAAA,CAAyB,CACvC,UAAYA,CAAAA,CAAAA,CAAS,MACrB,CAAA,IAAA,CAAM,SACR,CAAC,CACH,CACF,CACF,CAAC,CACH,CAAA,CACA,EACJ,CAAA,UAAA,CAAYA,EAAS,UAAW,CAAA,CAC9B,KAAMmrB,CAAW,CAAA,SACnB,CAAC,CACH,CAAC,EACDnrB,CAAS,CAAA,UAAA,CAAW,CAAE,IAAA,CAAMmrB,EAAW,SAAU,CAAC,EACtD,QAAUz8B,CAAAA,CAAAA,CAAO,OAAO,QAAW,CAAA,MAAA,CAAY,SAC/C,IAAMmV,CAAAA,CAAAA,CAAW,CACf,IAAM,CAAA,WAAA,CACN,MAAOsnB,CAAW,CAAA,SACpB,CAAC,CACH,CAAC,CACH,EACF,CAGF,IAAMx4B,CAAAA,CAAOqN,EAAS,gBAAiB,CAAA,CACrC,YAAa+qB,CAAa,CAAA,IAAA,CAC1B,gBAAiBr8B,CAAO,CAAA,MAAA,CAAO,SAAW,CAAC,eAAe,EAAI,MAC9D,CAAA,IAAA,CAAMq8B,EAAa,SACnB,CAAA,KAAA,CAAOA,EAAa,KACtB,CAAC,EACDpmB,CAAK,CAAA,GAAA,CAAIhS,CAAI,CACb83B,CAAAA,CAAAA,CAAiB,IAAIM,CAAa,CAAA,SAAS,EAC7C,CAEA,CAAA,GAAIL,EAAiB,MAAQ,CAAA,CAC3B,IAAM/3B,CAAOqN,CAAAA,CAAAA,CAAS,iBAAiB,CACrC,WAAA,CAAa,KACb,CAAA,IAAA,CAAM,gBACN,KAAO0qB,CAAAA,CACT,CAAC,CACD/lB,CAAAA,CAAAA,CAAK,IAAIhS,CAAI,EACf,CAEA,IAAWy4B,IAAAA,CAAAA,IAAYZ,EAAW,MAAO,EAAA,CACvCS,EAAcG,CAAQ,EAE1B,EAEMC,EAAkB,CAAA,CAAC,CACvB,MAAA,CAAA38B,CACF,CAEM,GAAA,CACJ,IAAMH,CAASC,CAAAA,CAAAA,CAAgBE,EAAO,OAAQ,CAAA,MAAM,EAC9Cw0B,CAAe30B,CAAAA,CAAAA,CAAO,OAAS,sBAC/BoW,CAAAA,CAAAA,CAAOjW,EAAO,OAAQ,CAAA,IAAA,CAAK,CAAE,EAAI40B,CAAAA,EAAM,CAAC,CAAA,CAE9C50B,EAAO,OAAQ,CAAA,WAAA,CAAa,CAAC,CAAE,SAAA,CAAAkW,CAAU,CAAM,GAAA,CAC7C,IAAMgiB,CAAoB3D,CAAAA,EAAAA,CAA2B,CACnD,OAASv0B,CAAAA,CAAAA,CAAO,QAChB,SAAAkW,CAAAA,CACF,CAAC,CACKogB,CAAAA,CAAAA,CAAqBvgB,GAAiB,CAC1C,OAAA,CAAS/V,EAAO,OAChB,CAAA,IAAA,CAAAiW,EACA,SAAAC,CAAAA,CAAAA,CACA,KAAM,UACR,CAAC,EACKjS,CAAOqN,CAAAA,CAAAA,CAAS,cAAc,CAClC,OAAA,CAASgjB,GAAuB,CAAE,SAAA,CAAApe,CAAU,CAAC,CAAA,CAC7C,WAAa,CAAA,IAAA,CACb,WAAY5E,CAAS,CAAA,aAAA,CAAc,CACjC,UAAY,CAAA,CACV,CACE,UAAY4mB,CAAAA,CAAAA,CACZ,KAAM,SACN,CAAA,IAAA,CAAMP,GAAqB,CACzB,OAAA,CAAS33B,EAAO,OAChB,CAAA,IAAA,CAAAiW,EACA,SAAAC,CAAAA,CAAAA,CACA,YAAcse,CAAAA,CAAAA,CAAe,OAAY,cAC3C,CAAC,CACH,CACF,CAAA,CACA,WAAY,MACZ,CAAA,UAAA,CAAYyD,GAAoB,CAC9B,OAAA,CAASj4B,EAAO,OAChB,CAAA,iBAAA,CAAAk4B,EACA,SAAAhiB,CAAAA,CAAAA,CACA,OAAAlW,CACF,CAAC,CACD,CAAA,KAAA,CAAOw0B,EACH,CACE,CAEE,QAASljB,CAAS,CAAA,QAAA,CAAS,YAAY,CACvC,CAAA,IAAA,CAAMmjB,EACR,CACA,CAAA,CACE,QAAS6B,CAAmB,CAAA,IAAA,CACxBhlB,EAAS,iBAAkB,CAAA,CACzB,SAAUglB,CAAmB,CAAA,IAC/B,CAAC,CACDhlB,CAAAA,CAAAA,CAAS,SAAS,WAAW,CAAA,CACjC,QAASglB,CAAmB,CAAA,IAAA,CACxBhlB,EAAS,iBAAkB,CAAA,CACzB,SAAUglB,CAAmB,CAAA,IAC/B,CAAC,CACD,CAAA,MAAA,CACJ,KAAM5B,EACR,CACF,EACA,CACE,CACE,OACG,CAAA,CAAA,cAAA,GAAkB70B,EAAO,MACtBA,CAAAA,CAAAA,CAAO,OAAO,YACd,CAAA,KAAA,GAAU,MAChB,OAAS,CAAA,SAAA,CACT,KAAM,cACR,CACF,CACN,CAAC,CAAA,CACD,KAAM86B,EAA0B,CAAA,CAC9B,OAAQ36B,CAAO,CAAA,OAAA,CAAQ,MACvB,CAAA,aAAA,CAAe,KACf,EAAIkW,CAAAA,CAAAA,CAAU,GACd,SAAAA,CAAAA,CACF,CAAC,CACH,CAAC,EACDD,CAAK,CAAA,GAAA,CAAIhS,CAAI,EACf,CAAC,EACH,CAEauU,CAAAA,EAAAA,CAAsC,CAAC,CAAE,MAAA,CAAAxY,CAAO,CAAA,GAAM,CACjE,IAAMiW,CAAAA,CAAOjW,EAAO,UAAW,CAAA,CAC7B,GAAI40B,EACJ,CAAA,IAAA,CAAM50B,EAAO,MACf,CAAC,EAGKwW,CAAevE,CAAAA,CAAAA,CAAiB,CACpC,MAAQjS,CAAAA,CAAAA,CAAO,QAAQ,MACvB,CAAA,YAAA,CAAciW,EAAK,oBAAqB,EAC1C,CAAC,CACKS,CAAAA,CAAAA,CAAgBT,EAAK,MAAO,CAAA,CAChC,GAAG7D,CAAU,CAAA,OAAA,CACb,MAAO,eACP,CAAA,MAAA,CAAQoE,CACV,CAAC,CAAA,CAEc1W,EAAgBE,CAAO,CAAA,OAAA,CAAQ,MAAM,CACxB,CAAA,IAAA,GAAS,sBAEnCiW,EAAAA,CAAAA,CAAK,OAAO,CACV,MAAA,CAAQ,KACR,MAAQO,CAAAA,CAAAA,CACR,KAAM,YACR,CAAC,EAGH+kB,EAAkB,CAAA,CAChB,cAAA7kB,CACA,CAAA,OAAA,CAAS1W,EAAO,OAChB,CAAA,MAAA,CAAAA,CACF,CAAC,CAAA,CAEGA,CAAO,CAAA,MAAA,CAAO,QAChB67B,EAAiB,CAAA,CAAE,OAAA77B,CAAO,CAAC,EAE3B28B,EAAgB,CAAA,CAAE,OAAA38B,CAAO,CAAC,EAE9B,CCxbO,CAAA,IAAMuX,GAA2C,CACtD,MAAA,CAAQ,CACN,OAAS,CAAA,KAAA,CACT,IAAM,CAAA,IAAA,CACN,eAAgB,MAChB,CAAA,MAAA,CAAQ,KACR,eAAiB,CAAA,IAAA,CACjB,SAAU,KACV,CAAA,WAAA,CAAa,KACb,QAAU,CAAA,MAAA,CACV,cAAe,QACf,CAAA,WAAA,CAAa,MACb,SAAW,CAAA,KACb,EACA,YAAc,CAAA,CAAC,qBAAqB,CACpC,CAAA,OAAA,CAAAiB,GACA,aAAAyb,CAAAA,EAAAA,CACA,KAAM,cACN,CAAA,MAAA,CAAQ,MACR,aAAe,CAAA,CAACj0B,EAAQgW,CAAY,GAAA,CAC9BhW,EAAO,MAAO,CAAA,MAAA,EACZ,OAAOA,CAAO,CAAA,MAAA,CAAO,QAAW,SAClCA,GAAAA,CAAAA,CAAO,MAAO,CAAA,MAAA,CAASgW,EAAQ,WAAY,CAAA,QAAA,CAAU,CACnD,aAAe,CAAA,uBACjB,CAAC,CAGHhW,CAAAA,CAAAA,CAAAA,CAAO,aAAa,GAAIA,CAAAA,CAAAA,CAAO,OAAO,MAAO,CAAA,EAE7CA,EAAO,MAAO,CAAA,MAAA,CAAS,MAGrBA,CAAO,CAAA,MAAA,CAAO,WACZ,EAAA,OAAOA,EAAO,MAAO,CAAA,WAAA,EAAgB,YACvCA,CAAO,CAAA,MAAA,CAAO,YAAcgW,CAAQ,CAAA,WAAA,CAAY,aAAa,CAG/DhW,CAAAA,CAAAA,CAAAA,CAAO,aAAa,GAAIA,CAAAA,CAAAA,CAAO,OAAO,WAAY,CAAA,EAElDA,EAAO,MAAO,CAAA,WAAA,CAAc,KAG1B,CAAA,OAAOA,EAAO,MAAO,CAAA,SAAA,EAAc,WACrCA,CAAO,CAAA,MAAA,CAAO,UAAY,CACxB,OAAA,CAASA,EAAO,MAAO,CAAA,SAAA,CACvB,SAAUA,CAAO,CAAA,MAAA,CAAO,SAC1B,CAGEA,CAAAA,CAAAA,CAAAA,CAAO,OAAO,SAAU,CAAA,OAAA,EACtB,OAAOA,CAAO,CAAA,MAAA,CAAO,UAAU,OAAY,EAAA,SAAA,GAC7CA,EAAO,MAAO,CAAA,SAAA,CAAU,QAAUgW,CAAQ,CAAA,WAAA,CAAY,WAAW,CAGnEhW,CAAAA,CAAAA,CAAAA,CAAO,aAAa,GAAIA,CAAAA,CAAAA,CAAO,OAAO,SAAU,CAAA,OAAQ,GAExDA,CAAO,CAAA,MAAA,CAAO,SAAU,CAAA,OAAA,CAAU,MAGhCA,CAAO,CAAA,MAAA,CAAO,UAAU,QACtB,EAAA,OAAOA,EAAO,MAAO,CAAA,SAAA,CAAU,UAAa,SAC9CA,GAAAA,CAAAA,CAAO,OAAO,SAAU,CAAA,QAAA,CAAWgW,EAAQ,WAAY,CAAA,WAAW,GAGpEhW,CAAO,CAAA,YAAA,CAAa,GAAIA,CAAAA,CAAAA,CAAO,OAAO,SAAU,CAAA,QAAS,GAEzDA,CAAO,CAAA,MAAA,CAAO,UAAU,QAAW,CAAA,KAAA,CAGjCA,EAAO,MAAO,CAAA,QAAA,EACZ,OAAOA,CAAO,CAAA,MAAA,CAAO,UAAa,QACpCA,GAAAA,CAAAA,CAAO,OAAO,QAAW,CAAA,KAAA,CAAA,CAG3BA,CAAO,CAAA,MAAA,CAAO,QAAU,IAExBA,EAAAA,CAAAA,CAAO,OAAO,QAAW,CAAA,MAE7B,CACF,CAKawX,CCvDb,IAAMolB,EAAW,CAAA,YAAA,CAEJC,EAAoB,CAC/B,KAAA,CAAO,EACP,CAAA,IAAA,CAAM,GACN,WAAa,CAAA,IAAA,CACb,KAAM,EAAC,CACP,MAAO,EAAC,CACR,OAAQ,WACR,CAAA,OAAA,CAAS,EACT,CAAA,EAAA,CAAI,GACJ,YAAc,CAAA,KAAA,CACd,WAAY,KACZ,CAAA,UAAA,CAAY,MACZ,UAAY,CAAA,KAAA,CACZ,IAAM,CAAA,IAAA,CACN,KAAM,EACN,CAAA,UAAA,CAAY,EACZ,CAAA,QAAA,CAAU,KACV,IAAM,CAAA,EACR,EAEMC,EAAe,CAAA,CAAC,CACpB,QAAA12B,CAAAA,CAAAA,CACA,eAAA22B,CACA,CAAA,IAAA,CAAAjK,EACA,GAAAjpB,CAAAA,CAAAA,CACA,MAAAkxB,CAAAA,CAAAA,CACA,GAAG7B,CACL,CAAA,GAGiC,CAE/B,GAAI,CAACpG,EACH,OAGF,GAAM,CAAE,OAAAqG,CAAAA,CAAAA,CAAS,KAAAp5B,CAAK,CAAA,CAAI0zB,GAAkB,CAC1C,MAAA,CAAQ,KACR,IAAAX,CAAAA,CAAAA,CACA,GAAGoG,CACL,CAAC,CACD,CAAA,GAAIC,EAAS,CACX,IAAMl1B,EAAOqN,CAAS,CAAA,eAAA,CAAgB,CACpC,QAAAlL,CAAAA,CAAAA,CACA,eAAA22B,CACA,CAAA,IAAA,CAAAh9B,EACA,GAAA8J,CAAAA,CACF,CAAC,CACDkxB,CAAAA,CAAAA,CAAO92B,CAAI,EACb,CACF,CAEa+4B,CAAAA,EAAAA,CAAe,CAAC,CAC3B,OAAA,CAAA12B,EACA,IAAAwsB,CAAAA,CAAAA,CACA,UAAAmK,CACA,CAAA,MAAA,CAAAlC,EACA,IAAAj2B,CAAAA,CAAAA,CACA,GAAGo0B,CACL,CAAA,GAKiC,CAE/B,GAAI,CAACpG,CACH,CAAA,OAAO,CACL,OAAS,CAAA,KAAA,CACT,KAAM,EACR,CAAA,CAGF,IAAMpxB,CAAS+xB,CAAAA,EAAAA,CAAkB,CAC/B,MAAQ,CAAA,IAAA,CACR,KAAAX,CACA,CAAA,GAAGoG,CACL,CAAC,CAAA,CACK,CAAE,OAAAC,CAAAA,CAAAA,CAAS,IAAAp5B,CAAAA,CAAK,EAAI2B,CAC1B,CAAA,GAAIy3B,EAAS,CACX,IAAMl1B,EAAOqN,CAAS,CAAA,oBAAA,CAAqB,CACzC,OAAAhL,CAAAA,CAAAA,CACA,WAAY,IACZ,CAAA,IAAA,CAAAvG,EACA,IAAA+E,CAAAA,CACF,CAAC,CACDi2B,CAAAA,CAAAA,CAAO92B,CAAI,CAAA,CAEXg5B,IAAYl9B,CAAI,EAClB,CACA,OAAO2B,CACT,EAEMw7B,EAAsB5hB,CAAAA,CAAAA,EAAsB,CAChD,IAAM1b,CAAAA,CAASM,GAETi9B,CAAAA,CAAAA,CAAmB,EAEzBC,CAAAA,EAAAA,CAAY9hB,CAAK,CAEjBA,CAAAA,CAAAA,CAAM,MAAM,KAAM,CAAA,OAAA,CAAS+W,GAAe,CACxC,IAAMgL,EAAmBz9B,CAAO,CAAA,OAAA,CAAQ,qBAAqB,CAC7D,CAAA,OACEy9B,GAAkB,MAClB,EAAA,OAAOA,EAAiB,MAAO,CAAA,KAAA,EAAU,UACzCA,CAAiB,CAAA,MAAA,CAAO,MAAM,IAAS,GAAA,sBAAA,CAEhCC,EAAY,CAAA,CACjB,GAAGhiB,CACH,CAAA,KAAA,CAAO+W,CACT,CAAC,CAAA,CAGIkL,GAAkB,CACvB,GAAGjiB,EACH,KAAO+W,CAAAA,CAAAA,CACP,OAASpuB,CAAS,EAAA,CAChBk5B,EAAiB,IAAKl5B,CAAAA,CAA0B,EAClD,CACF,CAAC,CACH,CAAC,EAEGk5B,CAAiB,CAAA,MAAA,EACnB7hB,EAAM,MACJhK,CAAAA,CAAAA,CAAS,qBAAqB,CAC5B,IAAA,CAAMgK,EAAM,KAAM,CAAA,IAAA,CAClB,WAAY6hB,CACd,CAAC,CACH,EAEJ,CAAA,CAEMG,GAAc,CAAC,CAAE,MAAAz9B,CAAAA,CAAAA,CAAQ,MAAA8yB,CAAO,CAAA,MAAA,CAAAoI,CAAO,CAAkB,GAAA,CAC7D,IAAMn7B,CAASM,CAAAA,CAAAA,GAET4J,CAA+C,CAAA,GAC/C1D,CAA8C,CAAA,GACpDusB,CAAM,CAAA,IAAA,CAAK,QAASN,CAAe,EAAA,CACjC,GAAM,CAAE,GAAA,CAAAzwB,EAAK,KAAAC,CAAAA,CAAM,EAAI0wB,EAAUF,CAAAA,CAAU,EAC3CvoB,CAAWlI,CAAAA,CAAG,EAAIC,CAClB,CAAA,IAAMyE,EAAU+rB,CAAW,CAAA,iBAAA,EAAqBA,EAAW,WACvD/rB,CAAAA,CAAAA,GACFF,EAASxE,CAAG,CAAA,CAAI,CAACwB,CAAAA,CAAckD,CAAO,CAAC,CAAA,EAE3C,CAAC,CAED,CAAA,IAAMA,EAAU,CACdqsB,CAAAA,CAAM,aAAevvB,CAAcuvB,CAAAA,CAAAA,CAAM,WAAW,CACpDA,CAAAA,CAAAA,CAAM,YAAc,aACtB,CAAA,CAEM0K,EAAmBz9B,CAAO,CAAA,OAAA,CAAQ,qBAAqB,CAAA,CAC7D,GACEy9B,CAAkB,EAAA,MAAA,EAClB,OAAOA,CAAiB,CAAA,MAAA,CAAO,OAAU,QACzCA,EAAAA,CAAAA,CAAiB,OAAO,KAAM,CAAA,OAAA,GAC7BA,EAAiB,MAAO,CAAA,KAAA,CAAM,OAAS,YACtCA,EAAAA,CAAAA,CAAiB,OAAO,KAAM,CAAA,IAAA,GAAS,sBACzC,CAAA,CAAA,CACAP,GAAa,CACX,MAAA,CAAAj9B,EACA,QAAAuG,CAAAA,CAAAA,CACA,eAAgBE,CAChB,CAAA,IAAA,CAAMqsB,EAAM,IACZ,CAAA,GAAA,CAAK7oB,EACL,MAAAixB,CAAAA,CACF,CAAC,CACD,CAAA,MACF,CAEAiC,EAAa,CAAA,CACX,OAAAn9B,CACA,CAAA,OAAA,CAAAyG,EACA,IAAMqsB,CAAAA,CAAAA,CAAM,KACZ,SAAY5yB,CAAAA,CAAAA,EAAS,CAEnB,IAAMs9B,CAAAA,CAAmBz9B,EAAO,OAAQ,CAAA,qBAAqB,EAC7D,GACEy9B,CAAAA,EAAkB,QAClB,OAAOA,CAAAA,CAAiB,OAAO,KAAU,EAAA,QAAA,EACzCA,CAAiB,CAAA,MAAA,CAAO,MAAM,OAC9BA,EAAAA,CAAAA,CAAiB,OAAO,KAAM,CAAA,IAAA,GAAS,aACvC,CACA,IAAMv2B,EAAawK,CAAS,CAAA,gBAAA,CAAiB,CAC3C,SAAW,CAAA,IAAA,CACX,IAAK,MAAO,CAAA,OAAA,CAAQxH,CAAU,CAAE,CAAA,GAAA,CAAI,CAAC,CAAClI,EAAKC,CAAK,CAAA,IAAO,CACrD,QAAUuE,CAAAA,CAAAA,CAASxE,CAAG,CACtB,CAAA,GAAA,CAAAA,EACA,KAAAC,CAAAA,CACF,EAAE,CACF,CAAA,QAAA,CAAU,IACZ,CAAC,CAAA,CACKoC,EAAOqN,CAAS,CAAA,aAAA,CAAc,CAClC,SAAA,CAAW,QACX,OAAAhL,CAAAA,CAAAA,CACA,YAAa,IACb,CAAA,UAAA,CAAAQ,EACA,IAAA/G,CAAAA,CACF,CAAC,CACDg7B,CAAAA,CAAAA,CAAO92B,CAAI,EACb,CACF,EACA,MAAA82B,CAAAA,CAAAA,CACA,KAAM5I,EAAcQ,CAAAA,CAAAA,CAAM,IAAI,CAChC,CAAC,EACH,CAEM4K,CAAAA,EAAAA,CAAoB,CAAC,CAAE,KAAA,CAAA5K,EAAO,MAAAoI,CAAAA,CAAO,IAAkB,CAC3D,IAAMjxB,EAA+C,EAAC,CAChD1D,EAA8C,EAAC,CACrDusB,EAAM,IAAK,CAAA,OAAA,CAASN,CAAe,EAAA,CACjC,GAAM,CAAE,GAAA,CAAAzwB,EAAK,KAAAC,CAAAA,CAAM,EAAI0wB,EAAUF,CAAAA,CAAU,EAC3CvoB,CAAWlI,CAAAA,CAAG,EAAIC,CAClB,CAAA,IAAMyE,EAAU+rB,CAAW,CAAA,iBAAA,EAAqBA,EAAW,WACvD/rB,CAAAA,CAAAA,GACFF,CAASxE,CAAAA,CAAG,EAAI,CAACwB,CAAAA,CAAckD,CAAO,CAAC,CAAA,EAE3C,CAAC,CACDy0B,CAAAA,CAAAA,CACEzpB,EAAS,eAAgB,CAAA,CACvB,SAAAlL,CACA,CAAA,cAAA,CAAgB,CACdusB,CAAM,CAAA,WAAA,EAAevvB,EAAcuvB,CAAM,CAAA,WAAW,CACpDA,CAAAA,CAAAA,CAAM,YAAc,aACtB,CAAA,CACA,KAAMA,CAAM,CAAA,IAAA,EAAM,MAAQA,CAAM,CAAA,IAAA,CAChC,IAAK7oB,CACP,CAAC,CACH,EACF,CAAA,CAEMszB,GAAc,CAAC,CAAE,OAAAv9B,CAAQ,CAAA,KAAA,CAAA8yB,EAAO,MAAAoI,CAAAA,CAAO,IAAkB,CAC7DiC,EAAAA,CAAa,CACX,MAAAn9B,CAAAA,CAAAA,CACA,QAAS,CACP8yB,CAAAA,CAAM,aAAevvB,CAAcuvB,CAAAA,CAAAA,CAAM,WAAW,CACpDA,CAAAA,CAAAA,CAAM,YAAc,aACtB,CAAA,CACA,KAAMA,CAAM,CAAA,IAAA,CACZ,MAAAoI,CAAAA,CAAAA,CACA,KAAM9H,EAAON,CAAAA,CAAK,CACpB,CAAC,EACH,EAEM6K,EAAgBliB,CAAAA,CAAAA,EAAsB,CAC1C,OAAQA,CAAAA,CAAM,MAAM,MAAQ,EAC1B,KAAK,QACL,CAAA,KAAK,SACL,KAAK,QAAA,CACL,KAAK,WAAA,CACH,OAAO4hB,EAAmB5hB,CAAAA,CAAK,EACjC,KAAK,MAAA,CACH,OAAOgiB,EAAYhiB,CAAAA,CAAK,EAC1B,QACE,OAAO8hB,GAAY9hB,CAAK,CAC5B,CACF,CAcMmiB,CAAAA,EAAAA,CAAsB,CAAC,CAC3B,MAAA,CAAA59B,CACA,CAAA,MAAA,CAAAk7B,CACF,CAA6C,GAAA,CAC3C,IAAM2C,CAAqB,CAAA,GAErB99B,CAASM,CAAAA,CAAAA,GAEf,GACE,CAACN,EAAO,OAAQ,CAAA,cAAc,GAC9B,CAACA,CAAAA,CAAO,QAAQ,qBAAqB,CAAA,EAAG,OAAO,IAE/C,CAAA,OAGF,IAAM0zB,CAAWlzB,CAAAA,CAAAA,CAAeR,CAAM,CAEtC,CAAA,IAAA,IAAWo7B,KAAWn7B,CAAO,CAAA,QAAA,CAC3B,QAAWqW,CAAa8kB,IAAAA,CAAAA,CAAQ,WAAY,CAC1C,GAAI,CAAC9kB,CAAU,CAAA,UAAA,CAAW,QAAU,CAACA,CAAAA,CAAU,SAAU,CAAA,MAAA,CACvD,SAGGwnB,CAASxnB,CAAAA,CAAAA,CAAU,IAAI,CAC1BwnB,GAAAA,CAAAA,CAASxnB,EAAU,IAAI,CAAA,CAAI,EAE7B,CAAA,CAAA,IAAMynB,EAAUD,CAASxnB,CAAAA,CAAAA,CAAU,IAAI,CAElCynB,CAAAA,CAAAA,CAAQznB,EAAU,MAAM,CAAA,GAC3BynB,CAAQznB,CAAAA,CAAAA,CAAU,MAAM,CAAI,CAAA,IAE9B,IAAM0nB,CAAAA,CAAYD,EAAQznB,CAAU,CAAA,MAAM,EAG1C,GAFA0nB,CAAAA,CAAU,KAAO1nB,CAAU,CAAA,IAAA,CAEvBA,EAAU,SAAU,CAAA,MAAA,CAAS,EAAG,CAKlC,GAJK0nB,CAAU,CAAA,GAAA,GACbA,EAAU,GAAM,CAAA,IAGd,KAAM,CAAA,OAAA,CAAQA,EAAU,GAAG,CAAA,CAC7B,SAGF1nB,CAAU,CAAA,SAAA,CAAU,QAASqI,CAAa,EAAA,CACxCqf,EAAU,GAAKrf,CAAAA,CAAAA,CAAS,IAAI,CAAIA,CAAAA,EAClC,CAAC,EACH,CAEA,GAAIrI,CAAU,CAAA,UAAA,CAAW,OAAS,CAAG,CAAA,CACnC,IAAI2nB,CAAqC,CAAA,CACvC,UAAW,IACX,CAAA,GAAGhB,EACH,EAAI,CAAA,MAAA,CACJ,KAAM,MACN,CAAA,IAAA,CAAM,MACR,CACIiB,CAAAA,CAAAA,CAAgB5nB,CAAU,CAAA,UAAA,CAAW,OACtCrO,CAAcA,EAAAA,CAAAA,CAAU,KAAO,MAClC,CAAA,CACKi2B,EAAc,MACjBA,GAAAA,CAAAA,CAAgB5nB,EAAU,UAAW,CAAA,MAAA,CAClCrO,GAAcA,CAAU,CAAA,EAAA,GAAO,UAClC,CAGEi2B,CAAAA,CAAAA,CAAAA,CAAc,SAAW,CAC3BD,CAAAA,CAAAA,CAAiB,CACf,GAAGhB,EACH,GAAGiB,CAAAA,CAAc,CAAC,CAClB,CAAA,EAAA,CAAI,OACJ,UAAYA,CAAAA,CAAAA,CAAc,CAAC,CAAG,CAAA,UAAA,CAC9B,KAAM,MACN,CAAA,IAAA,CAAM,MACR,CAESA,CAAAA,CAAAA,CAAc,OAAS,CAChCD,GAAAA,CAAAA,CAAiB,CACf,GAAGhB,EACH,EAAI,CAAA,MAAA,CACJ,WAAYiB,CAAc,CAAA,IAAA,CAAMj2B,GAAcA,CAAU,CAAA,UAAU,EAClE,SAAW,CAAA,qBAAA,CACX,KAAM,MACN,CAAA,IAAA,CAAM,OACN,UAAYi2B,CAAAA,CACd,GAGF,IAAMC,CAAAA,CAAuC,CAC3C,GAAGlB,EACH,EAAI,CAAA,QAAA,CACJ,WAAYlJ,EACVzd,CAAAA,CAAAA,CAAU,WAAW,MAClBrO,CAAAA,CAAAA,EAAcA,EAAU,EAAO,GAAA,QAClC,CACF,CACA,CAAA,SAAA,CAAW,KACX,IAAMyrB,CAAAA,CAAAA,CAAW,SAAW,SAC5B,CAAA,IAAA,CAAMA,CAAW,CAAA,QAAA,CAAW,UAC5B,UAAYpd,CAAAA,CAAAA,CAAU,WACnB,MAAQrO,CAAAA,CAAAA,EAAcA,EAAU,EAAO,GAAA,QAAQ,EAC/C,IAAKmqB,CAAAA,EAAY,CACtB,CACMgM,CAAAA,CAAAA,CAAqC,CACzC,GAAGnB,CAAAA,CACH,GAAI,MACJ,CAAA,UAAA,CAAYlJ,EACVzd,CAAAA,CAAAA,CAAU,WAAW,MAAQrO,CAAAA,CAAAA,EAAcA,EAAU,EAAO,GAAA,MAAM,CACpE,CACA,CAAA,SAAA,CAAW,KACX,IAAM,CAAA,MAAA,CACN,KAAM,MACN,CAAA,UAAA,CAAYqO,EAAU,UACnB,CAAA,MAAA,CAAQrO,GAAcA,CAAU,CAAA,EAAA,GAAO,MAAM,CAAA,CAC7C,KAAKmqB,EAAY,CACtB,EACMiM,CAAsC,CAAA,CAC1C,GAAGpB,CACH,CAAA,EAAA,CAAI,QACJ,UAAYlJ,CAAAA,EAAAA,CACVzd,EAAU,UAAW,CAAA,MAAA,CAClBrO,GAAcA,CAAU,CAAA,EAAA,GAAO,OAClC,CACF,CAAA,CACA,UAAW,IACX,CAAA,IAAA,CAAM,QACN,IAAM,CAAA,OAAA,CACN,WAAYqO,CAAU,CAAA,UAAA,CACnB,OAAQrO,CAAcA,EAAAA,CAAAA,CAAU,KAAO,OAAO,CAAA,CAC9C,KAAKmqB,EAAY,CACtB,EACMkM,CAAuB5K,CAAAA,CAAAA,CAYzBrB,GAAW,CAAC,GAAG/b,CAAU,CAAA,UAAU,CAAC,CAXpC,CAAA,CACE2nB,EACAE,CACAC,CAAAA,CAAAA,CACAC,CACF,CAAE,CAAA,MAAA,CACCl2B,GACCA,CAAM,CAAA,UAAA,CAAW,QACjBA,CAAM,CAAA,KAAA,CAAM,QACZA,CAAM,CAAA,SACV,EAGJ61B,CAAU,CAAA,GAAA,CAAMM,CAGhBlB,CAAAA,EAAAA,CAAa,CACX,MAAAn9B,CAAAA,CAAAA,CACA,KAAM,CAGJ,IAAA,CAAMqW,EAAU,IAChB,CAAA,IAAA,CAAMA,EAAU,IAClB,CAAA,CACA,gBAAiBmjB,EACjB,CAAA,MAAA,CAAA0B,EACA,IAAM9H,CAAAA,EAAAA,CAAO,CACX,GAAG4J,CAAAA,CAEH,WAAYqB,CACd,CAAC,CACH,CAAC,EACH,CAEA,IAAM/D,CAAAA,CAAmBjkB,EAAU,SAAU,CAAA,MAAA,CAAQqI,GACnDA,CAAS,CAAA,aAAA,CAAc,SAAS,SAAS,CAC3C,EAEA,GAAI4b,CAAAA,CAAiB,OAAS,CAAG,CAAA,CAE/B6C,GAAa,CACX,MAAA,CAAAn9B,EACA,IAAM,CAAA,CAGJ,KAAMqW,CAAU,CAAA,IAAA,CAChB,KAAMA,CAAU,CAAA,IAClB,EACA,eAAiBsjB,CAAAA,EAAAA,CACjB,OAAAuB,CACA,CAAA,IAAA,CAAM9H,GAAO,CACX,GAAG4J,CACH,CAAA,MAAA,CAAQ,SAER,WAAY1C,CACd,CAAC,CACH,CAAC,CAAA,CAED,IAAMO,CAAiBxkB,CAAAA,CAAAA,CAAU,UAAU,MAAQqI,CAAAA,CAAAA,EACjDA,EAAS,aAAc,CAAA,QAAA,CAAS,OAAO,CACzC,CAAA,CAEK+U,CAEH0J,EAAAA,EAAAA,CAAa,CACX,MAAAn9B,CAAAA,CAAAA,CACA,KAAM,CAGJ,IAAA,CAAMqW,EAAU,IAChB,CAAA,IAAA,CAAMA,EAAU,IAClB,CAAA,CACA,gBAAiBojB,EACjB,CAAA,MAAA,CAAAyB,EACA,IAAM9H,CAAAA,EAAAA,CACJyH,EAAe,MACX,CAAA,CACE,GAAGmC,CAAAA,CACH,OAAQ,QACR,CACA,UAAYnC,CAAAA,CACd,EACA,CACE,GAAGmC,EACH,IAAM,CAAA,SAGR,CACN,CACF,CAAC,EAEL,CACF,CAGF,IAAM/yB,CAAAA,CAAa,OAAO,OAAQ4zB,CAAAA,CAAQ,EAAE,GAAI,CAAA,CAAC,CAAC5uB,CAAM6uB,CAAAA,CAAO,IAAM,CACnE,IAAMK,EAAiB,MAAO,CAAA,OAAA,CAAQL,CAAO,CAC1C,CAAA,GAAA,CAAI,CAAC,CAAC/hB,CAAAA,CAASgiB,CAAS,CAAA,GAAM,CAC7B,IAAM/hB,CAAAA,CAASD,EAEXuiB,CAA4B,CAAA,GAEhC,GAAIP,CAAAA,CAAU,IAAK,CACjB,IAAMQ,EAAgBR,CAAU,CAAA,IAAA,CAC1B,CAAE,IAAMn3B,CAAAA,CAAK,EAAIgtB,EAAkB,CAAA,CACvC,MAAA5zB,CAAAA,CAAAA,CACA,KAAM,CAGJ,IAAA,CAAMu+B,EACN,IAAMA,CAAAA,CACR,EACA,eAAiB/E,CAAAA,EACnB,CAAC,CACKgF,CAAAA,CAAAA,CAAgB,CACpB,GAAGxB,CAAAA,CACH,KAAAp2B,CACA,CAAA,MAAA,CAAQ,YACR,UAAY,CAAA,IAAA,CACZ,IAAM,CAAA,KAAA,CACN,WAAY,EAAC,CACb,KAAMA,CACR,CAAA,CACA03B,EAAmB,CAAC,GAAGA,EAAkBE,CAAM,EACjD,CAEA,GAAIT,CAAAA,CAAU,IAAK,CACjB,IAAMU,EAAmB,MAAO,CAAA,OAAA,CAAQV,EAAU,GAAG,CAAA,CAAE,IACrD,CAAC,CAACnU,EAAMhjB,CAAI,CAAA,IAEW,CACnB,GAAGo2B,CAAAA,CACH,GAAGp2B,CACH,CAAA,UAAA,CAAY,KACZ,IAAM,CAAA,MAAA,CAAOgjB,CAAI,CACnB,CAAA,CAGJ,EAEM8U,CAAgB,CAAA,CACpB,GAAG1B,CAAAA,CACH,WAAY,IACZ,CAAA,IAAA,CAAM,MACN,UAAYyB,CAAAA,CACd,EACAH,CAAmB,CAAA,CAAC,GAAGA,CAAkBI,CAAAA,CAAM,EACjD,CAQA,OANyB,CACvB,GAAG1B,CAAAA,CACH,WAAY,IACZ,CAAA,IAAA,CAAMhhB,CAAO,CAAA,iBAAA,GACb,UAAYsiB,CAAAA,CACd,CAEF,CAAC,CAAA,CACA,OAAO,OAAO,CAAA,CAOjB,OANuB,CACrB,GAAGtB,EACH,UAAY,CAAA,IAAA,CACZ,KAAM,CAAI/tB,CAAAA,EAAAA,CAAI,IACd,UAAYkvB,CAAAA,CACd,CAEF,CAAC,EAEGp+B,CAAO,CAAA,OAAA,CAAQ,qBAAqB,CAAG,EAAA,MAAA,CAAO,MAChDo9B,EAAa,CAAA,CACX,OAAAn9B,CACA,CAAA,IAAA,CAAM,CACJ,IAAM,CAAA,qBAAA,CACN,KAAM+8B,EACR,CAAA,CACA,OAAA7B,CACA,CAAA,IAAA,CAAM9H,GAAO,CACX,GAAG4J,EACH,UAAA/yB,CAAAA,CACF,CAAC,CACH,CAAC,EAEL,CAEamqB,CAAAA,EAAAA,CAAyD,CAAC,CACrE,MAAA,CAAAp0B,EACA,KAAAq0B,CAAAA,CAAAA,CACA,OAAAl0B,CACF,CAAA,GAAM,CACJ,IAAMJ,CAAAA,CAASM,CAAU,EAAA,CAEzBg0B,EAAM,KAAQ,CAAA,IAAIzb,GAAe,CAC/B,GAAA,CAAK7Y,EAAO,MAAO,CAAA,IAAA,CACnB,gBAAiBI,CAAO,CAAA,MAAA,CAAO,gBAC/B,EAAI,CAAA,OAAA,CACJ,KAAM,UACR,CAAC,EAED,IAAM+6B,CAAAA,CAAgC92B,CAAS,EAAA,CAC7CiwB,EAAM,KAAO,EAAA,GAAA,CAAIjwB,CAAI,EACvB,CAAA,CAEA,QAAW0uB,CAAS9yB,IAAAA,CAAAA,CAAO,OACzB29B,EAAa,CAAA,CAAE,OAAA39B,CAAQ,CAAA,KAAA,CAAA8yB,EAAO,MAAAoI,CAAAA,CAAO,CAAC,CAGxC0C,CAAAA,EAAAA,CAAoB,CAAE,MAAA,CAAA59B,EAAQ,MAAAk7B,CAAAA,CAAO,CAAC,EACxC,CAAA,CC/mBA,IAAMzF,EAAmB,CAAA,MAAA,CAEnBkJ,GAAkBjgB,CACtBA,EAAAA,CAAAA,CAAS,OAAS,SAClBA,EAAAA,CAAAA,CAAS,SAAW,SACpBA,EAAAA,CAAAA,CAAS,OAAS,SAEdkgB,CAAAA,EAAAA,CAAe,CAAC,CACpB,MAAA,CAAA5+B,EACA,KAAA8yB,CAAAA,CACF,IACoBA,CAAM,CAAA,KAAA,CAAM,IAAKxc,CAAQ,EAAA,CACzC,IAAMuoB,CAAW7+B,CAAAA,CAAAA,CAAO,OAAO,IAAM8yB,CAAAA,CAAAA,EAAUA,EAAM,IAAM,EAAA,IAAA,GAASxc,CAAG,CACvE,CAAA,GAAI,CAACuoB,CAAAA,CACH,MAAM,IAAI,KAAA,CACR,OAAOvoB,CAAG,CAAA,wFAAA,CACZ,EAEF,OAAOuoB,CACT,CAAC,CAIGC,CAAAA,EAAAA,CACJrjB,GACG,CACH,IAAMsjB,EAAYtjB,CAAM,CAAA,KAAA,CAAM,KAAM,IAE9B,CAAA,CAAE,IAAAvb,CAAAA,CAAK,EAAIi9B,EAAa,CAAA,CAC5B,GAAG1hB,CACH,CAAA,IAAA,CAAM,CACJ,IAAM,CAAA,CAAA,aAAA,EAAgBsjB,CAAS,CAC/B,CAAA,CAAA,IAAA,CAAMA,CACR,CACA,CAAA,eAAA,CAAiBxF,GACjB,SAAYr5B,CAAAA,CAAAA,EAAS,CACnB,IAAMuJ,CAAAA,CAAak0B,EAAa,CAAA,CAC9B,GAAGliB,CACH,CAAA,IAAA,CAAM,CACJ,IAAM,CAAA,CAAA,aAAA,EAAgBsjB,CAAS,CAC/B,CAAA,CAAA,IAAA,CAAA7+B,CACF,CACA,CAAA,IAAA,CAAM,CAACu1B,EAAgB,CACzB,CAAC,CACDuJ,CAAAA,EAAAA,CAA4B,CAC1B,GAAGvjB,CAAAA,CACH,MAAO,KACP,CAAA,IAAA,CAAAvb,EACA,UAAAuJ,CAAAA,CACF,CAAC,EACH,CAAA,CACA,KAAM,CAAIgsB,CAAAA,EAAAA,EAAgB,aAAasJ,CAAS,CAAA,CAClD,CAAC,CAMD,CAAA,OAJe,CACb,OAAS,CAAA,CAAA,CAAQtjB,EAAM,MAAO,CAAA,KAAA,CAAMvb,CAAI,CAAA,CACxC,KAAAA,CACF,CAEF,EAEM++B,EAAgBxjB,CAAAA,CAAAA,EAAsB,CAC1C,GAAM,CAAE,MAAAqX,CAAM,CAAA,CAAIrX,EACZyjB,CAAYN,CAAAA,EAAAA,CAAanjB,CAAK,CAEpC,CAAA,GAAIyjB,EAAU,MAAW,GAAA,CAAA,CAAG,CAC1B,GAAM,CAAE,OAAA5F,CAAAA,CAAAA,CAAS,KAAM6F,CAA6B,CAAA,CAClDL,GAAqC,CAAE,GAAGrjB,EAAO,KAAOyjB,CAAAA,CAAAA,CAAU,CAAC,CAAG,CAAC,EAEzE,OAAK5F,CAAAA,CAIE,CACL7nB,CAAS,CAAA,sBAAA,CAAuB,CAC9B,IAAA,CAAMgK,EAAM,IACZ,CAAA,eAAA,CAAiB0jB,CACnB,CAAC,CACH,EARS,EASX,CAEA,OACEtM,EAAAA,CAAYC,CAAK,CAChBA,EAAAA,CAAAA,CAAM,MACL,CAAC,KAAA,CAAM,QAAQA,CAAM,CAAA,IAAI,GACzBA,CAAM,CAAA,IAAA,CAAK,SAAW,QACtBA,EAAAA,CAAAA,CAAM,KAAK,UAAW,CAAA,IAAA,CAAMliB,GAAaiiB,EAAYjiB,CAAAA,CAAQ,CAAC,CAEzD,CAAA,CACLa,EAAS,iBAAkB,CAAA,CACzB,KAAMgK,CAAM,CAAA,IAAA,CACZ,oBAAqBhK,CAAS,CAAA,qBAAA,CAAsB,CAClD,SAAA,CAAWA,EAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,EAC/C,SAAWA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,MAAO,CAAC,CAAA,CAC/C,SAAUA,CAAS,CAAA,gBAAA,CAAiB,CAClC,aAAe,CAAA,MACjB,CAAC,CACH,CAAC,CACH,CAAC,CACH,CAIK,CAAA,EACT,CAEM2tB,CAAAA,EAAAA,CAAmB3jB,GAAsB,CAC7C,GAAM,CAAE,KAAAqX,CAAAA,CAAM,EAAIrX,CACZxM,CAAAA,CAAAA,CAAO,CAAC,GAAGwM,CAAAA,CAAM,IAAMqX,CAAAA,CAAAA,CAAM,IAAI,CAEvC,CAAA,OACEA,EAAM,IAAS,GAAA,QAAA,EACfA,EAAM,MAAW,GAAA,OAAA,EACjBD,GAAYC,CAAK,CAAA,CAEV,CAACrhB,CAAS,CAAA,qBAAA,CAAsB,CAAE,IAAAxC,CAAAA,CAAK,CAAC,CAAC,CAAA,CAI3C0uB,GAAa,CAClB,GAAGliB,EACH,KAAAqX,CAAAA,CAAAA,CACA,KAAA7jB,CACF,CAAC,CACH,CAEM0uB,CAAAA,EAAAA,CAAgBliB,GAAsC,CAC1D,GAAM,CAAE,KAAAqX,CAAAA,CAAM,EAAIrX,CAElB,CAAA,OAAQqX,EAAM,MAAQ,EACpB,KAAK,OAAA,CACH,OAAOmM,EAAaxjB,CAAAA,CAAK,EAC3B,KAAK,WAAA,CACH,OAAOqX,CAAM,CAAA,UAAA,CAAW,QAASliB,CAC/BwuB,EAAAA,EAAAA,CAAgB,CAAE,GAAG3jB,CAAAA,CAAO,MAAO7K,CAAS,CAAC,CAC/C,CACF,CAAA,KAAK,WAAa,CAAA,CAChB,GAAIkiB,CAAM,CAAA,KAAA,CAAM,SAAW,CACzB,CAAA,OAAO,EAET,CAAA,IAAMoM,EAAYN,EAAanjB,CAAAA,CAAK,EAE9B,CAAE,OAAA,CAAA6d,EAAS,IAAM6F,CAAAA,CAA6B,EAClDL,EAAqC,CAAA,CACnC,GAAGrjB,CAAAA,CACH,MAAOyjB,CAAU,CAAA,CAAC,CACpB,CAAC,CAAA,CAEH,OAAK5F,CAIExG,CAAAA,CAAAA,CAAM,KAAO,UAChB,CAAA,CACErhB,EAAS,qBAAsB,CAAA,CAC7B,WAAYA,CAAS,CAAA,cAAA,CAAe,CAClC,YAAc0tB,CAAAA,CAAAA,CACd,WAAY,CAAC1J,EAAgB,CAC/B,CAAC,CACH,CAAC,CACH,CAAA,CACAhkB,EAAS,yBAA0B,CAAA,CACjC,KAAMgK,CAAM,CAAA,IAAA,CACZ,gBAAiB0jB,CACnB,CAAC,EAfI,EAgBX,CAEA,QACE,OAAO,EACX,CACF,CAEMH,CAAAA,EAAAA,CAA8B,CAAC,CACnC,KAAA,CAAA11B,EACA,MAAAtJ,CAAAA,CAAAA,CACA,KAAAE,CACA,CAAA,MAAA,CAAAg7B,EACA,YAAAmE,CAAAA,CAAAA,CACA,WAAA51B,CACF,CAAA,GAIM,CACJ,IAAM5H,CAAAA,CAAS,CACb,OAAA,CAAS,MACT,IAAA3B,CAAAA,CACF,EAEA,GAAI,CAACuJ,EAAW,MAGd,CAAA,OAAAoqB,GAAoB,CAClB,MAAA,CAAA7zB,EACA,IAAAE,CAAAA,CACF,CAAC,CACDm/B,CAAAA,CAAAA,KACOx9B,CAGT,CAAA,IAAMoF,CAAawK,CAAAA,CAAAA,CAAS,cAAc,CACxC,KAAA,CAAAnI,EACA,SAAW,CAAA,IAAA,CACX,WAAY,CACV,CACE,KAAMmsB,EACR,CACF,EACA,UAAY,CAAA,CACV,GAAGhsB,CACHgI,CAAAA,CAAAA,CAAS,eAAe,CACtB,UAAA,CAAYgkB,EACd,CAAC,CACH,CACF,CAAC,CAAA,CACK1pB,EAAY0F,CAAS,CAAA,aAAA,CAAc,CACvC,WAAa,CAAA,IAAA,CACb,WAAAxK,CACA,CAAA,IAAA,CAAA/G,EACA,QAAUA,CAAAA,CACZ,CAAC,CACD,CAAA,OAAAg7B,EAAOnvB,CAAS,CAAA,CAET,CACL,OAAA,CAAS,KACT,IAAA7L,CAAAA,CACF,CACF,CAGak0B,CAAAA,EAAAA,CAA2D,CAAC,CACvE,MAAA,CAAAp0B,EACA,KAAAq0B,CAAAA,CACF,IAAM,CACJ,IAAMt0B,EAASM,CAAU,EAAA,CAEnB66B,EAAgC92B,CAAS,EAAA,CAC7CiwB,CAAM,CAAA,KAAA,EAAO,IAAIjwB,CAAI,EACvB,EACMi7B,CAA2C,CAAA,IAAM,CACrDhL,CAAM,CAAA,KAAA,EAAO,aACf,CAAA,CAEA,QAAW8G,CAAWn7B,IAAAA,CAAAA,CAAO,SAC3B,IAAWqW,IAAAA,CAAAA,IAAa8kB,EAAQ,UAAY,CAAA,CAC1C,IAAMb,CAAAA,CAAmBjkB,EAAU,SAAU,CAAA,MAAA,CAAQqI,GACnDA,CAAS,CAAA,aAAA,CAAc,SAAS,SAAS,CAC3C,EAEA,GAAI,CAAC4b,EAAiB,MACpB,CAAA,SAGF,IAAMgF,CAAmBhF,CAAAA,CAAAA,CAAiB,OACvC5b,CAAa,EAAA,CAACigB,GAAejgB,CAAQ,CACxC,EAEA,GAAI,CAAC4gB,EAAiB,MACpB,CAAA,SAGF,GAAIA,CAAiB,CAAA,MAAA,CAAS,EAAG,CAC3Bv/B,CAAAA,CAAO,KAAK,KAAU,GAAA,OAAA,EACxB,QAAQ,IACN,CAAA,CAAA,yCAAA,EAAkCge,EAAmB1H,CAAS,CAAC,CAAQipB,KAAAA,EAAAA,CAAAA,CAAiB,MAAM,CAChG,wMAAA,CAAA,CAAA,CAEF,QACF,CAEA,IAAMp/B,EAAOy5B,EAA0BtjB,CAAAA,CAAAA,CAAU,IAAI,CACrD8mB,CAAAA,EAAAA,CAAa,CACX,MAAAn9B,CAAAA,CAAAA,CACA,KAAM,CACJ,IAAA,CAAM,gBAAgBE,CAAI,CAAA,CAAA,CAC1B,IAAAA,CAAAA,CACF,EACA,eAAiBw5B,CAAAA,EAAAA,CACjB,UAAY6F,CAAgB,EAAA,CAC1B,IAAM91B,CACJ6wB,CAAAA,CAAAA,CAAiB,OAAS,CACtBA,CAAAA,CAAAA,CAAiB,QAAS5b,CAAa,EAAA,CACrC,IAAMjV,CAAak0B,CAAAA,EAAAA,CAAa,CAC9B,MAAA39B,CAAAA,CAAAA,CACA,IAAM,CAAA,CACJ,KAAM,CAAgBE,aAAAA,EAAAA,CAAI,GAC1B,IAAAA,CAAAA,CACF,EACA,KAAOwe,CAAAA,CAAAA,CACP,OAAAwc,CACA,CAAA,YAAA,CAAAmE,EACA,IAAM,CAAA,CAAC5J,EAAgB,CACzB,CAAC,EAGD,OAAKhsB,CAAAA,CAAW,OAIT,CACLgI,CAAAA,CAAS,YAAY,CACnB,UAAA,CAAYA,EAAS,oBAAqB,CAAA,CAAC,MAAM,CAAC,CAAA,CAClD,cAAeA,CAAS,CAAA,KAAA,CAAM,CAAE,UAAAhI,CAAAA,CAAW,CAAC,CAC9C,CAAC,CACH,CARS,CAAA,EASX,CAAC,EACDk0B,EAAa,CAAA,CACX,OAAA39B,CACA,CAAA,IAAA,CAAM,CACJ,IAAM,CAAA,CAAA,aAAA,EAAgBE,CAAI,CAC1B,CAAA,CAAA,IAAA,CAAAA,CACF,CACA,CAAA,KAAA,CAAOo6B,EAAiB,CAAC,CAAA,CACzB,OAAAY,CACA,CAAA,YAAA,CAAAmE,CACA,CAAA,IAAA,CAAM,CAAC5J,EAAgB,CACzB,CAAC,CACPuJ,CAAAA,EAAAA,CAA4B,CAC1B,KAAO,CAAA,IAAA,CACP,OAAAh/B,CACA,CAAA,IAAA,CAAMu/B,EACN,MAAArE,CAAAA,CAAAA,CACA,aAAAmE,CACA,CAAA,UAAA,CAAA51B,CACF,CAAC,EACH,CACA,CAAA,MAAA,CAAAyxB,EACA,IAAM,CAAA,CAAA,CAAA,EAAIzF,EAAgB,CAAqBv1B,kBAAAA,EAAAA,CAAI,GACrD,CAAC,EACH,CAEJ,CC1VO,CAAA,IAAMwX,GAAoD,CAC/D,MAAA,CAAQ,CACN,MAAQ,CAAA,IAAA,CACR,MAAO,IACP,CAAA,eAAA,CAAiB,KACnB,CACA,CAAA,YAAA,CAAc,CAAC,qBAAqB,CAAA,CACpC,QAAAiB,EACA,CAAA,aAAA,CAAAyb,GACA,IAAM,CAAA,uBAAA,CACN,OAAQ,cACR,CAAA,IAAA,CAAM,CAAC,aAAa,CACtB,ECPO,IAAMoL,EAAY,CAAA,CAAC,CACxB,OAAArpB,CAAAA,CAAAA,CACA,KAAAjW,CACF,CAAA,IAIE4C,GAAa,SAAY,CAAA,CAAA,CACrBA,GAAa,IAAK5C,CAAAA,CAAI,EAEpBA,CAAK,CAAA,UAAA,CAAW,GAAG,CAAA,CACd0D,mBAAG,OAAQ,CAAA,mBAAA,CAAoB1D,CAAI,CAErC0D,CAAAA,kBAAAA,CAAG,QAAQ,oBAAqB1D,CAAAA,CAAI,EAOtCoV,CAAW,CAAA,CAAE,KAAMa,CAAQ,CAAA,MAAA,CAAO,OAAO,IAAM,CAAA,KAAA,CAAOjW,CAAK,CAAC,CAAA,CAAA,CC1B9D,IAAMu/B,EAAAA,CAAsB,CAAC,CAClC,MAAA,CAAAxnB,CACF,CAE4B,GAAA,CAC1B,IAAM1R,CAA0B,CAAA,GAEhC,OAAI0R,CAAAA,CAAO,OACT1R,CAAS,CAAA,IAAA,CAAKhD,EAAc0U,CAAO,CAAA,KAAK,CAAC,CAGvCA,CAAAA,CAAAA,CAAO,aACT1R,CAAS,CAAA,IAAA,CAAKhD,EAAc0U,CAAO,CAAA,WAAW,CAAC,CAG7CA,CAAAA,CAAAA,CAAO,YACT1R,CAAS,CAAA,IAAA,CAAK,aAAa,CAGtBA,CAAAA,CAAAA,CAAS,OAASA,CAAW,CAAA,MACtC,ECdA,IAAMm5B,EAAAA,CAAajuB,CAAS,CAAA,eAAA,CAAgB,CAAE,OAAS,CAAA,QAAS,CAAC,CAE3DkuB,CAAAA,EAAAA,CAAsB,CAAC,CAAE,MAAA,CAAA9jB,CAAO,CAAmC,GAAA,CACvE,IAAM5E,CAAMxE,CAAAA,EAAAA,CAASoJ,EAAO,GAAG,CAAA,CAE/B,OAAI5E,CAAI,CAAA,QAAA,EAAYA,CAAI,CAAA,IAAA,CACfxF,EAAS,eAAgB,CAAA,CAC9B,QAASA,CAAS,CAAA,aAAA,CAAc,CAAE,IAAMoK,CAAAA,CAAAA,CAAO,GAAI,CAAC,CACtD,CAAC,CAGIpK,CAAAA,CAAAA,CAAS,oBAAoB,CAClC,KAAA,CAAO,CACLwF,CAAI,CAAA,QAAA,EAAYyoB,EAChB,CAAA,KAAA,CACAzoB,EAAI,IAAQyoB,EAAAA,EAAAA,CACZzoB,EAAI,IAAO,CAAA,CAAA,CAAA,EAAIA,EAAI,IAAI,CAAA,CAAA,CAAK,GAC5BA,CAAI,CAAA,IAAA,EAAQ,EACd,CACF,CAAC,CACH,CAEa2oB,CAAAA,EAAAA,CAAsB,CAAC,CAClC,UAAA,CAAApqB,CACA,CAAA,MAAA,CAAArV,EACA,OAAAsW,CAAAA,CACF,IAIM,CACJ,IAAML,EAAOjW,CAAO,CAAA,OAAA,CAAQ,KAAK,CAAE,EAAA,CAAI4V,CAAQ,CAAC,CAAA,CAEhD,GAAI,CAACP,CAAAA,CAAW,KACd,OAGF,IAAMxV,CAASC,CAAAA,CAAAA,CAAgBE,EAAO,OAAQ,CAAA,MAAM,EAE9CmI,CAA4BmO,CAAAA,CAAAA,CAAQ,IAAKoF,CAC7C8jB,EAAAA,EAAAA,CAAoB,CAAE,MAAA9jB,CAAAA,CAAO,CAAC,CAChC,CAAA,CAEKpF,EAAQ,MAGT,CAAA,eAAA,GAAmBzW,EAAO,MAAUA,EAAAA,CAAAA,CAAO,MAAO,CAAA,aAAA,EAEpDsI,EAAM,IACJmJ,CAAAA,CAAAA,CAAS,qBAAqB,CAC5B,KAAA,CAAO,CAACiuB,EAAY97B,CAAAA,kBAAAA,CAAG,QAAQ,qBAAsB,CAAA,EAAE,CAAC,CAC1D,CAAC,CACH,CAAA,CARA0E,EAAM,IAAKo3B,CAAAA,EAAU,CAWvB,CAAA,IAAMG,EAAoBpuB,CAAS,CAAA,oBAAA,CAAqB,CACtD,UAAY,CAAA,IAAA,CACZ,KAAM+D,CAAW,CAAA,IAAA,CACjB,KAAM/D,CAAS,CAAA,iBAAA,CAAkB,CAC/B,UAAY,CAAA,CACV,CACE,IAAM3R,CAAAA,EAAAA,CAAoBK,EAAO,OAAQ,CAAA,MAAM,EAC/C,IAAMsR,CAAAA,CAAAA,CAAS,cAAc,CAAE,KAAA,CAAAnJ,CAAM,CAAC,CACxC,CACF,CACA,CAAA,mBAAA,CAAqB,KACvB,CAAC,CACH,CAAC,CAED8N,CAAAA,CAAAA,CAAK,IAAIypB,CAAiB,EAC5B,EC5CA,IAAMC,EAAAA,CAAoB,CAAC,CACzB,KAAA5sB,CACA,CAAA,MAAA,CAAA/S,EACA,MAAA8X,CAAAA,CACF,IAIM,CAEJ,IAAMzC,EADOrV,CAAO,CAAA,OAAA,CAAQ,KAAK,CAAE,EAAA,CAAI4V,CAAQ,CAAC,CAAA,CACxB,WAAW,CACjC,IAAA,CAAA7C,CACA,CAAA,MAAA,CAAQ,KACR,SAAW,CAAA,OACb,CAAC,CAOD,CAAA,GAAI,CAACsC,CAAW,CAAA,OAAA,CACd,OAGF,IAAMuqB,CAAAA,CAAaC,GAAmB,CAAE,MAAA,CAAA7/B,EAAQ,MAAA8X,CAAAA,CAAO,CAAC,CAItD9X,CAAAA,CAAAA,CAAO,MAAO,CAAA,KAAA,CAAM,qBACpB4/B,CAAW,CAAA,WAAA,CAAY,SAAS,QAAQ,CAAA,GAExCA,EAAW,GAAMA,CAAAA,CAAAA,CAAW,IAAI,MAAQtzB,CAAAA,CAAAA,EAASA,EAAK,KAAU,GAAA,IAAI,GAGtE,IAAMxF,CAAAA,CAAawK,EAAS,gBAAiB,CAAA,CAC3C,UAAW,IACX,CAAA,GAAA,CAAKsuB,EAAW,GAClB,CAAC,EAQD,OAPatuB,CAAAA,CAAS,cAAc,CAClC,SAAA,CAAW,QACX,OAASguB,CAAAA,EAAAA,CAAoB,CAAE,MAAAxnB,CAAAA,CAAO,CAAC,CACvC,CAAA,WAAA,CAAa,KACb,UAAAhR,CAAAA,CAAAA,CACA,IAAMuO,CAAAA,CAAAA,CAAW,MAAQ,EAC3B,CAAC,CAEH,CAEMwqB,CAAAA,EAAAA,CAAqB,CAAC,CAC1B,MAAA,CAAA7/B,EACA,MAAA8X,CAAAA,CACF,IAGM,CACJ,IAAMgoB,EASF,EAAC,CAkDL,OAAO,CACL,GAAA,CAAA,CAjDWhoB,CAAO,CAAA,KAAA,EAAS,EAAI,EAAA,GAAA,CAAI,CAACxL,CAAMtG,CAAAA,CAAAA,GAAU,CACpD,IAAM+5B,CAAAA,CAAkB,OAAOzzB,CAAK,CAAA,KAAA,CAE/BwzB,EAAY,QAASC,CAAAA,CAAe,GAGvCD,CAAY,CAAA,IAAA,CAAKC,CAAe,CAGlC,CAAA,IAAIn+B,CACJ,CAAA,OAAI0K,EAAK,KACP1K,CAAAA,CAAAA,CAAM0K,EAAK,KACFyzB,CAAAA,CAAAA,GAAoB,UAAYA,CAAoB,GAAA,QAAA,CAC7Dn+B,EAAM,CAAG0K,EAAAA,CAAAA,CAAK,KAAK,CACVyzB,CAAAA,CAAAA,CAAAA,GAAoB,UAC7Bn+B,CAAM0K,CAAAA,CAAAA,CAAK,MAAQ,MAAS,CAAA,OAAA,CACnBA,EAAK,KAAU,GAAA,IAAA,CACxB1K,EAAM,MAENA,CAAAA,CAAAA,CAAM,GAAGoE,CAAK,CAAA,CAAA,CAGZpE,IACFA,CAAMuT,CAAAA,CAAAA,CAAW,CACf,IAAMnV,CAAAA,CAAAA,CAAO,OAAO,KAAM,CAAA,IAAA,CAC1B,uBAAwB,KACxB,CAAA,KAAA,CAAO4B,CACT,CAAC,CAAA,CAEDe,EAAa,CAAA,SAAA,CAAY,EAGvBA,EAAa,CAAA,IAAA,CAAKf,CAAG,CACrB5B,EAAAA,CAAAA,CAAO,OAAO,KAAM,CAAA,OAAA,GACnBA,EAAO,MAAO,CAAA,KAAA,CAAM,OAAS,YAC5BA,EAAAA,CAAAA,CAAO,OAAO,KAAM,CAAA,IAAA,GAAS,0BAE/B4B,CAAM,CAAA,CAAA,CAAA,EAAIA,CAAG,CAAA,CAAA,CAAA,CAAA,CAIV,CACL,QAAU09B,CAAAA,EAAAA,CAAoB,CAAE,MAAQhzB,CAAAA,CAAK,CAAC,CAC9C,CAAA,GAAA,CAAA1K,EACA,KAAO0K,CAAAA,CAAAA,CAAK,KACd,CACF,CAAC,EAIC,WAAAwzB,CAAAA,CACF,CACF,CAEME,CAAAA,EAAAA,CAAc,CAAC,CACnB,KAAAjtB,CACA,CAAA,MAAA,CAAA/S,EACA,MAAA8X,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAK2C,CAEzC,IAAMhK,CAAAA,CADOrV,EAAO,OAAQ,CAAA,IAAA,CAAK,CAAE,EAAI4V,CAAAA,CAAQ,CAAC,CACxB,CAAA,UAAA,CAAW,CACjC,IAAA7C,CAAAA,CAAAA,CACA,OAAQ,IACR,CAAA,SAAA,CAAW,MACb,CAAC,CAAA,CAOD,GACE,CAACsC,CAAAA,CAAW,SACZ,CAACvC,EAAAA,CAAsBC,CAAI,CAC3B/S,EAAAA,CAAAA,CAAO,OAAO,KAAM,CAAA,IAAA,GAAS,uBAE7B,OAGF,IAAM8E,CAAOm7B,CAAAA,CAAAA,CAAa,CACxB,MAAAjgC,CAAAA,CAAAA,CACA,OAAQ,CACN,GAAG8X,EACH,IAAM,CAAA,MACR,EACA,KAAAuH,CAAAA,CACF,CAAC,CAED,CAAA,GAAIva,EAOF,OANawM,CAAAA,CAAS,qBAAqB,CACzC,OAAA,CAASguB,EAAoB,CAAA,CAAE,OAAAxnB,CAAO,CAAC,EACvC,UAAY,CAAA,IAAA,CACZ,KAAMzC,CAAW,CAAA,IAAA,EAAQ,GACzB,IAAAvQ,CAAAA,CACF,CAAC,CAKL,CAAA,CAEMo7B,GAA6B,CAAC,CAClC,OAAAlgC,CACA,CAAA,MAAA,CAAA8X,CACF,CAAA,GAMS,CAFY+nB,EAAmB,CAAA,CAAE,OAAA7/B,CAAQ,CAAA,MAAA,CAAA8X,CAAO,CAAC,CAAA,CAErC,YAAY,MAC5BhT,CAAAA,CAAAA,EAASA,IAAS,QAAYA,EAAAA,CAAAA,GAAS,QAC1C,CAAE,CAAA,MAAA,CAGEq7B,GAAoB,CAAC,CACzB,KAAAptB,CACA,CAAA,MAAA,CAAA/S,EACA,MAAA8X,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAKM,CACJ,IAAMugB,CAAAA,CAAaC,GAAmB,CAAE,MAAA,CAAA7/B,EAAQ,MAAA8X,CAAAA,CAAO,CAAC,CAGxD,CAAA,GAAI,CAACooB,EAA2B,CAAA,CAAE,MAAAlgC,CAAAA,CAAAA,CAAQ,OAAA8X,CAAO,CAAC,EAOhD,OANakoB,EAAAA,CAAY,CACvB,IAAAjtB,CAAAA,CAAAA,CACA,OAAA/S,CACA,CAAA,MAAA,CAAA8X,EACA,KAAAuH,CAAAA,CACF,CAAC,CAKH,CAAA,IAAMhK,EADOrV,CAAO,CAAA,OAAA,CAAQ,IAAK,CAAA,CAAE,GAAI4V,CAAQ,CAAC,EACxB,UAAW,CAAA,CACjC,KAAA7C,CACA,CAAA,MAAA,CAAQ,KACR,SAAW,CAAA,MACb,CAAC,CAMD,CAAA,OALazB,EAAS,eAAgB,CAAA,CACpC,eAAgBguB,EAAoB,CAAA,CAAE,MAAAxnB,CAAAA,CAAO,CAAC,CAC9C,CAAA,IAAA,CAAMzC,EAAW,IAAQ,EAAA,EAAA,CACzB,IAAKuqB,CAAW,CAAA,GAClB,CAAC,CAEH,CAAA,CAEMQ,GAAwB,CAAC,CAC7B,UAAAtnB,CACA,CAAA,MAAA,CAAA9Y,EACA,MAAA8X,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAK+B,CAC7B,GAAI,CAACvH,EAAO,KACV,CAAA,OAAOxG,EAAS,aACdA,CAAAA,CAAAA,CAAS,gBAAgB,CACvB,OAAA,CAAS,SACX,CAAC,CACH,EAGFwG,CAAS4E,CAAAA,EAAAA,CAAkB,CAAE,YAAc,CAAA,KAAA,CAAO,MAAA5E,CAAAA,CAAO,CAAC,CAE1D,CAAA,IAAMuoB,EAAgC,EAAC,CAEvC,QAAW/zB,CAAQwL,IAAAA,CAAAA,CAAO,MAAQ,CAChC,IAAMhT,EAAOm7B,CAAa,CAAA,CACxB,UAAAnnB,CACA,CAAA,MAAA,CAAA9Y,EACA,MAAQsM,CAAAA,CAAAA,CACR,KAAA+S,CAAAA,CACF,CAAC,CAEGva,CAAAA,CAAAA,EACFu7B,EAAU,IAAKv7B,CAAAA,CAAI,EAEvB,CAEA,GAAKu7B,EAAU,MAIf,CAAA,OAAIA,EAAU,MAAW,GAAA,CAAA,CAChB/uB,EAAS,aAAc+uB,CAAAA,CAAAA,CAAU,CAAC,CAAE,CAAA,CAGzCvoB,CAAO,CAAA,eAAA,GAAoB,MACtBxG,CAAS,CAAA,aAAA,CACdA,EAAS,oBAAqB,CAAA,CAAE,MAAO+uB,CAAU,CAAC,CACpD,CAGK/uB,CAAAA,CAAAA,CAAS,cAAcA,CAAS,CAAA,aAAA,CAAc,CAAE,KAAO+uB,CAAAA,CAAU,CAAC,CAAC,CAC5E,EAEMC,EAA0B,CAAA,CAAC,CAC/B,MAAAxoB,CAAAA,CACF,IAIMA,CAAO,CAAA,KAAA,GAAU,OACZxG,CAAS,CAAA,eAAA,CAAgB,CAC9B,OAASA,CAAAA,CAAAA,CAAS,IAAI,OAAQwG,CAAAA,CAAAA,CAAO,KAAgB,CACvD,CAAC,EAGIxG,CAAS,CAAA,eAAA,CAAgB,CAC9B,OAAA,CAAS,SACX,CAAC,CAAA,CAGGivB,GAAuB,CAAC,CAC5B,KAAAxtB,CACA,CAAA,SAAA,CAAA+F,EACA,MAAA9Y,CAAAA,CAAAA,CACA,OAAA8X,CACA,CAAA,KAAA,CAAAuH,CACF,CAM+B,GAAA,CAC7B,IAAMpJ,CAAOjW,CAAAA,CAAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,CAAE,EAAI4V,CAAAA,CAAQ,CAAC,CAC1C4qB,CAAAA,CAAAA,CAAiBztB,EAAOD,EAAsBC,CAAAA,CAAI,EAAI,KAE5D,CAAA,GAAIA,GAAQytB,CAAgB,CAAA,CAG1B,GAAI,CAACxgC,CAAAA,CAAO,OAAO,KAAM,CAAA,OAAA,CAAS,CAChC,IAAM6yB,EAAWmN,EAAY,CAAA,CAC3B,KAAAjtB,CACA,CAAA,MAAA,CAAA/S,EACA,MAAA8X,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAC,EACGwT,CACF5c,EAAAA,CAAAA,CAAK,IAAI4c,CAAQ,EAErB,CAEA,GAAI7yB,CAAAA,CAAO,OAAO,KAAM,CAAA,OAAA,CAAS,CAC/B,GAAIA,CAAAA,CAAO,OAAO,KAAM,CAAA,IAAA,GAAS,aAAc,CAC7C,IAAM6yB,EAAWmN,EAAY,CAAA,CAC3B,KAAAjtB,CACA,CAAA,MAAA,CAAA/S,EACA,MAAA8X,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAC,CACGwT,CAAAA,CAAAA,EACF5c,EAAK,GAAI4c,CAAAA,CAAQ,EAGnB,IAAM4N,CAAAA,CAAad,GAAkB,CACnC,IAAA,CAAA5sB,EACA,MAAA/S,CAAAA,CAAAA,CACA,OAAA8X,CACF,CAAC,EACG2oB,CACFxqB,EAAAA,CAAAA,CAAK,IAAIwqB,CAAU,EAEvB,CAEA,GAAIzgC,EAAO,MAAO,CAAA,KAAA,CAAM,OAAS,YAAc,CAAA,CAC7C,IAAM0gC,CAAWP,CAAAA,EAAAA,CAAkB,CACjC,IAAAptB,CAAAA,CAAAA,CACA,OAAA/S,CACA,CAAA,MAAA,CAAA8X,EACA,KAAAuH,CAAAA,CACF,CAAC,CACGqhB,CAAAA,CAAAA,EACFzqB,CAAK,CAAA,GAAA,CAAIyqB,CAAQ,EAErB,CAEA,GAAI1gC,CAAO,CAAA,MAAA,CAAO,MAAM,IAAS,GAAA,sBAAA,CAAwB,CACvD,IAAM0gC,CAAAA,CAAWP,GAAkB,CACjC,IAAA,CAAAptB,EACA,MAAA/S,CAAAA,CAAAA,CACA,OAAA8X,CACA,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CACGqhB,IACEF,CACFvqB,CAAAA,CAAAA,CAAK,IAAIyqB,CAAQ,CAAA,CAGjB5nB,EAAU,IAAK4nB,CAAAA,CAAQ,GAG7B,CACF,CACF,CAUA,OARaT,CAAAA,CAAa,CACxB,MAAAjgC,CAAAA,CAAAA,CACA,OAAQ,CACN,GAAG8X,CACH,CAAA,IAAA,CAAM,MACR,CACA,CAAA,KAAA,CAAAuH,CACF,CAAC,CAEH,EAEMshB,EAAyB,CAAA,CAAC,CAC9B,MAAA3gC,CAAAA,CAAAA,CACA,OAAA8X,CACF,CAAA,GAKMA,EAAO,KAAU,GAAA,MAAA,CACZxG,EAAS,eAAgB,CAAA,CAC9B,OAASA,CAAAA,CAAAA,CAAS,IAAI,MAAOwG,CAAAA,CAAAA,CAAO,KAAe,CACrD,CAAC,EAGCA,CAAO,CAAA,IAAA,GAAS,WAAaA,CAAO,CAAA,MAAA,GAAW,SAE7C9X,CAAO,CAAA,SAAA,CAAU,uBAAuB,CAAG,EAAA,MAAA,CAAO,OAC7CsR,CAAS,CAAA,iBAAA,CAAkB,CAAE,QAAA,CAAU,QAAS,CAAC,CAAA,CAIrDA,EAAS,eAAgB,CAAA,CAC9B,QAAS,QACX,CAAC,EAGGsvB,EAAyB,CAAA,CAAC,CAC9B,SAAA9nB,CAAAA,CAAAA,CACA,OAAA9Y,CACA,CAAA,MAAA,CAAA8X,EACA,KAAAuH,CAAAA,CACF,IAK+B,CAC7B,IAAMpJ,EAAOjW,CAAO,CAAA,OAAA,CAAQ,KAAK,CAAE,EAAA,CAAI4V,CAAQ,CAAC,CAAA,CAG5CvF,EACAC,CACEub,CAAAA,CAAAA,CAAoC,EACtCgV,CAAAA,CAAAA,CAA6C,EAC3Ct1B,CAAAA,CAAAA,CAAWuM,EAAO,QAAY,EAAA,EAChCgpB,CAAAA,CAAAA,CAAwB,MAE5B,IAAW/gC,IAAAA,CAAAA,IAAQ+X,EAAO,UAAY,CAAA,CACpC,IAAMrH,CAAWqH,CAAAA,CAAAA,CAAO,WAAW/X,CAAI,CAAA,CAEjCghC,EAAed,CAAa,CAAA,CAChC,KAAM5gB,CAAQ,CAAA,CAAC,GAAGA,CAAM,CAAA,IAAA,CAAMtf,CAAI,CAAA,CAAE,KAAK,GAAG,CAAA,CAAI,GAAG8S,EAAK,CAAA,EAAG9S,CAAI,CAC/D,CAAA,CAAA,SAAA,CAAA+Y,EACA,MAAA9Y,CAAAA,CAAAA,CACA,OAAQyQ,CACR,CAAA,KAAA,CAAA4O,CACF,CAAC,CAAA,CAED,GAAI,CAAC0hB,CAAAA,CACH,SAGF,IAAMnH,EAAaruB,CAAS,CAAA,QAAA,CAASxL,CAAI,CACzC8rB,CAAAA,CAAAA,CAAiB,KAAK,CACpB,OAAA,CAASyT,GAAoB,CAAE,MAAA,CAAQ7uB,CAAS,CAAC,CAAA,CACjD,WAAYA,CAAS,CAAA,WAAA,GAAgB,OACrC,UAAAmpB,CAAAA,CAAAA,CACA,KAAMyF,EAAU,CAAA,CAAE,QAASr/B,CAAO,CAAA,OAAA,CAAS,KAAAD,CAAK,CAAC,EACjD,IAAMghC,CAAAA,CACR,CAAC,CACDF,CAAAA,CAAAA,CAAmB,KAAKpwB,CAAQ,CAAA,CAE3BmpB,IACHkH,CAAwB,CAAA,IAAA,EAE5B,CAEA,GACEhpB,CAAAA,CAAO,oBACNA,GAAAA,CAAAA,CAAO,qBAAqB,IAAS,GAAA,OAAA,EAAW,CAAC+oB,CAAmB,CAAA,MAAA,CAAA,GAEjE/oB,EAAO,oBAAqB,CAAA,IAAA,GAAS,QACvC+oB,CAAqB,CAAA,CAAC/oB,EAAO,oBAAoB,CAAA,CAEjD+oB,EAAmB,OAAQ/oB,CAAAA,CAAAA,CAAO,oBAAoB,CAGpDgpB,CAAAA,CAAAA,EACFD,CAAmB,CAAA,IAAA,CAAK,CACtB,IAAM,CAAA,WACR,CAAC,CAGHvwB,CAAAA,CAAAA,CAAgB,CACd,UAAY,CAAA,CAACwH,EAAO,aACpB,CAAA,IAAA,CAAM,MACN,IAAMmoB,CAAAA,CAAAA,CAAa,CACjB,SAAAnnB,CAAAA,CAAAA,CACA,OAAA9Y,CACA,CAAA,MAAA,CACE6gC,CAAmB,CAAA,MAAA,GAAW,EAC1BA,CAAmB,CAAA,CAAC,EACpB,CACE,KAAA,CAAOA,EACP,eAAiB,CAAA,IACnB,EACN,KAAAxhB,CAAAA,CACF,CAAC,CACH,CAAA,CAEIvH,EAAO,aAAe,EAAA,IAAA,CAAA,CAAM,CAC9B,IAAMzC,CAAAA,CAAaY,EAAK,UAAW,CAAA,CACjC,KAAM6B,CAAO,CAAA,aAAA,CAAc,KAC3B,MAAQ,CAAA,IAAA,CACR,UAAW,MACb,CAAC,EACGzC,CAAW,CAAA,IAAA,GACbhF,EAAWgF,CAAW,CAAA,IAAA,EAE1B,CAGF,OAAO/D,CAAAA,CAAS,kBAAkB,CAChC,QAAA,CAAAjB,CACA,CAAA,aAAA,CAAAC,EACA,UAAYub,CAAAA,CAAAA,CACZ,oBAAqB,KACvB,CAAC,CACH,CAEMmV,CAAAA,EAAAA,CAAyB,CAAC,CAC9B,MAAA,CAAAhhC,EACA,MAAA8X,CAAAA,CACF,IAImB,CACjB,GAAIA,EAAO,KAAU,GAAA,MAAA,CACnB,OAAOxG,CAAAA,CAAS,gBAAgB,CAC9B,OAAA,CAASA,EAAS,aAAc,CAAA,CAAE,KAAMwG,CAAO,CAAA,KAAgB,CAAC,CAClE,CAAC,EAGH,GAAIA,CAAAA,CAAO,OAAQ,CACjB,GAAIA,EAAO,MAAW,GAAA,QAAA,CACpB,OAAOxG,CAAAA,CAAS,cAAc,CAC5B,KAAA,CAAO,CACLA,CAAS,CAAA,iBAAA,CAAkB,CACzB,QAAU,CAAA,MACZ,CAAC,CACDA,CAAAA,CAAAA,CAAS,kBAAkB,CACzB,QAAA,CAAU,MACZ,CAAC,CACH,CACF,CAAC,CAAA,CAGH,IAAIwG,CAAO,CAAA,MAAA,GAAW,aAAeA,CAAO,CAAA,MAAA,GAAW,SAEjD9X,CAAO,CAAA,SAAA,CAAU,uBAAuB,CAAG,EAAA,MAAA,CAAO,MACpD,OAAOsR,CAAAA,CAAS,kBAAkB,CAAE,QAAA,CAAU,MAAO,CAAC,CAG5D,CAEA,OAAOA,CAAAA,CAAS,eAAgB,CAAA,CAC9B,QAAS,QACX,CAAC,CACH,CAEM2vB,CAAAA,EAAAA,CAAwB,CAAC,CAC7B,SAAA,CAAAnoB,EACA,MAAA9Y,CAAAA,CAAAA,CACA,OAAA8X,CACA,CAAA,KAAA,CAAAuH,CACF,CAK+B,GAAA,CAC7B,IAAIghB,CAAgD,CAAA,EAEpD,CAAA,GAAIvoB,EAAO,KAAS,EAAA,KAAA,CAAM,QAAQA,CAAO,CAAA,KAAK,EAC5CuoB,CAAYvoB,CAAAA,CAAAA,CAAO,MAAM,GAAKjW,CAAAA,CAAAA,EACTyP,EAAS,iBAAkB,CAAA,CAAE,MAAAzP,CAAM,CAAC,GAClCyP,CAAS,CAAA,UAAA,CAAW,CAAE,IAAA,CAAM,SAAU,CAAC,CAC7D,UACQwG,CAAO,CAAA,KAAA,CAChB,QAAWxL,CAAQwL,IAAAA,CAAAA,CAAO,MAAO,CAC/B,IAAMhT,EAAOm7B,CAAa,CAAA,CACxB,UAAAnnB,CACA,CAAA,MAAA,CAAA9Y,EACA,MAAQsM,CAAAA,CAAAA,CACR,MAAA+S,CACF,CAAC,EAEGva,CACFu7B,EAAAA,CAAAA,CAAU,KAAKv7B,CAAI,EAEvB,CAGF,GAAKu7B,CAAAA,CAAU,OAIf,OAAO/uB,CAAAA,CAAS,cAAc,CAC5B,KAAA,CAAO+uB,CACT,CAAC,CACH,EAEMa,EAAyB,CAAA,CAAC,CAC9B,IAAA,CAAAnuB,EACA,SAAA+F,CAAAA,CAAAA,CACA,OAAA9Y,CACA,CAAA,MAAA,CAAA8X,EACA,KAAAuH,CAAAA,CACF,IAM+B,CAC7B,OAAQvH,EAAO,IAA2C,EACxD,KAAK,OACH,CAAA,OAAOsoB,GAAsB,CAC3B,SAAA,CAAAtnB,CACA,CAAA,MAAA,CAAA9Y,EACA,MAAQ8X,CAAAA,CAAAA,CACR,MAAAuH,CACF,CAAC,EACH,KAAK,SAAA,CACH,OAAOihB,EAAwB,CAAA,CAE7B,MAAA,CAAQxoB,CACV,CAAC,CAAA,CACH,KAAK,MACH,CAAA,OAAOyoB,EAAqB,CAAA,CAC1B,KAAAxtB,CACA,CAAA,SAAA,CAAA+F,EACA,MAAA9Y,CAAAA,CAAAA,CACA,OAAQ8X,CACR,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CACH,KAAK,SACL,CAAA,KAAK,SACH,OAAOshB,EAAAA,CAAuB,CAE5B,OAAA3gC,CACA,CAAA,MAAA,CAAQ8X,CACV,CAAC,CAAA,CACH,KAAK,OACH,CAAA,OAAOxG,EAAS,eAAgB,CAAA,CAC9B,QAAS,OACX,CAAC,EACH,KAAK,MAAA,CACH,OAAOA,CAAS,CAAA,eAAA,CAAgB,CAC9B,OAASA,CAAAA,CAAAA,CAAS,IAAK,EACzB,CAAC,CACH,CAAA,KAAK,SACH,OAAOsvB,EAAAA,CAAuB,CAC5B,SAAA9nB,CAAAA,CAAAA,CACA,OAAA9Y,CACA,CAAA,MAAA,CAAQ8X,EACR,KAAAuH,CAAAA,CACF,CAAC,CACH,CAAA,KAAK,SACH,OAAO2hB,EAAAA,CAAuB,CAE5B,MAAAhhC,CAAAA,CAAAA,CACA,OAAQ8X,CACV,CAAC,EACH,KAAK,OAAA,CACH,OAAOmpB,EAAsB,CAAA,CAC3B,UAAAnoB,CACA,CAAA,MAAA,CAAA9Y,EACA,MAAQ8X,CAAAA,CAAAA,CACR,MAAAuH,CACF,CAAC,CACH,CAAA,KAAK,YACH,OAAO/N,CAAAA,CAAS,gBAAgB,CAC9B,OAAA,CAAS,WACX,CAAC,CAAA,CACH,KAAK,SACH,CAAA,OAAOA,EAAS,eAAgB,CAAA,CAC9B,QAAS,SACX,CAAC,EACH,KAAK,MAAA,CACH,OAAOA,CAAAA,CAAS,gBAAgB,CAC9B,OAAA,CAAS,MACX,CAAC,CACL,CACF,CAEM6vB,CAAAA,EAAAA,CAAyB,CAAC,CAC9B,UAAA,CAAAv5B,CACF,CAEuB,GAAA,CACrB,IAAMujB,CAA4B,CAAA,CAChC,KAAM,QACR,CAAA,CAEA,GAAIvjB,CAAAA,CAAY,CACd,IAAMkC,CAAAA,CAA8C,EAC9CyB,CAAAA,CAAAA,CAA0B,EAEhC,CAAA,IAAA,IAAW3J,KAAOgG,CAAY,CAAA,CAC5B,IAAMC,CAAYD,CAAAA,CAAAA,CAAWhG,CAAG,CAEhCkI,CAAAA,CAAAA,CAAWjC,EAAU,IAAI,CAAA,CAAI6U,EAAkB,CAAA,CAC7C,aAAc,KACd,CAAA,MAAA,CAAQ7U,EAAU,MACpB,CAAC,EAEGA,CAAU,CAAA,QAAA,EACZ0D,EAAS,IAAK1D,CAAAA,CAAAA,CAAU,IAAI,EAEhC,CAEAsjB,EAAS,UAAarhB,CAAAA,CAAAA,CAElByB,EAAS,MACX4f,GAAAA,CAAAA,CAAS,QAAW5f,CAAAA,CAAAA,EAExB,CAEA,OAAO4f,CACT,EAEMiW,EAAsB,CAAA,CAAC,CAC3B,SAAAlrB,CAAAA,CAAAA,CACA,OAAAlW,CACF,CAAA,GAGM,CACJ,IAAMiW,CAAAA,CAAOjW,EAAO,OAAQ,CAAA,IAAA,CAAK,CAAE,EAAI4V,CAAAA,CAAQ,CAAC,CAC1CyrB,CAAAA,CAAAA,CAAwB,CAC5B,IAAM,CAAA,QACR,EACMC,CAA8B,CAAA,GAE/BD,CAAK,CAAA,UAAA,GACRA,EAAK,UAAa,CAAA,IAGhBnrB,CAAU,CAAA,IAAA,EACZmrB,EAAK,UAAW,CAAA,IAAA,CAAOnrB,EAAU,IAAK,CAAA,MAAA,CAElCA,CAAU,CAAA,IAAA,CAAK,UACjBorB,CAAa,CAAA,IAAA,CAAK,MAAM,CAG1BD,EAAAA,CAAAA,CAAK,WAAW,IAAO,CAAA,CACrB,KAAM,OACR,CAAA,CAMEnrB,EAAU,UAAY,EAAA,MAAA,GACxBmrB,EAAK,UAAW,CAAA,OAAA,CAAUF,GAAuB,CAC/C,UAAA,CAAYjrB,CAAU,CAAA,UAAA,CAAW,MACnC,CAAC,CAAA,CAEGmrB,EAAK,UAAW,CAAA,OAAA,CAAQ,UAC1BC,CAAa,CAAA,IAAA,CAAK,SAAS,CAI3BprB,CAAAA,CAAAA,CAAAA,CAAU,YAAY,IACxBmrB,EAAAA,CAAAA,CAAK,WAAW,IAAOF,CAAAA,EAAAA,CAAuB,CAC5C,UAAYjrB,CAAAA,CAAAA,CAAU,UAAW,CAAA,IACnC,CAAC,CAEGmrB,CAAAA,CAAAA,CAAK,WAAW,IAAK,CAAA,QAAA,EACvBC,EAAa,IAAK,CAAA,MAAM,GAG1BD,CAAK,CAAA,UAAA,CAAW,KAAO,CACrB,IAAA,CAAM,OACR,CAGEnrB,CAAAA,CAAAA,CAAU,YAAY,KACxBmrB,EAAAA,CAAAA,CAAK,WAAW,KAAQF,CAAAA,EAAAA,CAAuB,CAC7C,UAAYjrB,CAAAA,CAAAA,CAAU,WAAW,KACnC,CAAC,EAEGmrB,CAAK,CAAA,UAAA,CAAW,MAAM,QACxBC,EAAAA,CAAAA,CAAa,KAAK,OAAO,CAAA,EAG3BD,EAAK,UAAW,CAAA,KAAA,CAAQ,CACtB,IAAM,CAAA,OACR,CAGFA,CAAAA,CAAAA,CAAK,WAAW,GAAM,CAAA,CACpB,MAAOnrB,CAAU,CAAA,IAAA,CACjB,KAAM,QACR,CAAA,CACAorB,EAAa,IAAK,CAAA,KAAK,EAEvBD,CAAK,CAAA,QAAA,CAAWC,EAEhB,IAAMjsB,CAAAA,CAAaY,EAAK,UAAW,CAAA,CACjC,IAAMV,CAAAA,CAAAA,CAAe,CACnB,MAAQvV,CAAAA,CAAAA,CAAO,QAAQ,MACvB,CAAA,EAAA,CAAIkW,EAAU,EACd,CAAA,IAAA,CAAM,MACR,CAAC,CAAA,CACD,OAAQ,IACR,CAAA,SAAA,CAAW,MACb,CAAC,CAAA,CACKpR,EAAOm7B,CAAa,CAAA,CACxB,MAAAjgC,CAAAA,CAAAA,CACA,OAAQqhC,CACR,CAAA,KAAA,CAAO,CACL,IAAM,CAAA,CAACnrB,EAAU,MAAQA,CAAAA,CAAAA,CAAU,KAAM,MAAM,CACjD,CACF,CAAC,CAAA,CAED,GAAIpR,CAAM,CAAA,CACR,IAAMb,CAAOqN,CAAAA,CAAAA,CAAS,qBAAqB,CACzC,UAAA,CAAY,KACZ,IAAM+D,CAAAA,CAAAA,CAAW,MAAQ,EACzB,CAAA,IAAA,CAAAvQ,CACF,CAAC,CAAA,CACDmR,EAAK,GAAIhS,CAAAA,CAAI,EACf,CACF,CAAA,CAEMs9B,GAAkB,CAAC,CACvB,UAAArrB,CACA,CAAA,MAAA,CAAAlW,CACF,CAAA,GAGM,CACJohC,EAAoB,CAAA,CAAE,UAAAlrB,CAAW,CAAA,MAAA,CAAAlW,CAAO,CAAC,CAAA,CAEzC,IAAMiW,CAAOjW,CAAAA,CAAAA,CAAO,QAAQ,IAAK,CAAA,CAAE,GAAI4V,CAAQ,CAAC,EAE1C,CAAE,KAAA,CAAAqF,CAAO,CAAA,MAAA,CAAAmD,EAAQ,QAAAG,CAAAA,CAAAA,CAAU,UAAAF,CAAU,CAAA,CACzCF,GAAsBjI,CAAS,CAAA,CAEjC,GAAIkI,CAAQ,CAAA,CACV,IAAMojB,CAAmBvrB,CAAAA,CAAAA,CAAK,WAAW,CACvC,IAAA,CAAMV,EAAe,CACnB,MAAA,CAAQvV,CAAO,CAAA,OAAA,CAAQ,OACvB,EAAIkW,CAAAA,CAAAA,CAAU,GACd,IAAM,CAAA,QACR,CAAC,CACD,CAAA,MAAA,CAAQ,KACR,SAAW,CAAA,MACb,CAAC,CACD,CAAA,GAAIsrB,EAAiB,IAAM,CAAA,CACzB,IAAM18B,CAAOm7B,CAAAA,CAAAA,CAAa,CACxB,MAAAjgC,CAAAA,CAAAA,CACA,OAAQoe,CACR,CAAA,KAAA,CAAO,CACL,IAAM,CAAA,CAAClI,EAAU,MAAQA,CAAAA,CAAAA,CAAU,KAAM,QAAQ,CACnD,CACF,CAAC,CAAA,CAED,GAAIpR,CAAM,CAAA,CACR,IAAMb,CAAOqN,CAAAA,CAAAA,CAAS,oBAAqB,CAAA,CACzC,WAAY,IACZ,CAAA,IAAA,CAAMkwB,EAAiB,IACvB,CAAA,IAAA,CAAA18B,CACF,CAAC,CAAA,CACDmR,EAAK,GAAIhS,CAAAA,CAAI,EACf,CAEA,GAAIgX,EAAO,CACT,IAAMmd,EAAkBniB,CAAK,CAAA,UAAA,CAAW,CACtC,IAAA,CAAMV,EAAe,CACnB,MAAA,CAAQvV,EAAO,OAAQ,CAAA,MAAA,CACvB,GAAIkW,CAAU,CAAA,EAAA,CACd,KAAM,OACR,CAAC,EACD,MAAQ,CAAA,IAAA,CACR,UAAW,MACb,CAAC,EACD,GAAIkiB,CAAAA,CAAgB,IAAM,CAAA,CACxB,IAAMqJ,CAAanwB,CAAAA,CAAAA,CAAS,kBAAkB,CAC5C,QAAA,CAAUkwB,EAAiB,IAC7B,CAAC,EACKE,CAAYj+B,CAAAA,kBAAAA,CAAG,QAAQ,sBAC3BA,CAAAA,kBAAAA,CAAG,WAAW,YACdg+B,CAAAA,CACF,EACMx9B,CAAOqN,CAAAA,CAAAA,CAAS,qBAAqB,CACzC,UAAA,CAAY,KACZ,IAAM8mB,CAAAA,CAAAA,CAAgB,KACtB,IAAM9mB,CAAAA,CAAAA,CAAS,sBAAsB,CACnC,SAAA,CAAWowB,EACX,UAAYD,CAAAA,CACd,CAAC,CACH,CAAC,EACDxrB,CAAK,CAAA,GAAA,CAAIhS,CAAI,EACf,CACF,CACF,CACF,CAEA,GAAIoa,CAAAA,CAAW,CACb,IAAMsjB,CAAAA,CAAsB1rB,EAAK,UAAW,CAAA,CAC1C,KAAMV,CAAe,CAAA,CACnB,OAAQvV,CAAO,CAAA,OAAA,CAAQ,OACvB,EAAIkW,CAAAA,CAAAA,CAAU,GACd,IAAM,CAAA,WACR,CAAC,CAAA,CACD,OAAQ,IACR,CAAA,SAAA,CAAW,MACb,CAAC,CAAA,CACD,GAAIyrB,CAAoB,CAAA,IAAA,CAAM,CAC5B,IAAM78B,CAAAA,CAAOm7B,EAAa,CACxB,MAAA,CAAAjgC,EACA,MAAQqe,CAAAA,CAAAA,CACR,MAAO,CACL,IAAA,CAAM,CAACnI,CAAAA,CAAU,OAAQA,CAAU,CAAA,IAAA,CAAM,WAAW,CACtD,CACF,CAAC,CAED,CAAA,GAAIpR,EAAM,CACR,IAAMb,EAAOqN,CAAS,CAAA,oBAAA,CAAqB,CACzC,UAAY,CAAA,IAAA,CACZ,KAAMqwB,CAAoB,CAAA,IAAA,CAC1B,KAAA78B,CACF,CAAC,EACDmR,CAAK,CAAA,GAAA,CAAIhS,CAAI,EACf,CAEA,GAAIsa,CAAU,CAAA,CACZ,IAAM+X,CAAqBrgB,CAAAA,CAAAA,CAAK,WAAW,CACzC,IAAA,CAAMV,EAAe,CACnB,MAAA,CAAQvV,EAAO,OAAQ,CAAA,MAAA,CACvB,EAAIkW,CAAAA,CAAAA,CAAU,GACd,IAAM,CAAA,UACR,CAAC,CACD,CAAA,MAAA,CAAQ,KACR,SAAW,CAAA,MACb,CAAC,CACD,CAAA,GAAIogB,EAAmB,IAAM,CAAA,CAC3B,IAAMsL,CAAgBtwB,CAAAA,CAAAA,CAAS,kBAAkB,CAC/C,QAAA,CAAUqwB,CAAoB,CAAA,IAChC,CAAC,CACKD,CAAAA,CAAAA,CAAYj+B,mBAAG,OAAQ,CAAA,sBAAA,CAC3BA,mBAAG,UAAW,CAAA,YAAA,CACdm+B,CACF,CACM39B,CAAAA,CAAAA,CAAOqN,EAAS,oBAAqB,CAAA,CACzC,WAAY,IACZ,CAAA,IAAA,CAAMglB,EAAmB,IACzB,CAAA,IAAA,CAAMhlB,CAAS,CAAA,qBAAA,CAAsB,CACnC,SAAWowB,CAAAA,CAAAA,CACX,WAAYE,CACd,CAAC,CACH,CAAC,CAAA,CACD3rB,EAAK,GAAIhS,CAAAA,CAAI,EACf,CACF,CACF,CACF,CACF,CAAA,CAEag8B,EAAe,CAAC,CAC3B,KAAAltB,CACA,CAAA,SAAA,CAAA+F,EAAY,EAAC,CACb,OAAA9Y,CACA,CAAA,MAAA,CAAA8X,EACA,KAAAuH,CAAAA,CACF,IAM+B,CAC7B,IAAMpJ,EAAOjW,CAAO,CAAA,OAAA,CAAQ,KAAK,CAAE,EAAA,CAAI4V,CAAQ,CAAC,CAAA,CAE5C9Q,CAEJ,CAAA,GAAIgT,EAAO,IAAM,CAAA,CACf,IAAMsV,CAAYptB,CAAAA,CAAAA,CAAO,QAAQ,YAA8B8X,CAAAA,CAAAA,CAAO,IAAI,CAEpEzC,CAAAA,CAAAA,CAAaY,EAAK,UAAW,CAAA,CACjC,KAAM6B,CAAO,CAAA,IAAA,CACb,OAAQ,IACR,CAAA,SAAA,CACEsV,CAAU,CAAA,IAAA,GAAS,QACnBptB,CAAO,CAAA,MAAA,CAAO,MAAM,OACnBA,GAAAA,CAAAA,CAAO,OAAO,KAAM,CAAA,IAAA,GAAS,cAC5BA,CAAO,CAAA,MAAA,CAAO,MAAM,IAAS,GAAA,sBAAA,CAAA,EAC/BkgC,GAA2B,CACzB,MAAA,CAAAlgC,EACA,MAAQotB,CAAAA,CACV,CAAC,CAAA,CACG,OACA,MACR,CAAC,EACDtoB,CAAOwM,CAAAA,CAAAA,CAAS,kBAAkB,CAChC,QAAA,CAAU+D,EAAW,IAAQ,EAAA,EAC/B,CAAC,EACH,CAAA,KAAA,GAAWyC,EAAO,IAChBhT,CAAAA,CAAAA,CAAOo8B,GAAuB,CAC5B,IAAA,CAAAnuB,EACA,SAAA+F,CAAAA,CAAAA,CACA,OAAA9Y,CACA,CAAA,MAAA,CAAA8X,EACA,KAAAuH,CAAAA,CACF,CAAC,CACQvH,CAAAA,KAAAA,GAAAA,CAAAA,CAAO,MAEhB,GADAA,CAAAA,CAAS4E,GAAkB,CAAE,YAAA,CAAc,MAAO,MAAA5E,CAAAA,CAAO,CAAC,CACtDA,CAAAA,CAAAA,CAAO,KAAO,CAAA,CAChB,IAAMuoB,CAAgC,CAAA,GAEtC,IAAW/zB,IAAAA,CAAAA,IAAQwL,EAAO,KAAO,CAAA,CAE/B,IAAMhT,CAAOm7B,CAAAA,CAAAA,CAAa,CACxB,SAAAnnB,CAAAA,CAAAA,CACA,OAAA9Y,CACA,CAAA,MAAA,CAAQsM,EACR,KAAA+S,CAAAA,CACF,CAAC,CAAA,CACGva,GACFu7B,CAAU,CAAA,IAAA,CAAKv7B,CAAI,EAEvB,CAEAA,EACEgT,CAAO,CAAA,eAAA,GAAoB,MACvBxG,CAAS,CAAA,oBAAA,CAAqB,CAAE,KAAO+uB,CAAAA,CAAU,CAAC,CAClD/uB,CAAAA,CAAAA,CAAS,cAAc,CAAE,KAAA,CAAO+uB,CAAU,CAAC,EACnD,CAEEv7B,KAAAA,CAAAA,CAAOm7B,EAAa,CAClB,SAAA,CAAAnnB,EACA,MAAA9Y,CAAAA,CAAAA,CACA,OAAA8X,CACA,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CAAA,KAIHva,EAAOo8B,EAAuB,CAAA,CAC5B,UAAApoB,CACA,CAAA,MAAA,CAAA9Y,EACA,MAAQ,CAAA,CACN,KAAM,SACR,CAAA,CACA,MAAAqf,CACF,CAAC,EAIH,GAAItM,CAAAA,EAAQD,GAAsBC,CAAI,CAAA,CAAG,CAEvC,GAAI+F,CAAAA,CAAU,OAAQ,CACpB,IAAMzD,EAAaY,CAAK,CAAA,UAAA,CAAW,CACjC,IAAA,CAAAlD,EACA,MAAQ,CAAA,IAAA,CACR,UAAW,OACb,CAAC,EACK9O,CAAOqN,CAAAA,CAAAA,CAAS,qBAAqB,CACzC,IAAA,CAAM+D,EAAW,IAAQ,EAAA,EAAA,CACzB,WAAYyD,CACd,CAAC,EACD7C,CAAK,CAAA,GAAA,CAAIhS,CAAI,EACf,CAGA,GAAI6T,CAAAA,CAAO,OAAS,MAAUhT,EAAAA,CAAAA,CAAM,CAClC,IAAMuQ,CAAAA,CAAaY,EAAK,UAAW,CAAA,CACjC,KAAAlD,CACA,CAAA,MAAA,CAAQ,KACR,SAAW,CAAA,MACb,CAAC,CACK9O,CAAAA,CAAAA,CAAOqN,CAAS,CAAA,oBAAA,CAAqB,CACzC,OAASguB,CAAAA,EAAAA,CAAoB,CAAE,MAAAxnB,CAAAA,CAAO,CAAC,CACvC,CAAA,UAAA,CAAY,KACZ,IAAMzC,CAAAA,CAAAA,CAAW,MAAQ,EACzB,CAAA,IAAA,CAAAvQ,CACF,CAAC,CAAA,CACDmR,EAAK,GAAIhS,CAAAA,CAAI,EACf,CACF,CAEA,OAAOa,CACT,CAAA,CAEa0T,GAA6C,CAAC,CAAE,OAAAxY,CAAO,CAAA,GAAM,CAQxE,IAAM0W,CAAAA,CAPO1W,EAAO,UAAW,CAAA,CAC7B,GAAI4V,CACJ,CAAA,cAAA,CAAgB5V,EAAO,MAAO,CAAA,IAAA,CAC9B,IAAMA,CAAAA,CAAAA,CAAO,MACf,CAAC,CAAA,CAG0B,WAAW,CACpC,IAAA,CAAM,gBACN,MAAQ,CAAA,IAAA,CACR,UAAW,MACb,CAAC,EAEKsW,CAAkC,CAAA,GAExCtW,CAAO,CAAA,OAAA,CACL,YACA,WACA,CAAA,aAAA,CACA,QACA,CAAA,QAAA,CACCkb,GAAU,CACLA,CAAAA,CAAM,OAAS,WACjBqmB,CAAAA,EAAAA,CAAgB,CAAE,SAAWrmB,CAAAA,CAAAA,CAAM,UAAW,MAAAlb,CAAAA,CAAO,CAAC,CAC7Ckb,CAAAA,CAAAA,CAAM,OAAS,WACxB+kB,CAAAA,CAAAA,CAAa,CACX,IAAM/kB,CAAAA,CAAAA,CAAM,IACZ,CAAA,MAAA,CAAAlb,EACA,MAAQkb,CAAAA,CAAAA,CAAM,UAAU,MACxB,CAAA,KAAA,CAAO,CAEL,IAAM,CAAA,EACR,CACF,CAAC,EACQA,CAAM,CAAA,IAAA,GAAS,cACxB+kB,CAAa,CAAA,CACX,KAAM/kB,CAAM,CAAA,IAAA,CACZ,OAAAlb,CACA,CAAA,MAAA,CAAQkb,EAAM,WAAY,CAAA,MAAA,CAC1B,MAAO,CAEL,IAAA,CAAM,EACR,CACF,CAAC,CACQA,CAAAA,CAAAA,CAAM,OAAS,QACxB+kB,CAAAA,CAAAA,CAAa,CACX,IAAM/kB,CAAAA,CAAAA,CAAM,KACZ,MAAAlb,CAAAA,CAAAA,CACA,MAAQkb,CAAAA,CAAAA,CAAM,OACd,KAAO,CAAA,CAEL,KAAM,EACR,CACF,CAAC,CAAA,CACQA,EAAM,IAAS,GAAA,QAAA,EACxB5E,EAAQ,IAAK4E,CAAAA,CAAAA,CAAM,MAAM,EAE7B,CACF,EAEAukB,EAAoB,CAAA,CAAE,UAAY/oB,CAAAA,CAAAA,CAAe,OAAA1W,CAAQ,CAAA,OAAA,CAAAsW,CAAQ,CAAC,EACpE,EC9pCaiB,IAAAA,EAAAA,CAAkD,CAC7D,MAAQ,CAAA,CACN,KAAM,YACN,CAAA,eAAA,CAAiB,KACjB,KAAO,CAAA,UAAA,CACP,KAAM,KACR,CAAA,CACA,OAAAiB,CAAAA,EAAAA,CACA,cAAAyb,EACA,CAAA,IAAA,CAAM,sBACN,MAAQ,CAAA,OAAA,CACR,cAAe,CAACj0B,CAAAA,CAAQgW,IAAY,CAClChW,CAAAA,CAAO,OAAO,KAAQgW,CAAAA,CAAAA,CAAQ,cAAc,CAC1C,YAAA,CAAc,CACZ,IAAM,CAAA,sBAAA,CACN,oBAAqB,KACrB,CAAA,OAAA,CAAS,EAAQhW,CAAO,CAAA,MAAA,CAAO,MAC/B,IAAM,CAAA,YACR,EACA,OAAS,CAAA,CACP,QAAUqC,CAAa,GAAA,CAAE,QAAAA,CAAQ,CAAA,CAAA,CACjC,OAASC,CAAU,GAAA,CAAE,KAAAA,CAAK,CAAA,CAC5B,CACA,CAAA,KAAA,CAAOtC,EAAO,MAAO,CAAA,KACvB,CAAC,EACH,CACF,ECxBO,IAAM6hC,GAAc,CAAC,CAC1B,UAAA3rB,CACA,CAAA,MAAA,CAAAlW,CACF,CAAA,GAGM,CACJ,IAAMiW,CAAAA,CAAOjW,EAAO,OAAQ,CAAA,IAAA,CAAK,CAAE,EAAIA,CAAAA,CAAAA,CAAO,IAAK,CAAC,CAAA,CAOpD,OALiB23B,EAAqB,CAAA,CACpC,QAAS33B,CAAO,CAAA,OAAA,CAChB,KAAAiW,CACA,CAAA,SAAA,CAAAC,CACF,CAAC,CAEH,CAEa4rB,CAAAA,EAAAA,CAAe,CAAC,CAC3B,SAAA,CAAA5rB,EACA,MAAAlW,CAAAA,CACF,IAGM,CACJ,IAAMiW,EAAOjW,CAAO,CAAA,OAAA,CAAQ,KAAK,CAAE,EAAA,CAAIA,EAAO,IAAK,CAAC,EAOhD+hC,CAAoC,CAAA,CACtC,OAAQ,IACR,CAAA,IAAA,CARsBhsB,GAAiB,CACvC,OAAA,CAAS/V,EAAO,OAChB,CAAA,IAAA,CAAAiW,EACA,SAAAC,CAAAA,CAAAA,CACA,KAAM,OACR,CAAC,EAGuB,IAAQ,EAAA,EAChC,EASA,GARK6rB,CAAAA,CAAU,IACbA,GAAAA,CAAAA,CAAY9rB,EAAK,MAAO,CAAA,CACtB,OAAQ,IACR,CAAA,MAAA,CAAQjW,EAAO,IACf,CAAA,IAAA,CAAM,cACR,CAAC,CAAA,CAAA,CAEYF,EAAgBE,CAAO,CAAA,OAAA,CAAQ,MAAM,CACzC,CAAA,IAAA,GAAS,wBAAyB,CAC3C,IAAMgiC,CAAa/rB,CAAAA,CAAAA,CAAK,OAAO,CAC7B,MAAA,CAAQ,KACR,MAAQ,CAAA,OAAA,CACR,KAAM,YACR,CAAC,EACD8rB,CAAY,CAAA,CACV,GAAGC,CACH,CAAA,IAAA,CAAM,GAAGA,CAAW,CAAA,IAAI,IAAID,CAAU,CAAA,IAAI,CAC5C,CAAA,CAAA,EACF,CACA,OAAOA,CACT,EAEaE,EAAkB,CAAA,CAAC,CAC9B,SAAA/rB,CAAAA,CAAAA,CACA,OAAAlW,CACF,CAAA,GAGM,CACJ,IAAMiW,CAAAA,CAAOjW,EAAO,OAAQ,CAAA,IAAA,CAAK,CAAE,EAAIA,CAAAA,CAAAA,CAAO,IAAK,CAAC,CAAA,CAQpD,OAP2B+V,EAAiB,CAAA,CAC1C,QAAS/V,CAAO,CAAA,OAAA,CAChB,KAAAiW,CACA,CAAA,SAAA,CAAAC,EACA,IAAM,CAAA,UACR,CAAC,CACuC,CAAA,IAAA,EAAQ,SAElD,CCxEA,CAAA,IAAMgsB,GAAmB,gBACZC,CAAAA,EAAAA,CAAe,UACtBC,CAAAA,EAAAA,CAAe,WAEfC,EAAqB/wB,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,UAAW,CAAC,CAAA,CAC7DgxB,GAAoBhxB,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,SAAU,CAAC,CAEpDixB,CAAAA,EAAAA,CAAyB,CAAC,CACrC,MAAA,CAAAviC,CACF,CAAA,GAEM,CACJ,IAAMiW,CAAAA,CAAOjW,EAAO,OAAQ,CAAA,IAAA,CAAK,CAAE,EAAIA,CAAAA,CAAAA,CAAO,IAAK,CAAC,CAAA,CAE9CwiC,EAA2BvsB,CAAK,CAAA,UAAA,CAAW,CAE/C,IAAM,CAAA,CAAA,kCAAA,EAAqCisB,EAAgB,CAC3D,CAAA,CAAA,IAAA,CAAMliC,CAAO,CAAA,MAAA,CAAO,KACpB,MAAQ,CAAA,IAAA,CACR,UAAW,OACb,CAAC,EAED,GAAIwiC,CAAAA,CAAyB,KAAM,CACjC,IAAMn5B,EAAaiI,CAAS,CAAA,qBAAA,CAAsB,CAChD,SAAWA,CAAAA,CAAAA,CAAS,gBAAgB,CAClC,OAAA,CAASA,EAAS,GAAI,CAAA,MAAA,CAAO,CAAC,CAChC,CAAC,EACD,UAAYA,CAAAA,CAAAA,CAAS,kBAAkB,CACrC,aAAA,CAAe,CAACA,CAAS,CAAA,iBAAA,CAAkB,CAAE,QAAU8wB,CAAAA,EAAa,CAAC,CAAC,CAAA,CACtE,SAAUD,EACZ,CAAC,CACH,CAAC,EAEKM,CAAKnxB,CAAAA,CAAAA,CAAS,cAAc,CAChC,UAAA,CAAYA,EAAS,aAAc,CAAA,CACjC,UAAW,IACX,CAAA,UAAA,CAAY,CACV,CACE,IAAA,CAAM,KACN,IAAMA,CAAAA,CAAAA,CAAS,kBAAkB,CAAE,QAAA,CAAU,QAAS,CAAC,CACzD,CACA,CAAA,CACE,WAAY,KACZ,CAAA,IAAA,CAAM,UACN,IAAMA,CAAAA,CAAAA,CAAS,kBAAkB,CAAE,QAAA,CAAU8wB,EAAa,CAAC,CAC7D,EACA,CACE,UAAA,CAAY,MACZ,IAAM,CAAA,UAAA,CACN,IAAM9wB,CAAAA,CAAAA,CAAS,kBAAkB,CAAE,QAAA,CAAU,SAAU,CAAC,CAC1D,CACF,CACA,CAAA,UAAA,CAAYA,EAAS,aAAc,CAAA,CACjC,MAAO,CAACjI,CAAU,CACpB,CAAC,CAAA,CACD,WAAY,CACViI,CAAAA,CAAS,aAAc,CAAA,CACrB,UAAWjI,CACX,CAAA,UAAA,CAAYiI,EAAS,gBAAiB,CAAA,CACpC,UAAW,KACX,CAAA,GAAA,CAAK,CACH,CACE,GAAA,CAAK,MACL,KAAOA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,IAAK,CAAC,CAC3C,CACA,CAAA,CACE,IAAK3R,EAAoBK,CAAAA,CAAAA,CAAO,QAAQ,MAAM,CAAA,CAC9C,MAAOsR,CAAS,CAAA,UAAA,CAAW,CACzB,IAAM,CAAA,CAAA,+CAAA,EAAkD3R,GAAoBK,CAAO,CAAA,OAAA,CAAQ,MAAM,CAAC,CAAA,CACpG,CAAC,CACH,CACF,CACF,CAAC,EACD,IAAM,CAAA,QAAA,CACN,SAAUqJ,CACZ,CAAC,EACDiI,CAAS,CAAA,WAAA,CAAY,CACnB,UAAY+wB,CAAAA,EAAAA,CACZ,cAAe/wB,CAAS,CAAA,KAAA,CAAM,CAC5B,UAAY,CAAA,CACVA,EAAS,qBAAsB,CAAA,CAC7B,UAAYA,CAAAA,CAAAA,CAAS,iBAAiB,CACpC,IAAA,CAAMA,EAAS,wBAAyB,CAAA,CACtC,WAAY,QACZ,CAAA,IAAA,CAAM,WACR,CAAC,CAAA,CACD,MAAO+wB,EACT,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CACD/wB,CAAAA,CAAAA,CAAS,YAAY,CACnB,UAAA,CAAYA,EAAS,wBAAyB,CAAA,CAC5C,WAAYgxB,EACZ,CAAA,UAAA,CAAY,KACZ,IAAMhxB,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,MAAO,CAAC,CAC5C,CAAC,CACD,CAAA,aAAA,CAAeA,CAAS,CAAA,KAAA,CAAM,CAC5B,UAAY,CAAA,CACVA,EAAS,qBAAsB,CAAA,CAC7B,WAAYA,CAAS,CAAA,gBAAA,CAAiB,CACpC,IAAMA,CAAAA,CAAAA,CAAS,yBAAyB,CACtC,UAAA,CAAY,SACZ,IAAM,CAAA,MACR,CAAC,CACD,CAAA,KAAA,CAAOA,CAAS,CAAA,wBAAA,CAAyB,CACvC,UAAY,CAAA,SAAA,CACZ,KAAM,MACR,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,EACDA,CAAS,CAAA,WAAA,CAAY,CACnB,UAAYA,CAAAA,CAAAA,CAAS,wBAAyB,CAAA,CAC5C,WAAYgxB,EACZ,CAAA,UAAA,CAAY,KACZ,IAAMhxB,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,SAAU,CAAC,CAC/C,CAAC,CACD,CAAA,aAAA,CAAeA,EAAS,KAAM,CAAA,CAC5B,WAAY,CACVA,CAAAA,CAAS,sBAAsB,CAC7B,UAAA,CAAYA,EAAS,gBAAiB,CAAA,CACpC,KAAMA,CAAS,CAAA,wBAAA,CAAyB,CACtC,UAAY,CAAA,QAAA,CACZ,KAAM,SACR,CAAC,EACD,KAAOA,CAAAA,CAAAA,CAAS,yBAAyB,CACvC,UAAA,CAAY,UACZ,IAAM,CAAA,SACR,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAAA,CACDA,EAAS,WAAY,CAAA,CACnB,WAAYA,CAAS,CAAA,wBAAA,CAAyB,CAC5C,UAAYgxB,CAAAA,EAAAA,CACZ,WAAY,IACZ,CAAA,IAAA,CAAMhxB,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,MAAO,CAAC,CAC5C,CAAC,EACD,aAAeA,CAAAA,CAAAA,CAAS,MAAM,CAC5B,UAAA,CAAY,CACVA,CAAS,CAAA,qBAAA,CAAsB,CAC7B,UAAYA,CAAAA,CAAAA,CAAS,iBAAiB,CACpC,IAAA,CAAMA,CAAS,CAAA,wBAAA,CAAyB,CACtC,UAAY,CAAA,QAAA,CACZ,KAAM,MACR,CAAC,EACD,KAAOA,CAAAA,CAAAA,CAAS,yBAAyB,CACvC,UAAA,CAAY,UACZ,IAAM,CAAA,MACR,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CACDA,CAAAA,CAAAA,CAAS,YAAY,CACnB,UAAA,CAAYA,EAAS,wBAAyB,CAAA,CAC5C,WAAYgxB,EACZ,CAAA,UAAA,CAAY,KACZ,IAAMhxB,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,OAAQ,CAAC,CAC7C,CAAC,CAAA,CACD,cAAeA,CAAS,CAAA,KAAA,CAAM,CAC5B,UAAY,CAAA,CACVA,EAAS,qBAAsB,CAAA,CAC7B,WAAYA,CAAS,CAAA,gBAAA,CAAiB,CACpC,IAAMA,CAAAA,CAAAA,CAAS,yBAAyB,CACtC,UAAA,CAAY,SACZ,IAAM,CAAA,OACR,CAAC,CAAA,CACD,MAAOA,CAAS,CAAA,wBAAA,CAAyB,CACvC,UAAY,CAAA,SAAA,CACZ,KAAM,OACR,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,EACDA,CAAS,CAAA,eAAA,CAAgB,CACvB,UAAA,CAAYA,EAAS,sBAAuB,CAAA,CAC1C,SAAU,CAACA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,QAAS,CAAC,CAAC,CACpD,CAAC,CACH,CAAC,CACH,CAAA,CACA,MAAO,CACL,CACE,QAASA,CAAS,CAAA,iBAAA,CAAkB,CAClC,QAAUA,CAAAA,CAAAA,CAAS,WAAW,CAC5B,IAAA,CAAMc,EAAU,OAAQ,CAAA,IAC1B,CAAC,CACH,CAAC,EACD,IAAMgwB,CAAAA,EACR,CACF,CACF,CAAC,EACD,IAAMI,CAAAA,CAAAA,CAAyB,IACjC,CAAC,EACDvsB,CAAK,CAAA,GAAA,CAAIwsB,CAAE,EACb,CACF,EAEMC,EAAwB,CAAA,CAAC,CAC7B,EAAAltB,CAAAA,CAAAA,CACA,WAAAmtB,CACA,CAAA,MAAA,CAAA3iC,CACF,CAIM,GAAA,CAEJ,IAAMwiC,CADOxiC,CAAAA,CAAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,CAAE,EAAIA,CAAAA,CAAAA,CAAO,IAAK,CAAC,CAAA,CACd,WAAW,CAE/C,IAAA,CAAM,qCAAqCkiC,EAAgB,CAAA,CAAA,CAC3D,KAAMliC,CAAO,CAAA,MAAA,CAAO,KACpB,SAAW,CAAA,OACb,CAAC,CASD,CAAA,OARqCsR,CAAS,CAAA,cAAA,CAAe,CAC3D,YAAckxB,CAAAA,CAAAA,CAAyB,MAAQ,EAC/C,CAAA,UAAA,CAAY,CACVlxB,CAAS,CAAA,GAAA,CAAI,OAAOkE,CAAE,CAAA,CACtB,UACAmtB,CAAarxB,CAAAA,CAAAA,CAAS,IAAI,OAAQ,CAAA,IAAI,EAAI,MAC5C,CACF,CAAC,CAEH,CAAA,CAEasxB,GAAqB,CAAC,CAAE,OAAA5iC,CAAO,CAAA,GAAkC,CAC5E,IAAMiW,CAAAA,CAAOjW,EAAO,OAAQ,CAAA,IAAA,CAAK,CAAE,EAAIA,CAAAA,CAAAA,CAAO,IAAK,CAAC,CAAA,CAE9C8J,EAAyB,CAC7B,CACE,IAAM,CAAA,KAAA,CACN,KAAMwH,CAAS,CAAA,eAAA,CAAgB,CAC7B,OAAS,CAAA,QACX,CAAC,CACH,CAAA,CACA,CACE,UAAY,CAAA,KAAA,CACZ,KAAM,WACN,CAAA,IAAA,CAAMA,EAAS,eAAgB,CAAA,CAC7B,QAAS,SACX,CAAC,CACH,CACF,EAEMuxB,CAAevxB,CAAAA,CAAAA,CAAS,qBAAqB,CACjD,UAAA,CAAY,KACZ,IAAM6wB,CAAAA,EAAAA,CACN,KAAM7wB,CAAS,CAAA,aAAA,CAAc,CAC3B,KAAO,CAAA,CACLA,EAAS,oBAAqB,CAAA,CAC5B,MAAO,CACLA,CAAAA,CAAS,iBAAkB,CAAA,CACzB,SAAU,CAAQ8wB,KAAAA,EAAAA,EAAY,MAAMziC,EAAoBK,CAAAA,CAAAA,CAAO,QAAQ,MAAM,CAAC,4CAChF,CAAC,CAAA,CACDsR,EAAS,iBAAkB,CAAA,CACzB,WAAAxH,CACA,CAAA,mBAAA,CAAqB,IACvB,CAAC,CACH,CACF,CAAC,CACH,CACF,CAAC,CAAA,CACD,eAAgB,CACd,CACE,QAASwH,CAAS,CAAA,iBAAA,CAAkB,CAClC,QAAUA,CAAAA,CAAAA,CAAS,WAAW,CAC5B,IAAA,CAAMc,EAAU,OAAQ,CAAA,IAC1B,CAAC,CACH,CAAC,CACD,CAAA,IAAA,CAAMgwB,EACR,CACF,CACF,CAAC,CACDnsB,CAAAA,CAAAA,CAAK,IAAI4sB,CAAY,EACvB,EAEaC,EAAoB,CAAA,CAAC,CAChC,UAAAH,CAAAA,CAAAA,CACA,UAAAzsB,CACA,CAAA,MAAA,CAAAlW,EACA,YAAA+iC,CAAAA,CACF,CAKM,GAAA,CACJ,IAAM9sB,CAAOjW,CAAAA,CAAAA,CAAO,QAAQ,IAAK,CAAA,CAAE,GAAIA,CAAO,CAAA,IAAK,CAAC,CAC9CgjC,CAAAA,CAAAA,CAAWnB,GAAY,CAAE,SAAA,CAAA3rB,EAAW,MAAAlW,CAAAA,CAAO,CAAC,CAC5CqV,CAAAA,CAAAA,CAAastB,CACf1sB,CAAAA,CAAAA,CAAK,WAAW,CAEd,IAAA,CAAM,uCAAuCC,CAAU,CAAA,EAAE,GACzD,IAAMlW,CAAAA,CAAAA,CAAO,OAAO,iBAAkB,CAAA,IAAA,CACtC,OAAQ,IACR,CAAA,eAAA,CAAiBA,EAAO,MAAO,CAAA,iBAAA,CAAkB,KACjD,SAAW,CAAA,OACb,CAAC,CACDiW,CAAAA,CAAAA,CAAK,WAAW,CAEd,IAAA,CAAM,8BAA8BC,CAAU,CAAA,EAAE,GAChD,IAAMlW,CAAAA,CAAAA,CAAO,OAAO,SAAU,CAAA,IAAA,CAC9B,OAAQ,IACR,CAAA,eAAA,CAAiBA,EAAO,MAAO,CAAA,SAAA,CAAU,KACzC,SAAW,CAAA,OACb,CAAC,CAAA,CAoBL,OAnBkBsR,CAAS,CAAA,aAAA,CAAc,CACvC,WAAa,CAAA,IAAA,CACb,WAAYA,CAAS,CAAA,aAAA,CAAc,CACjC,UAAY,CAAA,CACV,CACE,UAAYqM,CAAAA,EAAAA,CAAyBzH,CAAS,CAC9C,CAAA,IAAA,CAAM,UACN,IAAM8sB,CAAAA,CACR,CACF,CAAA,CACA,WAAYL,CAAaI,CAAAA,CAAAA,CAAe,OACxC,UAAYL,CAAAA,EAAAA,CAAsB,CAChC,EAAIxsB,CAAAA,CAAAA,CAAU,GACd,UAAAysB,CAAAA,CAAAA,CACA,OAAA3iC,CACF,CAAC,CACH,CAAC,CAAA,CACD,KAAMqV,CAAW,CAAA,IAAA,EAAQ,EAC3B,CAAC,CAEH,CClUA,CAAA,IAAM4tB,GAAyB,sBACzBC,CAAAA,EAAAA,CAAyB,uBAEzBC,EAA+B,CAAA,CAAC,CACpC,MAAAnjC,CAAAA,CACF,IAEM,CACJ,IAAMiW,EAAOjW,CAAO,CAAA,OAAA,CAAQ,KAAK,CAAE,EAAA,CAAIA,EAAO,IAAK,CAAC,EAE9CojC,CAAiCntB,CAAAA,CAAAA,CAAK,WAAW,CAErD,IAAA,CAAM,2CAA2CgtB,EAAsB,CAAA,CAAA,CACvE,KAAMjjC,CAAO,CAAA,MAAA,CAAO,KACpB,MAAQ,CAAA,IAAA,CACR,UAAW,OACb,CAAC,EAEKyiC,CAAKnxB,CAAAA,CAAAA,CAAS,aAAc,CAAA,CAChC,WAAYA,CAAS,CAAA,aAAA,CAAc,CACjC,SAAW,CAAA,IAAA,CACX,WAAY,CACV,CACE,KAAM,UACN,CAAA,IAAA,CAAMA,EAAS,iBAAkB,CAAA,CAC/B,SAAU,CAAYc,SAAAA,EAAAA,CAAAA,CAAU,QAAQ,IAAI,CAAA,CAAA,CAC9C,CAAC,CACH,EACA,CACE,IAAA,CAAM,OACN,IAAMd,CAAAA,CAAAA,CAAS,kBAAkB,CAAE,QAAA,CAAU,GAAI,CAAC,CACpD,CACF,CACA,CAAA,UAAA,CAAY,CACVA,CAAS,CAAA,aAAA,CAAc,CACrB,UAAYA,CAAAA,CAAAA,CAAS,gBAAiB,CAAA,CACpC,IAAK,CACH,CACE,OAAQA,CAAS,CAAA,wBAAA,CAAyB,CACxC,UAAY,CAAA,UAAA,CACZ,KAAM,CACR,CAAC,CACH,CACF,CACF,CAAC,CACD,CAAA,IAAA,CAAM,QACR,CAAC,CAAA,CACDA,EAAS,WAAY,CAAA,CACnB,WAAYA,CAAS,CAAA,wBAAA,CAAyB,CAC5C,UAAYA,CAAAA,CAAAA,CAAS,WAAW,CAC9B,IAAA,CAAM,MACR,CAAC,CAAA,CACD,KAAMA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,MAAO,CAAC,CAC5C,CAAC,CACD,CAAA,aAAA,CAAeA,EAAS,KAAM,CAAA,CAC5B,WAAY,CACVA,CAAAA,CAAS,sBAAsB,CAC7B,UAAA,CAAYA,EAAS,gBAAiB,CAAA,CACpC,KAAMA,CAAS,CAAA,wBAAA,CAAyB,CACtC,UAAY,CAAA,QAAA,CACZ,KAAM,MACR,CAAC,CACD,CAAA,KAAA,CAAOA,EAAS,gBAAiB,CAAA,CAC/B,UAAW,IACX,CAAA,GAAA,CAAK,CACH,CACE,SAAA,CAAW,MACX,MAAQ,CAAA,kBACV,EACA,CACE,SAAA,CAAW,MACX,MAAQ,CAAA,WACV,CACF,CACF,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CACDA,CAAAA,CAAAA,CAAS,YAAY,CACnB,UAAA,CAAYA,EAAS,wBAAyB,CAAA,CAC5C,WAAYA,CAAS,CAAA,UAAA,CAAW,CAC9B,IAAM,CAAA,MACR,CAAC,CACD,CAAA,IAAA,CAAMA,EAAS,UAAW,CAAA,CAAE,KAAM,SAAU,CAAC,CAC/C,CAAC,CAAA,CACD,cAAeA,CAAS,CAAA,KAAA,CAAM,CAC5B,UAAY,CAAA,CACVA,EAAS,qBAAsB,CAAA,CAC7B,WAAYA,CAAS,CAAA,gBAAA,CAAiB,CACpC,IAAA,CAAMA,EAAS,wBAAyB,CAAA,CACtC,WAAY,QACZ,CAAA,IAAA,CAAM,SACR,CAAC,CAAA,CACD,MAAOA,CAAS,CAAA,gBAAA,CAAiB,CAC/B,SAAW,CAAA,IAAA,CACX,IAAK,CACH,CACE,OAAQ,qBACV,CAAA,CACA,CACE,MAAA,CAAQ,cACV,CACF,CACF,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CACDA,CAAAA,CAAAA,CAAS,YAAY,CACnB,UAAA,CAAYA,EAAS,wBAAyB,CAAA,CAC5C,UAAYA,CAAAA,CAAAA,CAAS,WAAW,CAC9B,IAAA,CAAM,MACR,CAAC,CAAA,CACD,KAAMA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,MAAO,CAAC,CAC5C,CAAC,EACD,aAAeA,CAAAA,CAAAA,CAAS,MAAM,CAC5B,UAAA,CAAY,CACVA,CAAS,CAAA,qBAAA,CAAsB,CAC7B,UAAYA,CAAAA,CAAAA,CAAS,iBAAiB,CACpC,IAAA,CAAMA,EAAS,wBAAyB,CAAA,CACtC,WAAY,QACZ,CAAA,IAAA,CAAM,MACR,CAAC,CAAA,CACD,MAAOA,CAAS,CAAA,gBAAA,CAAiB,CAC/B,SAAW,CAAA,IAAA,CACX,GAAK,CAAA,CACH,CACE,SAAW,CAAA,KAAA,CACX,OAAQ,kBACV,CAAA,CACA,CACE,SAAW,CAAA,KAAA,CACX,OAAQ,WACV,CACF,CACF,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,EACDA,CAAS,CAAA,WAAA,CAAY,CACnB,UAAYA,CAAAA,CAAAA,CAAS,yBAAyB,CAC5C,UAAA,CAAYA,EAAS,UAAW,CAAA,CAC9B,KAAM,MACR,CAAC,EACD,IAAMA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,OAAQ,CAAC,CAC7C,CAAC,CAAA,CACD,cAAeA,CAAS,CAAA,KAAA,CAAM,CAC5B,UAAY,CAAA,CACVA,EAAS,qBAAsB,CAAA,CAC7B,WAAYA,CAAS,CAAA,gBAAA,CAAiB,CACpC,IAAMA,CAAAA,CAAAA,CAAS,yBAAyB,CACtC,UAAA,CAAY,SACZ,IAAM,CAAA,OACR,CAAC,CACD,CAAA,KAAA,CAAOA,EAAS,gBAAiB,CAAA,CAC/B,UAAW,IACX,CAAA,GAAA,CAAK,CACH,CACE,SAAA,CAAW,MACX,MAAQ,CAAA,mBACV,EACA,CACE,SAAA,CAAW,MACX,MAAQ,CAAA,YACV,CACF,CACF,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CACDA,CAAAA,CAAAA,CAAS,eAAe,CACtB,UAAA,CAAYA,EAAS,YAAa,CAAA,CAChC,WAAYA,CAAS,CAAA,YAAA,CAAa,CAChC,UAAA,CAAYA,EAAS,UAAW,CAAA,CAAE,KAAM,QAAS,CAAC,EAClD,IAAMA,CAAAA,CAAAA,CAAS,gBAAgB,CAAE,OAAA,CAAS,SAAU,CAAC,CACvD,CAAC,CACD,CAAA,IAAA,CAAM7N,mBAAG,OAAQ,CAAA,mBAAA,CACf6N,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,MAAO,CAAC,CACtC,CACF,CAAC,CACH,CAAC,CACH,CACA,CAAA,KAAA,CAAO,CACL,CACE,OAAA,CAASA,EAAS,iBAAkB,CAAA,CAClC,SAAUA,CAAS,CAAA,UAAA,CAAW,CAC5B,IAAM,CAAA,CAAA,cAAA,EAAiBc,EAAU,OAAQ,CAAA,IAAI,8CAC/C,CAAC,CACH,CAAC,CACD,CAAA,IAAA,CAAM,GACR,CACF,CACF,CAAC,CACD,CAAA,IAAA,CAAMgxB,EAA+B,IAAQ,EAAA,EAC/C,CAAC,CACDntB,CAAAA,CAAAA,CAAK,GAAIwsB,CAAAA,CAAE,EACb,CAEaY,CAAAA,EAAAA,CAA6B,CAAC,CACzC,SAAA,CAAAntB,EACA,MAAAlW,CAAAA,CAAAA,CACA,QAAAsjC,CACA,CAAA,KAAA,CAAAjkB,CACF,CAKM,GAAA,CACJ,GACE,CAACrf,CAAAA,CAAO,OAAO,oBACf,EAAA,CAAE,CAAC,KAAA,CAAO,MAAM,CAAkC,CAAA,QAAA,CAASkW,EAAU,MAAM,CAAA,CAE3E,OAAOmJ,CAGT,CAAA,IAAMyL,EAAajN,EAAoB,CAAA,CACrC,QAAS7d,CAAO,CAAA,OAAA,CAChB,UAAAkW,CACF,CAAC,EAED,GAAI,CAAC4U,CACH,CAAA,OAAOzL,EAGT,IAAMpJ,CAAAA,CAAOjW,EAAO,OAAQ,CAAA,IAAA,CAAK,CAAE,EAAIA,CAAAA,CAAAA,CAAO,IAAK,CAAC,CAAA,CAC9Ck4B,EAAoB3D,EAA2B,CAAA,CACnD,QAASv0B,CAAO,CAAA,OAAA,CAChB,UAAAkW,CACF,CAAC,EAEImJ,CAAM,CAAA,kBAAA,GACTA,EAAM,kBAAqB,CAAA,IAAA,CAEtBA,EAAM,+BACTujB,GAAAA,EAAAA,CAAmB,CAAE,MAAA5iC,CAAAA,CAAO,CAAC,CAC7BuiC,CAAAA,EAAAA,CAAuB,CAAE,MAAAviC,CAAAA,CAAO,CAAC,CACjCqf,CAAAA,CAAAA,CAAM,gCAAkC,IAGrCA,CAAAA,CAAAA,CAAAA,CAAM,+BACT8jB,GAAAA,EAAAA,CAA6B,CAAE,MAAAnjC,CAAAA,CAAO,CAAC,CACvCqf,CAAAA,CAAAA,CAAM,gCAAkC,IAG1CpJ,CAAAA,CAAAA,CAAAA,CAAK,OAAO,CACV,MAAA,CAAQjW,EAAO,IACf,CAAA,IAAA,CAAMkjC,EACR,CAAC,CAAA,CAED7jB,EAAM,gBAAmBpJ,CAAAA,CAAAA,CAAK,MAAO,CAAA,CACnC,OAAQ,IACR,CAAA,MAAA,CAAQjW,EAAO,IACf,CAAA,IAAA,CAAM,cACR,CAAC,CAAA,CAAA,CAGHqf,EAAM,cAAiB,CAAA,IAAA,CAEvB,IAAM2jB,CAAWnB,CAAAA,EAAAA,CAAY,CAAE,SAAA3rB,CAAAA,CAAAA,CAAW,OAAAlW,CAAO,CAAC,CAC5C+hC,CAAAA,CAAAA,CAAYD,GAAa,CAAE,SAAA,CAAA5rB,EAAW,MAAAlW,CAAAA,CAAO,CAAC,CAC9CujC,CAAAA,CAAAA,CAAetB,GAAgB,CAAE,SAAA,CAAA/rB,EAAW,MAAAlW,CAAAA,CAAO,CAAC,CAEpD+iC,CAAAA,CAAAA,CAAe,GAAGZ,EAAY,CAAA,CAAA,EAAIa,CAAQ,CAC1CQ,CAAAA,CAAAA,CAAAA,CAAAA,CAAsB,QAAQT,CAAY,CAAA,2CAAA,CAAA,CAC1C1F,EAAmBr9B,CAAO,CAAA,SAAA,CAAU,qBAAqB,CAGzD8E,CAAAA,CAAAA,CAAOm7B,EAAa,CACxB,MAAA,CAAQ5C,EACR,MAAQvS,CAAAA,CAAAA,CAAW,OACnB,KAAO,CAAA,MACT,CAAC,CACK2Y,CAAAA,CAAAA,CAAgB3+B,CAClB,CAAA,CAAA,EAAGd,GAAe,CAChB,IAAA,CAAMc,EACN,QAAU,CAAA,IACZ,CAAC,CAAC,CAAA,GAAA,EAAM0+B,CAAmB,CAC3B,CAAA,CAAA,CAAA,EAAGA,CAAmB,CAEpBv/B,CAAAA,CAAAA,CAAAA,CAAO6+B,GAAkB,CAC7B,UAAA,CAAY,KACZ,SAAA5sB,CAAAA,CAAAA,CACA,MAAAlW,CAAAA,CAAAA,CACA,aAAA+iC,CACF,CAAC,EACD9sB,CAAK,CAAA,GAAA,CAAIhS,CAAI,CAEb,CAAA,IAAMy/B,EAA6BztB,CAAK,CAAA,UAAA,CAAW,CAEjD,IAAM,CAAA,CAAA,oCAAA,EAAuCC,EAAU,EAAE,CAAA,CAAA,CACzD,KAAMlW,CAAO,CAAA,MAAA,CAAO,iBAAkB,CAAA,IAAA,CACtC,gBAAiBA,CAAO,CAAA,MAAA,CAAO,kBAAkB,IACjD,CAAA,SAAA,CAAW,OACb,CAAC,CAAA,CAEK2jC,EAAqBryB,CAAS,CAAA,eAAA,CAAgB,CAClD,UAAYA,CAAAA,CAAAA,CAAS,eAAe,CAClC,YAAA,CAAcgyB,EACd,UAAY,CAAA,CACVhyB,CAAS,CAAA,gBAAA,CAAiB,CACxB,SAAW,CAAA,IAAA,CACX,IAAK,CACH,CACE,OAAQ,SACV,CAAA,CACA,CACE,MAAQ,CAAA,QACV,EACA,CACE,GAAA,CAAK,SACL,SAAW,CAAA,IAAA,CACX,MAAOA,CAAS,CAAA,UAAA,CAAW,CACzB,IAAA,CAAM,QACR,CAAC,CACH,EACA,CACE,GAAA,CAAK,eACL,KAAO,CAAA,IACT,CACF,CACF,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAAA,CAEK8xB,EAAiCntB,CAAK,CAAA,UAAA,CAAW,CAErD,IAAA,CAAM,2CAA2CgtB,EAAsB,CAAA,CAAA,CACvE,KAAMjjC,CAAO,CAAA,MAAA,CAAO,KACpB,SAAW,CAAA,OACb,CAAC,CAEKsJ,CAAAA,CAAAA,CAAkC,CACtCgI,CAAS,CAAA,aAAA,CAAc,CACrB,OAAS,CAAA,CACP,CACE,KAAO,CAAA,KAAA,CACP,KAAO,CAAA,CAAC,YAAY,CACtB,CACF,EACA,UAAYA,CAAAA,CAAAA,CAAS,sBAAsB,CACzC,SAAA,CAAWA,EAAS,gBAAiB,CAAA,CACnC,KAAMA,CAAS,CAAA,gBAAA,CAAiB,CAC9B,IAAM,CAAA,WACR,CAAC,CACD,CAAA,QAAA,CAAU,MACV,KAAOA,CAAAA,CAAAA,CAAS,IAAI,MAAO,CAAA,QAAQ,CACrC,CAAC,CAAA,CACD,UAAWA,CAAS,CAAA,gBAAA,CAAiB,CACnC,SAAW,CAAA,IAAA,CACX,IAAK,CACH,CACE,IAAKwZ,CAAW,CAAA,EAAA,CAChB,MAAOxZ,CAAS,CAAA,gBAAA,CAAiB,CAC/B,SAAA,CAAW,KACX,GAAK,CAAA,CACH,CACE,GAAKwZ,CAAAA,CAAAA,CAAW,KAChB,KAAOxZ,CAAAA,CAAAA,CAAS,WAAW,CACzB,IAAA,CAAM,WACR,CAAC,CACH,CACF,CACF,CAAC,CACH,CACF,CACF,CAAC,CAAA,CACD,SAAUA,CAAS,CAAA,UAAA,CAAW,CAC5B,IAAM,CAAA,WACR,CAAC,CACH,CAAC,EACD,IAAM,CAAA,MAAA,CACN,SAAUkyB,CACZ,CAAC,EACDlyB,CAAS,CAAA,aAAA,CAAc,CACrB,UAAYA,CAAAA,CAAAA,CAAS,cAAe,CAAA,CAClC,aAAc8xB,CAA+B,CAAA,IAAA,EAAQ,GACrD,UAAY,CAAA,CAAC,WAAY,MAAM,CACjC,CAAC,CACD,CAAA,IAAA,CAAM,QACR,CAAC,CACH,EAEIpjC,CAAO,CAAA,SAAA,CAAU,cAAc,CAAG,EAAA,MAAA,CAAO,gBAAkB,MAC7DsJ,CAAAA,CAAAA,CAAW,KACTgI,CAAS,CAAA,cAAA,CAAe,CACtB,UAAYqyB,CAAAA,CACd,CAAC,CACH,CAAA,CAEAr6B,EAAW,IACTgI,CAAAA,CAAAA,CAAS,cAAc,CACrB,WAAA,CAAa,KACb,UAAYqyB,CAAAA,CAAAA,CACZ,KAAM,MACR,CAAC,CACDryB,CAAAA,CAAAA,CAAS,eAAe,CACtB,UAAA,CAAY,MACd,CAAC,CACH,EAGF,IAAMsyB,CAAAA,CAAiC3tB,EAAK,UAAW,CAAA,CAErD,KAAM,CAA2CC,wCAAAA,EAAAA,CAAAA,CAAU,EAAE,CAC7D,CAAA,CAAA,IAAA,CAAMlW,EAAO,MAAO,CAAA,oBAAA,CAAqB,IACzC,CAAA,MAAA,CAAQ,KACR,eAAiBA,CAAAA,CAAAA,CAAO,OAAO,oBAAqB,CAAA,IAAA,CACpD,UAAW,OACb,CAAC,EAEK4L,CAAY0F,CAAAA,CAAAA,CAAS,cAAc,CACvC,OAAA,CAAStR,EAAO,MAAO,CAAA,QAAA,CACnBs0B,GAAuB,CAAE,SAAA,CAAApe,CAAU,CAAC,EACpC,MACJ,CAAA,WAAA,CAAa,KACb,UAAY5E,CAAAA,CAAAA,CAAS,cAAc,CACjC,UAAA,CAAY,CACV,CACE,UAAA,CAAY4mB,EACZ,IAAM,CAAA,SAAA,CACN,KAAM8K,CACR,CACF,EACA,UAAY,CAAA,CACV1xB,EAAS,kBAAmB,CAAA,CAC1B,KAAM,CACJA,CAAAA,CAAS,iBAAiB,CACxB,QAAA,CAAU,CACR,CACE,KAAA,CAAO,MACP,KAAO,CAAA,CAAC,YAAY,CACtB,CACF,EACA,GAAK,CAAA,CACH,CACE,GAAK,CAAA,SAAA,CACL,KAAOA,CAAAA,CAAAA,CAAS,cAAc,CAC5B,KAAA,CAAO,KACP,SAAW,CAAA,IAAA,CACX,WAAY,CACV,CACE,YAAa,CACX,CACE,KAAM,WACR,CAAA,CACA,CACE,IAAM,CAAA,UACR,EACA,CACE,IAAA,CAAM,QACR,CACF,CACF,CACF,CAAA,CACA,WAAAhI,CACF,CAAC,CACH,CACA,CAAA,CACE,IAAK,UACL,CAAA,KAAA,CAAOgI,EAAS,cAAe,CAAA,CAC7B,aAAcoyB,CAA2B,CAAA,IAAA,EAAQ,GACjD,UAAY,CAAA,CAAC,SAAS,CACxB,CAAC,CACH,CACF,CACF,CAAC,CACH,EACA,IAAMR,CAAAA,EAAAA,CAEN,MAAO,CACLK,CAAAA,CACAxB,EAAU,IACV,CAAA,CAAA,EAAG,OAAO1iB,CAAM,CAAA,gBAAA,EAAqB,SAAWA,CAAM,CAAA,gBAAA,CAAmBA,EAAM,gBAAiB,CAAA,IAAI,IAAIkkB,CAAY,CAAA,CAAA,CAAA,CACpHR,EACAU,CACF,CACF,CAAC,CACH,CACF,CAAC,CACD,CAAA,IAAA,CAAMG,EAA+B,IAAQ,EAAA,EAC/C,CAAC,CACD3tB,CAAAA,CAAAA,CAAK,IAAIrK,CAAS,EAEpB,CCzfA,CAAA,IAAMi4B,GAAoB,iBAEbC,CAAAA,EAAAA,CAAwB,CAAC,CACpC,SAAA,CAAA5tB,EACA,MAAAlW,CAAAA,CAAAA,CACA,QAAAsjC,CACA,CAAA,KAAA,CAAAjkB,CACF,CAKM,GAAA,CACJ,GACE,CAACrf,CAAAA,CAAO,OAAO,eAAgB,CAAA,OAAA,EAC/B,CACE,CAAC,SAAU,OAAS,CAAA,MAAA,CAAQ,KAAK,CACjC,CAAA,QAAA,CAASkW,EAAU,MAAM,CAAA,CAE3B,OAAOmJ,CAGT,CAAA,IAAM0kB,EACJ/jC,CAAO,CAAA,IAAA,GAAS,wCAChBA,CAAO,CAAA,IAAA,GAAS,0BAChBA,CAAO,CAAA,IAAA,GAAS,uBACZ,CAAA,iBAAA,CACA,qBAEAiW,CAAOjW,CAAAA,CAAAA,CAAO,QAAQ,IAAK,CAAA,CAAE,GAAIA,CAAO,CAAA,IAAK,CAAC,CAE/Cqf,CAAAA,CAAAA,CAAM,eACTA,CAAM,CAAA,YAAA,CAAe,KAErBpJ,CAAK,CAAA,MAAA,CAAO,CACV,MAAQ,CAAA,IAAA,CACR,OAAQjW,CAAO,CAAA,IAAA,CACf,KAAM+jC,CACR,CAAC,GAGH1kB,CAAM,CAAA,cAAA,CAAiB,KAEvB,IAAM2jB,CAAAA,CAAWnB,GAAY,CAAE,SAAA,CAAA3rB,EAAW,MAAAlW,CAAAA,CAAO,CAAC,CAC5C+hC,CAAAA,CAAAA,CAAYD,GAAa,CAAE,SAAA,CAAA5rB,CAAW,CAAA,MAAA,CAAAlW,CAAO,CAAC,CAAA,CAC9CujC,EAAetB,EAAgB,CAAA,CAAE,UAAA/rB,CAAW,CAAA,MAAA,CAAAlW,CAAO,CAAC,CAAA,CAEpDgkC,EAAe,CAAGD,EAAAA,CAAa,IAAIR,CAAY,CAAA,EAAA,EAAKxB,EAAU,IAAI,CAAA,EAAA,EAAKiB,CAAQ,CAAA,CAAA,CAAA,CAE/EW,EAAqBryB,CAAS,CAAA,eAAA,CAAgB,CAClD,UAAYA,CAAAA,CAAAA,CAAS,eAAe,CAClC,YAAA,CAAcgyB,EACd,UAAY,CAAA,CACVhyB,EAAS,gBAAiB,CAAA,CACxB,UAAW,IACX,CAAA,GAAA,CAAK,CACH,CACE,MAAA,CAAQ,SACV,CAAA,CACA,CACE,MAAQ,CAAA,cACV,EACA,CACE,GAAA,CAAK,eACL,KAAO,CAAA,IACT,CACF,CACF,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAAA,CAEKhI,EAAkC,EAAC,CAErCtJ,EAAO,SAAU,CAAA,cAAc,GAAG,MAAO,CAAA,aAAA,GAAkB,OAC7DsJ,CAAW,CAAA,IAAA,CACTgI,EAAS,cAAe,CAAA,CACtB,WAAYqyB,CACd,CAAC,CACH,CAEAr6B,CAAAA,CAAAA,CAAW,KACTgI,CAAS,CAAA,aAAA,CAAc,CACrB,WAAa,CAAA,IAAA,CACb,UAAYqyB,CAAAA,CAAAA,CACZ,KAAM,MACR,CAAC,EACDryB,CAAS,CAAA,cAAA,CAAe,CACtB,UAAY,CAAA,MACd,CAAC,CACH,CAAA,CAGF,IAAM+D,CAAaY,CAAAA,CAAAA,CAAK,WAAW,CAEjC,IAAA,CAAM,qCAAqCC,CAAU,CAAA,EAAE,CACvD,CAAA,CAAA,IAAA,CAAMlW,EAAO,MAAO,CAAA,eAAA,CAAgB,KACpC,MAAQ,CAAA,IAAA,CACR,gBAAiBA,CAAO,CAAA,MAAA,CAAO,gBAAgB,IAC/C,CAAA,SAAA,CAAW,OACb,CAAC,CAAA,CAEK8G,EAAawK,CAAS,CAAA,aAAA,CAAc,CACxC,UAAY,CAAA,CACV,CACE,UAAA,CAAY,MACZ,IAAM,CAAA,SAAA,CACN,KAAM,CAAW0xB,QAAAA,EAAAA,CAAQ,GAC3B,CACF,CAAA,CACA,WAAYgB,CACZ,CAAA,UAAA,CAAY,CACV1yB,CAAS,CAAA,aAAA,CAAc,CACrB,UAAYA,CAAAA,CAAAA,CAAS,iBAAiB,CACpC,GAAA,CAAK,CACH,CACE,GAAA,CAAK,aACL,KAAOA,CAAAA,CAAAA,CAAS,cAAc,CAC5B,KAAA,CAAO,KACP,SAAW,CAAA,IAAA,CACX,WAAY,CACV,CACE,KAAM,cACR,CACF,EACA,UAAAhI,CAAAA,CACF,CAAC,CACH,CACF,CACF,CAAC,EACD,IAAMu6B,CAAAA,EAAAA,CACN,SAAUG,CACZ,CAAC,EACD1yB,CAAS,CAAA,cAAA,CAAe,CACtB,UAAYuyB,CAAAA,EACd,CAAC,CACH,CACF,CAAC,CACKj4B,CAAAA,CAAAA,CAAY0F,EAAS,aAAc,CAAA,CACvC,OAAStR,CAAAA,CAAAA,CAAO,OAAO,QACnBs0B,CAAAA,EAAAA,CAAuB,CAAE,SAAApe,CAAAA,CAAU,CAAC,CACpC,CAAA,MAAA,CACJ,YAAa,IACb,CAAA,UAAA,CAAApP,EACA,IAAMuO,CAAAA,CAAAA,CAAW,MAAQ,EAC3B,CAAC,EACD,OAAAY,CAAAA,CAAK,GAAIrK,CAAAA,CAAS,EAEXyT,CACT,CAAA,CC7IA,IAAM4kB,EAAiB,CAAA,cAAA,CAEVC,GAAqB,CAAC,CACjC,UAAAhuB,CACA,CAAA,MAAA,CAAAlW,EACA,OAAAsjC,CAAAA,CAAAA,CACA,MAAAjkB,CACF,CAAA,GAKM,CACJ,GACE,CAACrf,EAAO,MAAO,CAAA,YAAA,EACf,CAAE,CAAC,KAAA,CAAO,MAAM,CAAkC,CAAA,QAAA,CAASkW,EAAU,MAAM,CAAA,CAE3E,OAAOmJ,CAGT,CAAA,IAAMpJ,EAAOjW,CAAO,CAAA,OAAA,CAAQ,KAAK,CAAE,EAAA,CAAIA,EAAO,IAAK,CAAC,CAC9Ck4B,CAAAA,CAAAA,CAAoB3D,GAA2B,CACnD,OAAA,CAASv0B,EAAO,OAChB,CAAA,SAAA,CAAAkW,CACF,CAAC,CAAA,CAEImJ,EAAM,UACTA,GAAAA,CAAAA,CAAM,WAAa,IAEdA,CAAAA,CAAAA,CAAM,kCACTujB,EAAmB,CAAA,CAAE,OAAA5iC,CAAO,CAAC,CAC7BuiC,CAAAA,EAAAA,CAAuB,CAAE,MAAAviC,CAAAA,CAAO,CAAC,CACjCqf,CAAAA,CAAAA,CAAM,gCAAkC,IAG1CpJ,CAAAA,CAAAA,CAAAA,CAAK,OAAO,CACV,MAAA,CAAQjW,EAAO,IACf,CAAA,IAAA,CAAMikC,EACR,CAAC,CAAA,CAAA,CAGH5kB,EAAM,cAAiB,CAAA,IAAA,CAEvB,IAAMpb,CAAAA,CAAO6+B,GAAkB,CAC7B,UAAA,CAAY,MACZ,SAAA5sB,CAAAA,CAAAA,CACA,OAAAlW,CACF,CAAC,EACDiW,CAAK,CAAA,GAAA,CAAIhS,CAAI,CAEb,CAAA,IAAM++B,EAAWnB,EAAY,CAAA,CAAE,UAAA3rB,CAAW,CAAA,MAAA,CAAAlW,CAAO,CAAC,CAAA,CAE5CmkC,EAAqBluB,CAAK,CAAA,UAAA,CAAW,CAEzC,IAAM,CAAA,CAAA,2BAAA,EAA8BC,EAAU,EAAE,CAAA,CAAA,CAChD,KAAMlW,CAAO,CAAA,MAAA,CAAO,UAAU,IAC9B,CAAA,eAAA,CAAiBA,EAAO,MAAO,CAAA,SAAA,CAAU,KACzC,SAAW,CAAA,OACb,CAAC,CAAA,CAEK2jC,EAAqBryB,CAAS,CAAA,eAAA,CAAgB,CAClD,UAAYA,CAAAA,CAAAA,CAAS,eAAe,CAClC,YAAA,CAAcgyB,EACd,UAAY,CAAA,CACVhyB,EAAS,gBAAiB,CAAA,CACxB,UAAW,IACX,CAAA,GAAA,CAAK,CACH,CACE,MAAA,CAAQ,SACV,CAAA,CACA,CACE,MAAQ,CAAA,aACV,EACA,CACE,GAAA,CAAK,SACL,SAAW,CAAA,IAAA,CACX,MAAOA,CAAS,CAAA,UAAA,CAAW,CACzB,IAAM,CAAA,QACR,CAAC,CACH,CAAA,CACA,CACE,GAAK,CAAA,cAAA,CACL,KAAO,CAAA,IACT,CACF,CACF,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAAA,CAEKhI,EAAkC,EAAC,CAErCtJ,EAAO,SAAU,CAAA,cAAc,GAAG,MAAO,CAAA,aAAA,GAAkB,OAC7DsJ,CAAW,CAAA,IAAA,CACTgI,EAAS,cAAe,CAAA,CACtB,WAAYqyB,CACd,CAAC,CACH,CAEAr6B,CAAAA,CAAAA,CAAW,KACTgI,CAAS,CAAA,aAAA,CAAc,CACrB,WAAa,CAAA,IAAA,CACb,WAAYqyB,CACZ,CAAA,IAAA,CAAM,MACR,CAAC,CAAA,CACDryB,EAAS,cAAe,CAAA,CACtB,UAAY,CAAA,MACd,CAAC,CACH,CAAA,CAGF,IAAM8yB,CAAyBnuB,CAAAA,CAAAA,CAAK,WAAW,CAE7C,IAAA,CAAM,kCAAkCC,CAAU,CAAA,EAAE,GACpD,IAAMlW,CAAAA,CAAAA,CAAO,OAAO,YAAa,CAAA,IAAA,CACjC,OAAQ,IACR,CAAA,eAAA,CAAiBA,CAAO,CAAA,MAAA,CAAO,aAAa,IAC5C,CAAA,SAAA,CAAW,OACb,CAAC,CAAA,CAEK4L,EAAY0F,CAAS,CAAA,aAAA,CAAc,CACvC,OAAStR,CAAAA,CAAAA,CAAO,OAAO,QACnBs0B,CAAAA,EAAAA,CAAuB,CAAE,SAAApe,CAAAA,CAAU,CAAC,CACpC,CAAA,MAAA,CACJ,WAAa,CAAA,IAAA,CACb,WAAY5E,CAAS,CAAA,aAAA,CAAc,CACjC,UAAY,CAAA,CACV,CACE,UAAY4mB,CAAAA,CAAAA,CACZ,KAAM,SACN,CAAA,IAAA,CAAM8K,CACR,CACF,CAAA,CACA,WAAY,CACV1xB,CAAAA,CAAS,mBAAmB,CAC1B,IAAA,CAAM,CACJA,CAAS,CAAA,gBAAA,CAAiB,CACxB,GAAK,CAAA,CACH,CACE,GAAK,CAAA,SAAA,CACL,MAAOA,CAAS,CAAA,aAAA,CAAc,CAC5B,KAAO,CAAA,IAAA,CACP,UAAW,IACX,CAAA,UAAA,CAAY,CACV,CACE,WAAA,CAAa,CACX,CACE,IAAA,CAAM,UACR,CAAA,CACA,CACE,IAAM,CAAA,QACR,CACF,CACF,CACF,EACA,UAAAhI,CAAAA,CACF,CAAC,CACH,CAAA,CACA,CACE,GAAK,CAAA,UAAA,CACL,MAAOgI,CAAS,CAAA,cAAA,CAAe,CAC7B,YAAc6yB,CAAAA,CAAAA,CAAmB,IAAQ,EAAA,EAAA,CACzC,WAAY,CAAC,SAAS,CACxB,CAAC,CACH,CACF,CACF,CAAC,CACH,CACA,CAAA,IAAA,CAAMF,EACR,CAAC,CACH,CACF,CAAC,CAAA,CACD,KAAMG,CAAuB,CAAA,IAAA,EAAQ,EAGvC,CAAC,EACD,OAAAnuB,CAAAA,CAAK,IAAIrK,CAAS,CAAA,CAEXyT,CACT,CCxLO,CAAA,IAAM7G,GAAU,CAAC,CAAE,OAAAxY,CAAO,CAAA,GAAoC,CACnE,IAAMiW,CAAAA,CAAOjW,EAAO,UAAW,CAAA,CAC7B,GAAIA,CAAO,CAAA,IAAA,CACX,eAAgBA,CAAO,CAAA,MAAA,CAAO,KAC9B,IAAMA,CAAAA,CAAAA,CAAO,MACf,CAAC,CAAA,CAEKqf,EAAqB,CACzB,+BAAA,CAAiC,MACjC,+BAAiC,CAAA,KAAA,CACjC,mBAAoB,KACpB,CAAA,YAAA,CAAc,MACd,UAAY,CAAA,KAAA,CACZ,cAAgB,CAAA,KAAA,CAChB,iBAAkB,MACpB,CAAA,CAEApJ,EAAK,MAAO,CAAA,CACV,GAAG7D,CAAU,CAAA,OAAA,CACb,OAAQ6D,CAAK,CAAA,kBAAA,CAAmB,CAAE,OAASjW,CAAAA,CAAAA,CAAO,QAAS,EAAI40B,CAAAA,EAAM,CAAC,CACxE,CAAC,CAED50B,CAAAA,CAAAA,CAAO,QAAQ,WAAa,CAAA,CAAC,CAAE,SAAAkW,CAAAA,CAAU,IAAM,CAC7CmJ,CAAAA,CAAM,eAAiB,KAEvB,CAAA,IAAMglB,EAAYrkC,CAAO,CAAA,SAAA,CAAU,cAAc,CAC3Ci8B,CAAAA,CAAAA,CAAUoI,GAAW,MAAO,CAAA,OAAA,CAC9BnN,EAAiB,CAAA,CACf,QAASl3B,CAAO,CAAA,OAAA,CAChB,UAAAkW,CACA,CAAA,MAAA,CAAQmuB,CACV,CAAC,CAAA,CACD,OACEnkB,CAAQ+b,CAAAA,CAAAA,CAAUA,EAAQ,MAAO,EAAA,CAAE,MAAO,CAAA,KAAA,CAAQ,OAClDqH,CAIFpjB,CAAAA,CAAAA,CAAAA,CACI,CACEA,CAAM,CAAA,IAAA,CAAK,CAAC,CACZ,CAAA,GAAGA,EAAM,IAAK,CAAA,KAAA,CAAM,CAAC,CAAE,CAAA,GAAA,CAAKkX,GAC1BjiB,CAAW,CAAA,CACT,KAAM,WACN,CAAA,KAAA,CAAOiiB,CACT,CAAC,CACH,EACAlX,CAAM,CAAA,UACR,CAAE,CAAA,MAAA,CAAO,OAAO,CAChB,CAAA,CACEya,GAA0B,CACxB,MAAA,CAAQ36B,EAAO,OAAQ,CAAA,MAAA,CACvB,cAAe,IACf,CAAA,EAAA,CAAIkW,EAAU,EACd,CAAA,SAAA,CAAAA,CACF,CAAC,CACH,GACJ,IAAK,CAAA,GAAG,CAEZguB,CAAAA,EAAAA,CAAmB,CACjB,SAAAhuB,CAAAA,CAAAA,CACA,OAAAlW,CACA,CAAA,OAAA,CAAAsjC,EACA,KAAAjkB,CAAAA,CACF,CAAC,CAEDgkB,CAAAA,EAAAA,CAA2B,CACzB,SAAAntB,CAAAA,CAAAA,CACA,OAAAlW,CACA,CAAA,OAAA,CAAAsjC,EACA,KAAAjkB,CAAAA,CACF,CAAC,CAAA,CAEDykB,GAAsB,CACpB,SAAA,CAAA5tB,EACA,MAAAlW,CAAAA,CAAAA,CACA,QAAAsjC,CACA,CAAA,KAAA,CAAAjkB,CACF,CAAC,CAAA,CAEGA,EAAM,cACRpJ,EAAAA,CAAAA,CAAK,OAAO,CACV,MAAA,CAAQA,EAAK,kBAAmB,CAAA,CAAE,QAASjW,CAAO,CAAA,OAAA,CAAS,GAAI40B,EAAM,CAAC,EACtE,IAAM0O,CAAAA,CAAAA,CAAQ,MAAM,GAAG,CAAA,CAAE,CAAC,CAC5B,CAAC,EAEL,CAAC,CAAA,CAAA,CAEGjkB,EAAM,UAAcA,EAAAA,CAAAA,CAAM,qBAC5BpJ,CAAK,CAAA,MAAA,CAAO,CACV,KAAA,CAAO,gBACP,MAAQA,CAAAA,CAAAA,CAAK,mBAAmB,CAC9B,OAAA,CAASjW,EAAO,OAChB,CAAA,EAAA,CAAIN,EACN,CAAC,CAAA,CACD,KAAM,QACR,CAAC,EAEL,CC7GA,CAwCA,IAAM4kC,EAA8BpuB,CAAAA,CAAAA,EAClC,GAAGykB,EAA0B,CAAA,CAC3B,OAAQz6B,CAAU,EAAA,CAClB,GAAIgW,CAAU,CAAA,IAAA,CACd,UAAAA,CACF,CAAC,CAAC,CAEEquB,eAAAA,CAAAA,CAAAA,EAAAA,CAAyBruB,GAC7B,CAAGykB,EAAAA,EAAAA,CAA0B,CAC3B,MAAQz6B,CAAAA,CAAAA,EACR,CAAA,EAAA,CAAIgW,EAAU,IACd,CAAA,SAAA,CAAAA,CACF,CAAC,CAAC,WAEEsuB,EAAqB,CAAA,CAAC,CAC1B,MAAA5kC,CAAAA,CAAAA,CACA,GAAA4V,CACA,CAAA,SAAA,CAAAU,CACF,CAKE,GAAA,CAAA,EAAGykB,GAA0B,CAC3B,MAAA,CAAA/6B,EACA,EAAA4V,CAAAA,CAAAA,CACA,UAAAU,CACF,CAAC,CAAC,CAEEuuB,OAAAA,CAAAA,CAAAA,EAAAA,CAAiB,CAAC,CACtB,MAAA,CAAA7kC,EACA,EAAA4V,CAAAA,CAAAA,CACA,WAAAmtB,CACA,CAAA,SAAA,CAAAzsB,CACF,CAME,GAAA,CAAA,EAAGykB,GAA0B,CAC3B,MAAA,CAAA/6B,CACA,CAAA,EAAA,CAAA4V,EACA,SAAAU,CAAAA,CACF,CAAC,CAAC,CAAA,EAAGysB,EAAa,UAAa,CAAA,EAAE,WAE7B+B,EAAmB78B,CAAAA,CAAAA,EAAkC,CACzD,OAAQA,CAAAA,CAAU,IAChB,KAAK,WACH,OAAO,MAAA,CACT,KAAK,QAAA,CACH,OAAO,SACT,CAAA,QACE,OAAOA,CAAU,CAAA,EACrB,CACF,CAEMo7B,CAAAA,EAAAA,CAAyB,uBACzBf,EAAmB,CAAA,gBAAA,CACnBgB,GAAyB,sBACzBW,CAAAA,EAAAA,CAAoB,kBACpB1B,EAAe,CAAA,UAAA,CACf8B,GAAiB,cACjB7B,CAAAA,EAAAA,CAAe,UAEfe,CAAAA,EAAAA,CAA+B,CAAC,CACpC,IAAA,CAAAltB,CACF,CAEM,GAAA,CACJ,IAAMwsB,CAAKnxB,CAAAA,CAAAA,CAAS,cAAc,CAChC,UAAA,CAAYA,EAAS,aAAc,CAAA,CACjC,UAAW,IACX,CAAA,UAAA,CAAY,CACV,CACE,IAAA,CAAM,UACN,CAAA,IAAA,CAAMA,EAAS,QACb,CAAA,CAAA,SAAA,EAAYc,EAAU,mBAAoB,CAAA,IAAI,GAChD,CACF,CAAA,CACA,CACE,IAAM,CAAA,MAAA,CACN,KAAMd,CAAS,CAAA,QAAA,CAAS,GAAG,CAC7B,CACF,EACA,UAAY,CAAA,CACVA,CAAS,CAAA,aAAA,CAAc,CACrB,UAAYA,CAAAA,CAAAA,CAAS,WAAW,CAC9B,IAAA,CAAM,aACR,CAAC,CAAA,CACD,KAAM,QACR,CAAC,EACDA,CAAS,CAAA,WAAA,CAAY,CACnB,UAAYA,CAAAA,CAAAA,CAAS,yBAAyB,CAC5C,UAAA,CAAYA,CAAS,CAAA,UAAA,CAAW,CAC9B,IAAM,CAAA,MACR,CAAC,CACD,CAAA,IAAA,CAAMA,EAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,CAC5C,CAAC,CAAA,CACD,cAAeA,CAAS,CAAA,KAAA,CAAM,CAC5B,UAAY,CAAA,CACVA,CAAS,CAAA,qBAAA,CAAsB,CAC7B,UAAYA,CAAAA,CAAAA,CAAS,iBAAiB,CACpC,IAAA,CAAMA,EAAS,wBAAyB,CAAA,CACtC,WAAY,QACZ,CAAA,IAAA,CAAM,MACR,CAAC,CAAA,CACD,MAAOA,CAAS,CAAA,gBAAA,CAAiB,CAC/B,SAAW,CAAA,IAAA,CACX,IAAK,CACH,CACE,UAAW,KACX,CAAA,MAAA,CAAQ,kBACV,CACA,CAAA,CACE,UAAW,KACX,CAAA,MAAA,CAAQ,WACV,CACF,CACF,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAAA,CACDA,EAAS,WAAY,CAAA,CACnB,WAAYA,CAAS,CAAA,wBAAA,CAAyB,CAC5C,UAAYA,CAAAA,CAAAA,CAAS,WAAW,CAC9B,IAAA,CAAM,MACR,CAAC,CAAA,CACD,KAAMA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,SAAU,CAAC,CAC/C,CAAC,CACD,CAAA,aAAA,CAAeA,EAAS,KAAM,CAAA,CAC5B,WAAY,CACVA,CAAAA,CAAS,sBAAsB,CAC7B,UAAA,CAAYA,EAAS,gBAAiB,CAAA,CACpC,KAAMA,CAAS,CAAA,wBAAA,CAAyB,CACtC,UAAY,CAAA,QAAA,CACZ,IAAM,CAAA,SACR,CAAC,CACD,CAAA,KAAA,CAAOA,EAAS,gBAAiB,CAAA,CAC/B,UAAW,IACX,CAAA,GAAA,CAAK,CACH,CACE,MAAA,CAAQ,qBACV,CACA,CAAA,CACE,OAAQ,cACV,CACF,CACF,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAAA,CACDA,EAAS,WAAY,CAAA,CACnB,WAAYA,CAAS,CAAA,wBAAA,CAAyB,CAC5C,UAAYA,CAAAA,CAAAA,CAAS,WAAW,CAC9B,IAAA,CAAM,MACR,CAAC,CAAA,CACD,IAAMA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,MAAO,CAAC,CAC5C,CAAC,CACD,CAAA,aAAA,CAAeA,EAAS,KAAM,CAAA,CAC5B,WAAY,CACVA,CAAAA,CAAS,sBAAsB,CAC7B,UAAA,CAAYA,EAAS,gBAAiB,CAAA,CACpC,IAAMA,CAAAA,CAAAA,CAAS,yBAAyB,CACtC,UAAA,CAAY,SACZ,IAAM,CAAA,MACR,CAAC,CACD,CAAA,KAAA,CAAOA,EAAS,gBAAiB,CAAA,CAC/B,UAAW,IACX,CAAA,GAAA,CAAK,CACH,CACE,MAAA,CAAQ,kBACV,CACA,CAAA,CACE,MAAQ,CAAA,WACV,CACF,CACF,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,EACDA,CAAS,CAAA,WAAA,CAAY,CACnB,UAAYA,CAAAA,CAAAA,CAAS,yBAAyB,CAC5C,UAAA,CAAYA,EAAS,UAAW,CAAA,CAC9B,KAAM,MACR,CAAC,EACD,IAAMA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,OAAQ,CAAC,CAC7C,CAAC,CACD,CAAA,aAAA,CAAeA,EAAS,KAAM,CAAA,CAC5B,WAAY,CACVA,CAAAA,CAAS,qBAAsB,CAAA,CAC7B,WAAYA,CAAS,CAAA,gBAAA,CAAiB,CACpC,IAAMA,CAAAA,CAAAA,CAAS,yBAAyB,CACtC,UAAA,CAAY,SACZ,IAAM,CAAA,OACR,CAAC,CACD,CAAA,KAAA,CAAOA,EAAS,gBAAiB,CAAA,CAC/B,UAAW,IACX,CAAA,GAAA,CAAK,CACH,CACE,OAAQ,mBACV,CAAA,CACA,CACE,MAAQ,CAAA,YACV,CACF,CACF,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,EACDA,CAAS,CAAA,cAAA,CAAe,CACtB,UAAA,CAAY7N,mBAAG,OAAQ,CAAA,kBAAA,CACrBA,mBAAG,OAAQ,CAAA,kBAAA,CACT6N,EAAS,UAAW,CAAA,CAAE,KAAM,QAAS,CAAC,EACtC7N,kBAAG,CAAA,OAAA,CAAQ,sBAAsBA,kBAAG,CAAA,UAAA,CAAW,cAAc,CAC/D,CAAA,CACAA,mBAAG,OAAQ,CAAA,mBAAA,CACT6N,EAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,CACtC,CACF,CACF,CAAC,CACH,CAAA,CACA,MAAO,CACL,CACE,QAASA,CAAS,CAAA,iBAAA,CAAkB,CAClC,QAAUA,CAAAA,CAAAA,CAAS,UAAW,CAAA,CAC5B,KAAM,CAAiBc,cAAAA,EAAAA,CAAAA,CAAU,oBAAoB,IAAI,CAAA,4CAAA,CAC3D,CAAC,CACH,CAAC,EACD,IAAM,CAAA,GACR,CACF,CACF,CAAC,EACD,IAAM6wB,CAAAA,EACR,CAAC,CACDhtB,CAAAA,CAAAA,CAAK,GAAIwsB,CAAAA,CAAE,EACb,CAEMF,CAAAA,EAAAA,CAAyB,CAAC,CAAE,IAAA,CAAAtsB,CAAK,CAAoC,GAAA,CACzE,IAAM5M,CAAaiI,CAAAA,CAAAA,CAAS,sBAAsB,CAChD,SAAA,CAAWA,EAAS,QAAS,CAAA,CAAC,EAC9B,UAAYA,CAAAA,CAAAA,CAAS,QAAS6wB,CAAAA,EAAAA,CAAc,CAC1C7wB,CAAS,CAAA,QAAA,CAAS8wB,EAAY,CAChC,CAAC,CACH,CAAC,CAAA,CAEKC,EAAqB/wB,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,UAAW,CAAC,CAE7DmxB,CAAAA,CAAAA,CAAKnxB,EAAS,aAAc,CAAA,CAChC,WAAYA,CAAS,CAAA,aAAA,CAAc,CACjC,SAAW,CAAA,IAAA,CACX,WAAY,CACV,CACE,KAAM,IACN,CAAA,IAAA,CAAMA,EAAS,QAAS,CAAA,QAAQ,CAClC,CACA,CAAA,CACE,WAAY,KACZ,CAAA,IAAA,CAAM,UACN,IAAMA,CAAAA,CAAAA,CAAS,QAAS8wB,CAAAA,EAAY,CACtC,CACA,CAAA,CACE,WAAY,KACZ,CAAA,IAAA,CAAM,WACN,IAAM9wB,CAAAA,CAAAA,CAAS,SAAS,SAAS,CACnC,CACF,CACA,CAAA,UAAA,CAAAjI,EACA,UAAY,CAAA,CACViI,EAAS,aAAc,CAAA,CACrB,SAAWjI,CAAAA,CAAAA,CACX,WAAYiI,CAAS,CAAA,gBAAA,CAAiB,CACpC,SAAW,CAAA,KAAA,CACX,IAAK,CACH,CACE,IAAK,KACL,CAAA,KAAA,CAAOA,EAAS,UAAW,CAAA,CAAE,KAAM,IAAK,CAAC,CAC3C,CACA,CAAA,CACE,GAAK3R,CAAAA,EAAAA,CAAoBO,GAAW,CAAA,CACpC,MAAOoR,CAAS,CAAA,UAAA,CAAW,CACzB,IAAM,CAAA,CAAA,+CAAA,EAAkD3R,GAAoBO,CAAU,EAAC,CAAC,CAC1F,CAAA,CAAC,CACH,CACF,CACF,CAAC,CACD,CAAA,IAAA,CAAM,SACN,QAAUmJ,CAAAA,CACZ,CAAC,CACDiI,CAAAA,CAAAA,CAAS,YAAY,CACnB,UAAA,CAAY+wB,EACZ,aAAe/wB,CAAAA,CAAAA,CAAS,MAAM,CAC5B,UAAA,CAAY,CACVA,CAAS,CAAA,qBAAA,CAAsB,CAC7B,UAAYA,CAAAA,CAAAA,CAAS,iBAAiB,CACpC,IAAA,CAAMA,CAAS,CAAA,wBAAA,CAAyB,CACtC,UAAY,CAAA,QAAA,CACZ,KAAM,WACR,CAAC,EACD,KAAO+wB,CAAAA,CACT,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAAA,CACD/wB,EAAS,WAAY,CAAA,CACnB,UAAYA,CAAAA,CAAAA,CAAS,yBAAyB,CAC5C,UAAA,CAAYA,EAAS,UAAW,CAAA,CAAE,KAAM,SAAU,CAAC,EACnD,UAAY,CAAA,IAAA,CACZ,KAAMA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,MAAO,CAAC,CAC5C,CAAC,CACD,CAAA,aAAA,CAAeA,EAAS,KAAM,CAAA,CAC5B,WAAY,CACVA,CAAAA,CAAS,sBAAsB,CAC7B,UAAA,CAAYA,EAAS,gBAAiB,CAAA,CACpC,KAAMA,CAAS,CAAA,wBAAA,CAAyB,CACtC,UAAY,CAAA,QAAA,CACZ,KAAM,MACR,CAAC,EACD,KAAOA,CAAAA,CAAAA,CAAS,yBAAyB,CACvC,UAAA,CAAY,UACZ,IAAM,CAAA,MACR,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CACDA,CAAAA,CAAAA,CAAS,YAAY,CACnB,UAAA,CAAYA,CAAS,CAAA,wBAAA,CAAyB,CAC5C,UAAYA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,SAAU,CAAC,CAAA,CACnD,WAAY,IACZ,CAAA,IAAA,CAAMA,EAAS,UAAW,CAAA,CAAE,KAAM,SAAU,CAAC,CAC/C,CAAC,CAAA,CACD,aAAeA,CAAAA,CAAAA,CAAS,MAAM,CAC5B,UAAA,CAAY,CACVA,CAAS,CAAA,qBAAA,CAAsB,CAC7B,UAAYA,CAAAA,CAAAA,CAAS,iBAAiB,CACpC,IAAA,CAAMA,EAAS,wBAAyB,CAAA,CACtC,WAAY,QACZ,CAAA,IAAA,CAAM,SACR,CAAC,CAAA,CACD,KAAOA,CAAAA,CAAAA,CAAS,yBAAyB,CACvC,UAAA,CAAY,UACZ,IAAM,CAAA,SACR,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CACDA,CAAAA,CAAAA,CAAS,YAAY,CACnB,UAAA,CAAYA,EAAS,wBAAyB,CAAA,CAC5C,WAAYA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,SAAU,CAAC,CACnD,CAAA,UAAA,CAAY,KACZ,IAAMA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,MAAO,CAAC,CAC5C,CAAC,CACD,CAAA,aAAA,CAAeA,CAAS,CAAA,KAAA,CAAM,CAC5B,UAAY,CAAA,CACVA,EAAS,qBAAsB,CAAA,CAC7B,WAAYA,CAAS,CAAA,gBAAA,CAAiB,CACpC,IAAMA,CAAAA,CAAAA,CAAS,yBAAyB,CACtC,UAAA,CAAY,SACZ,IAAM,CAAA,MACR,CAAC,CACD,CAAA,KAAA,CAAOA,CAAS,CAAA,wBAAA,CAAyB,CACvC,UAAY,CAAA,SAAA,CACZ,KAAM,MACR,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,EACDA,CAAS,CAAA,WAAA,CAAY,CACnB,UAAYA,CAAAA,CAAAA,CAAS,wBAAyB,CAAA,CAC5C,WAAYA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,SAAU,CAAC,CACnD,CAAA,UAAA,CAAY,KACZ,IAAMA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,OAAQ,CAAC,CAC7C,CAAC,CACD,CAAA,aAAA,CAAeA,EAAS,KAAM,CAAA,CAC5B,WAAY,CACVA,CAAAA,CAAS,sBAAsB,CAC7B,UAAA,CAAYA,EAAS,gBAAiB,CAAA,CACpC,KAAMA,CAAS,CAAA,wBAAA,CAAyB,CACtC,UAAY,CAAA,QAAA,CACZ,KAAM,OACR,CAAC,EACD,KAAOA,CAAAA,CAAAA,CAAS,wBAAyB,CAAA,CACvC,WAAY,SACZ,CAAA,IAAA,CAAM,OACR,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAAA,CACDA,EAAS,cAAe,CAAA,CACtB,WAAY,QACd,CAAC,CACH,CAAA,CACA,MAAO,CACL,CACE,QAASA,CAAS,CAAA,iBAAA,CAAkB,CAClC,QAAUA,CAAAA,CAAAA,CAAS,WAAW,CAC5B,IAAA,CAAMc,EAAU,mBAAoB,CAAA,IACtC,CAAC,CACH,CAAC,EACD,IAAMgwB,CAAAA,EACR,CACF,CACF,CAAC,CACD,CAAA,IAAA,CAAMF,EACR,CAAC,CAAA,CACDjsB,EAAK,GAAIwsB,CAAAA,CAAE,EACb,CAEMG,CAAAA,EAAAA,CAAqB,CAAC,CAAE,IAAA,CAAA3sB,CAAK,CAAoC,GAAA,CACrE,IAAMnM,CAAyB,CAAA,CAC7B,CACE,IAAM,CAAA,KAAA,CACN,KAAMwH,CAAS,CAAA,eAAA,CAAgB,CAC7B,OAAS,CAAA,QACX,CAAC,CACH,CAAA,CACA,CACE,UAAY,CAAA,KAAA,CACZ,KAAM,WACN,CAAA,IAAA,CAAMA,EAAS,eAAgB,CAAA,CAC7B,QAAS,SACX,CAAC,CACH,CACF,EAEMuxB,CAAevxB,CAAAA,CAAAA,CAAS,qBAAqB,CACjD,IAAA,CAAM6wB,GACN,IAAM7wB,CAAAA,CAAAA,CAAS,cAAc,CAC3B,KAAA,CAAO,CACLA,CAAS,CAAA,oBAAA,CAAqB,CAC5B,KAAO,CAAA,CACLA,EAAS,iBAAkB,CAAA,CACzB,QAAU,CAAA,CAAA,KAAA,EAAQ8wB,EAAY,CAAMziC,GAAAA,EAAAA,EAAAA,CAAoBO,GAAW,CAAC,4CACtE,CAAC,CAAA,CACDoR,EAAS,iBAAkB,CAAA,CACzB,WAAAxH,CACA,CAAA,mBAAA,CAAqB,IACvB,CAAC,CACH,CACF,CAAC,CACH,CACF,CAAC,EACD,cAAgB,CAAA,CACd,CACE,OAASwH,CAAAA,CAAAA,CAAS,kBAAkB,CAClC,QAAA,CAAUA,EAAS,UAAW,CAAA,CAC5B,KAAMc,CAAU,CAAA,mBAAA,CAAoB,IACtC,CAAC,CACH,CAAC,CACD,CAAA,IAAA,CAAMgwB,EACR,CACF,CACF,CAAC,CACDnsB,CAAAA,CAAAA,CAAK,IAAI4sB,CAAY,EACvB,EAEM8B,EAAiB,CAAA,CAAC,CACtB,MAAA9kC,CAAAA,CAAAA,CACA,KAAAoW,CACA,CAAA,SAAA,CAAAC,EACA,eAAA0uB,CAAAA,CACF,IAKM,CACJ,GAAM,CAAE,IAAA,CAAMC,CAAa,CAAI7L,CAAAA,EAAAA,CAAe,CAC5C,MAAAn5B,CAAAA,CAAAA,CACA,KAAMqW,CAAU,CAAA,UAAA,CAAW,OACvB,CAGE,IAAA,CAAMA,EAAU,IAChB,CAAA,IAAA,CAAMA,EAAU,IAClB,CAAA,CACA,OACJ,eAAiBmjB,CAAAA,EAAAA,CACjB,QAAWt5B,CAAAA,CAAAA,EAAS,CAClBkW,CAAK,CAAA,MAAA,CAAO,CACV,MAAQ,CAAA,IAAA,CACR,OAAQ2uB,CACR,CAAA,IAAA,CAAA7kC,CACF,CAAC,EACH,CACF,CAAC,CAAA,CAMD,OAAO,CAAE,QAAA,CAJQ05B,GAAiC,CAChD,YAAA,CAAcoL,CAChB,CAAC,CAEiB,CACpB,CAAA,CAEMC,GAAkB,CAAC,CACvB,OAAAjlC,CACA,CAAA,IAAA,CAAAoW,EACA,SAAAC,CAAAA,CAAAA,CACA,WAAAiF,CACA,CAAA,eAAA,CAAAypB,CACF,CAMM,GAAA,CACJ,IAAMhlC,CAASM,CAAAA,CAAAA,GAET,CAAE,IAAA,CAAM6kC,CAAc,CAAI/L,CAAAA,EAAAA,CAAe,CAC7C,MAAAn5B,CAAAA,CAAAA,CACA,KAAM,CAGJ,IAAA,CAAMqW,EAAU,IAChB,CAAA,IAAA,CAAMA,EAAU,IAClB,CAAA,CACA,gBAAiBojB,EACjB,CAAA,QAAA,CAAWv5B,GAAS,CAClBkW,CAAAA,CAAK,MAAO,CAAA,CACV,OAAQ,IACR,CAAA,MAAA,CAAQ2uB,EACR,IAAA7kC,CAAAA,CACF,CAAC,EACH,CACF,CAAC,CAEGgiC,CAAAA,CAAAA,CAAoC,CACtC,MAAQ,CAAA,IAAA,CACR,KAAMgD,CACR,CAAA,CAUA,GATKhD,CAAU,CAAA,IAAA,GACbA,CAAY9rB,CAAAA,CAAAA,CAAK,OAAO,CACtB,MAAA,CAAQ,KACR,MAAQkF,CAAAA,CAAAA,CACR,KAAM,cACR,CAAC,GAGkBrb,CAAgBF,CAAAA,CAAM,EAC1B,IAAS,GAAA,uBAAA,CAAyB,CACjD,IAAMoiC,CAAAA,CAAa/rB,EAAK,MAAO,CAAA,CAC7B,MAAQ,CAAA,IAAA,CACR,OAAQ,OACR,CAAA,IAAA,CAAM,YACR,CAAC,CAAA,CACD8rB,EAAY,CACV,GAAGC,EACH,IAAM,CAAA,CAAA,EAAGA,EAAW,IAAI,CAAA,CAAA,EAAID,EAAU,IAAI,CAAA,CAAA,CAC5C,EACF,CAEA,OAAO,CAAE,SAAAA,CAAAA,CAAU,CACrB,CAEMiD,CAAAA,EAAAA,CAAqB,CAAC,CAC1B,MAAA,CAAAnlC,EACA,IAAAoW,CAAAA,CAAAA,CACA,UAAAC,CACA,CAAA,eAAA,CAAA0uB,CACF,CAKM,GAAA,CACJ,GAAM,CAAE,IAAA,CAAMK,CAAiB,CAAIjM,CAAAA,EAAAA,CAAe,CAChD,MAAA,CAAAn5B,EACA,IAAM,CAAA,CAGJ,KAAMqW,CAAU,CAAA,IAAA,CAChB,KAAMA,CAAU,CAAA,IAClB,EACA,eAAiBsjB,CAAAA,EAAAA,CACjB,SAAW8B,CAAa,EAAA,CACtBrlB,EAAK,MAAO,CAAA,CACV,OAAQ,IACR,CAAA,MAAA,CAAQ2uB,CACR,CAAA,IAAA,CAAMtJ,CACR,CAAC,EACH,CACF,CAAC,CAAA,CAID,OAAO,CAAE,YAAA,CAFY2J,GAAoB,MAEnB,CACxB,EAEMvC,EAAwB,CAAA,CAAC,CAC7B,EAAAltB,CAAAA,CAAAA,CACA,WAAAmtB,CACF,CAAA,GAI0BrxB,CAAS,CAAA,sBAAA,CAAuB,CACtD,QAAU,CAAA,CACRA,EAAS,cAAe,CAAA,CACtB,aAAc4wB,EACd,CAAA,UAAA,CAAY,CACV5wB,CAAS,CAAA,GAAA,CAAI,OAAOkE,CAAE,CAAA,CACtB,UACAmtB,CAAarxB,CAAAA,CAAAA,CAAS,IAAI,OAAQ,CAAA,IAAI,EAAI,MAC5C,CACF,CAAC,CACH,CAAA,CACA,UAAW,KACb,CAAC,EAIU2iB,EAAgB,CAAA,CAAC,CAC5B,MAAAp0B,CAAAA,CAAAA,CACA,MAAAq0B,CACA,CAAA,MAAA,CAAAl0B,CACF,CAMS,GAAA,CACP,IAAMJ,CAASM,CAAAA,CAAAA,EAEf,CAAA,GAAIE,EAAeR,CAAM,CAAA,CACvB,MAAM,IAAI,KAAA,CAAM,uDAAuD,CAGzE,CAAA,IAAMqW,EAAOie,CAAMl0B,CAAAA,CAAAA,CAAO,IAAI,CAE9BiW,CAAAA,CAAAA,CAAK,OAAO,CACV,GAAG7D,EAAU,mBACb,CAAA,MAAA,CAAQH,CAAiB,CAAA,CAAE,OAAArS,CAAQ,CAAA,YAAA,CAAcI,EAAO,MAAO,CAAC,CAClE,CAAC,CAAA,CAED,IAAM4kC,CAAkBnzB,CAAAA,EAAAA,CAAmB,CACzC,YAAcyiB,CAAAA,CAAAA,CAAM,MAAO,oBAAqB,EAAA,CAChD,aAAcl0B,CAAO,CAAA,MACvB,CAAC,CAAA,CAEK+jC,EACJ/jC,CAAO,CAAA,IAAA,GAAS,wCAChBA,CAAO,CAAA,IAAA,GAAS,0BAChBA,CAAO,CAAA,IAAA,GAAS,wBACZ,iBACA,CAAA,oBAAA,CAEFklC,EACAC,CAAkC,CAAA,KAAA,CAClCC,EAAkC,KAClCC,CAAAA,CAAAA,CAAqB,MACrBC,CAAe,CAAA,KAAA,CACfC,EAAa,KAEXC,CAAAA,CAAAA,CAAsB,IAAI,GAEhC,CAAA,IAAA,IAAWxK,KAAWn7B,CAAO,CAAA,QAAA,CAC3B,QAAWqW,CAAa8kB,IAAAA,CAAAA,CAAQ,WAAY,CAE1C,IAAMrY,EAAe/E,CAAmB1H,CAAAA,CAAS,EACjD,GAAIsvB,CAAAA,CAAoB,IAAI7iB,CAAY,CAAA,CACtC,SAEF6iB,CAAAA,CAAoB,IAAI7iB,CAAc,CAAA,IAAI,EAE1C,IAAM2gB,CAAAA,CAAU,CACd1jC,CAAO,CAAA,OAAA,CAAQ,cAAc,CAAG,EAAA,MAAA,CAAO,SACrC2xB,EAAmB,CAAA,CACjB,OAAA3xB,CACA,CAAA,IAAA,CAAMo7B,EAAQ,IAChB,CAAC,CACHL,CAAAA,EAAAA,CAA0B,CACxB,MAAA/6B,CAAAA,CAAAA,CACA,cAAe,CAACA,CAAAA,CAAO,QAAQ,cAAc,CAAA,EAAG,OAAO,OACvD,CAAA,EAAA,CAAIsW,EAAU,IACd,CAAA,SAAA,CAAAA,CACF,CAAC,CACH,EACG,MAAO,CAAA,OAAO,CACd,CAAA,IAAA,CAAK,GAAG,CACPuvB,CAAAA,CAAAA,CAAiB,MAGrB,GACEzlC,CAAAA,CAAO,OAAO,YACb,EAAA,CAAC,MAAO,MAAM,CAAA,CAA4B,SAASkW,CAAU,CAAA,MAAM,EACpE,CACKqvB,CAAAA,GACHA,EAAa,IAERH,CAAAA,CAAAA,GACHxC,EAAmB,CAAA,CAAE,KAAA3sB,CAAK,CAAC,EAC3BssB,EAAuB,CAAA,CAAE,KAAAtsB,CAAK,CAAC,EAC/BmvB,CAAkC,CAAA,IAAA,CAAA,CAGpCnvB,EAAK,MAAO,CAAA,CACV,OAAQjW,CAAO,CAAA,IAAA,CACf,KAAMikC,EACR,CAAC,CAGHwB,CAAAA,CAAAA,CAAAA,CAAiB,KAEjB,GAAM,CAAE,SAAAzC,CAAS,CAAA,CAAI2B,GAAe,CAClC,MAAA,CAAA9kC,EACA,IAAAoW,CAAAA,CAAAA,CACA,UAAAC,CACA,CAAA,eAAA,CAAA0uB,CACF,CAAC,CAAA,CAEKhL,EAAajG,EAA6Bzd,CAAAA,CAAAA,CAAU,UAAU,CAAA,CAE9D4sB,EAAoBxxB,CAAS,CAAA,aAAA,CAAc,CAC/C,WAAa,CAAA,IAAA,CACb,WAAYA,CAAS,CAAA,aAAA,CAAc,CACjC,UAAY,CAAA,CACV,CACE,UAAAsoB,CAAAA,CAAAA,CACA,KAAM,SACN,CAAA,IAAA,CAAMoJ,CACR,CACF,CAAA,CACA,UAAYN,CAAAA,EAAAA,CAAsB,CAChC,EAAIxsB,CAAAA,CAAAA,CAAU,IAChB,CAAC,CACH,CAAC,CACD,CAAA,IAAA,CAAMuuB,GAAe,CACnB,MAAA,CAAA7kC,EACA,EAAIsW,CAAAA,CAAAA,CAAU,KACd,SAAAA,CAAAA,CACF,CAAC,CACH,CAAC,EACDD,CAAK,CAAA,GAAA,CAAI6sB,CAAiB,CAE1B,CAAA,IAAMl3B,GAAY0F,CAAS,CAAA,aAAA,CAAc,CAEvC,OAAS,CAAA,GACT,WAAa,CAAA,IAAA,CACb,WAAYA,CAAS,CAAA,aAAA,CAAc,CACjC,UAAY,CAAA,CACV,CACE,UAAAsoB,CAAAA,CAAAA,CACA,IAAM,CAAA,SAAA,CACN,KAAMoJ,CACR,CACF,EACA,UAAY,CAAA,CACV1xB,EAAS,kBAAmB,CAAA,CAC1B,KAAM,CACJA,CAAAA,CAAS,iBAAiB,CACxB,GAAA,CAAK,CACH,CACE,GAAA,CAAK,UACL,KAAOA,CAAAA,CAAAA,CAAS,aAAc,CAAA,CAC5B,MAAO,IACP,CAAA,SAAA,CAAW,KACX,UAAY,CAAA,CACV,CACE,WAAa,CAAA,CACX,CACE,IAAM,CAAA,UACR,EACA,CACE,IAAA,CAAM,QACR,CACF,CACF,CACF,CACA,CAAA,UAAA,CAAY,CACVA,CAAAA,CAAS,cAAc,CACrB,WAAA,CAAa,KACb,UAAYA,CAAAA,CAAAA,CAAS,gBAAgB,CACnC,UAAA,CAAYA,EAAS,cAAe,CAAA,CAClC,aAAcgyB,CACd,CAAA,UAAA,CAAY,CACVhyB,CAAS,CAAA,gBAAA,CAAiB,CACxB,SAAW,CAAA,IAAA,CACX,IAAK,CACH,CACE,OAAQ,SACV,CAAA,CACA,CACE,MAAQ,CAAA,aACV,EACA,CACE,GAAA,CAAK,SACL,SAAW,CAAA,IAAA,CACX,MAAOA,CAAS,CAAA,UAAA,CAAW,CACzB,IAAM,CAAA,QACR,CAAC,CACH,CAAA,CACA,CACE,GAAA,CAAK,eACL,KAAO,CAAA,IACT,CACF,CACF,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAAA,CACD,KAAM,MACR,CAAC,EACDA,CAAS,CAAA,cAAA,CAAe,CACtB,UAAY,CAAA,MACd,CAAC,CACH,CACF,CAAC,CACH,EACA,CACE,GAAA,CAAK,WACL,KAAOA,CAAAA,CAAAA,CAAS,eAAe,CAC7B,YAAA,CAAcmzB,GAAe,CAC3B,MAAA,CAAA7kC,EACA,EAAIsW,CAAAA,CAAAA,CAAU,KACd,SAAAA,CAAAA,CACF,CAAC,CAAA,CACD,WAAY,CAAC,SAAS,CACxB,CAAC,CACH,CACF,CACF,CAAC,CACH,CACA,CAAA,IAAA,CAAM+tB,EACR,CAAC,CACH,CACF,CAAC,CAAA,CACD,KAAMO,EAAmB,CAAA,CACvB,OAAA5kC,CACA,CAAA,EAAA,CAAIsW,EAAU,IACd,CAAA,SAAA,CAAAA,CACF,CAAC,CAGH,CAAC,CACDD,CAAAA,CAAAA,CAAK,IAAIrK,EAAS,EACpB,CAGA,GACE5L,CAAAA,CAAO,OAAO,oBACb,EAAA,CAAC,MAAO,MAAM,CAAA,CAA4B,QAASkW,CAAAA,CAAAA,CAAU,MAAM,CACpE,CAAA,CAEA,IAAIyX,CAEE+X,CAAAA,CAAAA,CAAsBxvB,EAAU,UAAW,CAAA,IAAA,CAAMrO,GAAc,CAInE,GAHyBgjB,GACvBjrB,CAAO,CAAA,MAAA,CAAO,UAChB,CACqB,CAAA,IAAA,CAAKiI,EAAU,IAAI,CAAA,CACtC,OAAA8lB,CAAAA,CAAkB9lB,EACX,IAGT,CAAA,GAAIA,EAAU,EAAO,GAAA,MAAA,CAIrB,IAAIA,CAAU,CAAA,MAAA,GAAW,YAAa,CACpC,IAAMsO,GAAMtO,CAAU,CAAA,KAAA,CAAM,CAAC,CAI7B,CAAA,OAHiBhI,EAAO,MAAO,CAAA,IAAA,CAC5B8yB,EAAUA,EAAAA,EAAAA,CAAM,MAAM,IAASxc,GAAAA,EAClC,GACiB,UAAW,CAAA,IAAA,CAAM1F,IAAa,CAI7C,GAHyBoa,GACvBjrB,CAAO,CAAA,MAAA,CAAO,UAChB,CACqB,CAAA,IAAA,CAAK6Q,GAAS,IAAI,CAAA,CACrC,OAAAkd,CAAkBld,CAAAA,EAAAA,CACX,IAGX,CAAC,CACH,CAEA,OAAO5I,CAAAA,CAAU,WAAW,IAAM4I,CAAAA,EAAAA,EAAa,CAI7C,GAHyBoa,EAAAA,CACvBjrB,EAAO,MAAO,CAAA,UAChB,EACqB,IAAK6Q,CAAAA,EAAAA,CAAS,IAAI,CACrC,CAAA,OAAAkd,EAAkBld,EACX,CAAA,IAGX,CAAC,CAAA,CACH,CAAC,CAED,CAAA,GAAIi1B,GAAuB/X,CAAiB,CAAA,CACrC0X,IACHA,CAAqB,CAAA,IAAA,CAEhBD,IACHxC,EAAmB,CAAA,CAAE,KAAA3sB,CAAK,CAAC,EAC3BssB,EAAuB,CAAA,CAAE,KAAAtsB,CAAK,CAAC,CAC/BmvB,CAAAA,CAAAA,CAAkC,MAG/BD,CACHhC,GAAAA,EAAAA,CAA6B,CAAE,IAAAltB,CAAAA,CAAK,CAAC,CACrCkvB,CAAAA,CAAAA,CAAkC,MAGpClvB,CAAK,CAAA,MAAA,CAAO,CACV,MAAQjW,CAAAA,CAAAA,CAAO,KACf,IAAMkjC,CAAAA,EACR,CAAC,CAEDgC,CAAAA,CAAAA,CAAmBjvB,CAAK,CAAA,MAAA,CAAO,CAC7B,MAAQ,CAAA,IAAA,CACR,OAAQjW,CAAO,CAAA,IAAA,CACf,KAAM,cACR,CAAC,GAGHylC,CAAiB,CAAA,IAAA,CAEjB,GAAM,CAAE,QAAA,CAAAzC,CAAS,CAAI2B,CAAAA,EAAAA,CAAe,CAClC,MAAA9kC,CAAAA,CAAAA,CACA,KAAAoW,CACA,CAAA,SAAA,CAAAC,EACA,eAAA0uB,CAAAA,CACF,CAAC,CACK,CAAA,CAAE,UAAA7C,EAAU,CAAA,CAAI+C,GAAgB,CACpC,MAAA,CAAAjlC,EACA,IAAAoW,CAAAA,CAAAA,CACA,UAAAC,CACA,CAAA,UAAA,CAAYlW,EAAO,IACnB,CAAA,eAAA,CAAA4kC,CACF,CAAC,EACK,CAAE,YAAA,CAAArB,EAAa,CAAIyB,CAAAA,EAAAA,CAAmB,CAC1C,MAAAnlC,CAAAA,CAAAA,CACA,KAAAoW,CACA,CAAA,SAAA,CAAAC,EACA,eAAA0uB,CAAAA,CACF,CAAC,CAEKhL,CAAAA,EAAAA,CAAajG,GAA6Bzd,CAAU,CAAA,UAAU,CAE9D6sB,CAAAA,EAAAA,CAAe,GAAGZ,EAAY,CAAA,CAAA,EAAIa,CAAQ,CAC1CQ,CAAAA,CAAAA,CAAAA,EAAAA,CAAsB,QAAQT,EAAY,CAAA,2CAAA,CAAA,CAC1CU,GAAgB,CAAG9V,EAAAA,CAAAA,CAAgB,IAAI,CAAM6V,GAAAA,EAAAA,EAAmB,GAEhEV,EAAoBxxB,CAAAA,CAAAA,CAAS,cAAc,CAC/C,WAAA,CAAa,IACb,CAAA,UAAA,CAAYA,EAAS,aAAc,CAAA,CACjC,WAAY,CACV,CACE,WAAAsoB,EACA,CAAA,IAAA,CAAM,UACN,IAAMoJ,CAAAA,CACR,CACF,CACA,CAAA,UAAA,CAAYD,GACZ,UAAYL,CAAAA,EAAAA,CAAsB,CAChC,EAAIxsB,CAAAA,CAAAA,CAAU,KACd,UAAY,CAAA,IACd,CAAC,CACH,CAAC,EACD,IAAMuuB,CAAAA,EAAAA,CAAe,CACnB,MAAA7kC,CAAAA,CAAAA,CACA,GAAIsW,CAAU,CAAA,IAAA,CACd,WAAY,IACZ,CAAA,SAAA,CAAAA,CACF,CAAC,CACH,CAAC,CACDD,CAAAA,CAAAA,CAAK,GAAI6sB,CAAAA,EAAiB,EAE1B,IAAMl3B,EAAAA,CAAY0F,EAAS,aAAc,CAAA,CAEvC,QAAS,EAAC,CACV,YAAa,IACb,CAAA,UAAA,CAAYA,EAAS,aAAc,CAAA,CACjC,WAAY,CACV,CACE,WAAAsoB,EACA,CAAA,IAAA,CAAM,SACN,CAAA,IAAA,CAAMoJ,CACR,CACF,CAAA,CACA,WAAY,CACV1xB,CAAAA,CAAS,mBAAmB,CAC1B,IAAA,CAAM,CACJA,CAAS,CAAA,gBAAA,CAAiB,CACxB,QAAU,CAAA,CACR,CACE,KAAO,CAAA,KAAA,CACP,MAAO,CAAC,YAAY,CACtB,CACF,EACA,GAAK,CAAA,CACH,CACE,GAAK,CAAA,SAAA,CACL,MAAOA,CAAS,CAAA,aAAA,CAAc,CAC5B,KAAO,CAAA,IAAA,CACP,UAAW,IACX,CAAA,UAAA,CAAY,CACV,CACE,WAAA,CAAa,CACX,CACE,IAAA,CAAM,WACR,CACA,CAAA,CACE,KAAM,UACR,CAAA,CACA,CACE,IAAM,CAAA,QACR,CACF,CACF,CACF,EACA,UAAY,CAAA,CACVA,EAAS,aAAc,CAAA,CACrB,QAAS,CACP,CACE,MAAO,KACP,CAAA,KAAA,CAAO,CAAC,YAAY,CACtB,CACF,CAAA,CACA,WAAYA,CAAS,CAAA,qBAAA,CAAsB,CACzC,SAAWA,CAAAA,CAAAA,CAAS,iBAAiB,CACnC,IAAA,CAAMA,EAAS,gBAAiB,CAAA,CAC9B,KAAM,WACR,CAAC,EACD,QAAU,CAAA,KAAA,CACV,KAAOA,CAAAA,CAAAA,CAAS,IAAI,MAAO,CAAA,QAAQ,CACrC,CAAC,CAAA,CACD,UAAWA,CAAS,CAAA,gBAAA,CAAiB,CACnC,SAAW,CAAA,IAAA,CACX,IAAK,CACH,CACE,IAAKozB,EACHgB,CAAAA,CACF,EACA,KAAOp0B,CAAAA,CAAAA,CAAS,gBAAiB,CAAA,CAC/B,UAAW,IACX,CAAA,GAAA,CAAK,CACH,CACE,GAAA,CAAKqc,EAAgB,IACrB,CAAA,KAAA,CAAOrc,EAAS,UAAW,CAAA,CACzB,KAAM,WACR,CAAC,CACH,CACF,CACF,CAAC,CACH,CACF,CACF,CAAC,CAAA,CACD,SAAUA,CAAS,CAAA,UAAA,CAAW,CAC5B,IAAM,CAAA,WACR,CAAC,CACH,CAAC,EACD,IAAM,CAAA,MAAA,CACN,SAAUkyB,EACZ,CAAC,EACDlyB,CAAS,CAAA,aAAA,CAAc,CACrB,UAAYA,CAAAA,CAAAA,CAAS,cAAe,CAAA,CAClC,aAAc,sBACd,CAAA,UAAA,CAAY,CAAC,UAAY,CAAA,MAAM,CACjC,CAAC,CAAA,CACD,KAAM,QACR,CAAC,EACDA,CAAS,CAAA,aAAA,CAAc,CACrB,WAAa,CAAA,IAAA,CACb,WAAYA,CAAS,CAAA,eAAA,CAAgB,CACnC,UAAA,CAAYA,EAAS,cAAe,CAAA,CAClC,aAAcgyB,CACd,CAAA,UAAA,CAAY,CACVhyB,CAAS,CAAA,gBAAA,CAAiB,CACxB,SAAW,CAAA,IAAA,CACX,IAAK,CACH,CACE,OAAQ,SACV,CAAA,CACA,CACE,MAAQ,CAAA,QACV,CACA,CAAA,CACE,IAAK,QACL,CAAA,SAAA,CAAW,KACX,KAAOA,CAAAA,CAAAA,CAAS,WAAW,CACzB,IAAA,CAAM,QACR,CAAC,CACH,EACA,CACE,GAAA,CAAK,eACL,KAAO,CAAA,IACT,CACF,CACF,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAAA,CACD,KAAM,MACR,CAAC,EACDA,CAAS,CAAA,cAAA,CAAe,CACtB,UAAY,CAAA,MACd,CAAC,CACH,CACF,CAAC,CACH,CAAA,CACA,CACE,GAAK,CAAA,UAAA,CACL,KAAOA,CAAAA,CAAAA,CAAS,eAAe,CAC7B,YAAA,CAAcmzB,GAAe,CAC3B,MAAA,CAAA7kC,EACA,EAAIsW,CAAAA,CAAAA,CAAU,KACd,UAAY,CAAA,IAAA,CACZ,UAAAA,CACF,CAAC,EACD,UAAY,CAAA,CAAC,SAAS,CACxB,CAAC,CACH,CACF,CACF,CAAC,CACH,EACA,IAAMgtB,CAAAA,EAAAA,CAEN,MAAO,CACLK,EAAAA,CACAxB,GAAU,IACV,CAAA,CAAA,EAAG,OAAOmD,CAAqB,EAAA,QAAA,CAAWA,EAAmBA,CAAiB,CAAA,IAAI,IAAI3B,EAAY,CAAA,CAAA,CAAA,CAClGR,EACAU,CAAAA,EACF,CACF,CAAC,CACH,CACF,CAAC,CAAA,CACD,KAAMa,EAA2BpuB,CAAAA,CAAS,CAC5C,CAAC,CAAA,CACDD,EAAK,GAAIrK,CAAAA,EAAS,EACpB,CACF,CAGA,GACE5L,CAAO,CAAA,MAAA,CAAO,iBACb,CAAC,QAAA,CAAU,QAAS,MAAQ,CAAA,KAAK,EAA4B,QAC5DkW,CAAAA,CAAAA,CAAU,MACZ,CACA,CAAA,CACKovB,IACHA,CAAe,CAAA,IAAA,CAEfrvB,EAAK,MAAO,CAAA,CACV,OAAQ,IACR,CAAA,MAAA,CAAQjW,EAAO,IACf,CAAA,IAAA,CAAM+jC,CACR,CAAC,GAGH0B,CAAiB,CAAA,IAAA,CAEjB,GAAM,CAAE,QAAA,CAAAzC,CAAS,CAAI2B,CAAAA,EAAAA,CAAe,CAClC,MAAA9kC,CAAAA,CAAAA,CACA,KAAAoW,CACA,CAAA,SAAA,CAAAC,EACA,eAAA0uB,CAAAA,CACF,CAAC,CACK,CAAA,CAAE,SAAA7C,CAAAA,CAAU,EAAI+C,EAAgB,CAAA,CACpC,OAAAjlC,CACA,CAAA,IAAA,CAAAoW,EACA,SAAAC,CAAAA,CAAAA,CACA,WAAYlW,CAAO,CAAA,IAAA,CACnB,gBAAA4kC,CACF,CAAC,EACK,CAAE,YAAA,CAAArB,CAAa,CAAIyB,CAAAA,EAAAA,CAAmB,CAC1C,MAAA,CAAAnlC,EACA,IAAAoW,CAAAA,CAAAA,CACA,UAAAC,CACA,CAAA,eAAA,CAAA0uB,CACF,CAAC,CAAA,CAEK99B,GAAawK,CAAS,CAAA,aAAA,CAAc,CACxC,UAAY,CAAA,CACV,CACE,UAAY,CAAA,KAAA,CACZ,KAAM,SACN,CAAA,IAAA,CAAM,WAAW0xB,CAAQ,CAAA,CAAA,CAC3B,CACF,CACA,CAAA,UAAA,CAAY,CACV1xB,CAAS,CAAA,aAAA,CAAc,CACrB,UAAYA,CAAAA,CAAAA,CAAS,iBAAiB,CACpC,GAAA,CAAK,CACH,CACE,GAAA,CAAK,aACL,KAAOA,CAAAA,CAAAA,CAAS,cAAc,CAC5B,KAAA,CAAO,IACP,CAAA,SAAA,CAAW,KACX,UAAY,CAAA,CACV,CACE,IAAM,CAAA,cACR,CACF,CACA,CAAA,UAAA,CAAY,CACVA,CAAS,CAAA,aAAA,CAAc,CACrB,WAAa,CAAA,IAAA,CACb,WAAYA,CAAS,CAAA,eAAA,CAAgB,CACnC,UAAYA,CAAAA,CAAAA,CAAS,cAAe,CAAA,CAClC,aAAcgyB,CACd,CAAA,UAAA,CAAY,CACVhyB,CAAS,CAAA,gBAAA,CAAiB,CACxB,SAAW,CAAA,IAAA,CACX,IAAK,CACH,CACE,OAAQ,SACV,CAAA,CACA,CACE,MAAQ,CAAA,cACV,EACA,CACE,GAAA,CAAK,cACL,CAAA,KAAA,CAAO,IACT,CACF,CACF,CAAC,CACH,CACF,CAAC,CACH,CAAC,EACD,IAAM,CAAA,MACR,CAAC,CACDA,CAAAA,CAAAA,CAAS,eAAe,CACtB,UAAA,CAAY,MACd,CAAC,CACH,CACF,CAAC,CACH,CACF,CACF,CAAC,EACD,IAAMuyB,CAAAA,EAAAA,CAEN,SAAU,CAAGE,EAAAA,CAAa,IAAIR,CAAY,CAAA,EAAA,EAAKxB,EAAU,IAAI,CAAA,EAAA,EAAKiB,CAAQ,CAC5E,CAAA,CAAA,CAAC,EACD1xB,CAAS,CAAA,cAAA,CAAe,CACtB,UAAA,CAAYuyB,EACd,CAAC,CACH,CACF,CAAC,CAAA,CACKj4B,GAAY0F,CAAS,CAAA,aAAA,CAAc,CAEvC,OAAS,CAAA,GACT,WAAa,CAAA,IAAA,CACb,WAAAxK,EACA,CAAA,IAAA,CAAMy9B,GAAsBruB,CAAS,CACvC,CAAC,CAAA,CACDD,EAAK,GAAIrK,CAAAA,EAAS,EACpB,CAEI25B,CAAAA,CAAAA,EAAcF,IAChBpvB,CAAK,CAAA,MAAA,CAAO,CACV,KAAO,CAAA,eAAA,CACP,OAAQxE,EAAmB,CAAA,CACzB,aAAcyiB,CAAM,CAAA,MAAA,CAAQ,sBAC5B,CAAA,YAAA,CAAcl0B,CAAO,CAAA,MACvB,CAAC,CACD,CAAA,IAAA,CAAM,QACR,CAAC,CAAA,CAGCylC,GACFxvB,CAAK,CAAA,MAAA,CAAO,CACV,MAAQxE,CAAAA,EAAAA,CAAmB,CACzB,YAAcyiB,CAAAA,CAAAA,CAAM,IAAK,oBAAqB,EAAA,CAC9C,aAAcl0B,CAAO,CAAA,MACvB,CAAC,CACD,CAAA,IAAA,CAAMsjC,EAAQ,KAAM,CAAA,GAAG,EAAE,CAAC,CAC5B,CAAC,EAEL,CAEJ,EC5yCa/rB,IAAAA,EAAAA,CAAsD,CACjE,MAAQ,CAAA,CACN,KAAM,WACN,CAAA,QAAA,CAAU,KACV,eAAiB,CAAA,KACnB,CACA,CAAA,YAAA,CAAc,CAAC,cAAgB,CAAA,qBAAqB,EACpD,OAASiB,CAAAA,EAAAA,CACT,cAAeyb,EACf,CAAA,IAAA,CAAM,uCACN,MAAQ,CAAA,sCAAA,CACR,cAAe,CAACj0B,CAAAA,CAAQgW,IAAY,CAClChW,CAAAA,CAAO,OAAO,iBAAoBgW,CAAAA,CAAAA,CAAQ,aAAc,CAAA,CACtD,aAAc,CACZ,IAAA,CAAMhW,EAAO,MAAO,CAAA,IAAA,EAAQ,YAC5B,OAAS,CAAA,IAAA,CACT,KAAM,0BACR,CAAA,CACA,QAAS,CACP,OAAA,CAAUqC,IAAa,CAAE,OAAA,CAAAA,CAAQ,CACjC,CAAA,CAAA,MAAA,CAAStC,CAAU,GAAA,CAAE,QAAS,IAAM,CAAA,IAAA,CAAAA,CAAK,CAC3C,CAAA,CAAA,CACA,MAAOC,CAAO,CAAA,MAAA,CAAO,iBACvB,CAAC,CAAA,CAEDA,EAAO,MAAO,CAAA,oBAAA,CAAuBgW,EAAQ,aAAc,CAAA,CACzD,aAAc,CACZ,IAAA,CAAMhW,EAAO,MAAO,CAAA,IAAA,EAAQ,YAC5B,OAAS,CAAA,IAAA,CACT,KAAM,yBACR,CAAA,CACA,QAAS,CACP,OAAA,CAAUqC,IAAa,CAAE,OAAA,CAAAA,CAAQ,CACjC,CAAA,CAAA,MAAA,CAAStC,IAAU,CAAE,OAAA,CAAS,KAAM,IAAAA,CAAAA,CAAK,CAC3C,CAAA,CAAA,CACA,MAAOC,CAAO,CAAA,MAAA,CAAO,oBACvB,CAAC,CAAA,CAEDA,EAAO,MAAO,CAAA,eAAA,CAAkBgW,EAAQ,aAAc,CAAA,CACpD,aAAc,CACZ,IAAA,CAAMhW,EAAO,MAAO,CAAA,IAAA,EAAQ,YAC5B,OAAS,CAAA,IAAA,CACT,IAAM,CAAA,kBACR,EACA,OAAS,CAAA,CACP,QAAUqC,CAAa,GAAA,CAAE,QAAAA,CAAQ,CAAA,CAAA,CACjC,OAAStC,CAAU,GAAA,CAAE,QAAS,IAAM,CAAA,IAAA,CAAAA,CAAK,CAC3C,CAAA,CAAA,CACA,MAAOC,CAAO,CAAA,MAAA,CAAO,eACvB,CAAC,EAEDA,CAAO,CAAA,MAAA,CAAO,UAAYgW,CAAQ,CAAA,aAAA,CAAc,CAC9C,YAAc,CAAA,CACZ,KAAMhW,CAAO,CAAA,MAAA,CAAO,MAAQ,WAC5B,CAAA,OAAA,CAAS,KACT,IAAM,CAAA,kBACR,EACA,OAAS,CAAA,CACP,QAAUqC,CAAa,GAAA,CAAE,QAAAA,CAAQ,CAAA,CAAA,CACjC,OAAStC,CAAU,GAAA,CAAE,QAAS,IAAM,CAAA,IAAA,CAAAA,CAAK,CAC3C,CAAA,CAAA,CACA,MAAOC,CAAO,CAAA,MAAA,CAAO,SACvB,CAAC,CAAA,CAEDA,EAAO,MAAO,CAAA,YAAA,CAAegW,CAAQ,CAAA,aAAA,CAAc,CACjD,YAAc,CAAA,CACZ,KAAMhW,CAAO,CAAA,MAAA,CAAO,MAAQ,WAC5B,CAAA,OAAA,CAAS,KACT,IAAM,CAAA,iBACR,EACA,OAAS,CAAA,CACP,QAAUqC,CAAa,GAAA,CAAE,QAAAA,CAAQ,CAAA,CAAA,CACjC,MAAStC,CAAAA,CAAAA,GAAU,CAAE,OAAS,CAAA,IAAA,CAAM,KAAAA,CAAK,CAAA,CAC3C,EACA,KAAOC,CAAAA,CAAAA,CAAO,OAAO,YACvB,CAAC,EACH,CACF,CAAA,CC7EauX,IAAAA,EAAAA,CAAoD,CAC/D,MAAA,CAAQ,CACN,IAAM,CAAA,WAAA,CACN,SAAU,IACV,CAAA,eAAA,CAAiB,KACnB,CACA,CAAA,YAAA,CAAc,CAAC,cAAgB,CAAA,qBAAqB,EACpD,OAASiB,CAAAA,EAAAA,CACT,cAAeyb,EACf,CAAA,IAAA,CAAM,wBACN,MAAQ,CAAA,uBAAA,CACR,aAAe,CAAA,CAACj0B,EAAQgW,CAAY,GAAA,CAClChW,EAAO,MAAO,CAAA,iBAAA,CAAoBgW,EAAQ,aAAc,CAAA,CACtD,aAAc,CACZ,IAAA,CAAMhW,EAAO,MAAO,CAAA,IAAA,EAAQ,YAC5B,OAAS,CAAA,IAAA,CACT,KAAM,0BACR,CAAA,CACA,OAAS,CAAA,CACP,QAAUqC,CAAa,GAAA,CAAE,QAAAA,CAAQ,CAAA,CAAA,CACjC,OAAStC,CAAU,GAAA,CAAE,QAAS,IAAM,CAAA,IAAA,CAAAA,CAAK,CAC3C,CAAA,CAAA,CACA,MAAOC,CAAO,CAAA,MAAA,CAAO,iBACvB,CAAC,CAAA,CAEDA,CAAO,CAAA,MAAA,CAAO,qBAAuBgW,CAAQ,CAAA,aAAA,CAAc,CACzD,YAAc,CAAA,CACZ,KAAMhW,CAAO,CAAA,MAAA,CAAO,MAAQ,WAC5B,CAAA,OAAA,CAAS,KACT,IAAM,CAAA,yBACR,EACA,OAAS,CAAA,CACP,QAAUqC,CAAa,GAAA,CAAE,OAAAA,CAAAA,CAAQ,GACjC,MAAStC,CAAAA,CAAAA,GAAU,CAAE,OAAS,CAAA,IAAA,CAAM,KAAAA,CAAK,CAAA,CAC3C,EACA,KAAOC,CAAAA,CAAAA,CAAO,OAAO,oBACvB,CAAC,EAEDA,CAAO,CAAA,MAAA,CAAO,gBAAkBgW,CAAQ,CAAA,aAAA,CAAc,CACpD,YAAc,CAAA,CACZ,KAAMhW,CAAO,CAAA,MAAA,CAAO,MAAQ,WAC5B,CAAA,OAAA,CAAS,KACT,IAAM,CAAA,kBACR,EACA,OAAS,CAAA,CACP,QAAUqC,CAAa,GAAA,CAAE,QAAAA,CAAQ,CAAA,CAAA,CACjC,OAAStC,CAAU,GAAA,CAAE,OAAS,CAAA,IAAA,CAAM,KAAAA,CAAK,CAAA,CAC3C,EACA,KAAOC,CAAAA,CAAAA,CAAO,OAAO,eACvB,CAAC,EAEDA,CAAO,CAAA,MAAA,CAAO,UAAYgW,CAAQ,CAAA,aAAA,CAAc,CAC9C,YAAc,CAAA,CACZ,KAAMhW,CAAO,CAAA,MAAA,CAAO,IAAQ,EAAA,WAAA,CAC5B,QAAS,IACT,CAAA,IAAA,CAAM,kBACR,CACA,CAAA,OAAA,CAAS,CACP,OAAUqC,CAAAA,CAAAA,GAAa,CAAE,OAAAA,CAAAA,CAAQ,GACjC,MAAStC,CAAAA,CAAAA,GAAU,CAAE,OAAS,CAAA,IAAA,CAAM,KAAAA,CAAK,CAAA,CAC3C,CACA,CAAA,KAAA,CAAOC,EAAO,MAAO,CAAA,SACvB,CAAC,CAEDA,CAAAA,CAAAA,CAAO,OAAO,YAAegW,CAAAA,CAAAA,CAAQ,cAAc,CACjD,YAAA,CAAc,CACZ,IAAMhW,CAAAA,CAAAA,CAAO,OAAO,IAAQ,EAAA,WAAA,CAC5B,QAAS,IACT,CAAA,IAAA,CAAM,iBACR,CACA,CAAA,OAAA,CAAS,CACP,OAAUqC,CAAAA,CAAAA,GAAa,CAAE,OAAAA,CAAAA,CAAQ,GACjC,MAAStC,CAAAA,CAAAA,GAAU,CAAE,OAAS,CAAA,IAAA,CAAM,KAAAA,CAAK,CAAA,CAC3C,EACA,KAAOC,CAAAA,CAAAA,CAAO,OAAO,YACvB,CAAC,EACH,CACF,EC7EO,IAAMuX,GAAoD,CAC/D,MAAA,CAAQ,CACN,IAAM,CAAA,WAAA,CACN,SAAU,IACV,CAAA,eAAA,CAAiB,KACnB,CACA,CAAA,YAAA,CAAc,CAAC,cAAgB,CAAA,qBAAqB,CACpD,CAAA,OAAA,CAASiB,GACT,aAAeyb,CAAAA,EAAAA,CACf,KAAM,uBACN,CAAA,MAAA,CAAQ,wBACR,aAAe,CAAA,CAACj0B,EAAQgW,CAAY,GAAA,CAClChW,EAAO,MAAO,CAAA,iBAAA,CAAoBgW,EAAQ,aAAc,CAAA,CACtD,aAAc,CACZ,IAAA,CAAMhW,CAAO,CAAA,MAAA,CAAO,MAAQ,WAC5B,CAAA,OAAA,CAAS,KACT,IAAM,CAAA,0BACR,EACA,OAAS,CAAA,CACP,QAAUqC,CAAa,GAAA,CAAE,QAAAA,CAAQ,CAAA,CAAA,CACjC,OAAStC,CAAU,GAAA,CAAE,QAAS,IAAM,CAAA,IAAA,CAAAA,CAAK,CAC3C,CAAA,CAAA,CACA,MAAOC,CAAO,CAAA,MAAA,CAAO,iBACvB,CAAC,CAAA,CAEDA,EAAO,MAAO,CAAA,oBAAA,CAAuBgW,EAAQ,aAAc,CAAA,CACzD,aAAc,CACZ,IAAA,CAAMhW,EAAO,MAAO,CAAA,IAAA,EAAQ,YAC5B,OAAS,CAAA,IAAA,CACT,IAAM,CAAA,yBACR,EACA,OAAS,CAAA,CACP,QAAUqC,CAAa,GAAA,CAAE,QAAAA,CAAQ,CAAA,CAAA,CACjC,OAAStC,CAAU,GAAA,CAAE,QAAS,IAAM,CAAA,IAAA,CAAAA,CAAK,CAC3C,CAAA,CAAA,CACA,MAAOC,CAAO,CAAA,MAAA,CAAO,oBACvB,CAAC,EAEDA,CAAO,CAAA,MAAA,CAAO,gBAAkBgW,CAAQ,CAAA,aAAA,CAAc,CACpD,YAAc,CAAA,CACZ,KAAMhW,CAAO,CAAA,MAAA,CAAO,MAAQ,WAC5B,CAAA,OAAA,CAAS,KACT,IAAM,CAAA,kBACR,EACA,OAAS,CAAA,CACP,OAAUqC,CAAAA,CAAAA,GAAa,CAAE,OAAAA,CAAAA,CAAQ,GACjC,MAAStC,CAAAA,CAAAA,GAAU,CAAE,OAAS,CAAA,IAAA,CAAM,KAAAA,CAAK,CAAA,CAC3C,EACA,KAAOC,CAAAA,CAAAA,CAAO,OAAO,eACvB,CAAC,EAEDA,CAAO,CAAA,MAAA,CAAO,UAAYgW,CAAQ,CAAA,aAAA,CAAc,CAC9C,YAAc,CAAA,CACZ,KAAMhW,CAAO,CAAA,MAAA,CAAO,MAAQ,WAC5B,CAAA,OAAA,CAAS,KACT,IAAM,CAAA,kBACR,EACA,OAAS,CAAA,CACP,QAAUqC,CAAa,GAAA,CAAE,QAAAA,CAAQ,CAAA,CAAA,CACjC,MAAStC,CAAAA,CAAAA,GAAU,CAAE,OAAS,CAAA,IAAA,CAAM,KAAAA,CAAK,CAAA,CAC3C,EACA,KAAOC,CAAAA,CAAAA,CAAO,OAAO,SACvB,CAAC,EAEDA,CAAO,CAAA,MAAA,CAAO,aAAegW,CAAQ,CAAA,aAAA,CAAc,CACjD,YAAc,CAAA,CACZ,IAAMhW,CAAAA,CAAAA,CAAO,OAAO,IAAQ,EAAA,WAAA,CAC5B,QAAS,IACT,CAAA,IAAA,CAAM,iBACR,CACA,CAAA,OAAA,CAAS,CACP,OAAUqC,CAAAA,CAAAA,GAAa,CAAE,OAAAA,CAAAA,CAAQ,GACjC,MAAStC,CAAAA,CAAAA,GAAU,CAAE,OAAS,CAAA,IAAA,CAAM,IAAAA,CAAAA,CAAK,EAC3C,CACA,CAAA,KAAA,CAAOC,EAAO,MAAO,CAAA,YACvB,CAAC,EACH,CACF,EC7EO,IAAMuX,GAAqD,CAChE,MAAA,CAAQ,CACN,IAAM,CAAA,WAAA,CACN,SAAU,IACV,CAAA,eAAA,CAAiB,KACnB,CACA,CAAA,YAAA,CAAc,CAAC,cAAgB,CAAA,qBAAqB,EACpD,OAASiB,CAAAA,EAAAA,CACT,cAAeyb,EACf,CAAA,IAAA,CAAM,yBACN,MAAQ,CAAA,wBAAA,CACR,cAAe,CAACj0B,CAAAA,CAAQgW,IAAY,CAClChW,CAAAA,CAAO,MAAO,CAAA,iBAAA,CAAoBgW,EAAQ,aAAc,CAAA,CACtD,aAAc,CACZ,IAAA,CAAMhW,EAAO,MAAO,CAAA,IAAA,EAAQ,YAC5B,OAAS,CAAA,IAAA,CACT,KAAM,0BACR,CAAA,CACA,QAAS,CACP,OAAA,CAAUqC,IAAa,CAAE,OAAA,CAAAA,CAAQ,CAAA,CAAA,CACjC,OAAStC,CAAU,GAAA,CAAE,QAAS,IAAM,CAAA,IAAA,CAAAA,CAAK,CAC3C,CAAA,CAAA,CACA,MAAOC,CAAO,CAAA,MAAA,CAAO,iBACvB,CAAC,CAAA,CAEDA,EAAO,MAAO,CAAA,oBAAA,CAAuBgW,EAAQ,aAAc,CAAA,CACzD,YAAc,CAAA,CACZ,KAAMhW,CAAO,CAAA,MAAA,CAAO,MAAQ,WAC5B,CAAA,OAAA,CAAS,KACT,IAAM,CAAA,yBACR,EACA,OAAS,CAAA,CACP,QAAUqC,CAAa,GAAA,CAAE,QAAAA,CAAQ,CAAA,CAAA,CACjC,OAAStC,CAAU,GAAA,CAAE,QAAS,IAAM,CAAA,IAAA,CAAAA,CAAK,CAC3C,CAAA,CAAA,CACA,MAAOC,CAAO,CAAA,MAAA,CAAO,oBACvB,CAAC,CAAA,CAEDA,EAAO,MAAO,CAAA,eAAA,CAAkBgW,EAAQ,aAAc,CAAA,CACpD,aAAc,CACZ,IAAA,CAAMhW,EAAO,MAAO,CAAA,IAAA,EAAQ,WAC5B,CAAA,OAAA,CAAS,KACT,IAAM,CAAA,kBACR,EACA,OAAS,CAAA,CACP,QAAUqC,CAAa,GAAA,CAAE,QAAAA,CAAQ,CAAA,CAAA,CACjC,OAAStC,CAAU,GAAA,CAAE,QAAS,IAAM,CAAA,IAAA,CAAAA,CAAK,CAC3C,CAAA,CAAA,CACA,KAAOC,CAAAA,CAAAA,CAAO,OAAO,eACvB,CAAC,EAEDA,CAAO,CAAA,MAAA,CAAO,UAAYgW,CAAQ,CAAA,aAAA,CAAc,CAC9C,YAAc,CAAA,CACZ,KAAMhW,CAAO,CAAA,MAAA,CAAO,MAAQ,WAC5B,CAAA,OAAA,CAAS,KACT,IAAM,CAAA,kBACR,CACA,CAAA,OAAA,CAAS,CACP,OAAUqC,CAAAA,CAAAA,GAAa,CAAE,OAAAA,CAAAA,CAAQ,GACjC,MAAStC,CAAAA,CAAAA,GAAU,CAAE,OAAS,CAAA,IAAA,CAAM,KAAAA,CAAK,CAAA,CAC3C,EACA,KAAOC,CAAAA,CAAAA,CAAO,OAAO,SACvB,CAAC,EAEDA,CAAO,CAAA,MAAA,CAAO,aAAegW,CAAQ,CAAA,aAAA,CAAc,CACjD,YAAc,CAAA,CACZ,KAAMhW,CAAO,CAAA,MAAA,CAAO,MAAQ,WAC5B,CAAA,OAAA,CAAS,KACT,IAAM,CAAA,iBACR,EACA,OAAS,CAAA,CACP,QAAUqC,CAAa,GAAA,CAAE,OAAAA,CAAAA,CAAQ,GACjC,MAAStC,CAAAA,CAAAA,GAAU,CAAE,OAAS,CAAA,IAAA,CAAM,KAAAA,CAAK,CAAA,CAC3C,EACA,KAAOC,CAAAA,CAAAA,CAAO,OAAO,YACvB,CAAC,EACH,CACF,CAAA,CC7EO,IAAMuX,GAAkD,CAC7D,MAAA,CAAQ,CACN,IAAM,CAAA,WAAA,CACN,SAAU,IACV,CAAA,eAAA,CAAiB,KACnB,CACA,CAAA,YAAA,CAAc,CAAC,cAAgB,CAAA,qBAAqB,EACpD,OAASiB,CAAAA,EAAAA,CACT,cAAeyb,EACf,CAAA,IAAA,CAAM,qBACN,CAAA,MAAA,CAAQ,sBACR,aAAe,CAAA,CAACj0B,EAAQgW,CAAY,GAAA,CAClChW,EAAO,MAAO,CAAA,iBAAA,CAAoBgW,EAAQ,aAAc,CAAA,CACtD,aAAc,CACZ,IAAA,CAAMhW,EAAO,MAAO,CAAA,IAAA,EAAQ,YAC5B,OAAS,CAAA,IAAA,CACT,IAAM,CAAA,0BACR,EACA,OAAS,CAAA,CACP,QAAUqC,CAAa,GAAA,CAAE,QAAAA,CAAQ,CAAA,CAAA,CACjC,OAAStC,CAAU,GAAA,CAAE,QAAS,IAAM,CAAA,IAAA,CAAAA,CAAK,CAC3C,CAAA,CAAA,CACA,MAAOC,CAAO,CAAA,MAAA,CAAO,iBACvB,CAAC,EAEDA,CAAO,CAAA,MAAA,CAAO,qBAAuBgW,CAAQ,CAAA,aAAA,CAAc,CACzD,YAAc,CAAA,CACZ,KAAMhW,CAAO,CAAA,MAAA,CAAO,MAAQ,WAC5B,CAAA,OAAA,CAAS,KACT,IAAM,CAAA,yBACR,EACA,OAAS,CAAA,CACP,OAAUqC,CAAAA,CAAAA,GAAa,CAAE,OAAAA,CAAAA,CAAQ,GACjC,MAAStC,CAAAA,CAAAA,GAAU,CAAE,OAAS,CAAA,IAAA,CAAM,KAAAA,CAAK,CAAA,CAC3C,EACA,KAAOC,CAAAA,CAAAA,CAAO,OAAO,oBACvB,CAAC,EAEDA,CAAO,CAAA,MAAA,CAAO,eAAkBgW,CAAAA,CAAAA,CAAQ,cAAc,CACpD,YAAA,CAAc,CACZ,IAAMhW,CAAAA,CAAAA,CAAO,OAAO,IAAQ,EAAA,WAAA,CAC5B,QAAS,IACT,CAAA,IAAA,CAAM,kBACR,CACA,CAAA,OAAA,CAAS,CACP,OAAUqC,CAAAA,CAAAA,GAAa,CAAE,OAAAA,CAAAA,CAAQ,GACjC,MAAStC,CAAAA,CAAAA,GAAU,CAAE,OAAS,CAAA,IAAA,CAAM,KAAAA,CAAK,CAAA,CAC3C,EACA,KAAOC,CAAAA,CAAAA,CAAO,OAAO,eACvB,CAAC,EAEDA,CAAO,CAAA,MAAA,CAAO,UAAYgW,CAAQ,CAAA,aAAA,CAAc,CAC9C,YAAc,CAAA,CACZ,IAAMhW,CAAAA,CAAAA,CAAO,OAAO,IAAQ,EAAA,WAAA,CAC5B,QAAS,IACT,CAAA,IAAA,CAAM,kBACR,CACA,CAAA,OAAA,CAAS,CACP,OAAUqC,CAAAA,CAAAA,GAAa,CAAE,OAAAA,CAAAA,CAAQ,GACjC,MAAStC,CAAAA,CAAAA,GAAU,CAAE,OAAS,CAAA,IAAA,CAAM,IAAAA,CAAAA,CAAK,EAC3C,CACA,CAAA,KAAA,CAAOC,EAAO,MAAO,CAAA,SACvB,CAAC,CAEDA,CAAAA,CAAAA,CAAO,OAAO,YAAegW,CAAAA,CAAAA,CAAQ,cAAc,CACjD,YAAA,CAAc,CACZ,IAAMhW,CAAAA,CAAAA,CAAO,OAAO,IAAQ,EAAA,WAAA,CAC5B,OAAS,CAAA,IAAA,CACT,KAAM,iBACR,CAAA,CACA,QAAS,CACP,OAAA,CAAUqC,IAAa,CAAE,OAAA,CAAAA,CAAQ,CACjC,CAAA,CAAA,MAAA,CAAStC,IAAU,CAAE,OAAA,CAAS,KAAM,IAAAA,CAAAA,CAAK,EAC3C,CACA,CAAA,KAAA,CAAOC,EAAO,MAAO,CAAA,YACvB,CAAC,EACH,CACF,ECxEA,IAAM2lC,GAAY,SAEZC,CAAAA,EAAAA,CAA0B,CAAC,CAC/B,OAAA,CAAA5vB,EACA,SAAAE,CAAAA,CACF,IAG4B,CAC1B,IAAMD,CAAOD,CAAAA,CAAAA,CAAQ,KAAK,CAAE,EAAA,CAAI2vB,EAAU,CAAC,CAAA,CACrCE,EAAY7vB,CAAQ,CAAA,IAAA,CAAK,CAAE,EAAIJ,CAAAA,CAAQ,CAAC,CAExC9L,CAAAA,CAAAA,CAA8B,EAE9B4rB,CAAAA,CAAAA,CAAiBmQ,EAAU,UAAW,CAAA,CAC1C,IAAMtwB,CAAAA,CAAAA,CAAe,CACnB,MAAQS,CAAAA,CAAAA,CAAQ,OAChB,EAAIE,CAAAA,CAAAA,CAAU,GACd,IAAM,CAAA,MACR,CAAC,CACD,CAAA,SAAA,CAAW,MACb,CAAC,CAAA,CACGwf,EAAe,IACbxf,GAAAA,CAAAA,CAAU,OACZD,CAAK,CAAA,MAAA,CAAO,CACV,MAAA,CAAQ,KACR,MAAQA,CAAAA,CAAAA,CAAK,mBAAmB,CAAE,OAAA,CAAAD,EAAS,EAAIJ,CAAAA,CAAQ,CAAC,CACxD,CAAA,IAAA,CAAM8f,EAAe,IACvB,CAAC,EACD5rB,CAAW,CAAA,IAAA,CAAK,CACd,UAAYoM,CAAAA,CAAAA,CAAU,KAAK,QAC3B,CAAA,IAAA,CAAM,OACN,IAAM,CAAA,CAAA,EAAGwf,EAAe,IAAI,CAAA,QAAA,CAC9B,CAAC,CAGCxf,CAAAA,CAAAA,CAAAA,CAAU,aACRA,CAAU,CAAA,UAAA,CAAW,SACvBD,CAAK,CAAA,MAAA,CAAO,CACV,MAAQ,CAAA,IAAA,CACR,OAAQA,CAAK,CAAA,kBAAA,CAAmB,CAAE,OAAA,CAAAD,EAAS,EAAIJ,CAAAA,CAAQ,CAAC,CACxD,CAAA,IAAA,CAAM8f,EAAe,IACvB,CAAC,EACD5rB,CAAW,CAAA,IAAA,CAAK,CACd,UAAYwS,CAAAA,EAAAA,CACVpG,EAAU,UAAW,CAAA,MACvB,EACA,IAAM,CAAA,SAAA,CACN,IAAM,CAAA,CAAA,EAAGwf,EAAe,IAAI,CAAA,WAAA,CAC9B,CAAC,CAGCxf,CAAAA,CAAAA,CAAAA,CAAU,WAAW,IACvBD,GAAAA,CAAAA,CAAK,OAAO,CACV,MAAA,CAAQ,KACR,MAAQA,CAAAA,CAAAA,CAAK,mBAAmB,CAAE,OAAA,CAAAD,EAAS,EAAIJ,CAAAA,CAAQ,CAAC,CAAA,CACxD,KAAM8f,CAAe,CAAA,IACvB,CAAC,CACD5rB,CAAAA,CAAAA,CAAW,KAAK,CACd,UAAA,CAAYwS,GACVpG,CAAU,CAAA,UAAA,CAAW,IACvB,CACA,CAAA,IAAA,CAAM,SACN,IAAM,CAAA,CAAA,EAAGwf,EAAe,IAAI,CAAA,QAAA,CAC9B,CAAC,CAGCxf,CAAAA,CAAAA,CAAAA,CAAU,WAAW,KACvBD,GAAAA,CAAAA,CAAK,OAAO,CACV,MAAA,CAAQ,KACR,MAAQA,CAAAA,CAAAA,CAAK,mBAAmB,CAAE,OAAA,CAAAD,EAAS,EAAIJ,CAAAA,CAAQ,CAAC,CACxD,CAAA,IAAA,CAAM8f,EAAe,IACvB,CAAC,CACD5rB,CAAAA,CAAAA,CAAW,KAAK,CACd,UAAA,CAAYwS,GACVpG,CAAU,CAAA,UAAA,CAAW,KACvB,CACA,CAAA,IAAA,CAAM,cACN,IAAM,CAAA,CAAA,EAAGwf,EAAe,IAAI,CAAA,SAAA,CAC9B,CAAC,CAKP,CAAA,CAAA,CAAA,CAAA,GAAM,CAAE,MAAAtX,CAAAA,CAAAA,CAAQ,SAAAC,CAAAA,CAAU,EAAIF,EAAsBjI,CAAAA,CAAS,EAEzD4vB,CACEtE,CAAAA,CAAAA,CAAmBqE,EAAU,UAAW,CAAA,CAC5C,KAAMtwB,CAAe,CAAA,CACnB,OAAQS,CAAQ,CAAA,MAAA,CAChB,GAAIE,CAAU,CAAA,EAAA,CACd,KAAM,QACR,CAAC,CACD,CAAA,SAAA,CAAW,MACb,CAAC,CAAA,CACD,GAAIsrB,CAAiB,CAAA,IAAA,EAAQpjB,GAAUA,CAAO,CAAA,UAAA,CAAY,CACxD,IAAMnN,CAAAA,CAAO,OAAO,IAAKmN,CAAAA,CAAAA,CAAO,UAAU,CAC1C,CAAA,GAAInN,EAAK,MAEP,CAAA,CAAA,GAAI,CADuBA,CAAK,CAAA,QAAA,CAAS,SAAS,CAEhDgF,CAAAA,CAAAA,CAAK,OAAO,CACV,MAAA,CAAQ,KACR,MAAQA,CAAAA,CAAAA,CAAK,mBAAmB,CAAE,OAAA,CAAAD,EAAS,EAAIJ,CAAAA,CAAQ,CAAC,CACxD,CAAA,IAAA,CAAM4rB,EAAiB,IACzB,CAAC,CACDsE,CAAAA,CAAAA,CAAsBx0B,EAAS,iBAAkB,CAAA,CAC/C,SAAUkwB,CAAiB,CAAA,IAC7B,CAAC,CACQvwB,CAAAA,KAAAA,GAAAA,CAAAA,CAAK,OAAS,CAAG,CAAA,CAC1BgF,EAAK,MAAO,CAAA,CACV,OAAQ,IACR,CAAA,MAAA,CAAQA,EAAK,kBAAmB,CAAA,CAAE,OAAAD,CAAAA,CAAAA,CAAS,GAAIJ,CAAQ,CAAC,EACxD,IAAM4rB,CAAAA,CAAAA,CAAiB,IACzB,CAAC,CAAA,CACD,IAAMC,CAAanwB,CAAAA,CAAAA,CAAS,kBAAkB,CAC5C,QAAA,CAAUkwB,EAAiB,IAC7B,CAAC,EACK/4B,CAAc6I,CAAAA,CAAAA,CAAS,eAAgB,CAAA,CAC3C,QAASA,CAAS,CAAA,aAAA,CAAc,CAAE,IAAM,CAAA,SAAU,CAAC,CACrD,CAAC,EACDw0B,CAAsBx0B,CAAAA,CAAAA,CAAS,kBAAkB,CAC/C,aAAA,CAAe,CAACmwB,CAAYh5B,CAAAA,CAAW,EACvC,QAAU,CAAA,MACZ,CAAC,EACH,CAAA,CAEJ,CAEA,IAAIs9B,CAAAA,CACEpE,EAAsBkE,CAAU,CAAA,UAAA,CAAW,CAC/C,IAAMtwB,CAAAA,CAAAA,CAAe,CACnB,MAAQS,CAAAA,CAAAA,CAAQ,OAChB,EAAIE,CAAAA,CAAAA,CAAU,GACd,IAAM,CAAA,WACR,CAAC,CACD,CAAA,SAAA,CAAW,MACb,CAAC,EACD,GAAIyrB,CAAAA,CAAoB,MAAQtjB,CAAaA,EAAAA,CAAAA,CAAU,WAAY,CACjE,IAAMpN,EAAO,MAAO,CAAA,IAAA,CAAKoN,EAAU,UAAU,CAAA,CAC7C,GAAIpN,CAAK,CAAA,MAAA,CAAA,CAEP,GAAI,CADuBA,CAAAA,CAAK,QAAS,CAAA,SAAS,EAEhDgF,CAAK,CAAA,MAAA,CAAO,CACV,MAAQ,CAAA,IAAA,CACR,OAAQA,CAAK,CAAA,kBAAA,CAAmB,CAAE,OAAAD,CAAAA,CAAAA,CAAS,GAAIJ,CAAQ,CAAC,EACxD,IAAM+rB,CAAAA,CAAAA,CAAoB,IAC5B,CAAC,CAAA,CACDoE,CAAyBz0B,CAAAA,CAAAA,CAAS,kBAAkB,CAClD,QAAA,CAAUqwB,EAAoB,IAChC,CAAC,UACQ1wB,CAAK,CAAA,MAAA,CAAS,EAAG,CAC1BgF,CAAAA,CAAK,OAAO,CACV,MAAA,CAAQ,KACR,MAAQA,CAAAA,CAAAA,CAAK,mBAAmB,CAAE,OAAA,CAAAD,EAAS,EAAIJ,CAAAA,CAAQ,CAAC,CACxD,CAAA,IAAA,CAAM+rB,EAAoB,IAC5B,CAAC,EACD,IAAMC,CAAAA,CAAgBtwB,EAAS,iBAAkB,CAAA,CAC/C,SAAUqwB,CAAoB,CAAA,IAChC,CAAC,CACKl5B,CAAAA,CAAAA,CAAc6I,EAAS,eAAgB,CAAA,CAC3C,OAASA,CAAAA,CAAAA,CAAS,cAAc,CAAE,IAAA,CAAM,SAAU,CAAC,CACrD,CAAC,CACDy0B,CAAAA,CAAAA,CAAyBz0B,EAAS,iBAAkB,CAAA,CAClD,cAAe,CAACswB,CAAAA,CAAen5B,CAAW,CAC1C,CAAA,QAAA,CAAU,MACZ,CAAC,EACH,CAEJ,CAAA,CAEA,IAAMu9B,CAAa,CAAA,CAACF,EAAqBC,CAAsB,CAAA,CAAE,OAC/D,OACF,CAAA,CAUA,OATIC,CAAW,CAAA,MAAA,EACbl8B,EAAW,IAAK,CAAA,CACd,KAAM,OACN,CAAA,IAAA,CAAMwH,EAAS,oBAAqB,CAAA,CAClC,KAAO00B,CAAAA,CACT,CAAC,CACH,CAAC,EAGEl8B,CAAW,CAAA,MAAA,CAIe,CAC7B,IAAMoM,CAAAA,CAAAA,CAAU,GAChB,IAAM5E,CAAAA,CAAAA,CAAS,SAAS,cAAgB,CAAA,CACtCA,EAAS,iBAAkB,CAAA,CACzB,WAAAxH,CACA,CAAA,mBAAA,CAAqB,KACvB,CAAC,CACH,CAAC,CACH,EAXE,MAaJ,CAAA,CAEa0O,GAAoC,CAAC,CAAE,OAAAxY,CAAO,CAAA,GAAM,CAC/D,IAAMiW,CAAAA,CAAOjW,EAAO,UAAW,CAAA,CAC7B,GAAI2lC,EACJ,CAAA,IAAA,CAAM3lC,CAAO,CAAA,MACf,CAAC,CAEKimC,CAAAA,CAAAA,CAAiC,EAEvCjmC,CAAAA,CAAAA,CAAO,QAAQ,WAAa,CAAA,CAAC,CAAE,SAAAkW,CAAAA,CAAU,IAAM,CAC7C,IAAMgwB,EAAeN,EAAwB,CAAA,CAC3C,QAAS5lC,CAAO,CAAA,OAAA,CAChB,SAAAkW,CAAAA,CACF,CAAC,CACGgwB,CAAAA,CAAAA,EACFD,EAAc,IAAKC,CAAAA,CAAY,EAEnC,CAAC,CAAA,CAED,IAAM7wB,CAAaY,CAAAA,CAAAA,CAAK,WAAW,CACjC,IAAA,CAAM,gBACN,MAAQ,CAAA,IAAA,CACR,UAAW,MACb,CAAC,CAEIZ,CAAAA,CAAAA,CAAW,OAIZ4wB,CAAc,CAAA,MAAA,EAChBhwB,EAAK,MAAO,CAAA,CACV,OAAQ,IACR,CAAA,MAAA,CAAQ,UACR,IAAM,CAAA,cACR,CAAC,CAGHA,CAAAA,CAAAA,CAAK,IACH3E,CAAS,CAAA,oBAAA,CAAqB,CAC5B,UAAY,CAAA,IAAA,CACZ,KAAM+D,CAAW,CAAA,IAAA,CACjB,KAAM/D,CAAS,CAAA,iBAAA,CAAkB,CAC/B,UAAY20B,CAAAA,CAAAA,CACZ,oBAAqB,KACvB,CAAC,CACH,CAAC,CACH,GACF,CC1PO,CAAA,IAAM1uB,GAAyC,CACpD,MAAA,CAAQ,CACN,eAAiB,CAAA,KACnB,CACA,CAAA,YAAA,CAAc,CAAC,qBAAqB,CAAA,CACpC,QAAAiB,EACA,CAAA,IAAA,CAAM,UACN,MAAQ,CAAA,SACV,ECVO,IAAMnR,EAAc,CAIzB,OAAA,CAAS,CACP,IAAMiK,CAAAA,CAAAA,CAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,EAC1C,MAAQA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,QAAS,CAAC,CAAA,CAC9C,IAAKA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,KAAM,CAAC,CACxC,CAAA,KAAA,CAAOA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,OAAQ,CAAC,CAC5C,CAAA,KAAA,CAAOA,EAAS,UAAW,CAAA,CAAE,KAAM,OAAQ,CAAC,EAC5C,KAAOA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,OAAQ,CAAC,CAAA,CAC5C,WAAYA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,YAAa,CAAC,CACtD,CAAA,UAAA,CAAYA,EAAS,UAAW,CAAA,CAAE,KAAM,YAAa,CAAC,EACtD,KAAOA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,OAAQ,CAAC,CAAA,CAC5C,OAASA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,SAAU,CAAC,CAAA,CAChD,YAAaA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,aAAc,CAAC,CACxD,CAAA,MAAA,CAAQA,EAAS,UAAW,CAAA,CAAE,KAAM,QAAS,CAAC,CAC9C,CAAA,KAAA,CAAOA,EAAS,UAAW,CAAA,CAAE,KAAM,OAAQ,CAAC,EAC5C,KAAOA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,OAAQ,CAAC,CAAA,CAC5C,MAAOA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,OAAQ,CAAC,CAAA,CAC5C,SAAUA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,UAAW,CAAC,CAClD,CAAA,OAAA,CAASA,EAAS,UAAW,CAAA,CAAE,KAAM,SAAU,CAAC,EAChD,SAAWA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,WAAY,CAAC,CAAA,CACpD,SAAUA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,UAAW,CAAC,CAClD,CAAA,WAAA,CAAaA,EAAS,UAAW,CAAA,CAAE,KAAM,aAAc,CAAC,EACxD,QAAUA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,UAAW,CAAC,EAClD,MAAQA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,QAAS,CAAC,CAAA,CAC9C,OAAQA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,QAAS,CAAC,CAC9C,CAAA,SAAA,CAAWA,EAAS,UAAW,CAAA,CAAE,IAAM,CAAA,WAAY,CAAC,CACpD,CAAA,OAAA,CAASA,EAAS,UAAW,CAAA,CAAE,KAAM,SAAU,CAAC,EAChD,IAAMA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,MAAO,CAAC,CAAA,CAC1C,SAAUA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAA,CAAM,UAAW,CAAC,CAAA,CAClD,YAAaA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,aAAc,CAAC,CACxD,CAAA,IAAA,CAAMA,EAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,EAC1C,QAAUA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,UAAW,CAAC,CAAA,CAClD,QAASA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,SAAU,CAAC,CAChD,CAAA,EAAA,CAAIA,EAAS,UAAW,CAAA,CAAE,KAAM,IAAK,CAAC,EACtC,IAAMA,CAAAA,CAAAA,CAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,EAC1C,IAAMA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,MAAO,CAAC,CAAA,CAC1C,QAASA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,SAAU,CAAC,CAChD,CAAA,WAAA,CAAaA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,aAAc,CAAC,CACxD,CAAA,OAAA,CAASA,EAAS,UAAW,CAAA,CAAE,KAAM,SAAU,CAAC,EAChD,aAAeA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,eAAgB,CAAC,CAAA,CAC5D,YAAcA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,cAAe,CAAC,CAAA,CAC1D,QAASA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,SAAU,CAAC,CAChD,CAAA,MAAA,CAAQA,EAAS,UAAW,CAAA,CAAE,KAAM,QAAS,CAAC,EAC9C,OAASA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,SAAU,CAAC,CAAA,CAChD,IAAKA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,KAAM,CAAC,CACxC,CAAA,KAAA,CAAOA,EAAS,UAAW,CAAA,CAAE,KAAM,OAAQ,CAAC,CAC5C,CAAA,KAAA,CAAOA,EAAS,UAAW,CAAA,CAAE,KAAM,OAAQ,CAAC,EAC5C,QAAUA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,UAAW,CAAC,CAAA,CAClD,SAAUA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,UAAW,CAAC,CAAA,CAClD,WAAYA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,YAAa,CAAC,CACtD,CAAA,YAAA,CAAcA,EAAS,UAAW,CAAA,CAAE,KAAM,cAAe,CAAC,EAC1D,SAAWA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,WAAY,CAAC,EACpD,OAASA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,SAAU,CAAC,CAAA,CAChD,SAAUA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,UAAW,CAAC,CAClD,CAAA,QAAA,CAAUA,EAAS,UAAW,CAAA,CAAE,KAAM,UAAW,CAAC,EAClD,QAAUA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,UAAW,CAAC,CAAA,CAClD,SAAUA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,UAAW,CAAC,CAClD,CAAA,QAAA,CAAUA,EAAS,UAAW,CAAA,CAAE,IAAM,CAAA,UAAW,CAAC,CAClD,CAAA,UAAA,CAAYA,EAAS,UAAW,CAAA,CAAE,KAAM,YAAa,CAAC,EACtD,YAAcA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,cAAe,CAAC,CAAA,CAC1D,UAAWA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAA,CAAM,WAAY,CAAC,CAAA,CACpD,QAASA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,SAAU,CAAC,CAChD,CAAA,QAAA,CAAUA,EAAS,UAAW,CAAA,CAAE,KAAM,UAAW,CAAC,EAClD,QAAUA,CAAAA,CAAAA,CAAS,UAAW,CAAA,CAAE,KAAM,UAAW,CAAC,EAClD,UAAYA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,YAAa,CAAC,CAAA,CACtD,OAAQA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,QAAS,CAAC,CAC9C,CAAA,QAAA,CAAUA,EAAS,UAAW,CAAA,CAAE,KAAM,UAAW,CAAC,EAClD,SAAWA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,WAAY,CAAC,CAAA,CACpD,SAAUA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,UAAW,CAAC,CAClD,CAAA,UAAA,CAAYA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,YAAa,CAAC,CACtD,CAAA,YAAA,CAAcA,EAAS,UAAW,CAAA,CAAE,KAAM,cAAe,CAAC,EAC1D,SAAWA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,WAAY,CAAC,CAAA,CACpD,OAASA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,SAAU,CAAC,CAAA,CAChD,SAAUA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,UAAW,CAAC,CAClD,CAAA,SAAA,CAAWA,EAAS,UAAW,CAAA,CAAE,KAAM,WAAY,CAAC,CACpD,CAAA,QAAA,CAAUA,EAAS,UAAW,CAAA,CAAE,KAAM,UAAW,CAAC,EAClD,KAAOA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,OAAQ,CAAC,CAAA,CAC5C,UAAWA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,WAAY,CAAC,CACpD,CAAA,YAAA,CAAcA,EAAS,UAAW,CAAA,CAAE,KAAM,cAAe,CAAC,EAC1D,QAAUA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,UAAW,CAAC,CAAA,CAClD,aAAcA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,cAAe,CAAC,CAAA,CAC1D,SAAUA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,UAAW,CAAC,CAClD,CAAA,WAAA,CAAaA,EAAS,UAAW,CAAA,CAAE,KAAM,aAAc,CAAC,EACxD,KAAOA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,OAAQ,CAAC,EAC5C,OAASA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,SAAU,CAAC,CAAA,CAChD,SAAUA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,UAAW,CAAC,CAClD,CAAA,WAAA,CAAaA,EAAS,UAAW,CAAA,CAAE,IAAM,CAAA,aAAc,CAAC,CACxD,CAAA,IAAA,CAAMA,EAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,EAC1C,IAAMA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,MAAO,CAAC,CAAA,CAC1C,SAAUA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,UAAW,CAAC,CAClD,CAAA,SAAA,CAAWA,EAAS,UAAW,CAAA,CAAE,KAAM,WAAY,CAAC,EACpD,UAAYA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,YAAa,CAAC,CAAA,CACtD,cAAeA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAA,CAAM,eAAgB,CAAC,CAAA,CAC5D,MAAOA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,OAAQ,CAAC,CAC5C,CAAA,WAAA,CAAaA,EAAS,UAAW,CAAA,CAAE,KAAM,aAAc,CAAC,EACxD,UAAYA,CAAAA,CAAAA,CAAS,UAAW,CAAA,CAAE,KAAM,YAAa,CAAC,EACtD,UAAYA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,YAAa,CAAC,CAAA,CACtD,YAAaA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,aAAc,CAAC,CACxD,CAAA,SAAA,CAAWA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,WAAY,CAAC,CACpD,CAAA,IAAA,CAAMA,EAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,EAC1C,OAASA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,SAAU,CAAC,CAAA,CAChD,UAAWA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,WAAY,CAAC,CACpD,CAAA,IAAA,CAAMA,EAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,EAC1C,GAAKA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,KAAM,CAAC,CAAA,CACxC,IAAMA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,MAAO,CAAC,CAAA,CAC1C,MAAOA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,OAAQ,CAAC,CAC5C,CAAA,MAAA,CAAQA,EAAS,UAAW,CAAA,CAAE,KAAM,QAAS,CAAC,CAC9C,CAAA,KAAA,CAAOA,EAAS,UAAW,CAAA,CAAE,KAAM,OAAQ,CAAC,CAC9C,CAIA,CAAA,KAAA,CAAO,CACL,SAAWA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,WAAY,CAAC,CAAA,CACpD,WAAYA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAA,CAAM,YAAa,CAAC,CAAA,CACtD,WAAYA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,YAAa,CAAC,CACtD,CAAA,UAAA,CAAYA,EAAS,UAAW,CAAA,CAAE,KAAM,YAAa,CAAC,EACtD,eAAiBA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,iBAAkB,CAAC,CAAA,CAChE,YAAaA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,aAAc,CAAC,CACxD,CAAA,kBAAA,CAAoBA,EAAS,UAAW,CAAA,CAAE,KAAM,oBAAqB,CAAC,EACtE,aAAeA,CAAAA,CAAAA,CAAS,UAAW,CAAA,CAAE,KAAM,eAAgB,CAAC,EAC5D,YAAcA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,cAAe,CAAC,CAAA,CAC1D,iBAAkBA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,kBAAmB,CAAC,CAClE,CAAA,iBAAA,CAAmBA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,mBAAoB,CAAC,CACpE,CAAA,cAAA,CAAgBA,EAAS,UAAW,CAAA,CAAE,KAAM,gBAAiB,CAAC,EAC9D,SAAWA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,WAAY,CAAC,CAAA,CACpD,gBAAkBA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,kBAAmB,CAAC,CAAA,CAClE,gBAAiBA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,iBAAkB,CAAC,CAChE,CAAA,QAAA,CAAUA,EAAS,UAAW,CAAA,CAAE,KAAM,UAAW,CAAC,EAClD,gBAAkBA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,kBAAmB,CAAC,CAAA,CAClE,gBAAiBA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,iBAAkB,CAAC,CAChE,CAAA,gBAAA,CAAkBA,EAAS,UAAW,CAAA,CAAE,KAAM,kBAAmB,CAAC,CAClE,CAAA,aAAA,CAAeA,EAAS,UAAW,CAAA,CAAE,KAAM,eAAgB,CAAC,EAC5D,YAAcA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,cAAe,CAAC,CAAA,CAC1D,YAAaA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,aAAc,CAAC,CAAA,CACxD,oBAAqBA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,qBAAsB,CAAC,CACxE,CAAA,aAAA,CAAeA,EAAS,UAAW,CAAA,CAAE,KAAM,eAAgB,CAAC,EAC5D,UAAYA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,YAAa,CAAC,EACtD,WAAaA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,aAAc,CAAC,CAAA,CACxD,aAAcA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,cAAe,CAAC,CAC1D,CAAA,iBAAA,CAAmBA,EAAS,UAAW,CAAA,CAAE,KAAM,mBAAoB,CAAC,EACpE,SAAWA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,WAAY,CAAC,CAAA,CACpD,cAAeA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,eAAgB,CAAC,CAC5D,CAAA,iBAAA,CAAmBA,EAAS,UAAW,CAAA,CAAE,IAAM,CAAA,mBAAoB,CAAC,CACpE,CAAA,WAAA,CAAaA,EAAS,UAAW,CAAA,CAAE,KAAM,aAAc,CAAC,EACxD,aAAeA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,eAAgB,CAAC,CAAA,CAC5D,aAAcA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAA,CAAM,cAAe,CAAC,CAAA,CAC1D,eAAgBA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,gBAAiB,CAAC,CAC9D,CAAA,eAAA,CAAiBA,EAAS,UAAW,CAAA,CAAE,KAAM,iBAAkB,CAAC,EAChE,QAAUA,CAAAA,CAAAA,CAAS,UAAW,CAAA,CAAE,KAAM,UAAW,CAAC,EAClD,iBAAmBA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,mBAAoB,CAAC,CAAA,CACpE,iBAAkBA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,kBAAmB,CAAC,CAClE,CAAA,cAAA,CAAgBA,EAAS,UAAW,CAAA,CAAE,KAAM,gBAAiB,CAAC,EAC9D,UAAYA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,YAAa,CAAC,CAAA,CACtD,mBAAoBA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,oBAAqB,CAAC,CACtE,CAAA,kBAAA,CAAoBA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,oBAAqB,CAAC,CACtE,CAAA,UAAA,CAAYA,EAAS,UAAW,CAAA,CAAE,KAAM,YAAa,CAAC,EACtD,YAAcA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,cAAe,CAAC,CAC5D,CAIA,CAAA,OAAA,CAAS,CACP,MAAQA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,QAAS,CAAC,CAAA,CAC9C,OAAQA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,QAAS,CAAC,CAC9C,CAAA,QAAA,CAAUA,EAAS,UAAW,CAAA,CAAE,IAAM,CAAA,UAAW,CAAC,CAClD,CAAA,OAAA,CAASA,EAAS,UAAW,CAAA,CAAE,KAAM,SAAU,CAAC,EAChD,OAASA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,SAAU,CAAC,CAAA,CAChD,WAAYA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,YAAa,CAAC,CACtD,CAAA,WAAA,CAAaA,EAAS,UAAW,CAAA,CAAE,KAAM,aAAc,CAAC,EACxD,cAAgBA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,gBAAiB,CAAC,CAAA,CAC9D,YAAaA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAA,CAAM,aAAc,CAAC,CAAA,CACxD,aAAcA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,cAAe,CAAC,CAC1D,CAAA,WAAA,CAAaA,EAAS,UAAW,CAAA,CAAE,KAAM,aAAc,CAAC,EACxD,QAAUA,CAAAA,CAAAA,CAAS,UAAW,CAAA,CAAE,KAAM,UAAW,CAAC,EAClD,EAAIA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,IAAK,CAAC,CAAA,CACtC,MAAOA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,OAAQ,CAAC,CAC5C,CAAA,OAAA,CAASA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,SAAU,CAAC,CAChD,CAAA,IAAA,CAAMA,EAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,EAC1C,KAAOA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,OAAQ,CAAC,CAAA,CAC5C,MAAQA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,QAAS,CAAC,CAAA,CAC9C,QAASA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,SAAU,CAAC,CAChD,CAAA,IAAA,CAAMA,EAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,CAC1C,CAAA,IAAA,CAAMA,EAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,EAC1C,QAAUA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,UAAW,CAAC,CAAA,CAClD,UAAWA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,WAAY,CAAC,CAAA,CACpD,WAAYA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,YAAa,CAAC,CACtD,CAAA,SAAA,CAAWA,EAAS,UAAW,CAAA,CAAE,KAAM,WAAY,CAAC,EACpD,MAAQA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,QAAS,CAAC,CAChD,CAIA,CAAA,OAAA,CAAS,CACP,GAAKA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,KAAM,CAAC,CAAA,CACxC,MAAOA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,OAAQ,CAAC,CAC5C,CAAA,MAAA,CAAQA,EAAS,UAAW,CAAA,CAAE,KAAM,QAAS,CAAC,EAC9C,IAAMA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,MAAO,CAAC,CAAA,CAC1C,QAASA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,SAAU,CAAC,CAChD,CAAA,MAAA,CAAQA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,QAAS,CAAC,CAC9C,CAAA,IAAA,CAAMA,EAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,EAC1C,IAAMA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,MAAO,CAAC,CAAA,CAC1C,aAAeA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,eAAgB,CAAC,CAAA,CAC5D,KAAMA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,MAAO,CAAC,CAC1C,CAAA,QAAA,CAAUA,EAAS,UAAW,CAAA,CAAE,KAAM,UAAW,CAAC,CAClD,CAAA,QAAA,CAAUA,EAAS,UAAW,CAAA,CAAE,KAAM,UAAW,CAAC,EAClD,SAAWA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,WAAY,CAAC,CAAA,CACpD,KAAMA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,MAAO,CAAC,CAC1C,CAAA,OAAA,CAASA,EAAS,UAAW,CAAA,CAAE,KAAM,SAAU,CAAC,EAChD,WAAaA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,aAAc,CAAC,CAAA,CACxD,WAAYA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,YAAa,CAAC,CAAA,CACtD,IAAKA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,KAAM,CAAC,CACxC,CAAA,GAAA,CAAKA,EAAS,UAAW,CAAA,CAAE,KAAM,KAAM,CAAC,EACxC,KAAOA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,OAAQ,CAAC,EAC5C,WAAaA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,aAAc,CAAC,CAAA,CACxD,WAAYA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,YAAa,CAAC,CACtD,CAAA,WAAA,CAAaA,EAAS,UAAW,CAAA,CAAE,IAAM,CAAA,aAAc,CAAC,CACxD,CAAA,IAAA,CAAMA,EAAS,UAAW,CAAA,CAAE,KAAM,MAAO,CAAC,EAC1C,QAAUA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,UAAW,CAAC,CAAA,CAClD,QAASA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,SAAU,CAAC,CAChD,CAAA,MAAA,CAAQA,EAAS,UAAW,CAAA,CAAE,KAAM,QAAS,CAAC,EAC9C,MAAQA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,QAAS,CAAC,CAAA,CAC9C,eAAgBA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAA,CAAM,gBAAiB,CAAC,CAAA,CAC9D,SAAUA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,UAAW,CAAC,CAClD,CAAA,QAAA,CAAUA,EAAS,UAAW,CAAA,CAAE,KAAM,UAAW,CAAC,EAClD,OAASA,CAAAA,CAAAA,CAAS,UAAW,CAAA,CAAE,KAAM,SAAU,CAAC,EAChD,MAAQA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,QAAS,CAAC,CAAA,CAC9C,IAAKA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,KAAM,CAAC,CACxC,CAAA,YAAA,CAAcA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,cAAe,CAAC,CAC1D,CAAA,WAAA,CAAaA,EAAS,UAAW,CAAA,CAAE,KAAM,aAAc,CAAC,EACxD,MAAQA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,QAAS,CAAC,CAAA,CAC9C,OAAQA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,QAAS,CAAC,CAC9C,CAAA,KAAA,CAAOA,EAAS,UAAW,CAAA,CAAE,KAAM,OAAQ,CAAC,EAC5C,aAAeA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,eAAgB,CAAC,CAAA,CAC5D,SAAWA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,WAAY,CAAC,CAAA,CACpD,cAAeA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,eAAgB,CAAC,CAC5D,CAAA,KAAA,CAAOA,EAAS,UAAW,CAAA,CAAE,KAAM,OAAQ,CAAC,CAC5C,CAAA,OAAA,CAASA,EAAS,UAAW,CAAA,CAAE,KAAM,SAAU,CAAC,EAChD,OAASA,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,SAAU,CAAC,CAAA,CAChD,KAAMA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,MAAO,CAAC,CAC5C,EAUA,KAAO,CAAA,CAEL,cAAeA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,eAAgB,CAAC,CAC9D,CAAA,CAOA,EAAGA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,GAAI,CAAC,CACtC,CAAA,CAEa60B,GAAY,SCpQzB,CAAA,IAAMtP,GAAyB,CAAC,CAC9B,KAAA5gB,CACA,CAAA,SAAA,CAAAC,EACA,MAAAlW,CAAAA,CACF,IAIoC,CAClC,GAAM,CAAE,QAAAomC,CAAAA,CAAS,CAAIpmC,CAAAA,CAAAA,CAAO,OACtBqmC,CAAmBrmC,CAAAA,CAAAA,CAAO,QAAQ,IAAK,CAAA,CAAE,GAAImmC,EAAU,CAAC,EAAG,UAAW,CAAA,CAE1E,KAAM,CAAsBjwB,mBAAAA,EAAAA,CAAAA,CAAU,EAAE,CAExC,CAAA,CAAA,eAAA,CAAiB,OAAOkwB,CAAa,EAAA,QAAA,CAAWA,CAAS,CAAA,IAAA,CAAO,OAChE,SAAW,CAAA,OACb,CAAC,CAED,CAAA,GAAI,CAACC,CAAiB,CAAA,IAAA,CACpB,OAGFpwB,CAAK,CAAA,MAAA,CAAO,CACV,MAAQA,CAAAA,CAAAA,CAAK,mBAAmB,CAC9B,OAAA,CAASjW,EAAO,OAChB,CAAA,EAAA,CAAImmC,EACN,CAAC,EACD,IAAME,CAAAA,CAAAA,CAAiB,IACzB,CAAC,CAAA,CAEDpwB,EAAK,MAAO,CAAA,CACV,MAAO5O,CAAY,CAAA,CAAA,CAAE,KACrB,MAAQ,CAAA,SAAA,CACR,KAAM,GACR,CAAC,EAED,IAAMi/B,CAAAA,CAAoB,OAE1B,OAAOh1B,CAAAA,CAAS,cAAc,CAC5B,KAAA,CAAO,KACP,UAAY,CAAA,CACV,CACE,IAAMg1B,CAAAA,CACR,CACF,CACA,CAAA,UAAA,CAAY,CACVh1B,CAAS,CAAA,eAAA,CAAgB,CACvB,UAAYA,CAAAA,CAAAA,CAAS,gBAAgB,CACnC,UAAA,CAAYA,CAAS,CAAA,cAAA,CAAe,CAClC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAYjK,EAAY,CACxB,CAAA,IAAA,CAAMA,EAAY,KAAM,CAAA,UAC1B,CAAC,CACD,CAAA,UAAA,CAAY,CACViK,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM+0B,CAAAA,CAAAA,CAAiB,IAAK,CAAC,EACnD/0B,CAAS,CAAA,UAAA,CAAW,CAAE,IAAMg1B,CAAAA,CAAkB,CAAC,CACjD,CACF,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,EAEMvP,EAA0B,CAAA,CAAC,CAC/B,IAAA,CAAA9gB,EACA,SAAAC,CAAAA,CAAAA,CACA,OAAAlW,CACF,CAAA,GAIoC,CAClC,GAAM,CAAE,UAAAqe,CAAU,CAAA,CAAIre,EAAO,MACvBqmC,CAAAA,CAAAA,CAAmBrmC,EAAO,OAAQ,CAAA,IAAA,CAAK,CAAE,EAAImmC,CAAAA,EAAU,CAAC,CAAG,CAAA,UAAA,CAAW,CAE1E,IAAM,CAAA,CAAA,mBAAA,EAAsBjwB,EAAU,EAAE,CAAA,CAAA,CAExC,gBAAiB,OAAOmI,CAAAA,EAAc,SAAWA,CAAU,CAAA,IAAA,CAAO,OAClE,SAAW,CAAA,OACb,CAAC,CAED,CAAA,GAAI,CAACgoB,CAAiB,CAAA,IAAA,CACpB,OAGFpwB,CAAAA,CAAK,OAAO,CACV,MAAA,CAAQA,EAAK,kBAAmB,CAAA,CAC9B,QAASjW,CAAO,CAAA,OAAA,CAChB,GAAImmC,EACN,CAAC,EACD,IAAME,CAAAA,CAAAA,CAAiB,IACzB,CAAC,CAAA,CAEDpwB,EAAK,MAAO,CAAA,CACV,KAAO5O,CAAAA,CAAAA,CAAY,EAAE,IACrB,CAAA,MAAA,CAAQ,UACR,IAAM,CAAA,GACR,CAAC,CAED,CAAA,IAAMi/B,EAAoB,MAE1B,CAAA,OAAOh1B,EAAS,aAAc,CAAA,CAC5B,MAAO,IACP,CAAA,UAAA,CAAY,CACV,CACE,IAAA,CAAMg1B,CACR,CACF,EACA,UAAY,CAAA,CACVh1B,EAAS,eAAgB,CAAA,CACvB,WAAYA,CAAS,CAAA,eAAA,CAAgB,CACnC,UAAYA,CAAAA,CAAAA,CAAS,eAAe,CAClC,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAYjK,CAAY,CAAA,CAAA,CACxB,KAAMA,CAAY,CAAA,KAAA,CAAM,UAC1B,CAAC,CAAA,CACD,WAAY,CACViK,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM+0B,EAAiB,IAAK,CAAC,EACnD/0B,CAAS,CAAA,UAAA,CAAW,CAAE,IAAMg1B,CAAAA,CAAkB,CAAC,CACjD,CACF,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAeaC,CAAAA,EAAAA,CAAW,CACtB,sBAAA1P,CAAAA,EAAAA,CACA,wBAAAE,EACF,CAAA,CClJO,IAAMyP,EAA2B,CAAA,CAAC,CACvC,SAAA,CAAAtwB,EACA,MAAAlW,CAAAA,CAAAA,CACA,MAAAqf,CACF,CAAA,GAIM,CACJ,IAAMpJ,CAAAA,CAAOjW,EAAO,OAAQ,CAAA,IAAA,CAAK,CAAE,EAAImmC,CAAAA,EAAU,CAAC,CAElD,CAAA,GAAInmC,EAAO,MAAO,CAAA,QAAA,CAAS,OAAS,CAAA,CAClC,IAAMymC,CAAqB,CAAA,IAAI,IAEzBC,CAA8B,CAAA,CAClC,WAAY,CACV,IAAA,CAAM,CACJ,IAAM,CAAA,OACR,EACA,IAAM,CAAA,CACJ,KAAM,OACR,CAAA,CACA,MAAO,CACL,IAAA,CAAM,OACR,CACF,CAAA,CACA,KAAM,QACR,CAAA,CAEA,GAAIxwB,CAAU,CAAA,UAAA,CAAY,CAGxB,GAAIA,CAAAA,CAAU,WAAW,MAAQ,CAAA,CAC/B,IAAMpM,CAA8C,CAAA,GAC9CyB,CAA0B,CAAA,GAEhC,IAAW3J,IAAAA,CAAAA,IAAOsU,CAAU,CAAA,UAAA,CAAW,OAAQ,CAC7C,IAAMrO,EAAYqO,CAAU,CAAA,UAAA,CAAW,OAAOtU,CAAG,CAAA,CACjDkI,EAAWjC,CAAU,CAAA,IAAI,EAAIA,CAAU,CAAA,MAAA,CACnCA,EAAU,QACZ0D,GAAAA,CAAAA,CAAS,KAAK1D,CAAU,CAAA,IAAI,CAC5B4+B,CAAAA,CAAAA,CAAmB,IAAI,SAAS,CAAA,EAEpC,CAEI,MAAO,CAAA,IAAA,CAAK38B,CAAU,CAAE,CAAA,MAAA,GAC1B48B,EAAW,UAAY,CAAA,OAAA,CAAU,CAC/B,UAAA58B,CAAAA,CAAAA,CACA,SAAAyB,CACA,CAAA,IAAA,CAAM,QACR,CAEJ,EAAA,CAEA,GAAI2K,CAAAA,CAAU,WAAW,IAAM,CAAA,CAC7B,IAAMpM,CAA8C,CAAA,GAC9CyB,CAA0B,CAAA,GAEhC,IAAW3J,IAAAA,CAAAA,IAAOsU,EAAU,UAAW,CAAA,IAAA,CAAM,CAC3C,IAAMrO,CAAAA,CAAYqO,EAAU,UAAW,CAAA,IAAA,CAAKtU,CAAG,CAC/CkI,CAAAA,CAAAA,CAAWjC,EAAU,IAAI,CAAA,CAAIA,EAAU,MACnCA,CAAAA,CAAAA,CAAU,WACZ0D,CAAS,CAAA,IAAA,CAAK1D,EAAU,IAAI,CAAA,CAC5B4+B,EAAmB,GAAI,CAAA,MAAM,GAEjC,CAEI,MAAA,CAAO,KAAK38B,CAAU,CAAA,CAAE,MAC1B48B,GAAAA,CAAAA,CAAW,WAAY,IAAO,CAAA,CAC5B,WAAA58B,CACA,CAAA,QAAA,CAAAyB,EACA,IAAM,CAAA,QACR,GAEJ,CAEA,GAAI2K,EAAU,UAAW,CAAA,KAAA,CAAO,CAC9B,IAAMpM,CAAAA,CAA8C,EAC9CyB,CAAAA,CAAAA,CAA0B,EAAC,CAEjC,QAAW3J,CAAOsU,IAAAA,CAAAA,CAAU,WAAW,KAAO,CAAA,CAC5C,IAAMrO,CAAYqO,CAAAA,CAAAA,CAAU,WAAW,KAAMtU,CAAAA,CAAG,EAChDkI,CAAWjC,CAAAA,CAAAA,CAAU,IAAI,CAAIA,CAAAA,CAAAA,CAAU,OACnCA,CAAU,CAAA,QAAA,GACZ0D,CAAS,CAAA,IAAA,CAAK1D,EAAU,IAAI,CAAA,CAC5B4+B,EAAmB,GAAI,CAAA,OAAO,GAElC,CAEI,MAAA,CAAO,KAAK38B,CAAU,CAAA,CAAE,SAC1B48B,CAAW,CAAA,UAAA,CAAY,MAAQ,CAC7B,UAAA,CAAA58B,EACA,QAAAyB,CAAAA,CAAAA,CACA,KAAM,QACR,CAAA,EAEJ,CACF,CAEI2K,CAAAA,CAAU,OACZwwB,CAAW,CAAA,UAAA,CAAY,KAAOxwB,CAAU,CAAA,IAAA,CAAK,OAEzCA,CAAU,CAAA,IAAA,CAAK,UACjBuwB,CAAmB,CAAA,GAAA,CAAI,MAAM,CAIjCC,CAAAA,CAAAA,CAAAA,CAAW,SAAW,CAAC,GAAGD,CAAkB,CAAA,CAE5C,IAAM/Q,CAAiBzf,CAAAA,CAAAA,CAAK,WAAW,CAErC,IAAA,CAAM,kBAAkBC,CAAU,CAAA,EAAE,GACpC,IAAMlW,CAAAA,CAAAA,CAAO,OAAO,QAAS,CAAA,IAAA,CAC7B,OAAQ,IACR,CAAA,eAAA,CAAiBA,EAAO,MAAO,CAAA,QAAA,CAAS,IACxC,CAAA,SAAA,CAAW,OACb,CAAC,CAAA,CACD2mC,GAAsB,CAEpB,IAAA,CAAM,kBAAkBzwB,CAAU,CAAA,EAAE,GACpC,UAAYwf,CAAAA,CAAAA,CACZ,OAAA11B,CACA,CAAA,MAAA,CAAQ0mC,EACR,KAAArnB,CAAAA,CACF,CAAC,EACH,CAEA,GAAIrf,CAAAA,CAAO,OAAO,SAAU,CAAA,OAAA,EACtBkW,EAAU,SAAW,CAAA,CACvB,GAAM,CAAE,QAAA,CAAAqI,CAAS,CAAIJ,CAAAA,EAAAA,CAAsBjI,CAAS,CAEpD,CAAA,GAAIqI,EAAU,CACZ,IAAM+X,EAAqBrgB,CAAK,CAAA,UAAA,CAAW,CAEzC,IAAM,CAAA,CAAA,mBAAA,EAAsBC,EAAU,EAAE,CAAA,CAAA,CACxC,KAAMlW,CAAO,CAAA,MAAA,CAAO,UAAU,IAC9B,CAAA,MAAA,CAAQ,KACR,eAAiBA,CAAAA,CAAAA,CAAO,OAAO,SAAU,CAAA,IAAA,CACzC,UAAW,OACb,CAAC,EACD2mC,EAAsB,CAAA,CAEpB,IAAM,CAAA,CAAA,mBAAA,EAAsBzwB,EAAU,EAAE,CAAA,CAAA,CACxC,WAAYogB,CACZ,CAAA,MAAA,CAAAt2B,EACA,MAAQue,CAAAA,CAAAA,CACR,MAAAc,CACF,CAAC,EACH,CACF,CAEJ,ECpIA,IAAMunB,EAAAA,CAAqBC,GACrBA,CAAM,CAAA,MAAA,GAAW,CACZA,CAAAA,CAAAA,CAAM,CAAC,CAGGv1B,CAAAA,CAAAA,CAAS,eAAe,CACzC,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAYjK,CAAY,CAAA,CAAA,CACxB,KAAMA,CAAY,CAAA,OAAA,CAAQ,IAC5B,CAAC,CAAA,CACD,WAAYw/B,CACd,CAAC,CAIGC,CAAAA,EAAAA,CAA2B,CAAC,CAChC,MAAA,CAAA9mC,EACA,MAAA8X,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAIqB,CACnB,IAAM1S,CAAAA,CAAe2E,EAAS,wBAAyB,CAAA,CACrD,WAAYjK,CAAY,CAAA,CAAA,CACxB,KAAMA,CAAY,CAAA,OAAA,CAAQ,KAC5B,CAAC,CAAA,CAEKw/B,EAAkC,EAAC,CAEzC,GAAK/uB,CAAO,CAAA,KAAA,CAYL,CACLA,CAAS4E,CAAAA,EAAAA,CAAkB,CAAE,MAAA5E,CAAAA,CAAO,CAAC,CAGrC,CAAA,IAAMivB,EAAkBjvB,CAAO,CAAA,KAAA,CAAO,IAAKxL,CAAS,EAAA,CAClD,IAAM06B,CAAAA,CAAcL,GAAsB,CACxC,MAAA,CAAA3mC,EACA,MAAQsM,CAAAA,CAAAA,CACR,MAAA+S,CACF,CAAC,EACD,OAAOunB,EAAAA,CAAkBI,CAAW,CACtC,CAAC,EAED,GAAID,CAAAA,CAAgB,SAAW,CAAG,CAAA,CAChC,IAAMjgC,CAAAA,CAAawK,EAAS,cAAe,CAAA,CACzC,aAAA3E,CACA,CAAA,UAAA,CAAYo6B,CACd,CAAC,CAAA,CACDF,EAAM,IAAK//B,CAAAA,CAAU,EACvB,CAAO,KAAA,CACDgR,EAAO,eAUX,CAAA,IAAMhR,EAAawK,CAAS,CAAA,cAAA,CAAe,CACzC,YAAA,CAAA3E,EACA,UAAY,CAAA,CACVs6B,GAIC,CACH,CACF,CAAC,CAAA,CACDJ,EAAM,IAAK//B,CAAAA,CAAU,EACvB,CACF,CAAA,KAtDmB,CACjB,IAAMA,CAAAA,CAAawK,EAAS,cAAe,CAAA,CACzC,aAAA3E,CACA,CAAA,UAAA,CAAY,CACVs6B,EAA2B,CAI1B,CACH,CACF,CAAC,EACDJ,CAAM,CAAA,IAAA,CAAK//B,CAAU,EACvB,CA4CA,GAAIgR,CAAAA,CAAO,WAAaA,CAAO,CAAA,QAAA,EAAYA,EAAO,QAAa,GAAA,MAAA,CAAW,CACxE,IAAMhR,CAAAA,CAAawK,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,CACxB,CAAA,IAAA,CAAMA,EAAY,OAAQ,CAAA,MAC5B,CAAC,CACD,CAAA,UAAA,CAAY,CAACiK,CAAS,CAAA,iBAAA,CAAkB,CAAE,KAAOwG,CAAAA,CAAAA,CAAO,QAAS,CAAC,CAAC,CACrE,CAAC,CAAA,CACD+uB,EAAM,IAAK//B,CAAAA,CAAU,EACvB,CAAA,KAAO,CACL,GAAIgR,CAAAA,CAAO,WAAa,MAAW,CAAA,CACjC,IAAMhR,CAAawK,CAAAA,CAAAA,CAAS,eAAe,CACzC,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAYjK,CAAY,CAAA,CAAA,CACxB,KAAMA,CAAY,CAAA,OAAA,CAAQ,SAC5B,CAAC,CAAA,CACD,WAAY,CAACiK,CAAAA,CAAS,kBAAkB,CAAE,KAAA,CAAOwG,EAAO,QAAS,CAAC,CAAC,CACrE,CAAC,EACD+uB,CAAM,CAAA,IAAA,CAAK//B,CAAU,EACvB,CAEA,GAAIgR,CAAO,CAAA,QAAA,GAAa,MAAW,CAAA,CACjC,IAAMhR,CAAawK,CAAAA,CAAAA,CAAS,eAAe,CACzC,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAYjK,CAAY,CAAA,CAAA,CACxB,KAAMA,CAAY,CAAA,OAAA,CAAQ,SAC5B,CAAC,CAAA,CACD,WAAY,CAACiK,CAAAA,CAAS,iBAAkB,CAAA,CAAE,MAAOwG,CAAO,CAAA,QAAS,CAAC,CAAC,CACrE,CAAC,CACD+uB,CAAAA,CAAAA,CAAM,KAAK//B,CAAU,EACvB,CACF,CAEA,OAAO8/B,GAAkBC,CAAK,CAChC,EAEMK,EAA6B,CAAA,CAAC,CAClC,MAAA,CAAApvB,CACF,CAGM,GAAA,OAAOA,EAAO,KAAU,EAAA,SAAA,CACPxG,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMA,CAAAA,CAAAA,CAAY,QAAQ,OAC5B,CAAC,CACD,CAAA,UAAA,CAAY,CAACiK,CAAS,CAAA,GAAA,CAAI,QAAQwG,CAAO,CAAA,KAAK,CAAC,CACjD,CAAC,EAIgBxG,CAAS,CAAA,cAAA,CAAe,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAYjK,EAAY,CACxB,CAAA,IAAA,CAAMA,CAAY,CAAA,OAAA,CAAQ,OAC5B,CAAC,CACH,CAAC,CAIG8/B,CAAAA,EAAAA,CAA0B,CAAC,CAC/B,MAAA,CAAArvB,CACF,CAEyB,GAAA,CACvB,IAAMsvB,CAA2C,CAAA,GAE7Cj3B,CAAa,CAAA,KAAA,CAEjB,QAAW7D,CAAQwL,IAAAA,CAAAA,CAAO,KAAS,EAAA,GAE7BxL,CAAK,CAAA,IAAA,GAAS,UAAY,OAAOA,CAAAA,CAAK,OAAU,QAClD86B,CAAAA,CAAAA,CAAY,KACV91B,CAAS,CAAA,aAAA,CAAc,CACrB,IAAMhF,CAAAA,CAAAA,CAAK,KACb,CAAC,CACH,GACSA,CAAK,CAAA,IAAA,GAAS,MAAUA,EAAAA,CAAAA,CAAK,QAAU,IAChD6D,IAAAA,CAAAA,CAAa,MAIjB,GAAI,CAACi3B,EAAY,MACf,CAAA,OAAOH,GAIN,CAAA,CAGH,IAAII,CAAmB/1B,CAAAA,CAAAA,CAAS,eAAe,CAC7C,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAYjK,CAAY,CAAA,CAAA,CACxB,KAAMA,CAAY,CAAA,OAAA,CAAQ,QAC5B,CAAC,CAAA,CACD,WAAY,CACViK,CAAAA,CAAS,uBAAuB,CAC9B,QAAA,CAAU81B,EACV,SAAW,CAAA,KACb,CAAC,CACH,CACF,CAAC,CAAA,CAED,OAAIj3B,CACFk3B,GAAAA,CAAAA,CAAmB/1B,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMA,CAAAA,CAAAA,CAAY,QAAQ,QAC5B,CAAC,CACD,CAAA,UAAA,CAAY,CAACggC,CAAgB,CAC/B,CAAC,CAGIA,CAAAA,CAAAA,CACT,EAGMC,EAA4BC,CAAAA,CAAAA,EAGbj2B,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMA,CAAAA,CAAAA,CAAY,OAAQ,CAAA,KAC5B,CAAC,CACH,CAAC,EAKGmgC,EAA2BD,CAAAA,CAAAA,EAGZj2B,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMA,CAAAA,CAAAA,CAAY,QAAQ,IAC5B,CAAC,CACH,CAAC,CAAA,CAIGogC,GAAkB,CAAC,CACvB,SAAAC,CACA,CAAA,KAAA,CAAA7lC,CACF,CAGM,GAAA,CACJ,IAAMiF,CAAawK,CAAAA,CAAAA,CAAS,kBAAkB,CAAE,KAAA,CAAAzP,CAAM,CAAC,CAAA,CAEvD,OACE6lC,CACC,GAAA,OAAO7lC,CAAU,EAAA,QAAA,EAChB,OAAOA,CAAU,EAAA,QAAA,EACjB,OAAOA,CAAU,EAAA,QAAA,EACjB,OAAOA,CAAU,EAAA,SAAA,CAAA,CAEZyP,EAAS,cAAe,CAAA,CAC7B,aAAc,QACd,CAAA,UAAA,CAAY,CAACxK,CAAU,CACzB,CAAC,CAGIA,CAAAA,CACT,CAEM6gC,CAAAA,EAAAA,CAA4B,CAAC,CACjC,MAAA,CAAA7vB,CACF,CAEM,GAAA,CACJ,IAAM4vB,CAAW5vB,CAAAA,CAAAA,CAAO,OAAS,SAAaA,EAAAA,CAAAA,CAAO,SAAW,OAEhE,CAAA,GAAI,OAAOA,CAAO,CAAA,KAAA,EAAU,SAS1B,OAPmBxG,CAAAA,CAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMA,CAAAA,CAAAA,CAAY,QAAQ,OAC5B,CAAC,EACD,UAAY,CAAA,CAACiK,EAAS,GAAI,CAAA,MAAA,CAAOwG,EAAO,KAAK,CAAC,CAChD,CAAC,CAAA,CAIH,IAAM+uB,CAAkC,CAAA,GAGlC//B,CAAawK,CAAAA,CAAAA,CAAS,eAAe,CACzC,YAAA,CAAco2B,EACVp2B,CAAS,CAAA,wBAAA,CAAyB,CAChC,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMA,CAAAA,CAAAA,CAAY,QAAQ,MAC5B,CAAC,CACDiK,CAAAA,CAAAA,CAAS,yBAAyB,CAChC,UAAA,CAAYjK,EAAY,CACxB,CAAA,IAAA,CAAMA,EAAY,OAAQ,CAAA,MAC5B,CAAC,CACP,CAAC,EAGD,GAFAw/B,CAAAA,CAAM,KAAK//B,CAAU,CAAA,CAEjB,CAAC4gC,CAAY5vB,EAAAA,CAAAA,CAAO,IAAS,GAAA,SAAA,CAAW,CAC1C,IAAMhR,CAAAA,CAAawK,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMA,CAAAA,CAAAA,CAAY,QAAQ,OAC5B,CAAC,CACH,CAAC,CAAA,CACDw/B,CAAM,CAAA,IAAA,CAAK//B,CAAU,EACvB,CAEA,GAAIgR,CAAO,CAAA,gBAAA,GAAqB,OAAW,CACzC,IAAMhR,EAAawK,CAAS,CAAA,cAAA,CAAe,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAYjK,EAAY,CACxB,CAAA,IAAA,CAAMA,EAAY,OAAQ,CAAA,OAC5B,CAAC,CACD,CAAA,UAAA,CAAY,CACVogC,EAAgB,CAAA,CAAE,SAAAC,CAAU,CAAA,KAAA,CAAO5vB,EAAO,gBAAiB,CAAC,CAC9D,CACF,CAAC,EACD+uB,CAAM,CAAA,IAAA,CAAK//B,CAAU,EACvB,CAAA,KAAA,GAAWgR,CAAO,CAAA,OAAA,GAAY,OAAW,CACvC,IAAMhR,EAAawK,CAAS,CAAA,cAAA,CAAe,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAYjK,EAAY,CACxB,CAAA,IAAA,CAAMA,EAAY,OAAQ,CAAA,QAC5B,CAAC,CACD,CAAA,UAAA,CAAY,CAACogC,EAAAA,CAAgB,CAAE,QAAAC,CAAAA,CAAAA,CAAU,MAAO5vB,CAAO,CAAA,OAAQ,CAAC,CAAC,CACnE,CAAC,CACD+uB,CAAAA,CAAAA,CAAM,KAAK//B,CAAU,EACvB,CAEA,GAAIgR,CAAAA,CAAO,mBAAqB,MAAW,CAAA,CACzC,IAAMhR,CAAAA,CAAawK,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMA,CAAAA,CAAAA,CAAY,QAAQ,OAC5B,CAAC,EACD,UAAY,CAAA,CACVogC,GAAgB,CAAE,QAAA,CAAAC,EAAU,KAAO5vB,CAAAA,CAAAA,CAAO,gBAAiB,CAAC,CAC9D,CACF,CAAC,CAAA,CACD+uB,EAAM,IAAK//B,CAAAA,CAAU,EACvB,CAAWgR,KAAAA,GAAAA,CAAAA,CAAO,UAAY,MAAW,CAAA,CACvC,IAAMhR,CAAawK,CAAAA,CAAAA,CAAS,eAAe,CACzC,YAAA,CAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMA,CAAAA,CAAAA,CAAY,QAAQ,QAC5B,CAAC,EACD,UAAY,CAAA,CAACogC,GAAgB,CAAE,QAAA,CAAAC,EAAU,KAAO5vB,CAAAA,CAAAA,CAAO,OAAQ,CAAC,CAAC,CACnE,CAAC,EACD+uB,CAAM,CAAA,IAAA,CAAK//B,CAAU,EACvB,CAEA,OAAO8/B,EAAkBC,CAAAA,CAAK,CAChC,CAEMe,CAAAA,EAAAA,CAA4B,CAAC,CACjC,MAAA,CAAA5nC,EACA,MAAA8X,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAOK,CAEH,IAAMvV,EAA2C,EAAC,CAE5CyB,EAAWuM,CAAO,CAAA,QAAA,EAAY,EAEpC,CAAA,IAAA,IAAW/X,KAAQ+X,CAAO,CAAA,UAAA,CAAY,CACpC,IAAMrH,CAAAA,CAAWqH,EAAO,UAAW/X,CAAAA,CAAI,EACjC65B,CAAaruB,CAAAA,CAAAA,CAAS,SAASxL,CAAI,CAAA,CAEnCinC,EAAcL,EAAsB,CAAA,CACxC,SAAU,CAAC/M,CAAAA,CACX,OAAA55B,CACA,CAAA,MAAA,CAAQyQ,EACR,KAAA4O,CAAAA,CACF,CAAC,CAED1c,CAAAA,EAAAA,CAAa,UAAY,CACzB,CAAA,IAAIklC,EACAllC,EAAa,CAAA,IAAA,CAAK5C,CAAI,CAAA,CAGxB8nC,EAAe9nC,CAAK,CAAA,UAAA,CAAW,GAAG,CAC9B0D,CAAAA,kBAAAA,CAAG,QAAQ,mBAAoB1D,CAAAA,CAAI,EACnC0D,kBAAG,CAAA,OAAA,CAAQ,qBAAqB1D,CAAI,CAAA,CAExC8nC,EAAe9nC,CAIbA,CAAAA,CAAAA,CAAAA,CAAK,MAAM,QAAQ,CAAA,EAAKA,CAAK,CAAA,KAAA,CAAM,MAAM,CAAMA,EAAAA,CAAAA,CAAK,MAAM,KAAK,CAAA,GACjE,CAACA,CAAK,CAAA,UAAA,CAAW,GAAG,CACpB,EAAA,CAACA,EAAK,QAAS,CAAA,GAAG,IAElB8nC,CAAe,CAAA,CAAA,CAAA,EAAI9nC,CAAI,CAEzB+J,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW,IACTwH,CAAAA,CAAAA,CAAS,mBAAmB,CAC1B,WAAA,CAAas1B,GAAkBI,CAAW,CAAA,CAC1C,KAAMa,CACR,CAAC,CACH,EACF,CAEA,GACE/vB,CAAO,CAAA,oBAAA,EACPA,EAAO,oBAAqB,CAAA,IAAA,GAAS,UACrC,CAAC,MAAA,CAAO,KAAKhO,CAAU,CAAA,CAAE,OACzB,CACA,IAAM+8B,EAAQF,EAAsB,CAAA,CAClC,OAAA3mC,CACA,CAAA,MAAA,CAAQ8X,EAAO,oBACf,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CAiBD,OAAO,CACL,OAAA,CAAS,eACT,UAlBiB/N,CAAAA,CAAAA,CAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMA,CAAAA,CAAAA,CAAY,QAAQ,MAC5B,CAAC,EACD,UAAY,CAAA,CACViK,EAAS,cAAe,CAAA,CACtB,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAA,CAAYjK,EAAY,CACxB,CAAA,IAAA,CAAMA,EAAY,OAAQ,CAAA,MAC5B,CAAC,CACD,CAAA,UAAA,CAAY,EACd,CAAC,EACDu/B,EAAkBC,CAAAA,CAAK,CACzB,CACF,CAAC,CAID,CACF,CAEA,IAAM//B,CAAAA,CAAawK,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMA,CAAAA,CAAAA,CAAY,QAAQ,MAC5B,CAAC,EACD,UAAY,CAAA,CAAC5D,mBAAG,OAAQ,CAAA,6BAAA,CAA8BqG,EAAY,IAAI,CAAC,CACzE,CAAC,CAAA,CACD,OAAO,CAEL,OAAA,CAASzC,EAAY,KAAM,CAAA,aAAA,CAAc,KACzC,UAAAP,CAAAA,CACF,CACF,CAEMghC,CAAAA,EAAAA,CAA4B,CAAC,CACjC,MAAA,CAAAhwB,CACF,CAEM,GAAA,CACJ,GAAI,OAAOA,EAAO,KAAU,EAAA,QAAA,CAQ1B,OAPmBxG,CAAS,CAAA,cAAA,CAAe,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAYjK,EAAY,CACxB,CAAA,IAAA,CAAMA,EAAY,OAAQ,CAAA,OAC5B,CAAC,CACD,CAAA,UAAA,CAAY,CAACiK,CAAAA,CAAS,IAAI,MAAOwG,CAAAA,CAAAA,CAAO,KAAK,CAAC,CAChD,CAAC,CAIH,CAAA,IAAM+uB,EAAkC,EAAC,CAEnC//B,EAAawK,CAAS,CAAA,cAAA,CAAe,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAYjK,CAAY,CAAA,CAAA,CACxB,KAAMA,CAAY,CAAA,OAAA,CAAQ,MAC5B,CAAC,CACH,CAAC,CAGD,CAAA,GAFAw/B,EAAM,IAAK//B,CAAAA,CAAU,EAEjBgR,CAAO,CAAA,MAAA,CACT,OAAQA,CAAO,CAAA,MAAA,EACb,KAAK,MAAA,CACH+uB,EAAM,IACJv1B,CAAAA,CAAAA,CAAS,eAAe,CACtB,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAYjK,CAAY,CAAA,CAAA,CACxB,KAAMA,CAAY,CAAA,OAAA,CAAQ,OAC5B,CAAC,CACH,CAAC,CACH,CAAA,CACA,MACF,KAAK,WAAA,CACHw/B,CAAM,CAAA,IAAA,CACJv1B,EAAS,cAAe,CAAA,CACtB,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMA,CAAAA,CAAAA,CAAY,QAAQ,YAC5B,CAAC,CACH,CAAC,CACH,EACA,MACF,KAAK,MACL,CAAA,KAAK,OACHw/B,CAAM,CAAA,IAAA,CACJv1B,EAAS,cAAe,CAAA,CACtB,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMA,CAAAA,CAAAA,CAAY,QAAQ,EAC5B,CAAC,CACH,CAAC,CACH,CACA,CAAA,MACF,KAAK,KACHw/B,CAAAA,CAAAA,CAAM,KACJv1B,CAAS,CAAA,cAAA,CAAe,CACtB,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAYjK,EAAY,CACxB,CAAA,IAAA,CAAMA,EAAY,OAAQ,CAAA,GAC5B,CAAC,CACH,CAAC,CACH,CACA,CAAA,MACF,KAAK,OACL,CAAA,KAAK,OACL,KAAK,MAAA,CACHw/B,EAAM,IACJv1B,CAAAA,CAAAA,CAAS,eAAe,CACtB,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAYjK,CAAY,CAAA,CAAA,CACxB,KAAMiK,CAAS,CAAA,UAAA,CAAW,CAAE,IAAA,CAAMwG,EAAO,MAAO,CAAC,CACnD,CAAC,CACH,CAAC,CACH,CAAA,CACA,KACJ,CAGF,GAAIA,EAAO,SAAcA,GAAAA,CAAAA,CAAO,WAAaA,CAAO,CAAA,SAAA,GAAc,OAAW,CAC3E,IAAMhR,CAAawK,CAAAA,CAAAA,CAAS,eAAe,CACzC,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAYjK,CAAY,CAAA,CAAA,CACxB,KAAMA,CAAY,CAAA,OAAA,CAAQ,MAC5B,CAAC,CAAA,CACD,WAAY,CAACiK,CAAAA,CAAS,kBAAkB,CAAE,KAAA,CAAOwG,CAAO,CAAA,SAAU,CAAC,CAAC,CACtE,CAAC,CACD+uB,CAAAA,CAAAA,CAAM,KAAK//B,CAAU,EACvB,MAAO,CACL,GAAIgR,EAAO,SAAc,GAAA,MAAA,CAAW,CAClC,IAAMhR,CAAAA,CAAawK,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMA,CAAAA,CAAAA,CAAY,QAAQ,SAC5B,CAAC,EACD,UAAY,CAAA,CAACiK,EAAS,iBAAkB,CAAA,CAAE,MAAOwG,CAAO,CAAA,SAAU,CAAC,CAAC,CACtE,CAAC,CAAA,CACD+uB,EAAM,IAAK//B,CAAAA,CAAU,EACvB,CAEA,GAAIgR,EAAO,SAAc,GAAA,MAAA,CAAW,CAClC,IAAMhR,CAAAA,CAAawK,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,CACxB,CAAA,IAAA,CAAMA,EAAY,OAAQ,CAAA,SAC5B,CAAC,CACD,CAAA,UAAA,CAAY,CAACiK,CAAS,CAAA,iBAAA,CAAkB,CAAE,KAAOwG,CAAAA,CAAAA,CAAO,SAAU,CAAC,CAAC,CACtE,CAAC,CAAA,CACD+uB,EAAM,IAAK//B,CAAAA,CAAU,EACvB,CACF,CAEA,GAAIgR,CAAAA,CAAO,QAAS,CAClB,IAAMhR,EAAawK,CAAS,CAAA,cAAA,CAAe,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAYjK,EAAY,CACxB,CAAA,IAAA,CAAMA,EAAY,OAAQ,CAAA,KAC5B,CAAC,CACD,CAAA,UAAA,CAAY,CAACiK,CAAS,CAAA,wBAAA,CAAyB,CAAE,IAAMwG,CAAAA,CAAAA,CAAO,OAAQ,CAAC,CAAC,CAC1E,CAAC,CAAA,CACD+uB,EAAM,IAAK//B,CAAAA,CAAU,EACvB,CAEA,OAAO8/B,GAAkBC,CAAK,CAChC,CAEMkB,CAAAA,EAAAA,CAA2B,CAAC,CAChC,MAAA,CAAA/nC,EACA,MAAA8X,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAIM,CACJ,GAAIvH,CAAAA,CAAO,OAAS,KAAM,CAAA,OAAA,CAAQA,EAAO,KAAK,CAAA,CAAG,CAC/C,IAAMkwB,CAAAA,CAAgBlwB,CAAO,CAAA,KAAA,CAAM,IAAKjW,CACtCyP,EAAAA,CAAAA,CAAS,eAAe,CACtB,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAYjK,CAAY,CAAA,CAAA,CACxB,KAAMA,CAAY,CAAA,OAAA,CAAQ,OAC5B,CAAC,CAAA,CACD,WAAY,CAACiK,CAAAA,CAAS,iBAAkB,CAAA,CAAE,MAAAzP,CAAM,CAAC,CAAC,CACpD,CAAC,CACH,CAYA,CAAA,OAXmByP,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMA,CAAAA,CAAAA,CAAY,QAAQ,KAC5B,CAAC,EACD,UAAY,CAAA,CACViK,EAAS,sBAAuB,CAAA,CAC9B,SAAU02B,CACZ,CAAC,CACH,CACF,CAAC,CAEH,CAEA,GAAIlwB,EAAO,KAAO,CAAA,CAChB,IAAMkwB,CAAgBlwB,CAAAA,CAAAA,CAAO,KAAM,CAAA,GAAA,CAAKxL,GAAS,CAC/C,IAAM06B,EAAcL,EAAsB,CAAA,CACxC,OAAA3mC,CACA,CAAA,MAAA,CAAQsM,EACR,KAAA+S,CAAAA,CACF,CAAC,CACD,CAAA,OAAOunB,GAAkBI,CAAW,CACtC,CAAC,CAYD,CAAA,OAXmB11B,CAAS,CAAA,cAAA,CAAe,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAYjK,EAAY,CACxB,CAAA,IAAA,CAAMA,EAAY,OAAQ,CAAA,KAC5B,CAAC,CACD,CAAA,UAAA,CAAY,CACViK,CAAS,CAAA,sBAAA,CAAuB,CAC9B,QAAU02B,CAAAA,CACZ,CAAC,CACH,CACF,CAAC,CAEH,CAEA,OAAOf,EAAAA,CAIN,CACH,CAAA,CAGMgB,GAAgCV,CAGjBj2B,EAAAA,CAAAA,CAAS,eAAe,CACzC,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAYjK,CAAY,CAAA,CAAA,CACxB,KAAMA,CAAY,CAAA,OAAA,CAAQ,SAC5B,CAAC,CACH,CAAC,CAKG4/B,CAAAA,EAAAA,CAA8BM,GAGfj2B,CAAS,CAAA,cAAA,CAAe,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAYjK,CAAY,CAAA,CAAA,CACxB,KAAMA,CAAY,CAAA,OAAA,CAAQ,OAC5B,CAAC,CACH,CAAC,CAKG6gC,CAAAA,EAAAA,CAA2BX,GAGZj2B,CAAS,CAAA,cAAA,CAAe,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAYjK,EAAY,CACxB,CAAA,IAAA,CAAMA,CAAY,CAAA,OAAA,CAAQ,IAC5B,CAAC,CACH,CAAC,CAIG8gC,CAAAA,EAAAA,CAA4B,CAAC,CACjC,MAAA,CAAAnoC,EACA,MAAA8X,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAOK,CACH,OAAQvH,CAAAA,CAAO,MACb,KAAK,OACH,CAAA,OAAO,CACL,UAAYgvB,CAAAA,EAAAA,CAAyB,CACnC,MAAA9mC,CAAAA,CAAAA,CACA,OAAQ8X,CACR,CAAA,KAAA,CAAAuH,CACF,CAAC,CACH,EACF,KAAK,SAAA,CACH,OAAO,CACL,UAAA,CAAY6nB,GAA2B,CACrC,MAAA,CAAQpvB,CACV,CAAC,CACH,EACF,KAAK,MAAA,CACH,OAAO,CACL,UAAA,CAAYqvB,GAAwB,CAClC,MAAA,CAAQrvB,CACV,CAAC,CACH,EACF,KAAK,SAAA,CACL,KAAK,QACH,CAAA,OAAO,CACL,UAAY6vB,CAAAA,EAAAA,CAA0B,CACpC,MAAA,CAAQ7vB,CACV,CAAC,CACH,EACF,KAAK,OAAA,CACH,OAAO,CACL,UAAA,CAAYwvB,GAEX,CACH,EACF,KAAK,MAAA,CACH,OAAO,CACL,UAAA,CAAYE,EAAwB,CAEnC,CACH,CACF,CAAA,KAAK,SACH,OAAOI,EAAAA,CAA0B,CAC/B,MAAA5nC,CAAAA,CAAAA,CACA,OAAQ8X,CACR,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CACH,KAAK,QACH,CAAA,OAAO,CACL,UAAA,CAAYyoB,GAA0B,CACpC,MAAA,CAAQhwB,CACV,CAAC,CACH,EACF,KAAK,OAAA,CACH,OAAO,CACL,UAAA,CAAYiwB,GAAyB,CACnC,MAAA,CAAA/nC,EACA,MAAQ8X,CAAAA,CAAAA,CACR,MAAAuH,CACF,CAAC,CACH,CAAA,CACF,KAAK,WACH,CAAA,OAAO,CACL,UAAY4oB,CAAAA,EAAAA,CAEX,CACH,CAAA,CACF,KAAK,SACH,CAAA,OAAO,CACL,UAAYhB,CAAAA,EAAAA,CAEX,CACH,EACF,KAAK,MAAA,CACH,OAAO,CACL,UAAA,CAAYiB,GAEX,CACH,CACJ,CACF,CAAA,CAEavB,GAAwB,CAAC,CACpC,KAAA5zB,CACA,CAAA,UAAA,CAAYq1B,CACZ,CAAA,QAAA,CAAAC,EACA,MAAAroC,CAAAA,CAAAA,CACA,OAAA8X,CACA,CAAA,KAAA,CAAAuH,CACF,CAe4B,GAAA,CAC1B,IAAMpJ,CAAOjW,CAAAA,CAAAA,CAAO,QAAQ,IAAK,CAAA,CAAE,GAAImmC,EAAU,CAAC,EAE9CmC,CACAjzB,CAAAA,CAAAA,CAA6D+yB,CAC7DvB,CAAAA,CAAAA,CAA8B,EAgBlC,CAAA,GAdI9zB,IACFsM,CAAM,CAAA,wBAAA,CAAyB,IAAItM,CAAI,CAAA,CAElCsC,IACHA,CAAaY,CAAAA,CAAAA,CAAK,WAAW,CAC3B,IAAA,CAAAlD,EACA,IAAMsM,CAAAA,CAAAA,CAAM,SACZ,MAAQ,CAAA,IAAA,CACR,gBAAiBA,CAAM,CAAA,eAAA,CACvB,UAAW,OACb,CAAC,IAIDvH,CAAO,CAAA,IAAA,CAAM,CACf,IAAMywB,CAAAA,CAAsBlpB,EAAM,wBAAyB,CAAA,GAAA,CAAIvH,EAAO,IAAI,CAAA,CAKtE0wB,EAAgBvyB,CAAK,CAAA,UAAA,CAAW,CAClC,IAAM6B,CAAAA,CAAAA,CAAO,IACb,CAAA,IAAA,CAAMuH,EAAM,QACZ,CAAA,eAAA,CAAiBA,EAAM,eACvB,CAAA,SAAA,CAAW,OACb,CAAC,CAAA,CAED,GAAI,CAACmpB,CAAAA,CAAc,KAAM,CACvB,IAAMryB,EAAMnW,CAAO,CAAA,OAAA,CAAQ,aAA8B8X,CAAO,CAAA,IAAI,CAC9DkvB,CAAAA,CAAAA,CAAcL,GAAsB,CACxC,IAAA,CAAM7uB,EAAO,IACb,CAAA,MAAA,CAAA9X,EACA,MAAQmW,CAAAA,CAAAA,CACR,MAAAkJ,CACF,CAAC,EACDwnB,CAAM,CAAA,IAAA,CAAK,GAAGG,CAAW,CAAA,CAEzBwB,EAAgBvyB,CAAK,CAAA,UAAA,CAAW,CAC9B,IAAA,CAAM6B,EAAO,IACb,CAAA,IAAA,CAAMuH,EAAM,QACZ,CAAA,eAAA,CAAiBA,EAAM,eACvB,CAAA,SAAA,CAAW,OACb,CAAC,EACH,CAGA,GAAImpB,CAAAA,CAAc,KAAM,CACtB,IAAM3yB,EAAgBvE,CAAS,CAAA,UAAA,CAAW,CAAE,IAAMk3B,CAAAA,CAAAA,CAAc,IAAK,CAAC,CAAA,CACtE,GAAID,CAAqB,CAAA,CACvB,IAAME,CAAiBn3B,CAAAA,CAAAA,CAAS,eAAe,CAC7C,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAYjK,CAAY,CAAA,CAAA,CACxB,KAAMA,CAAY,CAAA,OAAA,CAAQ,IAC5B,CAAC,EACD,UAAY,CAAA,CACViK,EAAS,aAAc,CAAA,CACrB,WAAY,CACVA,CAAAA,CAAS,gBAAgB,CACvB,UAAA,CAAYuE,CACd,CAAC,CACH,CACF,CAAC,CACH,CACF,CAAC,CAAA,CACDgxB,CAAM,CAAA,IAAA,CAAK4B,CAAc,CACzBppB,CAAAA,CAAAA,CAAM,qBAAuB,KAC/B,CAAA,KACEwnB,EAAM,IAAKhxB,CAAAA,CAAa,EAE5B,CACF,CAAA,KAAA,GAAWiC,EAAO,IAAM,CAAA,CACtB,IAAM4wB,CAAgBP,CAAAA,EAAAA,CAA0B,CAAE,MAAAnoC,CAAAA,CAAAA,CAAQ,MAAA8X,CAAAA,CAAAA,CAAQ,MAAAuH,CAAM,CAAC,EAIzE,GAHAipB,CAAAA,CAAUI,EAAc,OACxB7B,CAAAA,CAAAA,CAAM,KAAK6B,CAAc,CAAA,UAAU,EAE/B1oC,CAAO,CAAA,MAAA,CAAO,UAAY8X,CAAO,CAAA,WAAA,CAAa,CAChD,IAAMhR,CAAAA,CAAawK,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMA,CAAAA,CAAAA,CAAY,QAAQ,QAC5B,CAAC,EACD,UAAY,CAAA,CACViK,EAAS,gBAAiB,CAAA,CACxB,IAAK,CACH,CACE,GAAK,CAAA,aAAA,CACL,MAAOA,CAAS,CAAA,aAAA,CAAc,CAAE,IAAMwG,CAAAA,CAAAA,CAAO,WAAY,CAAC,CAC5D,CACF,CACF,CAAC,CACH,CACF,CAAC,EACD+uB,CAAM,CAAA,IAAA,CAAK//B,CAAU,EACvB,CACF,CAAWgR,KAAAA,GAAAA,CAAAA,CAAO,MAGhB,GAFAA,CAAAA,CAAS4E,GAAkB,CAAE,MAAA,CAAA5E,CAAO,CAAC,CAAA,CAEjCA,EAAO,KAAO,CAAA,CAChB,IAAMuoB,CAAYvoB,CAAAA,CAAAA,CAAO,MAAM,GAAKxL,CAAAA,CAAAA,EAAS,CAC3C,IAAM06B,CAAAA,CAAcL,EAAsB,CAAA,CACxC,OAAA3mC,CACA,CAAA,MAAA,CAAQsM,EACR,KAAA+S,CAAAA,CACF,CAAC,CACD,CAAA,OAAOunB,GAAkBI,CAAW,CACtC,CAAC,CAED,CAAA,GAAIlvB,EAAO,eAAoB,GAAA,KAAA,CAAO,CACpC,IAAM6wB,CAAAA,CAAsBr3B,EAAS,cAAe,CAAA,CAClD,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMA,CAAAA,CAAAA,CAAY,QAAQ,SAC5B,CAAC,EACD,UAAY,CAAA,CACViK,EAAS,sBAAuB,CAAA,CAC9B,SAAU+uB,CACZ,CAAC,CACH,CACF,CAAC,CACDwG,CAAAA,CAAAA,CAAM,KAAK8B,CAAmB,EAChC,MAAO,CACL,IAAMC,EAAkBt3B,CAAS,CAAA,cAAA,CAAe,CAC9C,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAYjK,EAAY,CACxB,CAAA,IAAA,CAAMA,CAAY,CAAA,OAAA,CAAQ,KAC5B,CAAC,CAAA,CACD,WAAY,CACViK,CAAAA,CAAS,uBAAuB,CAC9B,QAAA,CAAU+uB,CACZ,CAAC,CACH,CACF,CAAC,CAAA,CACDwG,EAAM,IAAK+B,CAAAA,CAAe,EAC5B,CACF,CAAA,KAAO,CACL,IAAM5B,EAAcL,EAAsB,CAAA,CACxC,OAAA3mC,CACA,CAAA,MAAA,CAAA8X,EACA,KAAAuH,CAAAA,CACF,CAAC,CACDwnB,CAAAA,CAAAA,CAAM,KAAK,GAAGG,CAAW,EAC3B,CACK,KAAA,CAEL,IAAM0B,CAAgBP,CAAAA,EAAAA,CAA0B,CAC9C,MAAAnoC,CAAAA,CAAAA,CACA,OAAQ,CACN,IAAA,CAAM,SACR,CACA,CAAA,KAAA,CAAAqf,CACF,CAAC,CAAA,CACDipB,EAAUI,CAAc,CAAA,OAAA,CACxB7B,EAAM,IAAK6B,CAAAA,CAAAA,CAAc,UAAU,EACrC,CAMA,GAJI31B,CACFsM,EAAAA,CAAAA,CAAM,wBAAyB,CAAA,MAAA,CAAOtM,CAAI,CAGxC8zB,CAAAA,CAAAA,CAAM,QACJ/uB,CAAO,CAAA,WAAA,GAAgB,OAAQ,CACjC,IAAM+wB,EAAqBv3B,CAAS,CAAA,cAAA,CAAe,CACjD,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAYjK,EAAY,CACxB,CAAA,IAAA,CAAMA,CAAY,CAAA,OAAA,CAAQ,QAC5B,CAAC,CACH,CAAC,CACDw/B,CAAAA,CAAAA,CAAM,KAAKgC,CAAkB,EAC/B,CAGF,GAAIhC,CAAAA,CAAM,OAAQ,CAChB,IAAIiC,EAEJ,GAAIhxB,CAAAA,CAAO,UAAY,MAAW,CAAA,CAChC,IAAM4vB,CAAAA,CAAW5vB,EAAO,IAAS,GAAA,SAAA,EAAaA,EAAO,MAAW,GAAA,OAAA,CAChEgxB,EAAgBrB,EAAgB,CAAA,CAAE,SAAAC,CAAU,CAAA,KAAA,CAAO5vB,EAAO,OAAQ,CAAC,EAC/DgxB,CACFjC,GAAAA,CAAAA,CAAQ,CACNv1B,CAAS,CAAA,cAAA,CAAe,CACtB,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAYjK,EAAY,CACxB,CAAA,IAAA,CAAMA,EAAY,OAAQ,CAAA,QAC5B,CAAC,CACD,CAAA,UAAA,CAAY,CAACu/B,EAAkBC,CAAAA,CAAK,EAAGiC,CAAa,CACtD,CAAC,CACH,CAAA,EAEJ,CAEIT,CAAAA,EAAY,CAACS,CACfjC,GAAAA,CAAAA,CAAQ,CACNv1B,CAAS,CAAA,cAAA,CAAe,CACtB,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAYjK,EAAY,CACxB,CAAA,IAAA,CAAMA,EAAY,OAAQ,CAAA,QAC5B,CAAC,CACD,CAAA,UAAA,CAAY,CAACu/B,EAAAA,CAAkBC,CAAK,CAAC,CACvC,CAAC,CACH,CAAA,EAEJ,CAGA,GAAIxxB,CAAAA,EAAcA,EAAW,IAAQA,EAAAA,CAAAA,CAAW,QAAS,CACvD,IAAMzJ,EAAY0F,CAAS,CAAA,aAAA,CAAc,CACvC,OAAStR,CAAAA,CAAAA,CAAO,MAAO,CAAA,QAAA,CACnBs/B,GAAoB,CAAE,MAAA,CAAAxnB,CAAO,CAAC,CAAA,CAC9B,OACJ,WAAa,CAAA,IAAA,CACb,WAAY8uB,EAAkBC,CAAAA,CAAK,EACnC,IAAMxxB,CAAAA,CAAAA,CAAW,KACjB,QAAUgK,CAAAA,CAAAA,CAAM,qBACX/N,CAAS,CAAA,wBAAA,CAAyB,CACjC,UAAYjK,CAAAA,CAAAA,CAAY,EACxB,IAAMihC,CAAAA,CAAAA,EAAWjhC,EAAY,KAAM,CAAA,aAAA,CAAc,IACnD,CAAC,CAAA,CACD,MACN,CAAC,CAAA,CACD,OAAA4O,CAAK,CAAA,GAAA,CAAIrK,CAAS,CAEX,CAAA,EACT,CAEA,OAAOi7B,CACT,CAAA,CAEaruB,GAAoC,CAAC,CAAE,OAAAxY,CAAO,CAAA,GAAM,CAClDA,CAAO,CAAA,UAAA,CAAW,CAC7B,EAAImmC,CAAAA,EAAAA,CACJ,eAAgBnmC,CAAO,CAAA,MAAA,CAAO,KAC9B,IAAMA,CAAAA,CAAAA,CAAO,MACf,CAAC,CAAA,CAEI,MAAO,CAAA,CACV,MAAOqH,CAAY,CAAA,CAAA,CAAE,KACrB,MAAQ,CAAA,SAAA,CACR,KAAM,GACR,CAAC,EAEDrH,CAAO,CAAA,OAAA,CAAQ,YAAa,WAAa,CAAA,aAAA,CAAe,SAAWkb,CAAU,EAAA,CAC3E,IAAMmE,CAAe,CAAA,CACnB,wBAA0B,CAAA,IAAI,IAC9B,oBAAsB,CAAA,KAAA,CACtB,SAAUrf,CAAO,CAAA,MAAA,CAAO,YAAY,IACpC,CAAA,eAAA,CAAiBA,EAAO,MAAO,CAAA,WAAA,CAAY,IAC7C,CAEIkb,CAAAA,CAAAA,CAAM,OAAS,WACjBsrB,CAAAA,EAAAA,CAAyB,CACvB,SAAWtrB,CAAAA,CAAAA,CAAM,UACjB,MAAAlb,CAAAA,CAAAA,CACA,MAAAqf,CACF,CAAC,EACQnE,CAAM,CAAA,IAAA,GAAS,YACxByrB,EAAsB,CAAA,CACpB,KAAMzrB,CAAM,CAAA,IAAA,CACZ,OAAAlb,CACA,CAAA,MAAA,CAAQkb,EAAM,SAAU,CAAA,MAAA,CACxB,MAAAmE,CACF,CAAC,CACQnE,CAAAA,CAAAA,CAAM,OAAS,aACxByrB,CAAAA,EAAAA,CAAsB,CACpB,IAAMzrB,CAAAA,CAAAA,CAAM,KACZ,MAAAlb,CAAAA,CAAAA,CACA,OAAQkb,CAAM,CAAA,WAAA,CAAY,OAC1B,KAAAmE,CAAAA,CACF,CAAC,CACQnE,CAAAA,CAAAA,CAAM,OAAS,QACxByrB,EAAAA,EAAAA,CAAsB,CACpB,IAAA,CAAMzrB,EAAM,IACZ,CAAA,MAAA,CAAAlb,EACA,MAAQkb,CAAAA,CAAAA,CAAM,OACd,KAAAmE,CAAAA,CACF,CAAC,EAEL,CAAC,EACH,CC5kCO,CAAA,IAAM9H,GAAyC,CACpD,GAAA,CAAAgvB,GACA,MAAQ,CAAA,CACN,IAAM,CAAA,WAAA,CACN,SAAU,IACV,CAAA,eAAA,CAAiB,MACjB,QAAU,CAAA,KACZ,EACA,OAAA/tB,CAAAA,EAAAA,CACA,KAAM,SACN,CAAA,MAAA,CAAQ,UACR,aAAe,CAAA,CAACxY,EAAQgW,CAAY,GAAA,CAClChW,EAAO,MAAO,CAAA,WAAA,CAAcgW,EAAQ,aAAc,CAAA,CAChD,aAAc,CACZ,IAAA,CAAMhW,EAAO,MAAO,CAAA,IAAA,EAAQ,YAC5B,OAAS,CAAA,IAAA,CACT,KAAM,WACR,CAAA,CACA,QAAS,CACP,OAAA,CAAUqC,IAAa,CAAE,OAAA,CAAAA,CAAQ,CACjC,CAAA,CAAA,MAAA,CAAStC,CAAU,GAAA,CAAE,QAAS,IAAM,CAAA,IAAA,CAAAA,CAAK,CAC3C,CAAA,CAAA,CACA,MAAOC,CAAO,CAAA,MAAA,CAAO,WACvB,CAAC,CAAA,CAEDA,EAAO,MAAO,CAAA,QAAA,CAAWgW,EAAQ,aAAc,CAAA,CAC7C,aAAc,CACZ,IAAA,CAAMhW,CAAO,CAAA,MAAA,CAAO,MAAQ,WAC5B,CAAA,OAAA,CAAS,KACT,IAAM,CAAA,eACR,EACA,OAAS,CAAA,CACP,QAAUqC,CAAa,GAAA,CAAE,QAAAA,CAAQ,CAAA,CAAA,CACjC,OAAStC,CAAU,GAAA,CAAE,QAAS,IAAM,CAAA,IAAA,CAAAA,CAAK,CAAA,CAC3C,EACA,KAAOC,CAAAA,CAAAA,CAAO,OAAO,QACvB,CAAC,EAEDA,CAAO,CAAA,MAAA,CAAO,UAAYgW,CAAQ,CAAA,aAAA,CAAc,CAC9C,YAAc,CAAA,CACZ,KAAMhW,CAAO,CAAA,MAAA,CAAO,MAAQ,WAC5B,CAAA,OAAA,CAAS,KACT,IAAM,CAAA,mBACR,EACA,OAAS,CAAA,CACP,QAAUqC,CAAa,GAAA,CAAE,QAAAA,CAAQ,CAAA,CAAA,CACjC,OAAStC,CAAU,GAAA,CAAE,QAAS,IAAM,CAAA,IAAA,CAAAA,CAAK,CAC3C,CAAA,CAAA,CACA,MAAOC,CAAO,CAAA,MAAA,CAAO,SACvB,CAAC,EACH,CACA,CAAA,IAAA,CAAM,CAAC,WAAW,CACpB,ECvDO,IAAMqH,GAAc,CACzB,UAAA,CAAYiK,EAAS,UAAW,CAAA,CAAE,KAAM,YAAa,CAAC,CACxD,CAAA,CAEay3B,GAAQ,KCErB,CAAA,IAAMlS,GAAyB,CAAC,CAC9B,KAAA5gB,CACA,CAAA,SAAA,CAAAC,EACA,MAAAlW,CAAAA,CACF,IAIoC,CAClC,GAAM,CAAE,QAAAomC,CAAAA,CAAS,EAAIpmC,CAAO,CAAA,MAAA,CACtBqmC,CAAmBrmC,CAAAA,CAAAA,CAAO,QAAQ,IAAK,CAAA,CAAE,GAAI+oC,EAAM,CAAC,EAAG,UAAW,CAAA,CAEtE,KAAM,CAAc7yB,WAAAA,EAAAA,CAAAA,CAAU,EAAE,CAEhC,CAAA,CAAA,eAAA,CAAiB,OAAOkwB,CAAa,EAAA,QAAA,CAAWA,EAAS,IAAO,CAAA,MAAA,CAChE,UAAW,OACb,CAAC,EAED,GAAI,CAACC,EAAiB,IACpB,CAAA,OAGFpwB,EAAK,MAAO,CAAA,CACV,OAAQA,CAAK,CAAA,kBAAA,CAAmB,CAC9B,OAASjW,CAAAA,CAAAA,CAAO,QAChB,EAAI+oC,CAAAA,EACN,CAAC,CACD,CAAA,IAAA,CAAM1C,CAAiB,CAAA,IACzB,CAAC,CAED,CAAA,IAAMC,EAAoB,MAE1B,CAAA,OAAOh1B,EAAS,aAAc,CAAA,CAC5B,MAAO,IACP,CAAA,UAAA,CAAY,CACV,CACE,IAAA,CAAMg1B,CACR,CACF,CAAA,CACA,WAAY,CACVh1B,CAAAA,CAAS,eAAgB,CAAA,CACvB,WAAYA,CAAS,CAAA,eAAA,CAAgB,CACnC,UAAYA,CAAAA,CAAAA,CAAS,eAAe,CAClC,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAYA,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM+0B,CAAAA,CAAAA,CAAiB,IAAK,CAAC,CAAA,CAC/D,IAAMh/B,CAAAA,EAAAA,CAAY,UACpB,CAAC,CAAA,CACD,WAAY,CAACiK,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAMg1B,CAAkB,CAAC,CAAC,CAC/D,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAEMvP,CAAAA,EAAAA,CAA0B,CAAC,CAC/B,IAAA,CAAA9gB,EACA,SAAAC,CAAAA,CAAAA,CACA,OAAAlW,CACF,CAAA,GAIoC,CAClC,GAAM,CAAE,UAAAqe,CAAU,CAAA,CAAIre,EAAO,MACvBqmC,CAAAA,CAAAA,CAAmBrmC,EAAO,OAAQ,CAAA,IAAA,CAAK,CAAE,EAAA,CAAI+oC,EAAM,CAAC,CAAA,CAAG,WAAW,CAEtE,IAAA,CAAM,kBAAkB7yB,CAAU,CAAA,EAAE,GAEpC,eAAiB,CAAA,OAAOmI,GAAc,QAAWA,CAAAA,CAAAA,CAAU,KAAO,MAClE,CAAA,SAAA,CAAW,OACb,CAAC,CAAA,CAED,GAAI,CAACgoB,EAAiB,IACpB,CAAA,OAGFpwB,EAAK,MAAO,CAAA,CACV,OAAQA,CAAK,CAAA,kBAAA,CAAmB,CAC9B,OAASjW,CAAAA,CAAAA,CAAO,QAChB,EAAI+oC,CAAAA,EACN,CAAC,CACD,CAAA,IAAA,CAAM1C,EAAiB,IACzB,CAAC,CAED,CAAA,IAAMC,EAAoB,MAE1B,CAAA,OAAOh1B,EAAS,aAAc,CAAA,CAC5B,MAAO,IACP,CAAA,UAAA,CAAY,CACV,CACE,IAAA,CAAMg1B,CACR,CACF,CAAA,CACA,WAAY,CACVh1B,CAAAA,CAAS,gBAAgB,CACvB,UAAA,CAAYA,EAAS,eAAgB,CAAA,CACnC,WAAYA,CAAS,CAAA,cAAA,CAAe,CAClC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAYA,EAAS,UAAW,CAAA,CAAE,KAAM+0B,CAAiB,CAAA,IAAK,CAAC,CAC/D,CAAA,IAAA,CAAMh/B,GAAY,UACpB,CAAC,CACD,CAAA,UAAA,CAAY,CAACiK,CAAS,CAAA,UAAA,CAAW,CAAE,IAAMg1B,CAAAA,CAAkB,CAAC,CAAC,CAC/D,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,EAeaC,EAAW,CAAA,CACtB,sBAAA1P,CAAAA,EAAAA,CACA,wBAAAE,EACF,CAAA,CC/HO,IAAMiS,EAAuB,CAAA,CAAC,CACnC,SAAA9yB,CAAAA,CAAAA,CACA,OAAAlW,CACA,CAAA,KAAA,CAAAqf,CACF,CAIM,GAAA,CACJ,IAAMpJ,CAAOjW,CAAAA,CAAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,CAAE,EAAI+oC,CAAAA,EAAM,CAAC,CAE9C,CAAA,GAAI/oC,EAAO,MAAO,CAAA,QAAA,CAAS,QAAS,CAClC,IAAMymC,EAAqB,IAAI,GAAA,CAEzBC,EAA8B,CAClC,UAAA,CAAY,CACV,IAAM,CAAA,CACJ,KAAM,OACR,CAAA,CACA,KAAM,CACJ,IAAA,CAAM,OACR,CACA,CAAA,KAAA,CAAO,CACL,IAAM,CAAA,OACR,CACF,CACA,CAAA,IAAA,CAAM,QACR,CAEA,CAAA,GAAIxwB,EAAU,UAAY,CAAA,CAGxB,GAAIA,CAAU,CAAA,UAAA,CAAW,MAAQ,CAAA,CAC/B,IAAMpM,CAA8C,CAAA,GAC9CyB,CAA0B,CAAA,GAEhC,IAAW3J,IAAAA,CAAAA,IAAOsU,EAAU,UAAW,CAAA,MAAA,CAAQ,CAC7C,IAAMrO,CAAAA,CAAYqO,EAAU,UAAW,CAAA,MAAA,CAAOtU,CAAG,CACjDkI,CAAAA,CAAAA,CAAWjC,CAAU,CAAA,IAAI,EAAIA,CAAU,CAAA,MAAA,CACnCA,EAAU,QACZ0D,GAAAA,CAAAA,CAAS,KAAK1D,CAAU,CAAA,IAAI,EAC5B4+B,CAAmB,CAAA,GAAA,CAAI,SAAS,CAEpC,EAAA,CAEI,OAAO,IAAK38B,CAAAA,CAAU,EAAE,MAC1B48B,GAAAA,CAAAA,CAAW,UAAY,CAAA,OAAA,CAAU,CAC/B,UAAA58B,CAAAA,CAAAA,CACA,SAAAyB,CACA,CAAA,IAAA,CAAM,QACR,CAEJ,EAAA,CAEA,GAAI2K,CAAU,CAAA,UAAA,CAAW,KAAM,CAC7B,IAAMpM,EAA8C,EAAC,CAC/CyB,EAA0B,EAAC,CAEjC,QAAW3J,CAAOsU,IAAAA,CAAAA,CAAU,WAAW,IAAM,CAAA,CAC3C,IAAMrO,CAAYqO,CAAAA,CAAAA,CAAU,WAAW,IAAKtU,CAAAA,CAAG,EAC/CkI,CAAWjC,CAAAA,CAAAA,CAAU,IAAI,CAAIA,CAAAA,CAAAA,CAAU,OACnCA,CAAU,CAAA,QAAA,GACZ0D,EAAS,IAAK1D,CAAAA,CAAAA,CAAU,IAAI,CAAA,CAC5B4+B,EAAmB,GAAI,CAAA,MAAM,GAEjC,CAEI,MAAA,CAAO,KAAK38B,CAAU,CAAA,CAAE,SAC1B48B,CAAW,CAAA,UAAA,CAAY,KAAO,CAC5B,UAAA,CAAA58B,EACA,QAAAyB,CAAAA,CAAAA,CACA,KAAM,QACR,CAAA,EAEJ,CAEA,GAAI2K,EAAU,UAAW,CAAA,KAAA,CAAO,CAC9B,IAAMpM,CAAAA,CAA8C,EAC9CyB,CAAAA,CAAAA,CAA0B,EAEhC,CAAA,IAAA,IAAW3J,KAAOsU,CAAU,CAAA,UAAA,CAAW,MAAO,CAC5C,IAAMrO,EAAYqO,CAAU,CAAA,UAAA,CAAW,KAAMtU,CAAAA,CAAG,EAChDkI,CAAWjC,CAAAA,CAAAA,CAAU,IAAI,CAAIA,CAAAA,CAAAA,CAAU,OACnCA,CAAU,CAAA,QAAA,GACZ0D,EAAS,IAAK1D,CAAAA,CAAAA,CAAU,IAAI,CAC5B4+B,CAAAA,CAAAA,CAAmB,IAAI,OAAO,CAAA,EAElC,CAEI,MAAO,CAAA,IAAA,CAAK38B,CAAU,CAAA,CAAE,SAC1B48B,CAAW,CAAA,UAAA,CAAY,MAAQ,CAC7B,UAAA,CAAA58B,EACA,QAAAyB,CAAAA,CAAAA,CACA,KAAM,QACR,CAAA,EAEJ,CACF,CAEI2K,CAAAA,CAAU,OACZwwB,CAAW,CAAA,UAAA,CAAY,KAAOxwB,CAAU,CAAA,IAAA,CAAK,MAEzCA,CAAAA,CAAAA,CAAU,KAAK,QACjBuwB,EAAAA,CAAAA,CAAmB,IAAI,MAAM,CAAA,CAAA,CAIjCC,EAAW,QAAW,CAAA,CAAC,GAAGD,CAAkB,CAAA,CAE5C,IAAM/Q,CAAiBzf,CAAAA,CAAAA,CAAK,WAAW,CAErC,IAAA,CAAM,cAAcC,CAAU,CAAA,EAAE,CAChC,CAAA,CAAA,IAAA,CAAMlW,EAAO,MAAO,CAAA,QAAA,CAAS,KAC7B,MAAQ,CAAA,IAAA,CACR,gBAAiBA,CAAO,CAAA,MAAA,CAAO,SAAS,IACxC,CAAA,SAAA,CAAW,OACb,CAAC,CAAA,CACDipC,GAAkB,CAEhB,IAAA,CAAM,cAAc/yB,CAAU,CAAA,EAAE,CAChC,CAAA,CAAA,UAAA,CAAYwf,EACZ,MAAA11B,CAAAA,CAAAA,CACA,OAAQ0mC,CACR,CAAA,KAAA,CAAArnB,CACF,CAAC,EACH,CAEA,GAAIrf,CAAAA,CAAO,OAAO,SAAU,CAAA,OAAA,EACtBkW,EAAU,SAAW,CAAA,CACvB,GAAM,CAAE,QAAA,CAAAqI,CAAS,CAAIJ,CAAAA,EAAAA,CAAsBjI,CAAS,CAEpD,CAAA,GAAIqI,EAAU,CACZ,IAAM+X,EAAqBrgB,CAAK,CAAA,UAAA,CAAW,CAEzC,IAAM,CAAA,CAAA,eAAA,EAAkBC,EAAU,EAAE,CAAA,CAAA,CACpC,KAAMlW,CAAO,CAAA,MAAA,CAAO,UAAU,IAC9B,CAAA,MAAA,CAAQ,IACR,CAAA,eAAA,CAAiBA,EAAO,MAAO,CAAA,SAAA,CAAU,KACzC,SAAW,CAAA,OACb,CAAC,CACDipC,CAAAA,EAAAA,CAAkB,CAEhB,IAAM,CAAA,CAAA,eAAA,EAAkB/yB,EAAU,EAAE,CAAA,CAAA,CACpC,WAAYogB,CACZ,CAAA,MAAA,CAAAt2B,EACA,MAAQue,CAAAA,CAAAA,CACR,KAAAc,CAAAA,CACF,CAAC,EACH,CACF,CAEJ,CCpIA,CAAA,IAAM6pB,GAAgB53B,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,KAAM,CAAC,CACnD63B,CAAAA,EAAAA,CAAkB73B,EAAS,UAAW,CAAA,CAAE,KAAM,OAAQ,CAAC,CACvD83B,CAAAA,EAAAA,CAAmB93B,EAAS,UAAW,CAAA,CAAE,KAAM,QAAS,CAAC,EACzD+3B,EAAoB/3B,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,SAAU,CAAC,CAAA,CAC3Dg4B,GAAqBh4B,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,UAAW,CAAC,CAC7Di4B,CAAAA,EAAAA,CAAyBj4B,EAAS,UAAW,CAAA,CAAE,KAAM,cAAe,CAAC,EACrEk4B,EAAiBl4B,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,MAAO,CAAC,CAAA,CACrDm4B,GAAmBn4B,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,QAAS,CAAC,CAAA,CACzDo4B,GAAoBp4B,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,SAAU,CAAC,CAC3Dq4B,CAAAA,EAAAA,CAAgBr4B,EAAS,UAAW,CAAA,CAAE,KAAM,KAAM,CAAC,EACnDs4B,EAAgBt4B,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,KAAM,CAAC,EACnDu4B,EAAmBv4B,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,QAAS,CAAC,CAAA,CACzDw4B,GAAqBx4B,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,UAAW,CAAC,CAC7Dy4B,CAAAA,EAAAA,CAAqBz4B,EAAS,UAAW,CAAA,CAAE,IAAM,CAAA,UAAW,CAAC,CAC7D04B,CAAAA,EAAAA,CAAmB14B,EAAS,UAAW,CAAA,CAAE,KAAM,QAAS,CAAC,EACzD24B,EAAkB34B,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,OAAQ,CAAC,CAAA,CACvD44B,GAAkB54B,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,OAAQ,CAAC,CACvD64B,CAAAA,CAAAA,CAAc74B,EAAS,UAAW,CAAA,CAAE,KAAM,GAAI,CAAC,EAE/C84B,EAAuB,CAAA,CAAC,CAC5B,MAAApqC,CAAAA,CAAAA,CACA,OAAA8X,CACA,CAAA,KAAA,CAAAuH,CACF,CAIyB,GAAA,CACvB,IAAM1S,CAAAA,CAAe2E,EAAS,wBAAyB,CAAA,CACrD,WAAY64B,CACZ,CAAA,IAAA,CAAMhB,EACR,CAAC,CAAA,CAEGkB,EAEJ,GAAI,CAACvyB,EAAO,KACVuyB,CAAAA,CAAAA,CAAkB/4B,EAAS,cAAe,CAAA,CACxC,aAAA3E,CACA,CAAA,UAAA,CAAY,CACV29B,EAAAA,CAIC,CACH,CACF,CAAC,CACI,CAAA,KAAA,CACLxyB,EAAS4E,EAAkB,CAAA,CAAE,OAAA5E,CAAO,CAAC,EAGrC,IAAMivB,CAAAA,CAAkBjvB,CAAO,CAAA,KAAA,CAAO,IAAKxL,CACzC28B,EAAAA,EAAAA,CAAkB,CAChB,MAAAjpC,CAAAA,CAAAA,CACA,OAAQsM,CACR,CAAA,KAAA,CAAA+S,CACF,CAAC,CACH,EAEI0nB,CAAgB,CAAA,MAAA,GAAW,EAC7BsD,CAAkB/4B,CAAAA,CAAAA,CAAS,eAAe,CACxC,YAAA,CAAA3E,EACA,UAAYo6B,CAAAA,CACd,CAAC,CAEGjvB,EAAAA,CAAAA,CAAO,gBAOXuyB,CAAkB/4B,CAAAA,CAAAA,CAAS,eAAe,CACxC,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAY64B,CACZ,CAAA,IAAA,CAAMhB,EACR,CAAC,CAAA,CACD,WAAY,CACV73B,CAAAA,CAAS,cAAe,CAAA,CACtB,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAY64B,CAAAA,CAAAA,CACZ,KAAMD,EACR,CAAC,EACD,UAAY,CAAA,CACV54B,EAAS,sBAAuB,CAAA,CAC9B,SAAUy1B,CACZ,CAAC,CACH,CACF,CAAC,CACH,CACF,CAAC,CAEL,EAAA,CAEA,OAAIjvB,CAAO,CAAA,QAAA,GAAaA,EAAO,QAAYA,EAAAA,CAAAA,CAAO,WAAa,MAC7DuyB,CAAAA,CAAAA,CAAkB/4B,EAAS,cAAe,CAAA,CACxC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAY+4B,CAAAA,CAAAA,CACZ,IAAMZ,CAAAA,EACR,CAAC,CACD,CAAA,UAAA,CAAY,CAACn4B,CAAS,CAAA,iBAAA,CAAkB,CAAE,KAAOwG,CAAAA,CAAAA,CAAO,QAAS,CAAC,CAAC,CACrE,CAAC,CAAA,EAEGA,EAAO,QAAa,GAAA,MAAA,GACtBuyB,EAAkB/4B,CAAS,CAAA,cAAA,CAAe,CACxC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAY+4B,EACZ,IAAMT,CAAAA,EACR,CAAC,CACD,CAAA,UAAA,CAAY,CAACt4B,CAAS,CAAA,iBAAA,CAAkB,CAAE,KAAOwG,CAAAA,CAAAA,CAAO,QAAS,CAAC,CAAC,CACrE,CAAC,CAAA,CAAA,CAGCA,CAAO,CAAA,QAAA,GAAa,SACtBuyB,CAAkB/4B,CAAAA,CAAAA,CAAS,eAAe,CACxC,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAY+4B,CACZ,CAAA,IAAA,CAAMV,EACR,CAAC,CAAA,CACD,WAAY,CAACr4B,CAAAA,CAAS,kBAAkB,CAAE,KAAA,CAAOwG,CAAO,CAAA,QAAS,CAAC,CAAC,CACrE,CAAC,CAIEuyB,CAAAA,CAAAA,CAAAA,CACT,EAEME,EAAyB,CAAA,CAAC,CAC9B,MAAAzyB,CAAAA,CACF,IAGM,OAAOA,CAAAA,CAAO,OAAU,SACPxG,CAAAA,CAAAA,CAAS,eAAe,CACzC,YAAA,CAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAY64B,CAAAA,CAAAA,CACZ,KAAMT,EACR,CAAC,EACD,UAAY,CAAA,CAACp4B,EAAS,GAAI,CAAA,OAAA,CAAQwG,EAAO,KAAK,CAAC,CACjD,CAAC,CAAA,CAIgBxG,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAY64B,CAAAA,CAAAA,CACZ,KAAM74B,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,SAAU,CAAC,CAC/C,CAAC,CACH,CAAC,CAAA,CAIGk5B,GAAsB,CAAC,CAC3B,OAAA1yB,CACF,CAAA,GAEyB,CACvB,IAAMsvB,EAA2C,EAAC,CAE9Cj3B,EAAa,KAEjB,CAAA,IAAA,IAAW7D,KAAQwL,CAAO,CAAA,KAAA,EAAS,EAE7BxL,CAAAA,CAAAA,CAAK,OAAS,QAAY,EAAA,OAAOA,EAAK,KAAU,EAAA,QAAA,CAClD86B,EAAY,IACV91B,CAAAA,CAAAA,CAAS,aAAc,CAAA,CACrB,KAAMhF,CAAK,CAAA,KACb,CAAC,CACH,CAAA,CAAA,CACSA,EAAK,IAAS,GAAA,MAAA,EAAUA,EAAK,KAAU,GAAA,IAAA,IAChD6D,EAAa,IAIjB,CAAA,CAAA,GAAI,CAACi3B,CAAY,CAAA,MAAA,CACf,OAAOkD,EAAuB,CAI7B,CAGH,CAAA,IAAIG,EAAiBn5B,CAAS,CAAA,cAAA,CAAe,CAC3C,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAY64B,EACZ,IAAM74B,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,MAAO,CAAC,CAC5C,CAAC,CACD,CAAA,UAAA,CAAY,CACVA,CAAS,CAAA,sBAAA,CAAuB,CAC9B,QAAU81B,CAAAA,CAAAA,CACV,UAAW,KACb,CAAC,CACH,CACF,CAAC,EAED,OAAIj3B,CAAAA,GACFs6B,EAAiBn5B,CAAS,CAAA,cAAA,CAAe,CACvC,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAYm5B,CACZ,CAAA,IAAA,CAAMn5B,EAAS,UAAW,CAAA,CAAE,KAAM,UAAW,CAAC,CAChD,CAAC,CACH,CAAC,CAGIm5B,CAAAA,CAAAA,CACT,EAGMC,EAAwBnD,CAAAA,CAAAA,EACTj2B,CAAS,CAAA,cAAA,CAAe,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAY64B,EACZ,IAAM74B,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,OAAQ,CAAC,CAC7C,CAAC,CACH,CAAC,EAKGq5B,EAAuBpD,CAAAA,CAAAA,EACRj2B,CAAS,CAAA,cAAA,CAAe,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAY64B,EACZ,IAAM74B,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,MAAO,CAAC,CAC5C,CAAC,CACH,CAAC,EAIGm2B,EAAkB,CAAA,CAAC,CACvB,QAAAC,CAAAA,CAAAA,CACA,MAAA7lC,CACF,CAAA,GAGM,CACJ,IAAMiF,CAAAA,CAAawK,EAAS,iBAAkB,CAAA,CAAE,MAAAzP,CAAM,CAAC,EAEvD,OACE6lC,CAAAA,GACC,OAAO7lC,CAAU,EAAA,QAAA,EAChB,OAAOA,CAAU,EAAA,QAAA,EACjB,OAAOA,CAAAA,EAAU,UACjB,OAAOA,CAAAA,EAAU,WAEZyP,CAAS,CAAA,cAAA,CAAe,CAC7B,YAAc,CAAA,QAAA,CACd,WAAY,CAACxK,CAAU,CACzB,CAAC,CAAA,CAGIA,CACT,CAEM8jC,CAAAA,EAAAA,CAAwB,CAAC,CAC7B,MAAA,CAAA9yB,CACF,CAAA,GAEM,CACJ,IAAM4vB,CAAAA,CAAW5vB,EAAO,IAAS,GAAA,SAAA,EAAaA,EAAO,MAAW,GAAA,OAAA,CAEhE,GAAI,OAAOA,CAAAA,CAAO,OAAU,QAS1B,CAAA,OAPmBxG,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAA,CAAY64B,EACZ,IAAMT,CAAAA,EACR,CAAC,CACD,CAAA,UAAA,CAAY,CAACp4B,CAAS,CAAA,GAAA,CAAI,OAAOwG,CAAO,CAAA,KAAK,CAAC,CAChD,CAAC,EAIH,IAAI+yB,CAAAA,CAAmBv5B,EAAS,cAAe,CAAA,CAC7C,aAAco2B,CACVp2B,CAAAA,CAAAA,CAAS,yBAAyB,CAChC,UAAA,CAAYA,EAAS,wBAAyB,CAAA,CAC5C,WAAY64B,CACZ,CAAA,IAAA,CAAMf,EACR,CAAC,CAAA,CACD,KAAM93B,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,QAAS,CAAC,CAC9C,CAAC,CACDA,CAAAA,CAAAA,CAAS,yBAAyB,CAChC,UAAA,CAAY64B,EACZ,IAAM74B,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,QAAS,CAAC,CAC9C,CAAC,CACP,CAAC,EAED,OAAI,CAACo2B,GAAY5vB,CAAO,CAAA,IAAA,GAAS,SAC/B+yB,GAAAA,CAAAA,CAAmBv5B,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYu5B,CAAAA,CAAAA,CACZ,KAAMv5B,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,KAAM,CAAC,CAC3C,CAAC,CACH,CAAC,CAAA,CAAA,CAGCwG,CAAO,CAAA,gBAAA,GAAqB,OAC9B+yB,CAAmBv5B,CAAAA,CAAAA,CAAS,eAAe,CACzC,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAYu5B,CACZ,CAAA,IAAA,CAAMv5B,EAAS,UAAW,CAAA,CAAE,KAAM,IAAK,CAAC,CAC1C,CAAC,CAAA,CACD,WAAY,CACVm2B,EAAAA,CAAgB,CAAE,QAAAC,CAAAA,CAAAA,CAAU,MAAO5vB,CAAO,CAAA,gBAAiB,CAAC,CAC9D,CACF,CAAC,CACQA,CAAAA,CAAAA,CAAO,UAAY,MAC5B+yB,GAAAA,CAAAA,CAAmBv5B,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAA,CAAYu5B,EACZ,IAAMv5B,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,KAAM,CAAC,CAC3C,CAAC,CACD,CAAA,UAAA,CAAY,CAACm2B,EAAgB,CAAA,CAAE,SAAAC,CAAU,CAAA,KAAA,CAAO5vB,EAAO,OAAQ,CAAC,CAAC,CACnE,CAAC,CAGCA,CAAAA,CAAAA,CAAAA,CAAO,mBAAqB,MAC9B+yB,CAAAA,CAAAA,CAAmBv5B,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAYu5B,CAAAA,CAAAA,CACZ,KAAMv5B,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,IAAK,CAAC,CAC1C,CAAC,CACD,CAAA,UAAA,CAAY,CACVm2B,EAAgB,CAAA,CAAE,SAAAC,CAAU,CAAA,KAAA,CAAO5vB,EAAO,gBAAiB,CAAC,CAC9D,CACF,CAAC,EACQA,CAAO,CAAA,OAAA,GAAY,SAC5B+yB,CAAmBv5B,CAAAA,CAAAA,CAAS,eAAe,CACzC,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAYu5B,CACZ,CAAA,IAAA,CAAMv5B,EAAS,UAAW,CAAA,CAAE,KAAM,KAAM,CAAC,CAC3C,CAAC,CAAA,CACD,WAAY,CAACm2B,EAAAA,CAAgB,CAAE,QAAAC,CAAAA,CAAAA,CAAU,KAAO5vB,CAAAA,CAAAA,CAAO,OAAQ,CAAC,CAAC,CACnE,CAAC,CAAA,CAAA,CAGI+yB,CACT,CAEMC,CAAAA,EAAAA,CAAwB,CAAC,CAC7B,MAAA,CAAA9qC,EACA,MAAA8X,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAOK,CAEH,IAAMvV,CAAAA,CAA2C,EAAC,CAE5CyB,EAAWuM,CAAO,CAAA,QAAA,EAAY,EAEpC,CAAA,IAAA,IAAW/X,KAAQ+X,CAAO,CAAA,UAAA,CAAY,CACpC,IAAMrH,CAAAA,CAAWqH,EAAO,UAAW/X,CAAAA,CAAI,EACjC65B,CAAaruB,CAAAA,CAAAA,CAAS,SAASxL,CAAI,CAAA,CAEnCgrC,CAAqB9B,CAAAA,EAAAA,CAAkB,CAC3C,QAAU,CAAA,CAACrP,EACX,MAAA55B,CAAAA,CAAAA,CACA,OAAQyQ,CACR,CAAA,KAAA,CAAA4O,CACF,CAAC,CAAA,CAED1c,GAAa,SAAY,CAAA,CAAA,CACzB,IAAIklC,CACAllC,CAAAA,EAAAA,CAAa,KAAK5C,CAAI,CAAA,CAGxB8nC,EAAe9nC,CAAK,CAAA,UAAA,CAAW,GAAG,CAC9B0D,CAAAA,kBAAAA,CAAG,QAAQ,mBAAoB1D,CAAAA,CAAI,EACnC0D,kBAAG,CAAA,OAAA,CAAQ,qBAAqB1D,CAAI,CAAA,CAExC8nC,EAAe9nC,CAIbA,CAAAA,CAAAA,CAAAA,CAAK,MAAM,QAAQ,CAAA,EAAKA,EAAK,KAAM,CAAA,MAAM,CAAMA,EAAAA,CAAAA,CAAK,MAAM,KAAK,CAAA,GACjE,CAACA,CAAK,CAAA,UAAA,CAAW,GAAG,CACpB,EAAA,CAACA,EAAK,QAAS,CAAA,GAAG,IAElB8nC,CAAe,CAAA,CAAA,CAAA,EAAI9nC,CAAI,CAEzB+J,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAW,KACTwH,CAAS,CAAA,kBAAA,CAAmB,CAC1B,WAAA,CAAay5B,EACb,IAAMlD,CAAAA,CACR,CAAC,CACH,EACF,CAEA,GACE/vB,CAAAA,CAAO,sBACPA,CAAO,CAAA,oBAAA,CAAqB,OAAS,QACrC,EAAA,CAAC,OAAO,IAAKhO,CAAAA,CAAU,EAAE,MACzB,CAAA,CACA,IAAMkhC,CAAAA,CAAY/B,GAAkB,CAClC,MAAA,CAAAjpC,EACA,MAAQ8X,CAAAA,CAAAA,CAAO,qBACf,KAAAuH,CAAAA,CACF,CAAC,CAQD,CAAA,OAAO,CACL,OAAS,CAAA,cAAA,CACT,WATiB/N,CAAS,CAAA,cAAA,CAAe,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAY64B,EACZ,IAAMH,CAAAA,EACR,CAAC,CACD,CAAA,UAAA,CAAY,CAACgB,CAAS,CACxB,CAAC,CAID,CACF,CASA,OAAO,CACL,QAAS,cACT,CAAA,UAAA,CATiB15B,EAAS,cAAe,CAAA,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAY64B,EACZ,IAAMN,CAAAA,EACR,CAAC,CACD,CAAA,UAAA,CAAY,CAACpmC,kBAAG,CAAA,OAAA,CAAQ,8BAA8BqG,CAAY,CAAA,IAAI,CAAC,CACzE,CAAC,CAID,CACF,CAAA,CAEMmhC,EAAwB,CAAA,CAAC,CAC7B,MAAAjrC,CAAAA,CAAAA,CACA,OAAA8X,CACF,CAAA,GAGM,CACJ,GAAI,OAAOA,EAAO,KAAU,EAAA,QAAA,CAQ1B,OAPmBxG,CAAS,CAAA,cAAA,CAAe,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAY64B,CACZ,CAAA,IAAA,CAAMT,EACR,CAAC,CAAA,CACD,WAAY,CAACp4B,CAAAA,CAAS,IAAI,MAAOwG,CAAAA,CAAAA,CAAO,KAAK,CAAC,CAChD,CAAC,CAIH,CAAA,IAAIozB,EAAmB55B,CAAS,CAAA,cAAA,CAAe,CAC7C,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAY64B,EACZ,IAAM74B,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,QAAS,CAAC,CAC9C,CAAC,CACH,CAAC,EAED,GAAIwG,CAAAA,CAAO,OACT,OAAQA,CAAAA,CAAO,QACb,KAAK,WACHozB,CAAAA,CAAAA,CAAmB55B,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAY45B,CAAAA,CAAAA,CACZ,KAAM55B,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,UAAW,CAAC,CAChD,CAAC,EACD,UAAYtR,CAAAA,CAAAA,CAAO,MAAO,CAAA,KAAA,CAAM,OAC5B,CACEsR,CAAAA,CAAS,iBAAiB,CACxB,GAAA,CAAK,CACH,CACE,GAAA,CAAK,SACL,KAAO,CAAA,IACT,CACF,CACF,CAAC,CACH,CACA,CAAA,EACN,CAAC,CAAA,CACD,MACF,KAAK,OACL,KAAK,MAAA,CACH45B,EAAmB55B,CAAS,CAAA,cAAA,CAAe,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAY45B,EACZ,IAAM55B,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,IAAK,CAAC,CAC1C,CAAC,CACH,CAAC,EACD,MACF,KAAK,MACH45B,CAAmB55B,CAAAA,CAAAA,CAAS,eAAe,CACzC,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAY45B,CACZ,CAAA,IAAA,CAAM55B,EAAS,UAAW,CAAA,CAAE,KAAM,KAAM,CAAC,CAC3C,CAAC,CACH,CAAC,CAAA,CACD,MACF,KAAK,MAAA,CACL,KAAK,OACL,CAAA,KAAK,OACL,KAAK,MAAA,CACH45B,EAAmB55B,CAAS,CAAA,cAAA,CAAe,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAY45B,CACZ,CAAA,IAAA,CAAM55B,EAAS,UAAW,CAAA,CAAE,KAAMwG,CAAO,CAAA,MAAO,CAAC,CACnD,CAAC,CACH,CAAC,CAAA,CACD,KACJ,CAGF,OAAIA,EAAO,SAAcA,GAAAA,CAAAA,CAAO,WAAaA,CAAO,CAAA,SAAA,GAAc,MAChEozB,CAAAA,CAAAA,CAAmB55B,EAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAY45B,CAAAA,CAAAA,CACZ,KAAMzB,EACR,CAAC,EACD,UAAY,CAAA,CAACn4B,EAAS,iBAAkB,CAAA,CAAE,MAAOwG,CAAO,CAAA,SAAU,CAAC,CAAC,CACtE,CAAC,CAAA,EAEGA,EAAO,SAAc,GAAA,MAAA,GACvBozB,EAAmB55B,CAAS,CAAA,cAAA,CAAe,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAY45B,EACZ,IAAMtB,CAAAA,EACR,CAAC,CACD,CAAA,UAAA,CAAY,CAACt4B,CAAAA,CAAS,kBAAkB,CAAE,KAAA,CAAOwG,EAAO,SAAU,CAAC,CAAC,CACtE,CAAC,GAGCA,CAAO,CAAA,SAAA,GAAc,SACvBozB,CAAmB55B,CAAAA,CAAAA,CAAS,eAAe,CACzC,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,UAAY45B,CAAAA,CAAAA,CACZ,KAAMvB,EACR,CAAC,EACD,UAAY,CAAA,CAACr4B,EAAS,iBAAkB,CAAA,CAAE,MAAOwG,CAAO,CAAA,SAAU,CAAC,CAAC,CACtE,CAAC,CAIDA,CAAAA,CAAAA,CAAAA,CAAAA,CAAO,UACTozB,CAAmB55B,CAAAA,CAAAA,CAAS,cAAe,CAAA,CACzC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAY45B,CAAAA,CAAAA,CACZ,KAAMjB,EACR,CAAC,EACD,UAAY,CAAA,CAAC34B,EAAS,wBAAyB,CAAA,CAAE,KAAMwG,CAAO,CAAA,OAAQ,CAAC,CAAC,CAC1E,CAAC,CAGIozB,CAAAA,CAAAA,CACT,EAEMC,EAAuB,CAAA,CAAC,CAC5B,MAAAnrC,CAAAA,CAAAA,CACA,OAAA8X,CACA,CAAA,KAAA,CAAAuH,CACF,CAIM,GAAA,CACJ,GAAIvH,CAAO,CAAA,KAAA,EAAS,MAAM,OAAQA,CAAAA,CAAAA,CAAO,KAAK,CAAG,CAAA,CAC/C,IAAMkwB,CAAAA,CAAgBlwB,EAAO,KAAM,CAAA,GAAA,CAAKjW,GACtCyP,CAAS,CAAA,cAAA,CAAe,CACtB,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAY64B,EACZ,IAAMT,CAAAA,EACR,CAAC,CACD,CAAA,UAAA,CAAY,CAACp4B,CAAS,CAAA,iBAAA,CAAkB,CAAE,KAAA,CAAAzP,CAAM,CAAC,CAAC,CACpD,CAAC,CACH,EAYA,OAXmByP,CAAAA,CAAS,eAAe,CACzC,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAY64B,CACZ,CAAA,IAAA,CAAM74B,EAAS,UAAW,CAAA,CAAE,IAAM,CAAA,OAAQ,CAAC,CAC7C,CAAC,EACD,UAAY,CAAA,CACVA,EAAS,sBAAuB,CAAA,CAC9B,SAAU02B,CACZ,CAAC,CACH,CACF,CAAC,CAEH,CAEA,IAAMA,EAAsC,EAAC,CAE7C,QAAW17B,CAAQwL,IAAAA,CAAAA,CAAO,OAAS,EAAC,CAClCkwB,EAAc,IACZiB,CAAAA,EAAAA,CAAkB,CAChB,MAAAjpC,CAAAA,CAAAA,CACA,OAAQsM,CACR,CAAA,KAAA,CAAA+S,CACF,CAAC,CACH,EAcF,OAXmB/N,CAAAA,CAAS,eAAe,CACzC,YAAA,CAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAY64B,CAAAA,CAAAA,CACZ,KAAM74B,CAAS,CAAA,UAAA,CAAW,CAAE,IAAM,CAAA,OAAQ,CAAC,CAC7C,CAAC,EACD,UAAY,CAAA,CACVA,EAAS,sBAAuB,CAAA,CAC9B,SAAU02B,CACZ,CAAC,CACH,CACF,CAAC,CAEH,CAAA,CAGMoD,GAA4B7D,CAGbj2B,EAAAA,CAAAA,CAAS,eAAe,CACzC,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAY64B,CACZ,CAAA,IAAA,CAAM74B,EAAS,UAAW,CAAA,CAAE,KAAM,WAAY,CAAC,CACjD,CAAC,CACH,CAAC,CAAA,CAKGg5B,GAA0B/C,CAGXj2B,EAAAA,CAAAA,CAAS,eAAe,CACzC,YAAA,CAAcA,EAAS,wBAAyB,CAAA,CAC9C,WAAY64B,CACZ,CAAA,IAAA,CAAM74B,EAAS,UAAW,CAAA,CAAE,KAAM,SAAU,CAAC,CAC/C,CAAC,CACH,CAAC,CAKG+5B,CAAAA,EAAAA,CAAuB9D,GACRj2B,CAAS,CAAA,cAAA,CAAe,CACzC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAY64B,EACZ,IAAM74B,CAAAA,CAAAA,CAAS,WAAW,CAAE,IAAA,CAAM,MAAO,CAAC,CAC5C,CAAC,CACH,CAAC,CAIGg6B,CAAAA,EAAAA,CAAwB,CAAC,CAC7B,MAAA,CAAAtrC,EACA,MAAA8X,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAOK,CACH,OAAQvH,CAAAA,CAAO,MACb,KAAK,QACH,OAAO,CACL,UAAYsyB,CAAAA,EAAAA,CAAqB,CAC/B,MAAApqC,CAAAA,CAAAA,CACA,OAAQ8X,CACR,CAAA,KAAA,CAAAuH,CACF,CAAC,CACH,EACF,KAAK,SAAA,CACH,OAAO,CACL,UAAA,CAAYkrB,GAAuB,CACjC,MAAA,CAAQzyB,CACV,CAAC,CACH,CACF,CAAA,KAAK,OACH,OAAO,CACL,WAAY0yB,EAAoB,CAAA,CAC9B,OAAQ1yB,CACV,CAAC,CACH,CACF,CAAA,KAAK,UACL,KAAK,QAAA,CACH,OAAO,CACL,UAAA,CAAY8yB,GAAsB,CAChC,MAAA,CAAQ9yB,CACV,CAAC,CACH,EACF,KAAK,OAAA,CACH,OAAO,CACL,UAAA,CAAY4yB,GAEX,CACH,EACF,KAAK,MAAA,CACH,OAAO,CACL,UAAA,CAAYC,GAEX,CACH,CACF,CAAA,KAAK,SACH,OAAOG,EAAAA,CAAsB,CAC3B,MAAA9qC,CAAAA,CAAAA,CACA,OAAQ8X,CACR,CAAA,KAAA,CAAAuH,CACF,CAAC,CAAA,CACH,KAAK,QACH,CAAA,OAAO,CACL,UAAY4rB,CAAAA,EAAAA,CAAsB,CAChC,MAAA,CAAAjrC,EACA,MAAQ8X,CAAAA,CACV,CAAC,CACH,CAAA,CACF,KAAK,OACH,CAAA,OAAO,CACL,UAAYqzB,CAAAA,EAAAA,CAAqB,CAC/B,MAAAnrC,CAAAA,CAAAA,CACA,OAAQ8X,CACR,CAAA,KAAA,CAAAuH,CACF,CAAC,CACH,CACF,CAAA,KAAK,YACH,OAAO,CACL,WAAY+rB,EAAyB,CAEpC,CACH,CACF,CAAA,KAAK,UACH,OAAO,CACL,WAAYd,EAAuB,CAElC,CACH,CACF,CAAA,KAAK,OACH,OAAO,CACL,WAAYe,EAAoB,CAE/B,CACH,CACJ,CACF,EAEapC,EAAoB,CAAA,CAAC,CAChC,IAAAl2B,CAAAA,CAAAA,CACA,WAAYq1B,CACZ,CAAA,QAAA,CAAAC,CACA,CAAA,MAAA,CAAAroC,EACA,MAAA8X,CAAAA,CAAAA,CACA,MAAAuH,CACF,CAAA,GAeqB,CACnB,IAAMpJ,CAAAA,CAAOjW,EAAO,OAAQ,CAAA,IAAA,CAAK,CAAE,EAAI+oC,CAAAA,EAAM,CAAC,CAE1CT,CAAAA,CAAAA,CACAxhC,EACAuO,CAA6D+yB,CAAAA,CAAAA,CAgBjE,GAdIr1B,CAAAA,GACFsM,EAAM,wBAAyB,CAAA,GAAA,CAAItM,CAAI,CAElCsC,CAAAA,CAAAA,GACHA,EAAaY,CAAK,CAAA,UAAA,CAAW,CAC3B,IAAAlD,CAAAA,CAAAA,CACA,KAAMsM,CAAM,CAAA,QAAA,CACZ,OAAQ,IACR,CAAA,eAAA,CAAiBA,EAAM,eACvB,CAAA,SAAA,CAAW,OACb,CAAC,IAIDvH,CAAO,CAAA,IAAA,CAAM,CACf,IAAMywB,CAAAA,CAAsBlpB,EAAM,wBAAyB,CAAA,GAAA,CAAIvH,EAAO,IAAI,CAAA,CAKtE0wB,EAAgBvyB,CAAK,CAAA,UAAA,CAAW,CAClC,IAAM6B,CAAAA,CAAAA,CAAO,KACb,IAAMuH,CAAAA,CAAAA,CAAM,SACZ,eAAiBA,CAAAA,CAAAA,CAAM,gBACvB,SAAW,CAAA,OACb,CAAC,CAED,CAAA,GAAI,CAACmpB,CAAc,CAAA,IAAA,CAAM,CACvB,IAAMryB,CAAAA,CAAMnW,EAAO,OAAQ,CAAA,YAAA,CAA8B8X,EAAO,IAAI,CAAA,CACpEhR,EAAamiC,EAAkB,CAAA,CAC7B,IAAMnxB,CAAAA,CAAAA,CAAO,KACb,MAAA9X,CAAAA,CAAAA,CACA,OAAQmW,CACR,CAAA,KAAA,CAAAkJ,CACF,CAAC,CAAA,CAEDmpB,EAAgBvyB,CAAK,CAAA,UAAA,CAAW,CAC9B,IAAM6B,CAAAA,CAAAA,CAAO,KACb,IAAMuH,CAAAA,CAAAA,CAAM,SACZ,eAAiBA,CAAAA,CAAAA,CAAM,eACvB,CAAA,SAAA,CAAW,OACb,CAAC,EACH,CAGA,GAAImpB,CAAAA,CAAc,KAAM,CACtB,IAAM3yB,EAAgBvE,CAAS,CAAA,UAAA,CAAW,CAAE,IAAMk3B,CAAAA,CAAAA,CAAc,IAAK,CAAC,CAAA,CAClED,GACFzhC,CAAawK,CAAAA,CAAAA,CAAS,cAAe,CAAA,CACnC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAY64B,CAAAA,CAAAA,CACZ,KAAMX,EACR,CAAC,EACD,UAAY,CAAA,CACVl4B,EAAS,aAAc,CAAA,CACrB,WAAY,CACVA,CAAAA,CAAS,gBAAgB,CACvB,UAAA,CAAYuE,CACd,CAAC,CACH,CACF,CAAC,CACH,CACF,CAAC,CAAA,CACDwJ,EAAM,oBAAuB,CAAA,IAAA,EAE7BvY,EAAa+O,EAEjB,CACF,SAAWiC,CAAO,CAAA,IAAA,CAAM,CACtB,IAAMkzB,CAAAA,CAAYM,GAAsB,CAAE,MAAA,CAAAtrC,CAAQ,CAAA,MAAA,CAAA8X,EAAQ,KAAAuH,CAAAA,CAAM,CAAC,CACjEipB,CAAAA,CAAAA,CAAU0C,EAAU,OACpBlkC,CAAAA,CAAAA,CAAakkC,EAAU,UAEnBhrC,CAAAA,CAAAA,CAAO,OAAO,QAAY8X,EAAAA,CAAAA,CAAO,cACnChR,CAAawK,CAAAA,CAAAA,CAAS,eAAe,CACnC,YAAA,CAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAAxK,CAAAA,CAAAA,CACA,KAAMwiC,EACR,CAAC,EACD,UAAY,CAAA,CAACh4B,EAAS,aAAc,CAAA,CAAE,KAAMwG,CAAO,CAAA,WAAY,CAAC,CAAC,CACnE,CAAC,CAEL,EAAA,CAAA,KAAA,GAAWA,CAAO,CAAA,KAAA,CAGhB,GAFAA,CAAS4E,CAAAA,EAAAA,CAAkB,CAAE,MAAA5E,CAAAA,CAAO,CAAC,CAEjCA,CAAAA,CAAAA,CAAO,MAAO,CAChB,IAAMuoB,EAAYvoB,CAAO,CAAA,KAAA,CAAM,IAAKxL,CAClC28B,EAAAA,EAAAA,CAAkB,CAChB,MAAAjpC,CAAAA,CAAAA,CACA,OAAQsM,CACR,CAAA,KAAA,CAAA+S,CACF,CAAC,CACH,EAEA,GAAIvH,CAAAA,CAAO,kBAAoB,KAAO,CAAA,CACpC,IAAMyzB,CAAczzB,CAAAA,CAAAA,CAAO,MAAM,CAAC,CAAA,CAKhCyzB,EAAY,eAAoB,GAAA,IAAA,EAC/BA,EAAY,IAAQA,EAAAA,CAAAA,CAAY,IAAS,GAAA,QAAA,CAE1CzkC,EAAawK,CAAS,CAAA,cAAA,CAAe,CACnC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAY64B,EACZ,IAAMZ,CAAAA,EACR,CAAC,CACD,CAAA,UAAA,CAAYlJ,CACd,CAAC,CAAA,EAEDv5B,EAAau5B,CAAU,CAAA,CAAC,CACxBA,CAAAA,CAAAA,CAAU,MAAM,CAAC,CAAA,CAAE,QAAS/zB,CAAS,EAAA,CACnCxF,EAAawK,CAAS,CAAA,cAAA,CAAe,CACnC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAYxK,EACZ,IAAMoiC,CAAAA,EACR,CAAC,CACD,CAAA,UAAA,CAAY,CAAC58B,CAAI,CACnB,CAAC,EACH,CAAC,CAEL,EAAA,CAAA,KACExF,EAAawK,CAAS,CAAA,cAAA,CAAe,CACnC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAY64B,EACZ,IAAMD,CAAAA,EACR,CAAC,CACD,CAAA,UAAA,CAAY,CACV54B,CAAS,CAAA,sBAAA,CAAuB,CAC9B,QAAU+uB,CAAAA,CACZ,CAAC,CACH,CACF,CAAC,EAEL,CAAA,KACEv5B,EAAamiC,EAAkB,CAAA,CAC7B,OAAAjpC,CACA,CAAA,MAAA,CAAA8X,EACA,KAAAuH,CAAAA,CACF,CAAC,CAEE,CAAA,KAAA,CAEL,IAAM2rB,CAAAA,CAAYM,GAAsB,CACtC,MAAA,CAAAtrC,EACA,MAAQ,CAAA,CACN,KAAM,SACR,CAAA,CACA,MAAAqf,CACF,CAAC,EACDipB,CAAU0C,CAAAA,CAAAA,CAAU,QACpBlkC,CAAakkC,CAAAA,CAAAA,CAAU,WACzB,CAMA,GAJIj4B,CACFsM,EAAAA,CAAAA,CAAM,yBAAyB,MAAOtM,CAAAA,CAAI,EAGxCjM,CACEgR,GAAAA,CAAAA,CAAO,cAAgB,MACzBhR,GAAAA,CAAAA,CAAawK,EAAS,cAAe,CAAA,CACnC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAAxK,CAAAA,CAAAA,CACA,KAAMijC,EACR,CAAC,CACH,CAAC,GAGC1B,CACFvhC,GAAAA,CAAAA,CAAawK,EAAS,cAAe,CAAA,CACnC,aAAcA,CAAS,CAAA,wBAAA,CAAyB,CAC9C,UAAAxK,CAAAA,CAAAA,CACA,KAAMgjC,EACR,CAAC,CACH,CAAC,CAAA,CAAA,CAGChyB,EAAO,OAAY,GAAA,MAAA,CAAA,CAAW,CAChC,IAAM4vB,CAAAA,CAAW5vB,EAAO,IAAS,GAAA,SAAA,EAAaA,EAAO,MAAW,GAAA,OAAA,CAC1DgxB,EAAgBrB,EAAgB,CAAA,CACpC,SAAAC,CACA,CAAA,KAAA,CAAO5vB,EAAO,OAChB,CAAC,EACGgxB,CACFhiC,GAAAA,CAAAA,CAAawK,EAAS,cAAe,CAAA,CACnC,YAAcA,CAAAA,CAAAA,CAAS,yBAAyB,CAC9C,UAAA,CAAAxK,EACA,IAAMuiC,CAAAA,EACR,CAAC,CACD,CAAA,UAAA,CAAY,CAACP,CAAa,CAC5B,CAAC,CAEL,EAAA,CAIF,GAAIzzB,CAAcA,EAAAA,CAAAA,CAAW,MAAQA,CAAW,CAAA,OAAA,CAAS,CACvD,IAAMzJ,EAAY0F,CAAS,CAAA,aAAA,CAAc,CACvC,OAAStR,CAAAA,CAAAA,CAAO,OAAO,QACnBs/B,CAAAA,EAAAA,CAAoB,CAAE,MAAAxnB,CAAAA,CAAO,CAAC,CAC9B,CAAA,MAAA,CACJ,YAAa,IACb,CAAA,UAAA,CAAYhR,EACZ,IAAMuO,CAAAA,CAAAA,CAAW,IACjB,CAAA,QAAA,CAAUgK,EAAM,oBACX/N,CAAAA,CAAAA,CAAS,yBAAyB,CACjC,UAAA,CAAY64B,EACZ,IAAM7B,CAAAA,CAAAA,EAAW,YACnB,CAAC,CAAA,CACD,MACN,CAAC,CAAA,CACDryB,EAAK,GAAIrK,CAAAA,CAAS,EACpB,CAEA,OAAO9E,CACT,CAEa0R,CAAAA,EAAAA,CAAgC,CAAC,CAAE,MAAA,CAAAxY,CAAO,CAAM,GAAA,CAC9CA,EAAO,UAAW,CAAA,CAC7B,GAAI+oC,EACJ,CAAA,cAAA,CAAgB/oC,EAAO,MAAO,CAAA,IAAA,CAC9B,KAAMA,CAAO,CAAA,MACf,CAAC,CAEI,CAAA,MAAA,CAAO,CACV,MAAA,CAAQ,MACR,IAAM,CAAA,GACR,CAAC,CAEDA,CAAAA,CAAAA,CAAO,QAAQ,WAAa,CAAA,WAAA,CAAa,cAAe,QAAWkb,CAAAA,CAAAA,EAAU,CAC3E,IAAMmE,CAAAA,CAAe,CACnB,wBAA0B,CAAA,IAAI,IAC9B,oBAAsB,CAAA,KAAA,CACtB,QAAUrf,CAAAA,CAAAA,CAAO,OAAO,WAAY,CAAA,IAAA,CACpC,gBAAiBA,CAAO,CAAA,MAAA,CAAO,YAAY,IAC7C,CAAA,CAEIkb,EAAM,IAAS,GAAA,WAAA,CACjB8tB,GAAqB,CAAE,SAAA,CAAW9tB,EAAM,SAAW,CAAA,MAAA,CAAAlb,EAAQ,KAAAqf,CAAAA,CAAM,CAAC,CAAA,CACzDnE,EAAM,IAAS,GAAA,WAAA,CACxB+tB,GAAkB,CAChB,IAAA,CAAM/tB,EAAM,IACZ,CAAA,MAAA,CAAAlb,EACA,MAAQkb,CAAAA,CAAAA,CAAM,UAAU,MACxB,CAAA,KAAA,CAAAmE,CACF,CAAC,CAAA,CACQnE,EAAM,IAAS,GAAA,aAAA,CACxB+tB,GAAkB,CAChB,IAAA,CAAM/tB,EAAM,IACZ,CAAA,MAAA,CAAAlb,EACA,MAAQkb,CAAAA,CAAAA,CAAM,YAAY,MAC1B,CAAA,KAAA,CAAAmE,CACF,CAAC,CAAA,CACQnE,EAAM,IAAS,GAAA,QAAA,EACxB+tB,GAAkB,CAChB,IAAA,CAAM/tB,EAAM,IACZ,CAAA,MAAA,CAAAlb,CACA,CAAA,MAAA,CAAQkb,EAAM,MACd,CAAA,KAAA,CAAAmE,CACF,CAAC,EAEL,CAAC,EACH,CAAA,KC9hCa9H,EAAqC,CAAA,CAChD,IAAAgvB,EACA,CAAA,MAAA,CAAQ,CACN,IAAM,CAAA,WAAA,CACN,SAAU,IACV,CAAA,eAAA,CAAiB,KACjB,CAAA,QAAA,CAAU,KACZ,CACA,CAAA,OAAA,CAAA/tB,GACA,IAAM,CAAA,KAAA,CACN,OAAQ,KACR,CAAA,aAAA,CAAe,CAACxY,CAAQgW,CAAAA,CAAAA,GAAY,CAClChW,CAAO,CAAA,MAAA,CAAO,MAAQgW,CAAQ,CAAA,aAAA,CAAc,CAC1C,YAAc,CAAA,CACZ,MAAQ,CAAA,KACV,EACA,KAAOhW,CAAAA,CAAAA,CAAO,OAAO,KACvB,CAAC,EAEDA,CAAO,CAAA,MAAA,CAAO,YAAcgW,CAAQ,CAAA,aAAA,CAAc,CAChD,YAAc,CAAA,CACZ,KAAMhW,CAAO,CAAA,MAAA,CAAO,MAAQ,WAC5B,CAAA,OAAA,CAAS,KACT,IAAM,CAAA,WACR,EACA,OAAS,CAAA,CACP,QAAUqC,CAAa,GAAA,CAAE,QAAAA,CAAQ,CAAA,CAAA,CACjC,OAAStC,CAAU,GAAA,CAAE,QAAS,IAAM,CAAA,IAAA,CAAAA,CAAK,CAC3C,CAAA,CAAA,CACA,MAAOC,CAAO,CAAA,MAAA,CAAO,WACvB,CAAC,EAEDA,CAAO,CAAA,MAAA,CAAO,SAAWgW,CAAQ,CAAA,aAAA,CAAc,CAC7C,YAAc,CAAA,CACZ,KAAMhW,CAAO,CAAA,MAAA,CAAO,MAAQ,WAC5B,CAAA,OAAA,CAAS,KACT,IAAM,CAAA,eACR,EACA,OAAS,CAAA,CACP,OAAUqC,CAAAA,CAAAA,GAAa,CAAE,OAAAA,CAAAA,CAAQ,GACjC,MAAStC,CAAAA,CAAAA,GAAU,CAAE,OAAS,CAAA,IAAA,CAAM,KAAAA,CAAK,CAAA,CAC3C,EACA,KAAOC,CAAAA,CAAAA,CAAO,OAAO,QACvB,CAAC,EAEDA,CAAO,CAAA,MAAA,CAAO,SAAYgW,CAAAA,CAAAA,CAAQ,cAAc,CAC9C,YAAA,CAAc,CACZ,IAAMhW,CAAAA,CAAAA,CAAO,OAAO,IAAQ,EAAA,WAAA,CAC5B,QAAS,IACT,CAAA,IAAA,CAAM,mBACR,CACA,CAAA,OAAA,CAAS,CACP,OAAUqC,CAAAA,CAAAA,GAAa,CAAE,OAAAA,CAAAA,CAAQ,GACjC,MAAStC,CAAAA,CAAAA,GAAU,CAAE,OAAS,CAAA,IAAA,CAAM,KAAAA,CAAK,CAAA,CAC3C,EACA,KAAOC,CAAAA,CAAAA,CAAO,OAAO,SACvB,CAAC,EACH,CACA,CAAA,IAAA,CAAM,CAAC,WAAW,CACpB,ECIO,IAAMwrC,EAET,CAAA,CACF,wBAAyBj0B,EACzB,CAAA,uBAAA,CAAyBA,GACzB,sBAAwBA,CAAAA,EAAAA,CACxB,uBAAwBA,EACxB,CAAA,kBAAA,CAAoBA,GACpB,cAAgBA,CAAAA,EAAAA,CAChB,wBAAyBA,EACzB,CAAA,qBAAA,CAAuBA,GACvB,sCAAwCA,CAAAA,EAAAA,CACxC,uBAAyBA,CAAAA,EAAAA,CACzB,wBAAyBA,EACzB,CAAA,wBAAA,CAA0BA,GAC1B,qBAAuBA,CAAAA,EAAAA,CACvB,QAAAA,EACA,CAAA,gBAAA,CAAkBA,GAClB,cAAgBA,CAAAA,EAAAA,CAChB,eAAgBA,EAChB,CAAA,aAAA,CAAeA,GACf,YAAcA,CAAAA,EAAAA,CACd,QAAAA,EACA,CAAA,GAAA,CAAAA,EACF,CAAA,CChFO,IAAMk0B,EAAiB,CAAA,CAC5B,sBACA,cACF,CAAA,CAEMC,GAAmB,CAAC,CACxB,YAAAC,CACA,CAAA,iBAAA,CAAAC,CACF,CAG+C,GAAA,CAC7C,IAAMC,CAA2B,CAAA,IAAI,IAC/BC,CAAc,CAAA,IAAI,IAClBC,CAA6B,CAAA,GAE7BC,CAAOjsC,CAAAA,CAAAA,EAAwB,CACnC,GAAI8rC,CAAAA,CAAyB,IAAI9rC,CAAI,CAAA,CACnC,MAAM,IAAI,KAAA,CAAM,mCAAmCA,CAAI,CAAA,CAAA,CAAG,EAG5D,GAAI+rC,CAAAA,CAAY,IAAI/rC,CAAI,CAAA,CACtB,OAGF8rC,CAAAA,CAAyB,IAAI9rC,CAAI,CAAA,CAEjC,IAAMksC,CAAgBT,CAAAA,EAAAA,CAAqBzrC,CAAmB,CACxDmsC,CAAAA,CAAAA,CAAaN,EAAkB7rC,CAAmB,CAAA,CAExD,GAAI,CAACksC,CAAAA,EAAiB,CAACC,CACrB,CAAA,MAAM,IAAI,KACR,CAAA,CAAA,2BAAA,EAA8BnsC,CAAI,CAAA,2DAAA,CACpC,EAGF,IAAMC,CAAAA,CAAS,CACb,GAAGisC,CAAAA,CACH,GAAGC,CACH,CAAA,MAAA,CAAQ,CACN,GAAGD,CAAAA,EAAe,OAClB,GAAGC,CAAAA,EAAY,MACjB,CACA,CAAA,YAAA,CAAc,IAAI,GAAI,CAAA,CACpB,GAAID,CAAAA,EAAe,cAAgB,EAAC,CACpC,GAAIC,CAAY,EAAA,YAAA,EAAgB,EAClC,CAAC,CACH,CAEA,CAAA,GAAIlsC,EAAO,aAAe,CAAA,CACxB,IAAMgW,CAAyB,CAAA,CAC7B,YAAa,CAACmL,CAAAA,CAAK7F,CAAQ,CAAA,KAAO,CAChC,GAAM,CAAE,aAAA2wB,CAAAA,CAAAA,CAAe,aAAAE,CAAa,CAAA,CAAI7wB,EAExC,IAAW4wB,IAAAA,CAAAA,IAAcP,EAAa,CACpC,IAAMp0B,EACJi0B,EAAqBU,CAAAA,CAAyB,GAC9CN,CAAkBM,CAAAA,CAAyB,CAC7C,CAAA,GACE30B,GACAA,CAAc,CAAA,IAAA,EAAM,SAAS4J,CAAG,CAAA,EAChC+qB,IAAensC,CAEf,CAAA,OAAOmsC,CAEX,CAEA,GAAID,EAAe,CACjB,IAAM10B,EACJi0B,EAAqBS,CAAAA,CAA4B,GACjDL,CAAkBK,CAAAA,CAA4B,CAChD,CAAA,GACE10B,GACAA,CAAc,CAAA,IAAA,EAAM,SAAS4J,CAAG,CAAA,EAChC8qB,IAAkBlsC,CAElB,CAAA,OAAOksC,CAEX,CAEA,MAAM,IAAI,KACRE,CAAAA,CAAAA,EACE,wCAAwChrB,CAAG,CAAA,OAAA,CAC/C,CACF,CACA,CAAA,aAAA,CAAArf,EACF,CAAA,CAEA9B,EAAO,aAAcA,CAAAA,CAAAA,CAAQgW,CAAO,EACtC,CAEA,QAAWoL,CAAcphB,IAAAA,CAAAA,CAAO,aAC9BgsC,CAAI5qB,CAAAA,CAAU,EAGhByqB,CAAyB,CAAA,MAAA,CAAO9rC,CAAI,CACpC+rC,CAAAA,CAAAA,CAAY,IAAI/rC,CAAI,CAAA,CAGpBgsC,EAAQhsC,CAAI,CAAA,CAAIC,EAClB,CAEA,CAAA,IAAA,IAAWD,KAAQ4rC,CACjBK,CAAAA,CAAAA,CAAIjsC,CAAI,CAGV,CAAA,OAAO,CACL,WAAa,CAAA,KAAA,CAAM,KAAK+rC,CAAW,CAAA,CACnC,QAAAC,CACF,CACF,EAEMK,EAAkBpsC,CAAAA,CAAAA,EAClB,OAAOA,CAAAA,EAAW,SACbA,CAAO,CAAA,UAAA,CAAW,iBAAiB,CAAKA,EAAAA,CAAAA,CAAO,WAAW,SAAS,CAAA,CAI1EA,EAAO,IAAK,CAAA,UAAA,CAAW,iBAAiB,CACxCA,EAAAA,CAAAA,CAAO,KAAK,UAAW,CAAA,SAAS,GAE/BA,CAAO,CAAA,IAAA,EAAQA,CAAO,CAAA,IAAA,CAAK,SAAS,QAAQ,CAAA,CAIpCqsC,GACX1rC,CAC4C,EAAA,CAC5C,IAAMirC,CAAuC,CAAA,GAEzCU,CAAwCb,CAAAA,EAAAA,CAExC9qC,EAAW,OACbA,GAAAA,CAAAA,CAAW,QAAUA,CAAW,CAAA,OAAA,CAAQ,OACrCX,CACE,EAAA,OAAOA,CAAW,EAAA,QAAA,EAAYA,GAC9B,OAAOA,CAAAA,EAAW,UAAYA,CAAO,CAAA,IAC1C,EAEEW,CAAW,CAAA,OAAA,CAAQ,SAAW,CAC9ByrC,EAAAA,EAAAA,CAAezrC,EAAW,OAAQ,CAAA,CAAC,CAAE,CAErC2rC,CAAAA,CAAAA,CAAiB,CAAC,GAAGb,EAAAA,CAAgB,GAAG9qC,CAAW,CAAA,OAAO,EAE1D2rC,CAAiB3rC,CAAAA,CAAAA,CAAW,SAIhC,IAAMgrC,CAAAA,CAAcW,EACjB,GAAKtsC,CAAAA,CAAAA,EAAW,CACf,GAAI,OAAOA,GAAW,QACpB,CAAA,OAAOA,EAGT,IAAMmb,CAAAA,CAAanb,EAAO,IAE1B,CAAA,OAAImb,CAEEnb,GAAAA,CAAAA,CAAO,QAET4rC,CAAkBzwB,CAAAA,CAAU,EAAInb,CAGhC4rC,EAAAA,CAAAA,CAAkBzwB,CAAU,CAAI,CAAA,CAC9B,OAAQ,CAAE,GAAGnb,CAAO,CACtB,CAAA,CAEA,OAAO4rC,CAAkBzwB,CAAAA,CAAU,EAAG,MAAO,CAAA,IAAA,CAAA,CAAA,CAI1CA,CACT,CAAC,EACA,MAAO,CAAA,OAAO,EAEjB,OAAOuwB,EAAAA,CAAiB,CAAE,WAAAC,CAAAA,CAAAA,CAAa,kBAAAC,CAAkB,CAAC,CAC5D,CC5KO,CAAA,IAAMW,GAAc,MACzB5rC,CAAAA,EAMG,CACH,IAAI6rC,CAAAA,CACJ,GAAI7rC,CAAAA,EAAY,WAAY,CAC1B,IAAM+G,EAAQ/G,CAAW,CAAA,UAAA,CAAW,MAAM,GAAG,CAAA,CAC7C6rC,EAAoB9kC,CAAM,CAAA,KAAA,CAAM,EAAGA,CAAM,CAAA,MAAA,CAAS,CAAC,CAAE,CAAA,IAAA,CAAK,GAAG,EAC/D,CAEA,GAAM,CAAE,MAAA,CAAQ+kC,CAAe,CAAI,CAAA,MAAMC,eAAuB,CAC9D,UAAA,CAAYF,EACZ,IAAM,CAAA,YACR,CAAC,CAEKG,CAAAA,CAAAA,CAAyC,MAAM,OAAQhsC,CAAAA,CAAU,EACnEA,CACA,CAAA,KAAA,CAAM,QAAQ8rC,CAAc,CAAA,CAC1BA,CAAe,CAAA,GAAA,CAAK7sC,GAAWqB,EAAarB,CAAAA,CAAAA,CAAQe,CAAU,CAAC,CAAA,CAC/D,CAACM,EAAawrC,CAAAA,CAAAA,CAAgB9rC,CAAU,CAAC,CAAA,CAEzCisC,EAGD,EAAC,CAEN,QAAWjsC,CAAcgsC,IAAAA,CAAAA,CAAa,CACpC,GAAM,CACJ,IAAAlmC,CAAAA,CAAAA,CACA,WAAAomC,CAAa,CAAA,EAAA,CACb,OAAAC,CAAS,CAAA,KAAA,CACT,mBAAAC,CAAqB,CAAA,IAAA,CACrB,WAAAC,CAAa,CAAA,IAAA,CACb,KAAAjtC,CACA,CAAA,OAAA,CAAAktC,EACA,UAAAC,CAAAA,CAAAA,CAAa,IACf,CAAIvsC,CAAAA,CAAAA,CAEEyd,CAAuB,CAAA,GAEvBvd,CAAOD,CAAAA,EAAAA,CAAQD,CAAU,CAE3BE,CAAAA,CAAAA,CAAK,QAAU,OACjB,EAAA,OAAA,CAAQ,KAAK,aAAeF,CAAAA,CAAU,EAGxC,IAAMH,CAAAA,CAAQE,GAASC,CAAU,CAAA,CAC3Ba,EAASD,EAAUZ,CAAAA,CAAU,EAC7ByB,CAASD,CAAAA,EAAAA,CAAUxB,CAAU,CAE9BH,CAAAA,CAAAA,CAAM,MACT4d,CAAO,CAAA,IAAA,CACL,IAAI,KACF,CAAA,oFACF,CACF,CAGG5c,CAAAA,CAAAA,CAAO,MACV4c,CAAO,CAAA,IAAA,CACL,IAAI,KAAM,CAAA,wDAAwD,CACpE,CAGG8uB,CAAAA,CAAAA,EACH,OAAQ,CAAA,IAAA,CACN,qMACF,CAGF1rC,CAAAA,CAAAA,CAAO,KAAOsN,mBAAK,CAAA,OAAA,CAAQ,QAAQ,GAAI,EAAA,CAAGtN,EAAO,IAAI,CAAA,CAErD,IAAIuqC,CAEJ,CAAA,GAAI,CACFA,CAAUM,CAAAA,EAAAA,CAAW1rC,CAAU,EACjC,CAAA,MAASsa,CAAO,CAAA,CACdmD,EAAO,IAAKnD,CAAAA,CAAK,EACjB8wB,CAAU,CAAA,CACR,YAAa,EAAC,CACd,QAAS,EACX,EACF,CAEA,IAAMnsC,EAASO,EAAU,CAAA,CACvB,GAAG4rC,CACH,CAAA,IAAA,CAAAtlC,CACA,CAAA,UAAA,CAAAomC,EACA,MAAAC,CAAAA,CAAAA,CACA,mBAAAC,CACA,CAAA,UAAA,CAAY,MACZ,KAAAvsC,CAAAA,CAAAA,CACA,KAAAK,CACA,CAAA,IAAA,CAAAd,EACA,MAAAyB,CAAAA,CAAAA,CACA,OAAAY,CACA,CAAA,OAAA,CAAA6qC,EACA,UAAAC,CAAAA,CACF,CAAC,CACDttC,CAAAA,CAAAA,CAAO,WAAaQ,CAAeR,CAAAA,CAAM,EAAIotC,CAAa,CAAA,KAAA,CAEtDnsC,EAAK,KAAU,GAAA,OAAA,EACjB,QAAQ,IAAK,CAAA,SAAA,CAAWjB,CAAM,CAGhCgtC,CAAAA,CAAAA,CAAQ,KAAK,CACX,MAAA,CAAAhtC,EACA,MAAAwe,CAAAA,CACF,CAAC,EACH,CAEA,OAAOwuB,CACT,EC+IO,IAAMO,EAAAA,CAAe,IACvBC,CACS,GAAA,CACZ,IAAMC,CAAgB,CAAA,IAAI,QAC1B,IAAWz0B,IAAAA,CAAAA,IAAUw0B,EAAS,CAC5B,GAAI,CAACx0B,CAAU,EAAA,OAAOA,GAAW,QAC/B,CAAA,SAGF,IAAM00B,CACJ10B,CAAAA,CAAAA,YAAkB,QAAUA,CAAO,CAAA,OAAA,GAAY,MAAO,CAAA,OAAA,CAAQA,CAAM,CAEtE,CAAA,IAAA,GAAW,CAAChX,CAAKC,CAAAA,CAAK,IAAKyrC,CACzB,CAAA,GAAIzrC,IAAU,IACZwrC,CAAAA,CAAAA,CAAc,OAAOzrC,CAAG,CAAA,CAAA,KAAA,GACf,MAAM,OAAQC,CAAAA,CAAK,CAC5B,CAAA,IAAA,IAAWgiB,KAAKhiB,CACdwrC,CAAAA,CAAAA,CAAc,OAAOzrC,CAAKiiB,CAAAA,CAAW,OAE9BhiB,CAAU,GAAA,MAAA,EAGnBwrC,EAAc,GACZzrC,CAAAA,CAAAA,CACA,OAAOC,CAAU,EAAA,QAAA,CAAW,KAAK,SAAUA,CAAAA,CAAK,EAAKA,CACvD,EAGN,CACA,OAAOwrC,CACT,CAuFA,CC9WaE,IAAAA,EAAAA,CAAU,MAAO,CAC5B,YAAA,CAAAC,EACA,SAAAC,CAAAA,CAAAA,CACA,QAAAC,CACA,CAAA,KAAA,CAAAjtC,CACF,CAKyC,GAAA,CACvC,IAAMktC,CAAY,CAAA,IAAIC,+BAChBC,CAAgBC,CAAAA,oCAAAA,CAAiB,CAAE,iBAAmBL,CAAAA,CAAU,CAAC,CAEnEM,CAAAA,CAAAA,CAEAC,EACAzvB,CAEJ,CAAA,GAAIsvB,EAAc,IAAS,GAAA,KAAA,CAAO,CAEhC,GAAIptC,CAAAA,CAAM,WAAaA,CAAM,CAAA,qBAAA,GAA0B,MAAO,CAC5D,GAAI,CACF,IAAMwsC,CAAAA,CAAU,MAAMgB,+BAAAA,CAAY,CAChC,YAAc,CAAA,CACZ,OAAQ,MACR,CAAA,GAAGT,EACH,OAASL,CAAAA,EAAAA,CAAaK,GAAc,OAAS/sC,CAAAA,CAAAA,CAAM,OAAO,CAC5D,CAAA,CACA,QAAAitC,CACA,CAAA,GAAA,CAAKG,EAAc,IACrB,CAAC,CAED,CAAA,GAAIZ,EAAQ,QAAS,CAAA,MAAA,EAAU,IAC7B,OAAO,CACL,MAAO,QACP,CAAA,QAAA,CAAUA,EAAQ,QACpB,CAAA,CAGF1uB,EAAW0uB,CAAQ,CAAA,SACrB,OAAShyB,CAAO,CAAA,CACd,OAAO,CACL,KAAA,CAAO,QACP,CAAA,QAAA,CAAU,IAAI,QAASA,CAAAA,CAAAA,CAAM,OAAO,CACtC,CACF,CAEA,GAAI,CAACsD,EAAS,EAAM9d,EAAAA,CAAAA,CAAM,sBAGxB,OAAO,CACL,MAAO,QACP,CAAA,QAAA,CAAA8d,CACF,CAOF,CAAA,GAJI9d,EAAM,qBAA0B,GAAA,MAAA,GAClCA,EAAM,qBAAwB8d,CAAAA,CAAAA,CAAS,IAGrCA,CAAS,CAAA,MAAA,GAAW,IACtB,OAAO,CACL,MAAO,cACP,CAAA,QAAA,CAAAA,CACF,CAGF,CAAA,GAAIyvB,IAAe,MAAW,CAAA,CAC5B,IAAME,CAAO3vB,CAAAA,CAAAA,CAAS,OAAQ,CAAA,GAAA,CAAI,MAAM,CACpC2vB,CAAAA,CAAAA,GACFF,EAAaE,CAASztC,GAAAA,CAAAA,CAAM,QAAQ,GAAI,CAAA,eAAe,EAEnDutC,CACFvtC,EAAAA,CAAAA,CAAM,QAAQ,GAAI,CAAA,eAAA,CAAiBytC,CAAI,CAG7C,EAAA,CAEA,GAAIF,CAAe,GAAA,MAAA,CAAW,CAC5B,IAAMG,EAAe5vB,CAAS,CAAA,OAAA,CAAQ,IAAI,eAAe,CAAA,CACrD4vB,IACFH,CAAaG,CAAAA,CAAAA,GAAiB1tC,EAAM,OAAQ,CAAA,GAAA,CAAI,mBAAmB,CAE/DutC,CAAAA,CAAAA,EACFvtC,EAAM,OAAQ,CAAA,GAAA,CAAI,oBAAqB0tC,CAAY,CAAA,EAGzD,CAGA,GAAIH,IAAe,KACjB,CAAA,OAAO,CACL,KAAO,CAAA,cAAA,CACP,SAAAzvB,CACF,CAEJ,CAEA,GAAI,CACF,IAAM0uB,CAAU,CAAA,MAAMgB,gCAAY,CAChC,YAAA,CAAc,CACZ,MAAQ,CAAA,KAAA,CACR,GAAGT,CACL,CAAA,CACA,QAAAE,CACA,CAAA,GAAA,CAAKG,EAAc,IACrB,CAAC,EAED,GAAIZ,CAAAA,CAAQ,SAAS,MAAU,EAAA,GAAA,CAC7B,OAAO,CACL,KAAA,CAAO,SACP,QAAUA,CAAAA,CAAAA,CAAQ,QACpB,CAGF1uB,CAAAA,CAAAA,CAAW0uB,CAAQ,CAAA,SACrB,OAAShyB,CAAO,CAAA,CACd,OAAO,CACL,KAAA,CAAO,SACP,QAAU,CAAA,IAAI,SAASA,CAAM,CAAA,OAAO,CACtC,CACF,CAEA,GAAI,CAACsD,CAAAA,CAAS,GAGZ,OAAO,CACL,KAAO,CAAA,QAAA,CACP,SAAAA,CACF,CAAA,CAOF,GAJAwvB,CAAcxvB,CAAAA,CAAAA,CAAS,KACnB,MAAMA,CAAAA,CAAS,aACf,CAAA,IAAI,YAAY,CAAC,CAAA,CAEjByvB,IAAe,MAAW,CAAA,CAC5B,IAAMvjB,CAAU,CAAA,IAAI,WAAY,EAAA,CAAE,OAAOsjB,CAAW,CAAA,CACpDC,EAAavjB,CAAYhqB,GAAAA,CAAAA,CAAM,UAC/BA,CAAM,CAAA,SAAA,CAAYgqB,EACpB,CACF,CAAA,KAEOhqB,EAAM,SAGTutC,CAAAA,CAAAA,CAAa,MAFbvtC,CAAM,CAAA,SAAA,CAAYotC,EAAc,IAMpC,CAAA,OAAIG,IAAe,KACV,CAAA,CACL,MAAO,cACP,CAAA,QAAA,CAAUzvB,CACZ,CASK,CAAA,CACL,KAPW,MAAMovB,CAAAA,CAAU,OAAO,CAClC,WAAA,CAAAI,EACA,iBAAmB,CAAA,MAAA,CACnB,cAAAF,CACF,CAAC,CAID,CACF","file":"internal.cjs","sourcesContent":["import type { Config } from '../../../types/config';\nimport type { PluginClientNames } from '../../types';\n\nexport const clientId = 'client';\n\nexport const getClientBaseUrlKey = (config: Config) => {\n  const client = getClientPlugin(config);\n  if (\n    client.name === '@hey-api/client-axios' ||\n    client.name === '@hey-api/client-nuxt'\n  ) {\n    return 'baseURL';\n  }\n  return 'baseUrl';\n};\n\nexport const getClientPlugin = (\n  config: Config,\n): Config['plugins'][PluginClientNames] & { name: PluginClientNames } => {\n  for (const name of config.pluginOrder) {\n    const plugin = config.plugins[name];\n    if (plugin?.tags?.includes('client')) {\n      return plugin as Config['plugins'][PluginClientNames] & {\n        name: PluginClientNames;\n      };\n    }\n  }\n\n  return {\n    config: {\n      // @ts-expect-error\n      name: '',\n    },\n    // @ts-expect-error\n    name: '',\n  };\n};\n","import { getClientPlugin } from '../plugins/@hey-api/client-core/utils';\nimport type { Config } from '../types/config';\n\nlet _config: Config;\n\nexport const getConfig = () => {\n  const config = _config;\n  const plugin = getClientPlugin(config);\n  // patch legacy config to avoid breaking handlebars\n  // @ts-expect-error\n  config.client = plugin;\n  return config;\n};\n\nexport const setConfig = (config: Config) => {\n  _config = config;\n  return getConfig();\n};\n\nexport const isLegacyClient = (config: Config) => {\n  const plugin = getClientPlugin(config);\n  return plugin.name.startsWith('legacy/');\n};\n\n/**\n * Wrap legacy `name` option so we don't use it when not using legacy clients.\n */\nexport const legacyNameFromConfig = (config: Config) => {\n  if (!isLegacyClient(config)) {\n    return;\n  }\n\n  return config.name;\n};\n","import type { Config, UserConfig } from '../types/config';\n\nconst defaultWatch: Config['input']['watch'] = {\n  enabled: false,\n  interval: 1_000,\n  timeout: 60_000,\n};\n\nconst getWatch = (\n  input: Pick<Config['input'], 'path' | 'watch'>,\n): Config['input']['watch'] => {\n  let watch = { ...defaultWatch };\n\n  // we cannot watch spec passed as an object\n  if (typeof input.path !== 'string') {\n    return watch;\n  }\n\n  if (typeof input.watch === 'boolean') {\n    watch.enabled = input.watch;\n  } else if (typeof input.watch === 'number') {\n    watch.enabled = true;\n    watch.interval = input.watch;\n  } else if (input.watch) {\n    watch = {\n      ...watch,\n      ...input.watch,\n    };\n  }\n\n  return watch;\n};\n\nexport const getInput = (userConfig: UserConfig): Config['input'] => {\n  let input: Config['input'] = {\n    path: '',\n    watch: defaultWatch,\n  };\n\n  if (typeof userConfig.input === 'string') {\n    input.path = userConfig.input;\n  } else if (\n    userConfig.input &&\n    (userConfig.input.path !== undefined ||\n      userConfig.input.organization !== undefined)\n  ) {\n    // @ts-expect-error\n    input = {\n      ...input,\n      path: 'https://get.heyapi.dev',\n      ...userConfig.input,\n    };\n\n    // watch only remote files\n    if (input.watch !== undefined) {\n      input.watch = getWatch(input);\n    }\n  } else {\n    input = {\n      ...input,\n      path: userConfig.input as Record<string, unknown>,\n    };\n  }\n\n  if (\n    userConfig.watch !== undefined &&\n    input.watch.enabled === defaultWatch.enabled &&\n    input.watch.interval === defaultWatch.interval &&\n    input.watch.timeout === defaultWatch.timeout\n  ) {\n    input.watch = getWatch({\n      path: input.path,\n      // @ts-expect-error\n      watch: userConfig.watch,\n    });\n  }\n\n  return input;\n};\n","import type { Config, UserConfig } from '../types/config';\n\nexport const getLogs = (userConfig: UserConfig | undefined): Config['logs'] => {\n  let logs: Config['logs'] = {\n    file: true,\n    level: 'info',\n    path: process.cwd(),\n  };\n\n  if (typeof userConfig?.logs === 'string') {\n    logs.path = userConfig.logs;\n  } else {\n    logs = {\n      ...logs,\n      ...userConfig?.logs,\n    };\n  }\n\n  return logs;\n};\n","import type { UserConfig } from '../types/config';\n\nconst mergeObjects = (\n  objA: Record<string, unknown> | undefined,\n  objB: Record<string, unknown> | undefined,\n): Record<string, unknown> => {\n  const a = objA || {};\n  const b = objB || {};\n  return {\n    ...a,\n    ...b,\n  };\n};\n\nexport const mergeConfigs = (\n  configA: UserConfig | undefined,\n  configB: UserConfig | undefined,\n): UserConfig => {\n  const a: Partial<UserConfig> = configA || {};\n  const b: Partial<UserConfig> = configB || {};\n  const merged: UserConfig = {\n    ...(a as UserConfig),\n    ...(b as UserConfig),\n  };\n  if (typeof merged.logs === 'object') {\n    merged.logs = mergeObjects(\n      a.logs as Record<string, unknown>,\n      b.logs as Record<string, unknown>,\n    );\n  }\n  return merged;\n};\n","import type { Config, UserConfig } from '../types/config';\n\nexport const getOutput = (userConfig: UserConfig): Config['output'] => {\n  let output: Config['output'] = {\n    clean: true,\n    format: false,\n    indexFile: true,\n    lint: false,\n    path: '',\n    tsConfigPath: '',\n  };\n\n  if (typeof userConfig.output === 'string') {\n    output.path = userConfig.output;\n  } else {\n    output = {\n      ...output,\n      ...userConfig.output,\n    };\n  }\n\n  return output;\n};\n","type ObjectType<T> =\n  Extract<T, Record<string, any>> extends never\n    ? Record<string, any>\n    : Extract<T, Record<string, any>>;\n\ntype MappersType<T> = {\n  boolean: T extends boolean\n    ? (value: boolean) => Partial<ObjectType<T>>\n    : never;\n  number: T extends number ? (value: number) => Partial<ObjectType<T>> : never;\n  object?: (value: Partial<ObjectType<T>>) => Partial<ObjectType<T>>;\n  string: T extends string ? (value: string) => Partial<ObjectType<T>> : never;\n} extends infer U\n  ? { [K in keyof U as U[K] extends never ? never : K]: U[K] }\n  : never;\n\ntype IsObjectOnly<T> = T extends Record<string, any> | undefined\n  ? Extract<T, string | boolean | number> extends never\n    ? true\n    : false\n  : false;\n\nexport type ValueToObject = <\n  T extends undefined | string | boolean | number | Record<string, any>,\n>(\n  args: {\n    defaultValue: ObjectType<T>;\n    value: T;\n  } & (IsObjectOnly<T> extends true\n    ? {\n        mappers?: MappersType<T>;\n      }\n    : {\n        mappers: MappersType<T>;\n      }),\n) => ObjectType<T>;\n\nconst mergeResult = <T>(\n  result: ObjectType<T>,\n  mapped: Record<string, any>,\n): ObjectType<T> => {\n  for (const [key, value] of Object.entries(mapped)) {\n    if (value !== undefined && value !== '') {\n      (result as Record<string, any>)[key] = value;\n    }\n  }\n  return result;\n};\n\nexport const valueToObject: ValueToObject = ({\n  defaultValue,\n  mappers,\n  value,\n}) => {\n  let result = { ...defaultValue };\n\n  switch (typeof value) {\n    case 'boolean':\n      if (mappers && 'boolean' in mappers) {\n        const mapper = mappers.boolean as (\n          value: boolean,\n        ) => Record<string, any>;\n        result = mergeResult(result, mapper(value));\n      }\n      break;\n    case 'number':\n      if (mappers && 'number' in mappers) {\n        const mapper = mappers.number as (value: number) => Record<string, any>;\n        result = mergeResult(result, mapper(value));\n      }\n      break;\n    case 'string':\n      if (mappers && 'string' in mappers) {\n        const mapper = mappers.string as (value: string) => Record<string, any>;\n        result = mergeResult(result, mapper(value));\n      }\n      break;\n    case 'object':\n      if (value !== null) {\n        if (\n          mappers &&\n          'object' in mappers &&\n          typeof mappers.object === 'function'\n        ) {\n          const mapper = mappers.object as (\n            value: Record<string, any>,\n          ) => Partial<ObjectType<any>>;\n          result = mergeResult(result, mapper(value));\n        } else {\n          result = mergeResult(result, value);\n        }\n      }\n      break;\n  }\n\n  return result;\n};\n","import type { Config, UserConfig } from '../types/config';\nimport { valueToObject } from './utils';\n\nexport const defaultPaginationKeywords = [\n  'after',\n  'before',\n  'cursor',\n  'offset',\n  'page',\n  'start',\n] as const;\n\nexport const getParser = (userConfig: UserConfig): Config['parser'] => {\n  const parser: Config['parser'] = {\n    ...userConfig.parser,\n    pagination: {\n      keywords: defaultPaginationKeywords,\n    },\n    transforms: {\n      enums: {\n        case: 'PascalCase',\n        enabled: false,\n        mode: 'root',\n        name: '{{name}}Enum',\n      },\n      readWrite: {\n        enabled: true,\n        requests: {\n          case: 'preserve',\n          name: '{{name}}Writable',\n        },\n        responses: {\n          case: 'preserve',\n          name: '{{name}}',\n        },\n      },\n    },\n    validate_EXPERIMENTAL: false,\n  };\n\n  if (userConfig.parser) {\n    if (userConfig.parser.pagination?.keywords) {\n      parser.pagination.keywords = userConfig.parser.pagination.keywords;\n    }\n\n    if (userConfig.parser.transforms) {\n      if (userConfig.parser.transforms.enums !== undefined) {\n        parser.transforms.enums = valueToObject({\n          defaultValue: {\n            ...parser.transforms.enums,\n            enabled: Boolean(userConfig.parser.transforms.enums),\n          },\n          mappers: {\n            boolean: (enabled) => ({ enabled }),\n            string: (mode) => ({ mode }),\n          },\n          value: userConfig.parser.transforms.enums,\n        }) as typeof parser.transforms.enums;\n      }\n\n      if (userConfig.parser.transforms.readWrite !== undefined) {\n        parser.transforms.readWrite = valueToObject({\n          defaultValue: {\n            ...parser.transforms.readWrite,\n            enabled: Boolean(userConfig.parser.transforms.readWrite),\n          },\n          mappers: {\n            boolean: (enabled) => ({ enabled }),\n            object: (fields) => ({\n              ...fields,\n              requests: valueToObject({\n                defaultValue: parser.transforms.readWrite.requests,\n                mappers: {\n                  string: (name) => ({ name }),\n                },\n                value: fields.requests,\n              }),\n              responses: valueToObject({\n                defaultValue: parser.transforms.readWrite.responses,\n                mappers: {\n                  string: (name) => ({ name }),\n                },\n                value: fields.responses,\n              }),\n            }),\n          },\n          value: userConfig.parser.transforms.readWrite,\n        }) as typeof parser.transforms.readWrite;\n      }\n    }\n\n    if (userConfig.parser.validate_EXPERIMENTAL) {\n      parser.validate_EXPERIMENTAL =\n        userConfig.parser.validate_EXPERIMENTAL === true\n          ? 'warn'\n          : userConfig.parser.validate_EXPERIMENTAL;\n    }\n  }\n\n  return parser;\n};\n","import type { Plugin } from '../../types';\n\nexport const definePluginConfig =\n  <T extends Plugin.Types>(defaultConfig: Plugin.Config<T>) =>\n  (\n    userConfig?: Omit<Plugin.UserConfig<T['config']>, 'name'>,\n  ): Omit<Plugin.Config<T>, 'name'> & {\n    /**\n     * Cast name to `any` so it doesn't throw type error in `plugins` array.\n     * We could allow any `string` as plugin `name` in the object syntax, but\n     * that TypeScript trick would cause all string methods to appear as\n     * suggested auto completions, which is undesirable.\n     */\n    name: any;\n  } => ({\n    ...defaultConfig,\n    config: {\n      ...defaultConfig.config,\n      ...userConfig,\n    },\n  });\n","export const clientDefaultConfig = {\n  baseUrl: true,\n  bundle: true,\n  exportFromIndex: false,\n} as const;\n\nexport const clientDefaultMeta = {\n  dependencies: ['@hey-api/typescript'],\n  output: 'client',\n  tags: ['client'],\n} as const;\n","/**\n * Matches characters from the start as long as they're not allowed.\n */\nexport const illegalStartCharactersRegExp = /^[^$_\\p{ID_Start}]+/u;\n\n/**\n * Matches string if it contains only digits and optionally decimal point or\n * leading minus sign.\n */\nexport const numberRegExp = /^-?\\d+(\\.\\d+)?$/;\n\nexport const reservedBrowserGlobalsRegExp =\n  /^(document|history|location|navigator|window)$/g;\n\nexport const reservedJavaScriptGlobalsRegExp =\n  /^(console|Array|Date|Error|Function|JSON|Map|Math|Object|Promise|RegExp|Set|WeakMap|WeakSet)$/g;\n\nexport const reservedJavaScriptKeywordsRegExp =\n  /^(arguments|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|eval|export|extends|false|finally|for|from|function|if|implements|import|in|instanceof|interface|let|new|null|package|private|protected|public|return|static|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)$/g;\n\nexport const reservedNodeGlobalsRegExp = /^(global|process|Buffer)$/g;\n\nexport const reservedTypeScriptKeywordsRegExp =\n  /^(any|as|bigint|boolean|namespace|never|null|number|string|symbol|type|undefined|unknown|void)$/g;\n\n/**\n * Javascript identifier regexp pattern retrieved from\n * {@link} https://developer.mozilla.org/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers\n */\nexport const validTypescriptIdentifierRegExp =\n  /^[$_\\p{ID_Start}][$\\u200c\\u200d\\p{ID_Continue}]*$/u;\n","import { EOL } from 'os';\n\nimport { validTypescriptIdentifierRegExp } from './regexp';\n\nexport const escapeName = (value: string): string => {\n  if (value || value === '') {\n    validTypescriptIdentifierRegExp.lastIndex = 0;\n    const validName = validTypescriptIdentifierRegExp.test(value);\n    if (!validName) {\n      return `'${value}'`;\n    }\n  }\n  return value;\n};\n\nexport const unescapeName = (value: string): string => {\n  if (value && value.startsWith(\"'\") && value.endsWith(\"'\")) {\n    return value.slice(1, value.length - 1);\n  }\n  return value;\n};\n\nexport const escapeComment = (value: string) =>\n  value\n    .replace(/\\*\\//g, '*')\n    .replace(/\\/\\*/g, '*')\n    .replace(/\\r?\\n(.*)/g, (_l, w) => EOL + w.trim());\n","import ts from 'typescript';\n\nimport { getConfig } from '../utils/config';\nimport { unescapeName } from '../utils/escape';\nimport type { AccessLevel } from './types';\nimport { createStringLiteral, syntaxKindKeyword } from './types';\n\nexport interface ImportExportItemObject {\n  alias?: string;\n  asType?: boolean;\n  name: string;\n}\n\nconst printer = ts.createPrinter({\n  newLine: ts.NewLineKind.LineFeed,\n  removeComments: false,\n});\n\nexport const createSourceFile = (sourceText: string) =>\n  ts.createSourceFile(\n    '',\n    sourceText,\n    ts.ScriptTarget.ESNext,\n    false,\n    ts.ScriptKind.TS,\n  );\n\nconst blankSourceFile = createSourceFile('');\n\nconst unescapeUnicode = (value: string) =>\n  value.replace(/\\\\u([0-9a-fA-F]{4})/g, (_, hex: string) =>\n    String.fromCharCode(Number.parseInt(hex, 16)),\n  );\n\n/**\n * Print a TypeScript node to a string.\n * @param node the node to print\n * @returns string\n */\nexport function tsNodeToString({\n  node,\n  unescape = false,\n}: {\n  node: ts.Node;\n  unescape?: boolean;\n}): string {\n  const result = printer.printNode(\n    ts.EmitHint.Unspecified,\n    node,\n    blankSourceFile,\n  );\n\n  if (!unescape) {\n    return result;\n  }\n\n  try {\n    /**\n     * TypeScript Compiler API escapes unicode characters by default and there\n     * is no way to disable this behavior\n     * {@link https://github.com/microsoft/TypeScript/issues/36174}\n     */\n    return unescapeUnicode(result);\n  } catch {\n    if (getConfig().logs.level === 'debug') {\n      console.warn('Could not decode value:', result);\n    }\n    return result;\n  }\n}\n\n/**\n * Convert a string to a TypeScript Node\n * @param value the string to convert.\n * @returns ts.Node\n */\nexport function stringToTsNodes(value: string): ts.Node {\n  const file = createSourceFile(value);\n  return file.statements[0]!;\n}\n\nexport const createIdentifier = ({ text }: { text: string }) => {\n  const identifier = ts.factory.createIdentifier(text);\n  return identifier;\n};\n\nexport const createThis = () => ts.factory.createThis();\n\ntype Modifier = AccessLevel | 'async' | 'export' | 'readonly' | 'static';\n\nexport const createModifier = ({ keyword }: { keyword: Modifier }) => {\n  const kind = syntaxKindKeyword({ keyword });\n  return ts.factory.createModifier(kind);\n};\n\nexport const createPropertyDeclaration = ({\n  initializer,\n  modifier,\n  name,\n  type,\n}: {\n  initializer?: ts.Expression;\n  modifier?: Modifier;\n  name: string | ts.PropertyName;\n  type?: ts.TypeNode;\n}) => {\n  const node = ts.factory.createPropertyDeclaration(\n    modifier ? [createModifier({ keyword: modifier })] : undefined,\n    name,\n    undefined,\n    type,\n    initializer,\n  );\n  return node;\n};\n\n/**\n * ots for @hey-api/openapi-ts are helpers to reduce repetition of basic TypeScript\n * factory functions.\n */\nexport const ots = {\n  /**\n   * Create a boolean expression based on value.\n   */\n  boolean: (value: boolean) =>\n    value ? ts.factory.createTrue() : ts.factory.createFalse(),\n  export: ({ alias, asType = false, name }: ImportExportItemObject) => {\n    const nameNode = createIdentifier({ text: name });\n    if (alias) {\n      const aliasNode = createIdentifier({ text: alias });\n      return ts.factory.createExportSpecifier(asType, nameNode, aliasNode);\n    }\n    return ts.factory.createExportSpecifier(asType, undefined, nameNode);\n  },\n  import: ({ alias, asType = false, name }: ImportExportItemObject) => {\n    const nameNode = createIdentifier({ text: name });\n    if (alias) {\n      const aliasNode = createIdentifier({ text: alias });\n      return ts.factory.createImportSpecifier(asType, nameNode, aliasNode);\n    }\n    return ts.factory.createImportSpecifier(asType, undefined, nameNode);\n  },\n  /**\n   * Create a numeric expression, handling negative numbers.\n   */\n  number: (value: number) => {\n    if (value < 0) {\n      return ts.factory.createPrefixUnaryExpression(\n        ts.SyntaxKind.MinusToken,\n        ts.factory.createNumericLiteral(Math.abs(value)),\n      );\n    }\n    return ts.factory.createNumericLiteral(value);\n  },\n  /**\n   * Create a string literal. This handles strings that start with '`' or \"'\".\n   */\n  string: (value: string, unescape = false) => {\n    let text = value;\n    if (unescape) {\n      text = unescapeName(text);\n    }\n    const hasBothQuotes = text.includes(\"'\") && text.includes('\"');\n    const hasNewlines = text.includes('\\n');\n    const hasUnescapedBackticks = text.startsWith('`');\n    const isBacktickEscaped = text.startsWith('\\\\`') && text.endsWith('\\\\`');\n    if (\n      (hasNewlines || hasBothQuotes || hasUnescapedBackticks) &&\n      !isBacktickEscaped\n    ) {\n      text = `\\`${text.replace(/(?<!\\\\)`/g, '\\\\`').replace(/\\${/g, '\\\\${')}\\``;\n    }\n    if (text.startsWith('`')) {\n      return createIdentifier({ text });\n    }\n    return createStringLiteral({ text });\n  },\n};\n\nexport const isTsNode = (node: any): node is ts.Expression =>\n  node !== null &&\n  typeof node === 'object' &&\n  typeof node.kind === 'number' &&\n  typeof node.flags === 'number' &&\n  typeof node.pos === 'number' &&\n  typeof node.end === 'number';\n\nexport const isType = <T>(value: T | undefined): value is T =>\n  value !== undefined;\n\ntype CommentLines = Array<string | null | false | undefined>;\ntype CommentObject = {\n  jsdoc?: boolean;\n  lines: CommentLines;\n};\nexport type Comments = CommentLines | Array<CommentObject>;\n\nconst processCommentObject = ({\n  commentObject,\n  node,\n}: {\n  commentObject: CommentObject;\n  node: ts.Node;\n}) => {\n  const lines = commentObject.lines.filter(\n    (line) => Boolean(line) || line === '',\n  ) as string[];\n  if (!lines.length) {\n    return;\n  }\n\n  if (!commentObject.jsdoc) {\n    for (const line of lines) {\n      ts.addSyntheticLeadingComment(\n        node,\n        ts.SyntaxKind.SingleLineCommentTrivia,\n        ` ${line}`,\n        true,\n      );\n    }\n    return;\n  }\n\n  const jsdocTexts = lines.map((line, index) => {\n    let text = line;\n    if (index !== lines.length) {\n      text = `${text}\\n`;\n    }\n    const jsdocText = ts.factory.createJSDocText(text);\n    return jsdocText;\n  });\n\n  const jsdoc = ts.factory.createJSDocComment(\n    ts.factory.createNodeArray(jsdocTexts),\n    undefined,\n  );\n\n  const cleanedJsdoc = tsNodeToString({ node: jsdoc, unescape: true })\n    .replace('/*', '')\n    .replace('*  */', '');\n\n  ts.addSyntheticLeadingComment(\n    node,\n    ts.SyntaxKind.MultiLineCommentTrivia,\n    cleanedJsdoc,\n    true,\n  );\n};\n\nexport const addLeadingComments = ({\n  comments = [],\n  node,\n}: {\n  comments?: Comments;\n  node: ts.Node;\n}) => {\n  const isObjectStyle = Boolean(\n    comments.find((comment) => typeof comment === 'object' && comment),\n  );\n\n  let commentObjects = comments as Array<CommentObject>;\n  if (!isObjectStyle) {\n    commentObjects = [\n      {\n        jsdoc: true,\n        lines: comments as CommentLines,\n      },\n    ];\n  }\n\n  for (const commentObject of commentObjects) {\n    processCommentObject({\n      commentObject,\n      node,\n    });\n  }\n};\n","import ts from 'typescript';\n\nimport { escapeName } from '../utils/escape';\nimport { validTypescriptIdentifierRegExp } from '../utils/regexp';\nimport {\n  addLeadingComments,\n  type Comments,\n  createIdentifier,\n  createModifier,\n  isTsNode,\n  isType,\n  ots,\n} from './utils';\n\nexport type AccessLevel = 'private' | 'protected' | 'public';\n\nexport type FunctionParameter =\n  | {\n      accessLevel?: AccessLevel;\n      default?: any;\n      isReadOnly?: boolean;\n      isRequired?: boolean;\n      name: string;\n      type?: any | ts.TypeNode;\n    }\n  | {\n      destructure: ReadonlyArray<FunctionParameter>;\n      type?: any | ts.TypeNode;\n    };\n\nexport interface FunctionTypeParameter {\n  default?: any;\n  extends?: string | ts.TypeNode;\n  name: string | ts.Identifier;\n}\n\nexport const createTypeNode = (\n  base: any | ts.TypeNode,\n  args?: (any | ts.TypeNode)[],\n): ts.TypeNode => {\n  if (ts.isTypeNode(base)) {\n    return base;\n  }\n\n  if (typeof base === 'number') {\n    return ts.factory.createLiteralTypeNode(ots.number(base));\n  }\n\n  return createTypeReferenceNode({\n    typeArguments: args?.map((arg) => createTypeNode(arg)),\n    typeName: base,\n  });\n};\n\nexport const createPropertyAccessChain = ({\n  expression,\n  name,\n}: {\n  expression: ts.Expression;\n  name: string | ts.MemberName;\n}) => {\n  const node = ts.factory.createPropertyAccessChain(\n    expression,\n    ts.factory.createToken(ts.SyntaxKind.QuestionDotToken),\n    name,\n  );\n  return node;\n};\n\nexport const createPropertyAccessExpression = ({\n  expression,\n  isOptional,\n  name,\n}: {\n  expression: string | ts.Expression;\n  isOptional?: boolean;\n  name: string | number | ts.MemberName;\n}):\n  | ts.PropertyAccessChain\n  | ts.PropertyAccessExpression\n  | ts.ElementAccessExpression => {\n  const nodeExpression =\n    typeof expression === 'string'\n      ? createIdentifier({ text: expression })\n      : expression;\n\n  if (isOptional && typeof name !== 'number') {\n    return createPropertyAccessChain({\n      expression: nodeExpression,\n      name,\n    });\n  }\n\n  if (typeof name === 'string') {\n    validTypescriptIdentifierRegExp.lastIndex = 0;\n    if (!validTypescriptIdentifierRegExp.test(name)) {\n      // TODO: parser - this should escape name only for new parser\n      if (!name.startsWith(\"'\") && !name.endsWith(\"'\")) {\n        // eslint-disable-next-line no-useless-escape\n        name = `\\'${name}\\'`;\n      }\n      const nodeName = createIdentifier({ text: name });\n      return ts.factory.createElementAccessExpression(nodeExpression, nodeName);\n    }\n\n    const nodeName = createIdentifier({ text: name });\n    return ts.factory.createPropertyAccessExpression(nodeExpression, nodeName);\n  }\n\n  if (typeof name === 'number') {\n    const nodeName = ts.factory.createNumericLiteral(name);\n    return ts.factory.createElementAccessExpression(nodeExpression, nodeName);\n  }\n\n  return ts.factory.createPropertyAccessExpression(nodeExpression, name);\n};\n\nexport const createNull = (): ts.NullLiteral => ts.factory.createNull();\n\n/**\n * Convert an unknown value to an expression.\n * @param identifiers - list of keys that are treated as identifiers.\n * @param shorthand - if shorthand syntax is allowed.\n * @param unescape - if string should be unescaped.\n * @param value - the unknown value.\n * @returns ts.Expression\n */\nexport const toExpression = <T = unknown>({\n  identifiers = [],\n  isValueAccess,\n  shorthand,\n  unescape,\n  value,\n}: {\n  identifiers?: string[];\n  isValueAccess?: boolean;\n  shorthand?: boolean;\n  unescape?: boolean;\n  value: T;\n}): ts.Expression | undefined => {\n  if (value === null) {\n    return createNull();\n  }\n\n  if (Array.isArray(value)) {\n    return createArrayLiteralExpression({ elements: value });\n  }\n\n  if (typeof value === 'object') {\n    return createObjectType({\n      identifiers,\n      obj: value,\n      shorthand,\n    });\n  }\n\n  if (typeof value === 'number') {\n    return ots.number(value);\n  }\n\n  if (typeof value === 'boolean') {\n    return ots.boolean(value);\n  }\n\n  if (typeof value === 'string') {\n    if (isValueAccess) {\n      // TODO; handle more than single nested level, i.e. foo.bar.baz\n      const parts = value.split('.');\n      return createPropertyAccessExpression({\n        expression: parts[0]!,\n        name: parts[1]!,\n      });\n    }\n    return ots.string(value, unescape);\n  }\n\n  return;\n};\n\n/**\n * Convert parameters to the declaration array expected by compiler API.\n * @param parameters - the parameters to convert to declarations\n * @returns ts.ParameterDeclaration[]\n */\nexport const toParameterDeclarations = (\n  parameters: ReadonlyArray<FunctionParameter>,\n) =>\n  parameters.map((parameter) => {\n    if ('destructure' in parameter) {\n      return createParameterDeclaration({\n        name: ts.factory.createObjectBindingPattern(\n          parameter.destructure\n            .map((param) => {\n              // TODO: add support for nested destructuring, not needed at the moment\n              if ('destructure' in param) {\n                return;\n              }\n\n              const result = ts.factory.createBindingElement(\n                undefined,\n                undefined,\n                createIdentifier({ text: param.name }),\n                undefined,\n              );\n              return result;\n            })\n            .filter(Boolean) as ts.BindingElement[],\n        ),\n        type:\n          parameter.type !== undefined\n            ? createTypeNode(parameter.type)\n            : undefined,\n      });\n    }\n\n    const modifiers = parameter.accessLevel\n      ? [createModifier({ keyword: parameter.accessLevel })]\n      : [];\n\n    if (parameter.isReadOnly) {\n      modifiers.push(createModifier({ keyword: 'readonly' }));\n    }\n\n    return createParameterDeclaration({\n      initializer:\n        parameter.default !== undefined\n          ? toExpression({ value: parameter.default })\n          : undefined,\n      modifiers,\n      name: createIdentifier({ text: parameter.name }),\n      required: parameter.isRequired !== false,\n      type:\n        parameter.type !== undefined\n          ? createTypeNode(parameter.type)\n          : undefined,\n    });\n  });\n\nexport type SyntaxKindKeyword =\n  | 'any'\n  | 'async'\n  | 'boolean'\n  | 'export'\n  | 'never'\n  | 'number'\n  | 'private'\n  | 'protected'\n  | 'public'\n  | 'readonly'\n  | 'static'\n  | 'string'\n  | 'undefined'\n  | 'unknown'\n  | 'void';\n\nexport const syntaxKindKeyword = <T extends SyntaxKindKeyword>({\n  keyword,\n}: {\n  keyword: T;\n}): T extends 'protected'\n  ? ts.SyntaxKind.ProtectedKeyword\n  : T extends 'public'\n    ? ts.SyntaxKind.PublicKeyword\n    : T extends 'private'\n      ? ts.SyntaxKind.PrivateKeyword\n      : T extends 'export'\n        ? ts.SyntaxKind.ExportKeyword\n        : T extends 'async'\n          ? ts.SyntaxKind.ExportKeyword\n          : T extends 'readonly'\n            ? ts.SyntaxKind.ExportKeyword\n            : T extends 'static'\n              ? ts.SyntaxKind.ExportKeyword\n              :\n                  | ts.SyntaxKind.AnyKeyword\n                  | ts.SyntaxKind.BooleanKeyword\n                  | ts.SyntaxKind.NeverKeyword\n                  | ts.SyntaxKind.NumberKeyword\n                  | ts.SyntaxKind.StringKeyword\n                  | ts.SyntaxKind.UndefinedKeyword\n                  | ts.SyntaxKind.UnknownKeyword\n                  | ts.SyntaxKind.VoidKeyword => {\n  switch (keyword) {\n    case 'any':\n      return ts.SyntaxKind.AnyKeyword as any;\n    case 'async':\n      return ts.SyntaxKind.AsyncKeyword as any;\n    case 'boolean':\n      return ts.SyntaxKind.BooleanKeyword as any;\n    case 'export':\n      return ts.SyntaxKind.ExportKeyword as any;\n    case 'never':\n      return ts.SyntaxKind.NeverKeyword as any;\n    case 'number':\n      return ts.SyntaxKind.NumberKeyword as any;\n    case 'private':\n      return ts.SyntaxKind.PrivateKeyword as any;\n    case 'protected':\n      return ts.SyntaxKind.ProtectedKeyword as any;\n    case 'public':\n      return ts.SyntaxKind.PublicKeyword as any;\n    case 'readonly':\n      return ts.SyntaxKind.ReadonlyKeyword as any;\n    case 'static':\n      return ts.SyntaxKind.StaticKeyword as any;\n    case 'string':\n      return ts.SyntaxKind.StringKeyword as any;\n    case 'undefined':\n      return ts.SyntaxKind.UndefinedKeyword as any;\n    case 'unknown':\n      return ts.SyntaxKind.UnknownKeyword as any;\n    case 'void':\n      return ts.SyntaxKind.VoidKeyword as any;\n    default:\n      throw new Error(`unsupported syntax kind keyword \"${keyword}\"`);\n  }\n};\n\nexport const createKeywordTypeNode = ({\n  keyword,\n}: {\n  keyword: Extract<\n    SyntaxKindKeyword,\n    | 'any'\n    | 'boolean'\n    | 'never'\n    | 'number'\n    | 'string'\n    | 'undefined'\n    | 'unknown'\n    | 'void'\n  >;\n}) => {\n  const kind = syntaxKindKeyword({ keyword });\n  return ts.factory.createKeywordTypeNode(kind);\n};\n\nexport const toTypeParameters = (\n  types: (FunctionTypeParameter | ts.TypeParameterDeclaration)[],\n) =>\n  types.map((node) => {\n    // @ts-expect-error\n    if (ts.isTypeParameterDeclaration(node)) {\n      return node;\n    }\n\n    return createTypeParameterDeclaration({\n      // TODO: support other extends values\n      constraint: node.extends\n        ? typeof node.extends === 'string'\n          ? createKeywordTypeNode({ keyword: 'boolean' })\n          : node.extends\n        : undefined,\n      // TODO: support other default types\n      defaultType:\n        node.default !== undefined\n          ? isTsNode(node.default)\n            ? (node.default as unknown as ts.TypeNode)\n            : ts.factory.createLiteralTypeNode(\n                node.default\n                  ? ts.factory.createTrue()\n                  : ts.factory.createFalse(),\n              )\n          : undefined,\n      name: node.name,\n    });\n  });\n\nexport const createTypeOperatorNode = ({\n  operator,\n  type,\n}: {\n  operator: 'keyof' | 'readonly' | 'unique';\n  type: ts.TypeNode;\n}) => {\n  const operatorKeyword =\n    operator === 'keyof'\n      ? ts.SyntaxKind.KeyOfKeyword\n      : operator === 'readonly'\n        ? ts.SyntaxKind.ReadonlyKeyword\n        : ts.SyntaxKind.UniqueKeyword;\n  return ts.factory.createTypeOperatorNode(operatorKeyword, type);\n};\n\nexport const createTypeParameterDeclaration = ({\n  constraint,\n  defaultType,\n  modifiers,\n  name,\n}: {\n  constraint?: ts.TypeNode;\n  defaultType?: ts.TypeNode;\n  modifiers?: Array<ts.Modifier>;\n  name: string | ts.Identifier;\n}) =>\n  ts.factory.createTypeParameterDeclaration(\n    modifiers,\n    name,\n    constraint,\n    defaultType,\n  );\n\nexport const createMappedTypeNode = ({\n  members,\n  nameType,\n  questionToken,\n  readonlyToken,\n  type,\n  typeParameter,\n}: {\n  members?: ts.NodeArray<ts.TypeElement>;\n  nameType?: ts.TypeNode;\n  questionToken?: ts.QuestionToken | ts.PlusToken | ts.MinusToken;\n  readonlyToken?: ts.ReadonlyKeyword | ts.PlusToken | ts.MinusToken;\n  type?: ts.TypeNode;\n  typeParameter: ts.TypeParameterDeclaration;\n}) =>\n  ts.factory.createMappedTypeNode(\n    readonlyToken,\n    typeParameter,\n    nameType,\n    questionToken,\n    type,\n    members,\n  );\n\nexport const createLiteralTypeNode = ({\n  literal,\n}: {\n  literal: ts.LiteralTypeNode['literal'];\n}) => {\n  const node = ts.factory.createLiteralTypeNode(literal);\n  return node;\n};\n\n/**\n * Create arrow function type expression.\n */\nexport const createArrowFunction = ({\n  async,\n  comment,\n  multiLine,\n  parameters = [],\n  returnType,\n  statements = [],\n  types = [],\n}: {\n  async?: boolean;\n  comment?: Comments;\n  multiLine?: boolean;\n  parameters?: ReadonlyArray<FunctionParameter>;\n  returnType?: string | ts.TypeNode;\n  statements?: ts.Statement[] | ts.Expression;\n  types?: FunctionTypeParameter[];\n}) => {\n  const expression = ts.factory.createArrowFunction(\n    async ? [createModifier({ keyword: 'async' })] : undefined,\n    types ? toTypeParameters(types) : undefined,\n    toParameterDeclarations(parameters),\n    returnType ? createTypeNode(returnType) : undefined,\n    undefined,\n    Array.isArray(statements)\n      ? createBlock({ multiLine, statements })\n      : statements,\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node: expression,\n  });\n\n  return expression;\n};\n\n/**\n * Create anonymous function type expression.\n */\nexport const createAnonymousFunction = ({\n  async,\n  comment,\n  multiLine,\n  parameters = [],\n  returnType,\n  statements = [],\n  types = [],\n}: {\n  async?: boolean;\n  comment?: Comments;\n  multiLine?: boolean;\n  parameters?: FunctionParameter[];\n  returnType?: string | ts.TypeNode;\n  statements?: ts.Statement[];\n  types?: FunctionTypeParameter[];\n}) => {\n  const expression = ts.factory.createFunctionExpression(\n    async ? [createModifier({ keyword: 'async' })] : undefined,\n    undefined,\n    undefined,\n    types ? toTypeParameters(types) : undefined,\n    toParameterDeclarations(parameters),\n    returnType ? createTypeNode(returnType) : undefined,\n    createBlock({ multiLine, statements }),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node: expression,\n  });\n\n  return expression;\n};\n\n/**\n * Create Array type expression.\n */\nexport const createArrayLiteralExpression = <T>({\n  elements,\n  multiLine = false,\n}: {\n  /**\n   * The array to create.\n   */\n  elements: T[];\n  /**\n   * Should the array be multi line?\n   *\n   * @default false\n   */\n  multiLine?: boolean;\n}): ts.ArrayLiteralExpression => {\n  const expression = ts.factory.createArrayLiteralExpression(\n    elements\n      .map((value) => (isTsNode(value) ? value : toExpression({ value })))\n      .filter(isType<ts.Expression>),\n    // multiline if array contains objects\n    multiLine ||\n      (!Array.isArray(elements[0]) && typeof elements[0] === 'object'),\n  );\n  return expression;\n};\n\nexport const createAwaitExpression = ({\n  expression,\n}: {\n  expression: ts.Expression;\n}) => ts.factory.createAwaitExpression(expression);\n\nexport const createFunctionTypeNode = ({\n  parameters = [],\n  returnType,\n  typeParameters,\n}: {\n  parameters?: ts.ParameterDeclaration[];\n  returnType: ts.TypeNode;\n  typeParameters?: ts.TypeParameterDeclaration[];\n}) => {\n  const node = ts.factory.createFunctionTypeNode(\n    typeParameters,\n    parameters,\n    returnType,\n  );\n  return node;\n};\n\nexport type ObjectValue =\n  | {\n      assertion?: 'any' | ts.TypeNode;\n      comments?: Comments;\n      spread: string;\n    }\n  | {\n      comments?: Comments;\n      isValueAccess?: boolean;\n      key: string;\n      shorthand?: boolean;\n      value: any;\n    };\n\ntype ObjectAssignment =\n  | ts.PropertyAssignment\n  | ts.ShorthandPropertyAssignment\n  | ts.SpreadAssignment;\n\n/**\n * Create Object type expression.\n * @param comments - comments to add to each property.\n * @param identifier - keys that should be treated as identifiers.\n * @param multiLine - if the object should be multiline.\n * @param obj - the object to create expression with.\n * @param shorthand - if shorthand syntax should be used.\n * @param unescape - if properties strings should be unescaped.\n * @returns ts.ObjectLiteralExpression\n */\nexport const createObjectType = <\n  T extends Record<string, any> | Array<ObjectValue>,\n>({\n  comments,\n  identifiers = [],\n  multiLine = true,\n  obj,\n  shorthand,\n  unescape = false,\n}: {\n  comments?: Comments;\n  identifiers?: string[];\n  multiLine?: boolean;\n  obj: T;\n  shorthand?: boolean;\n  unescape?: boolean;\n}): ts.ObjectLiteralExpression => {\n  const properties = Array.isArray(obj)\n    ? obj\n        .map((value: ObjectValue) => {\n          // Check key value equality before possibly modifying it\n          let canShorthand = false;\n          if ('key' in value) {\n            const { key } = value;\n            canShorthand = key === value.value;\n            const firstDigitAndNonDigits =\n              key.match(/^[0-9]/) && key.match(/\\D+/g);\n            if (\n              (firstDigitAndNonDigits || key.match(/\\W/g) || key === '') &&\n              !key.startsWith(\"'\") &&\n              !key.endsWith(\"'\")\n            ) {\n              value.key = `'${key}'`;\n            }\n          }\n          let assignment: ObjectAssignment;\n          if ('spread' in value) {\n            const nameIdentifier = isTsNode(value.spread)\n              ? value.spread\n              : createIdentifier({ text: value.spread });\n            assignment = ts.factory.createSpreadAssignment(\n              value.assertion\n                ? createAsExpression({\n                    expression: nameIdentifier,\n                    type:\n                      typeof value.assertion === 'string'\n                        ? createKeywordTypeNode({ keyword: value.assertion })\n                        : value.assertion,\n                  })\n                : nameIdentifier,\n            );\n          } else if (value.shorthand || (shorthand && canShorthand)) {\n            assignment = ts.factory.createShorthandPropertyAssignment(\n              value.value,\n            );\n          } else {\n            let initializer: ts.Expression | undefined = isTsNode(value.value)\n              ? value.value\n              : Array.isArray(value.value) &&\n                  (!value.value.length || typeof value.value[0] === 'object')\n                ? createObjectType({\n                    multiLine,\n                    obj: value.value,\n                    shorthand,\n                    unescape,\n                  })\n                : toExpression({\n                    identifiers: identifiers.includes(value.key)\n                      ? Object.keys(value.value)\n                      : [],\n                    isValueAccess: value.isValueAccess,\n                    shorthand,\n                    unescape,\n                    value: value.value,\n                  });\n            if (!initializer) {\n              return;\n            }\n            // Create a identifier if the current key is one and it is not an object\n            if (\n              identifiers.includes(value.key) &&\n              !ts.isObjectLiteralExpression(initializer)\n            ) {\n              initializer = createIdentifier({ text: value.value as string });\n            }\n            assignment = createPropertyAssignment({\n              initializer,\n              name: value.key,\n            });\n          }\n\n          addLeadingComments({\n            comments: value.comments,\n            node: assignment,\n          });\n\n          return assignment;\n        })\n        .filter(isType<ObjectAssignment>)\n    : Object.entries(obj)\n        .map(([key, value]) => {\n          // Pass all object properties as identifiers if the whole object is an identifier\n          let initializer: ts.Expression | undefined = toExpression({\n            identifiers: identifiers.includes(key) ? Object.keys(value) : [],\n            shorthand,\n            unescape,\n            value,\n          });\n          if (!initializer) {\n            return;\n          }\n          // Create a identifier if the current key is one and it is not an object\n          if (\n            identifiers.includes(key) &&\n            !ts.isObjectLiteralExpression(initializer)\n          ) {\n            initializer = createIdentifier({ text: value as string });\n          }\n          // Check key value equality before possibly modifying it\n          const canShorthand = key === value;\n          if (\n            key.match(/^[0-9]/) &&\n            key.match(/\\D+/g) &&\n            !key.startsWith(\"'\") &&\n            !key.endsWith(\"'\")\n          ) {\n            key = `'${key}'`;\n          }\n          if (key.match(/\\W/g) && !key.startsWith(\"'\") && !key.endsWith(\"'\")) {\n            key = `'${key}'`;\n          }\n          const assignment =\n            shorthand && canShorthand\n              ? ts.factory.createShorthandPropertyAssignment(value)\n              : createPropertyAssignment({ initializer, name: key });\n\n          return assignment;\n        })\n        .filter(isType<ObjectAssignment>);\n\n  const node = ts.factory.createObjectLiteralExpression(\n    properties as any[],\n    multiLine,\n  );\n\n  addLeadingComments({\n    comments,\n    node,\n  });\n\n  return node;\n};\n\n/**\n * Create enum declaration. Example `export enum T = { X, Y };`\n * @param comments - comments to add to each property.\n * @param leadingComment - leading comment to add to enum.\n * @param name - the name of the enum.\n * @param obj - the object representing the enum.\n * @returns ts.EnumDeclaration\n */\nexport const createEnumDeclaration = <\n  T extends Record<string, any> | Array<ObjectValue>,\n>({\n  comments: enumMemberComments = {},\n  leadingComment: comments,\n  name,\n  obj,\n}: {\n  comments?: Record<string | number, Comments>;\n  leadingComment?: Comments;\n  name: string;\n  obj: T;\n}): ts.EnumDeclaration => {\n  const members: Array<ts.EnumMember> = Array.isArray(obj)\n    ? obj.map((value) => {\n        const enumMember = createEnumMember({\n          initializer: toExpression({\n            value: value.value,\n          }),\n          name: value.key,\n        });\n\n        addLeadingComments({\n          comments: value.comments,\n          node: enumMember,\n        });\n\n        return enumMember;\n      })\n    : // TODO: parser - deprecate object syntax\n      Object.entries(obj).map(([key, value]) => {\n        const enumMember = ts.factory.createEnumMember(\n          key,\n          toExpression({\n            unescape: true,\n            value,\n          }),\n        );\n\n        addLeadingComments({\n          comments: enumMemberComments[key],\n          node: enumMember,\n        });\n\n        return enumMember;\n      });\n\n  const node = ts.factory.createEnumDeclaration(\n    [createModifier({ keyword: 'export' })],\n    createIdentifier({ text: name }),\n    members,\n  );\n\n  addLeadingComments({\n    comments,\n    node,\n  });\n\n  return node;\n};\n\nconst createEnumMember = ({\n  initializer,\n  name,\n}: {\n  initializer?: ts.Expression;\n  name: string | ts.PropertyName;\n}) => {\n  let key = name;\n  if (typeof key === 'string') {\n    if (key.includes(\"'\")) {\n      key = createStringLiteral({\n        isSingleQuote: false,\n        text: key,\n      });\n    } else {\n      key = escapeName(key);\n    }\n  }\n  return ts.factory.createEnumMember(key, initializer);\n};\n\n/**\n * Create namespace declaration. Example `export namespace MyNamespace { ... }`\n * @param name - the name of the namespace.\n * @param nodes - the nodes in the namespace.\n * @returns\n */\nexport const createNamespaceDeclaration = ({\n  name,\n  statements,\n}: {\n  name: string;\n  statements: Array<ts.Statement>;\n}) =>\n  ts.factory.createModuleDeclaration(\n    [createModifier({ keyword: 'export' })],\n    createIdentifier({ text: name }),\n    ts.factory.createModuleBlock(statements),\n    ts.NodeFlags.Namespace,\n  );\n\nexport const createIndexedAccessTypeNode = ({\n  indexType,\n  objectType,\n}: {\n  indexType: ts.TypeNode;\n  objectType: ts.TypeNode;\n}) => {\n  const node = ts.factory.createIndexedAccessTypeNode(objectType, indexType);\n  return node;\n};\n\nexport const createStringLiteral = ({\n  isSingleQuote,\n  text,\n}: {\n  isSingleQuote?: boolean;\n  text: string;\n}) => {\n  if (isSingleQuote === undefined) {\n    isSingleQuote = !text.includes(\"'\");\n  }\n  const node = ts.factory.createStringLiteral(text, isSingleQuote);\n  return node;\n};\n\nexport const createConditionalExpression = ({\n  condition,\n  whenFalse,\n  whenTrue,\n}: {\n  condition: ts.Expression;\n  whenFalse: ts.Expression;\n  whenTrue: ts.Expression;\n}) => {\n  const expression = ts.factory.createConditionalExpression(\n    condition,\n    ts.factory.createToken(ts.SyntaxKind.QuestionToken),\n    whenTrue,\n    ts.factory.createToken(ts.SyntaxKind.ColonToken),\n    whenFalse,\n  );\n  return expression;\n};\n\nexport const createTypeOfExpression = ({ text }: { text: string }) => {\n  const expression = ts.factory.createTypeOfExpression(\n    createIdentifier({ text }),\n  );\n  return expression;\n};\n\n/**\n * Create a type alias declaration. Example `export type X = Y;`.\n * @param comment (optional) comments to add\n * @param name the name of the type\n * @param type the type\n * @returns ts.TypeAliasDeclaration\n */\nexport const createTypeAliasDeclaration = ({\n  comment,\n  exportType,\n  name,\n  type,\n  typeParameters = [],\n}: {\n  comment?: Comments;\n  exportType?: boolean;\n  name: string;\n  type: string | ts.TypeNode;\n  typeParameters?: FunctionTypeParameter[];\n}): ts.TypeAliasDeclaration => {\n  const node = ts.factory.createTypeAliasDeclaration(\n    exportType ? [createModifier({ keyword: 'export' })] : undefined,\n    createIdentifier({ text: name }),\n    toTypeParameters(typeParameters),\n    createTypeNode(type),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node,\n  });\n\n  return node;\n};\n\nexport const createTypeReferenceNode = ({\n  typeArguments,\n  typeName,\n}: {\n  typeArguments?: ts.TypeNode[];\n  typeName: string | ts.EntityName;\n}) => {\n  const node = ts.factory.createTypeReferenceNode(typeName, typeArguments);\n  return node;\n};\n\nexport const createTypeParenthesizedNode = ({\n  type,\n}: {\n  type: ts.TypeNode;\n}) => {\n  const node = ts.factory.createParenthesizedType(type);\n  return node;\n};\n\nexport const createParameterDeclaration = ({\n  initializer,\n  modifiers,\n  name,\n  required = true,\n  type,\n}: {\n  initializer?: ts.Expression;\n  modifiers?: ReadonlyArray<ts.ModifierLike>;\n  name: string | ts.BindingName;\n  required?: boolean;\n  type?: ts.TypeNode;\n}) => {\n  const node = ts.factory.createParameterDeclaration(\n    modifiers,\n    undefined,\n    name,\n    required ? undefined : ts.factory.createToken(ts.SyntaxKind.QuestionToken),\n    type,\n    initializer,\n  );\n  return node;\n};\n\nexport const createNewExpression = ({\n  argumentsArray,\n  expression,\n  typeArguments,\n}: {\n  argumentsArray?: Array<ts.Expression>;\n  expression: ts.Expression;\n  typeArguments?: Array<ts.TypeNode>;\n}) => {\n  const node = ts.factory.createNewExpression(\n    expression,\n    typeArguments,\n    argumentsArray,\n  );\n  return node;\n};\n\nexport const createForOfStatement = ({\n  awaitModifier,\n  expression,\n  initializer,\n  statement,\n}: {\n  // TODO: parser - simplify this to be await?: boolean\n  awaitModifier?: ts.AwaitKeyword;\n  expression: ts.Expression;\n  initializer: ts.ForInitializer;\n  statement: ts.Statement;\n}) => {\n  const node = ts.factory.createForOfStatement(\n    awaitModifier,\n    initializer,\n    expression,\n    statement,\n  );\n  return node;\n};\n\nexport const createAssignment = ({\n  left,\n  right,\n}: {\n  left: ts.Expression;\n  right: ts.Expression;\n}) => ts.factory.createAssignment(left, right);\n\nexport const createBlock = ({\n  multiLine = true,\n  statements,\n}: {\n  multiLine?: boolean;\n  statements: Array<ts.Statement>;\n}) => ts.factory.createBlock(statements, multiLine);\n\nexport const createPropertyAssignment = ({\n  initializer,\n  name,\n}: {\n  initializer: ts.Expression;\n  name: string | ts.PropertyName;\n}) => ts.factory.createPropertyAssignment(name, initializer);\n\nexport const createRegularExpressionLiteral = ({\n  flags = [],\n  text,\n}: {\n  flags?: ReadonlyArray<'g' | 'i' | 'm' | 's' | 'u' | 'y'>;\n  text: string;\n}) => {\n  const textWithSlashes =\n    text.startsWith('/') && text.endsWith('/') ? text : `/${text}/`;\n  return ts.factory.createRegularExpressionLiteral(\n    `${textWithSlashes}${flags.join('')}`,\n  );\n};\n\nexport const createAsExpression = ({\n  expression,\n  type,\n}: {\n  expression: ts.Expression;\n  type: ts.TypeNode;\n}) => ts.factory.createAsExpression(expression, type);\n\nexport const createTemplateLiteralType = ({\n  value,\n}: {\n  value: ReadonlyArray<string | ts.TypeNode>;\n}) => {\n  const spans: Array<ts.TemplateLiteralTypeSpan> = [];\n  let spanText = '';\n\n  for (const item of value.slice(0).reverse()) {\n    if (typeof item === 'string') {\n      spanText = `${item}${spanText}`;\n    } else {\n      const literal = spans.length\n        ? ts.factory.createTemplateMiddle(spanText)\n        : ts.factory.createTemplateTail(spanText);\n      const span = ts.factory.createTemplateLiteralTypeSpan(item, literal);\n      spans.push(span);\n      spanText = '';\n    }\n  }\n\n  const templateLiteralType = ts.factory.createTemplateLiteralType(\n    ts.factory.createTemplateHead(spanText),\n    spans.reverse(),\n  );\n  return templateLiteralType;\n};\n","import ts from 'typescript';\n\nimport { createAsExpression, createTypeReferenceNode } from './types';\nimport {\n  addLeadingComments,\n  type Comments,\n  createIdentifier,\n  createModifier,\n  type ImportExportItemObject,\n  ots,\n} from './utils';\n\n/**\n * Create export all declaration. Example: `export * from './y'`.\n * @param module - module containing exports\n * @returns ts.ExportDeclaration\n */\nexport const createExportAllDeclaration = ({\n  module,\n}: {\n  module: string;\n}): ts.ExportDeclaration => {\n  const statement = ts.factory.createExportDeclaration(\n    undefined,\n    false,\n    undefined,\n    ots.string(module),\n  );\n  return statement;\n};\n\nexport type ImportExportItem = ImportExportItemObject | string;\n\nexport const createCallExpression = ({\n  functionName,\n  parameters = [],\n  types,\n}: {\n  functionName:\n    | string\n    | ts.PropertyAccessExpression\n    | ts.PropertyAccessChain\n    | ts.ElementAccessExpression\n    | ts.Expression;\n  parameters?: Array<string | ts.Expression | undefined>;\n  types?: ReadonlyArray<ts.TypeNode>;\n}) => {\n  const expression =\n    typeof functionName === 'string'\n      ? createIdentifier({ text: functionName })\n      : functionName;\n  const argumentsArray = parameters\n    .filter((parameter) => parameter !== undefined)\n    .map((parameter) =>\n      typeof parameter === 'string'\n        ? createIdentifier({ text: parameter })\n        : parameter,\n    );\n  const callExpression = ts.factory.createCallExpression(\n    expression,\n    types,\n    argumentsArray,\n  );\n  return callExpression;\n};\n\n/**\n * Create a named export declaration. Example: `export { X } from './y'`.\n * @param exports - named imports to export\n * @param module - module containing exports\n * @returns ts.ExportDeclaration\n */\nexport const createNamedExportDeclarations = ({\n  exports,\n  module,\n}: {\n  exports: Array<ImportExportItem> | ImportExportItem;\n  module: string;\n}): ts.ExportDeclaration => {\n  const exportedTypes = Array.isArray(exports) ? exports : [exports];\n  const hasNonTypeExport = exportedTypes.some(\n    (item) => typeof item !== 'object' || !item.asType,\n  );\n  const elements = exportedTypes.map((name) => {\n    const item = typeof name === 'string' ? { name } : name;\n    return ots.export({\n      alias: item.alias,\n      asType: hasNonTypeExport && item.asType,\n      name: item.name,\n    });\n  });\n  const exportClause = ts.factory.createNamedExports(elements);\n  const moduleSpecifier = ots.string(module);\n  const statement = ts.factory.createExportDeclaration(\n    undefined,\n    !hasNonTypeExport,\n    exportClause,\n    moduleSpecifier,\n  );\n  return statement;\n};\n\n/**\n * Create a const variable. Optionally, it can use const assertion or export\n * statement. Example: `export x = {} as const`.\n * @param assertion use const assertion?\n * @param exportConst export created variable?\n * @param expression expression for the variable.\n * @param name name of the variable.\n * @returns ts.VariableStatement\n */\nexport const createConstVariable = ({\n  assertion,\n  comment,\n  destructure,\n  exportConst,\n  expression,\n  name,\n  typeName,\n}: {\n  assertion?: 'const' | ts.TypeNode;\n  comment?: Comments;\n  destructure?: boolean;\n  exportConst?: boolean;\n  expression: ts.Expression;\n  name: string;\n  // TODO: support a more intuitive definition of generics for example\n  typeName?: string | ts.IndexedAccessTypeNode | ts.TypeNode;\n}): ts.VariableStatement => {\n  const initializer = assertion\n    ? createAsExpression({\n        expression,\n        type:\n          typeof assertion === 'string'\n            ? createTypeReferenceNode({ typeName: assertion })\n            : assertion,\n      })\n    : expression;\n  const nameIdentifier = createIdentifier({ text: name });\n  const declaration = ts.factory.createVariableDeclaration(\n    destructure\n      ? ts.factory.createObjectBindingPattern([\n          ts.factory.createBindingElement(\n            undefined,\n            undefined,\n            nameIdentifier,\n            undefined,\n          ),\n        ])\n      : nameIdentifier,\n    undefined,\n    typeName\n      ? typeof typeName === 'string'\n        ? createTypeReferenceNode({ typeName })\n        : typeName\n      : undefined,\n    initializer,\n  );\n  const statement = ts.factory.createVariableStatement(\n    exportConst ? [createModifier({ keyword: 'export' })] : undefined,\n    ts.factory.createVariableDeclarationList([declaration], ts.NodeFlags.Const),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node: statement,\n  });\n\n  return statement;\n};\n\n/**\n * Create a named import declaration. Example: `import { X } from './y'`.\n * @param imports - named exports to import\n * @param module - module containing imports\n * @returns ts.ImportDeclaration\n */\nexport const createNamedImportDeclarations = ({\n  imports,\n  module,\n}: {\n  imports: Array<ImportExportItem> | ImportExportItem;\n  module: string;\n}): ts.ImportDeclaration => {\n  const importedTypes = Array.isArray(imports) ? imports : [imports];\n  const hasNonTypeImport = importedTypes.some(\n    (item) => typeof item !== 'object' || !item.asType,\n  );\n  let namespaceImport: ImportExportItemObject | undefined;\n  const elements: Array<ts.ImportSpecifier> = [];\n  importedTypes.forEach((name) => {\n    const item = typeof name === 'string' ? { name } : name;\n    if (item.name === '*' && item.alias) {\n      namespaceImport = item;\n    } else {\n      elements.push(\n        ots.import({\n          alias: item.alias,\n          asType: hasNonTypeImport && item.asType,\n          name: item.name,\n        }),\n      );\n    }\n  });\n  const namedBindings = namespaceImport\n    ? ts.factory.createNamespaceImport(\n        createIdentifier({ text: namespaceImport.alias! }),\n      )\n    : ts.factory.createNamedImports(elements);\n  const importClause = ts.factory.createImportClause(\n    !hasNonTypeImport,\n    undefined,\n    namedBindings,\n  );\n  const moduleSpecifier = ots.string(module);\n  const statement = ts.factory.createImportDeclaration(\n    undefined,\n    importClause,\n    moduleSpecifier,\n  );\n  return statement;\n};\n","import ts from 'typescript';\n\nimport { createCallExpression } from './module';\nimport {\n  type AccessLevel,\n  createBlock,\n  createTypeNode,\n  type FunctionParameter,\n  type FunctionTypeParameter,\n  toExpression,\n  toParameterDeclarations,\n  toTypeParameters,\n} from './types';\nimport type { Comments } from './utils';\nimport {\n  addLeadingComments,\n  createIdentifier,\n  createModifier,\n  isType,\n} from './utils';\n\n/**\n * Create a class constructor declaration.\n * @param accessLevel - the access level of the constructor.\n * @param comment - comment to add to function.\n * @param multiLine - if it should be multi line.\n * @param parameters - parameters for the constructor.\n * @param statements - statements to put in the constructor body.\n * @returns ts.ConstructorDeclaration\n */\nexport const createConstructorDeclaration = ({\n  accessLevel,\n  comment,\n  multiLine = true,\n  parameters = [],\n  statements = [],\n}: {\n  accessLevel?: AccessLevel;\n  comment?: Comments;\n  multiLine?: boolean;\n  parameters?: FunctionParameter[];\n  statements?: ts.Statement[];\n}) => {\n  const modifiers = accessLevel\n    ? [createModifier({ keyword: accessLevel })]\n    : undefined;\n  const node = ts.factory.createConstructorDeclaration(\n    modifiers,\n    toParameterDeclarations(parameters),\n    createBlock({ multiLine, statements }),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node,\n  });\n\n  return node;\n};\n\n/**\n * Create a class method declaration.\n * @param accessLevel - the access level of the method.\n * @param comment - comment to add to function.\n * @param isStatic - if the function is static.\n * @param multiLine - if it should be multi line.\n * @param name - name of the method.\n * @param parameters - parameters for the method.\n * @param returnType - the return type of the method.\n * @param statements - statements to put in the constructor body.\n * @returns ts.MethodDeclaration\n */\nexport const createMethodDeclaration = ({\n  accessLevel,\n  comment,\n  isStatic = false,\n  multiLine = true,\n  name,\n  parameters = [],\n  returnType,\n  statements = [],\n  types = [],\n}: {\n  accessLevel?: AccessLevel;\n  comment?: Comments;\n  isStatic?: boolean;\n  multiLine?: boolean;\n  name: string;\n  parameters?: ReadonlyArray<FunctionParameter>;\n  returnType?: string | ts.TypeNode;\n  statements?: ts.Statement[];\n  types?: FunctionTypeParameter[];\n}) => {\n  const modifiers = accessLevel\n    ? [createModifier({ keyword: accessLevel })]\n    : [];\n\n  if (isStatic) {\n    modifiers.push(createModifier({ keyword: 'static' }));\n  }\n\n  const node = ts.factory.createMethodDeclaration(\n    modifiers,\n    undefined,\n    createIdentifier({ text: name }),\n    undefined,\n    types ? toTypeParameters(types) : undefined,\n    toParameterDeclarations(parameters),\n    returnType ? createTypeNode(returnType) : undefined,\n    createBlock({ multiLine, statements }),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node,\n  });\n\n  return node;\n};\n\ntype ClassDecorator = {\n  args: any[];\n  name: string;\n};\n\n/**\n * Create a class declaration.\n */\nexport const createClassDeclaration = ({\n  decorator,\n  exportClass,\n  extendedClasses,\n  name,\n  nodes,\n}: {\n  /**\n   * Class decorator.\n   */\n  decorator?: ClassDecorator;\n  /**\n   * @default false\n   */\n  exportClass?: boolean;\n  /**\n   * List of extended classes.\n   */\n  extendedClasses?: ReadonlyArray<string>;\n  /**\n   * Class name.\n   */\n  name: string;\n  /**\n   * Class elements.\n   */\n  nodes: ReadonlyArray<ts.ClassElement>;\n}): ts.ClassDeclaration => {\n  const modifiers: Array<ts.ModifierLike> = [];\n\n  if (exportClass) {\n    modifiers.push(createModifier({ keyword: 'export' }));\n  }\n\n  if (decorator) {\n    modifiers.unshift(\n      ts.factory.createDecorator(\n        createCallExpression({\n          functionName: decorator.name,\n          parameters: decorator.args\n            .map((arg) => toExpression({ value: arg }))\n            .filter(isType<ts.Expression>),\n        }),\n      ),\n    );\n  }\n\n  const heritageClauses: Array<ts.HeritageClause> = [];\n\n  if (extendedClasses) {\n    for (const extendedClass of extendedClasses) {\n      heritageClauses.push(\n        ts.factory.createHeritageClause(ts.SyntaxKind.ExtendsKeyword, [\n          ts.factory.createExpressionWithTypeArguments(\n            createIdentifier({ text: extendedClass }),\n            undefined,\n          ),\n        ]),\n      );\n    }\n  }\n\n  return ts.factory.createClassDeclaration(\n    modifiers,\n    createIdentifier({ text: name }),\n    undefined,\n    heritageClauses,\n    nodes,\n  );\n};\n","import ts from 'typescript';\n\nexport const expressionToStatement = ({\n  expression,\n}: {\n  expression: ts.Expression;\n}) => {\n  const statement = ts.factory.createExpressionStatement(expression);\n  return statement;\n};\n","import ts from 'typescript';\n\nimport { createCallExpression } from './module';\nimport { createTypeReferenceNode } from './types';\nimport { createIdentifier, isType } from './utils';\n\nexport const createReturnStatement = ({\n  expression,\n}: {\n  expression?: ts.Expression;\n}) => ts.factory.createReturnStatement(expression);\n\n/**\n * Create a return function call statement.\n *\n * @example `return fn<string>(params)`\n *\n * @returns ts.ReturnStatement\n */\nexport const createReturnFunctionCall = ({\n  args = [],\n  name,\n  types = [],\n}: {\n  /**\n   * Arguments to pass to the function.\n   */\n  args: any[];\n  /**\n   * Name of the function to call or expression.\n   */\n  name: string | ts.Expression;\n  /**\n   * List of function types.\n   */\n  types?: ReadonlyArray<string | ts.StringLiteral>;\n}) => {\n  const typeArguments = types.map((type) =>\n    // this works with string literals too despite throwing a type error.\n    // should be probably fixed at some point...\n    // @ts-expect-error\n    createTypeReferenceNode({ typeName: type }),\n  );\n  const argumentsArray = args\n    .map((arg) =>\n      ts.isExpression(arg) ? arg : createIdentifier({ text: arg }),\n    )\n    .filter(isType<ts.Identifier | ts.Expression>);\n  const expression = createCallExpression({\n    functionName: name,\n    parameters: argumentsArray,\n    types: typeArguments,\n  });\n  const statement = createReturnStatement({ expression });\n  return statement;\n};\n\nexport const createReturnVariable = ({\n  expression,\n}: {\n  expression: string | ts.Expression;\n}) => {\n  const statement = createReturnStatement({\n    expression:\n      typeof expression === 'string'\n        ? createIdentifier({ text: expression })\n        : expression,\n  });\n  return statement;\n};\n","import ts from 'typescript';\n\nimport { validTypescriptIdentifierRegExp } from '../utils/regexp';\nimport { expressionToStatement } from './convert';\nimport { createCallExpression } from './module';\nimport {\n  createArrowFunction,\n  createBlock,\n  createNewExpression,\n  createPropertyAccessChain,\n  createPropertyAccessExpression,\n} from './types';\nimport { createIdentifier } from './utils';\n\nexport const createSafeAccessExpression = (path: string[]) =>\n  path.slice(1).reduce<ts.Expression>(\n    (expression, element) => {\n      validTypescriptIdentifierRegExp.lastIndex = 0;\n      if (validTypescriptIdentifierRegExp.test(element)) {\n        return createPropertyAccessChain({\n          expression,\n          name: element,\n        });\n      }\n\n      return ts.factory.createElementAccessChain(\n        expression,\n        ts.factory.createToken(ts.SyntaxKind.QuestionDotToken),\n        createIdentifier({ text: element }),\n      );\n    },\n    createIdentifier({ text: path[0]! }),\n  );\n\nexport const createAccessExpression = (path: string[]) =>\n  path.slice(1).reduce<ts.Expression>(\n    (expression, element) =>\n      createPropertyAccessExpression({\n        expression,\n        name: element,\n      }),\n    createIdentifier({ text: path[0]! }),\n  );\n\n/**\n * Handles an array of access expressions instead of nesting them (default TypeScript syntax)\n */\nexport const createPropertyAccessExpressions = ({\n  expressions,\n}: {\n  expressions: Array<string | ts.Expression | ts.MemberName>;\n}): ts.PropertyAccessExpression => {\n  const expression = expressions.reduce((expression, name) => {\n    const node = createPropertyAccessExpression({\n      expression,\n      // @ts-expect-error\n      name,\n    });\n    return node;\n  });\n  return expression as ts.PropertyAccessExpression;\n};\n\nexport const createBinaryExpression = ({\n  left,\n  operator = '=',\n  right,\n}: {\n  left: ts.Expression;\n  operator?: '=' | '===' | 'in' | '??';\n  right: ts.Expression | string;\n}) => {\n  const expression = ts.factory.createBinaryExpression(\n    left,\n    // TODO: add support for other tokens\n    operator === '='\n      ? ts.SyntaxKind.EqualsToken\n      : operator === '==='\n        ? ts.SyntaxKind.EqualsEqualsEqualsToken\n        : operator === '??'\n          ? ts.SyntaxKind.QuestionQuestionToken\n          : ts.SyntaxKind.InKeyword,\n    typeof right === 'string' ? createIdentifier({ text: right }) : right,\n  );\n  return expression;\n};\n\nexport const createIfStatement = ({\n  elseStatement,\n  expression,\n  thenStatement,\n}: {\n  elseStatement?: ts.Statement;\n  expression: ts.Expression;\n  thenStatement: ts.Statement;\n}) => ts.factory.createIfStatement(expression, thenStatement, elseStatement);\n\nexport const createDateTransformMutation = ({\n  path,\n}: {\n  path: string[];\n}): ts.Statement => {\n  const safeAccessExpression = createSafeAccessExpression(path);\n  const accessExpression = createAccessExpression(path);\n\n  const thenStatement = createBlock({\n    statements: [\n      expressionToStatement({\n        expression: createBinaryExpression({\n          left: accessExpression,\n          right: createNewExpression({\n            argumentsArray: [accessExpression],\n            expression: createIdentifier({ text: 'Date' }),\n          }),\n        }),\n      }),\n    ],\n  });\n\n  const statement = createIfStatement({\n    expression: safeAccessExpression,\n    thenStatement,\n  });\n\n  return statement;\n};\n\nexport const createFunctionTransformMutation = ({\n  path,\n  transformerName,\n}: {\n  path: string[];\n  transformerName: string;\n}) => {\n  const safeAccessExpression = createSafeAccessExpression(path);\n  const accessExpression = createAccessExpression(path);\n\n  const thenStatement = createBlock({\n    statements: [\n      expressionToStatement({\n        expression: createCallExpression({\n          functionName: transformerName,\n          parameters: [accessExpression],\n        }),\n      }),\n    ],\n  });\n\n  const statement = [\n    createIfStatement({\n      expression: safeAccessExpression,\n      thenStatement,\n    }),\n  ];\n\n  return statement;\n};\n\nexport const createArrayTransformMutation = ({\n  path,\n  transformerName,\n}: {\n  path: string[];\n  transformerName: string;\n}): ts.Statement => {\n  const safeAccessExpression = createSafeAccessExpression(path);\n  const accessExpression = createAccessExpression(path);\n\n  const statement = createIfStatement({\n    expression: createCallExpression({\n      functionName: createPropertyAccessExpression({\n        expression: 'Array',\n        name: 'isArray',\n      }),\n      parameters: [safeAccessExpression],\n    }),\n    thenStatement: createBlock({\n      statements: [\n        expressionToStatement({\n          expression: ts.factory.createCallChain(\n            createPropertyAccessExpression({\n              expression: accessExpression,\n              name: 'forEach',\n            }),\n            undefined,\n            undefined,\n            [createIdentifier({ text: transformerName })],\n          ),\n        }),\n      ],\n    }),\n  });\n\n  return statement;\n};\n\nexport const createDateTransformerExpression = ({\n  parameterName,\n}: {\n  parameterName: string;\n}) => {\n  const expression = createIdentifier({ text: 'Date' });\n  const newExpression = createNewExpression({\n    argumentsArray: [createIdentifier({ text: parameterName })],\n    expression,\n  });\n  return newExpression;\n};\n\nexport const createArrayMapTransform = ({\n  path,\n  transformExpression,\n}: {\n  path: string[];\n  transformExpression: ts.Expression;\n}) => {\n  const safeAccessExpression = createSafeAccessExpression(path);\n  const accessExpression = createAccessExpression(path);\n\n  const statement = createIfStatement({\n    expression: createCallExpression({\n      functionName: createPropertyAccessExpression({\n        expression: 'Array',\n        name: 'isArray',\n      }),\n      parameters: [safeAccessExpression],\n    }),\n    thenStatement: createBlock({\n      statements: [\n        expressionToStatement({\n          expression: createBinaryExpression({\n            left: accessExpression,\n            right: ts.factory.createCallChain(\n              createPropertyAccessExpression({\n                expression: accessExpression,\n                name: 'map',\n              }),\n              undefined,\n              undefined,\n              [\n                createArrowFunction({\n                  parameters: [\n                    {\n                      name: 'item',\n                    },\n                  ],\n                  statements: transformExpression,\n                }),\n              ],\n            ),\n          }),\n        }),\n      ],\n    }),\n  });\n\n  return statement;\n};\n","import ts from 'typescript';\n\nimport { validTypescriptIdentifierRegExp } from '../utils/regexp';\nimport {\n  createKeywordTypeNode,\n  createMappedTypeNode,\n  createParameterDeclaration,\n  createStringLiteral,\n  createTypeNode,\n  createTypeParameterDeclaration,\n  createTypeReferenceNode,\n} from './types';\nimport {\n  addLeadingComments,\n  type Comments,\n  createIdentifier,\n  createModifier,\n  tsNodeToString,\n} from './utils';\n\nconst nullNode = createTypeReferenceNode({ typeName: 'null' });\n\n// Property of a interface type node.\nexport type Property = {\n  comment?: Comments;\n  isReadOnly?: boolean;\n  isRequired?: boolean;\n  name: string | ts.PropertyName;\n  type: any | ts.TypeNode;\n};\n\n/**\n * Returns a union of provided node with null if marked as nullable,\n * otherwise returns the provided node unmodified.\n */\nconst maybeNullable = ({\n  isNullable,\n  node,\n}: {\n  isNullable?: boolean;\n  node: ts.TypeNode;\n}) => {\n  if (!isNullable) {\n    return node;\n  }\n  return ts.factory.createUnionTypeNode([node, nullNode]);\n};\n\n/**\n * Create a interface type node. Example `{ readonly x: string, y?: number }`\n * @param properties - the properties of the interface.\n * @param isNullable - if the whole interface can be nullable\n * @returns ts.TypeLiteralNode | ts.TypeUnionNode\n */\nexport const createTypeInterfaceNode = ({\n  indexKey,\n  indexProperty,\n  isNullable,\n  properties,\n  useLegacyResolution,\n}: {\n  /**\n   * Adds an index key type.\n   *\n   * @example\n   * ```ts\n   * type IndexKey = {\n   *   [key in Foo]: string\n   * }\n   * ```\n   */\n  indexKey?: string;\n  /**\n   * Adds an index signature if defined.\n   *\n   * @example\n   * ```ts\n   * type IndexProperty = {\n   *   [key: string]: string\n   * }\n   * ```\n   */\n  indexProperty?: Property;\n  isNullable?: boolean;\n  properties: Property[];\n  useLegacyResolution: boolean;\n}) => {\n  const propertyTypes: Array<ts.TypeNode> = [];\n\n  const members: Array<ts.TypeElement | ts.MappedTypeNode> = properties.map(\n    (property) => {\n      const modifiers: readonly ts.Modifier[] | undefined = property.isReadOnly\n        ? [createModifier({ keyword: 'readonly' })]\n        : undefined;\n\n      const questionToken: ts.QuestionToken | undefined =\n        property.isRequired !== false\n          ? undefined\n          : ts.factory.createToken(ts.SyntaxKind.QuestionToken);\n\n      const type: ts.TypeNode | undefined = createTypeNode(property.type);\n      propertyTypes.push(type);\n\n      const signature = ts.factory.createPropertySignature(\n        modifiers,\n        useLegacyResolution ||\n          (typeof property.name === 'string' &&\n            property.name.match(validTypescriptIdentifierRegExp)) ||\n          (typeof property.name !== 'string' &&\n            ts.isPropertyName(property.name))\n          ? property.name\n          : createStringLiteral({ text: property.name }),\n        questionToken,\n        type,\n      );\n\n      addLeadingComments({\n        comments: property.comment,\n        node: signature,\n      });\n\n      return signature;\n    },\n  );\n\n  let isIndexMapped = false;\n\n  if (indexProperty) {\n    if (!properties.length && indexKey) {\n      const indexSignature = createMappedTypeNode({\n        questionToken: ts.factory.createToken(ts.SyntaxKind.QuestionToken),\n        type:\n          indexProperty.type ?? createKeywordTypeNode({ keyword: 'string' }),\n        typeParameter: createTypeParameterDeclaration({\n          constraint: createTypeReferenceNode({ typeName: indexKey }),\n          name: createIdentifier({ text: String(indexProperty.name) }),\n        }),\n      });\n      members.push(indexSignature);\n      isIndexMapped = true;\n    } else {\n      const modifiers: ReadonlyArray<ts.Modifier> | undefined =\n        indexProperty.isReadOnly\n          ? [createModifier({ keyword: 'readonly' })]\n          : undefined;\n      const indexSignature = ts.factory.createIndexSignature(\n        modifiers,\n        [\n          createParameterDeclaration({\n            name: createIdentifier({ text: String(indexProperty.name) }),\n            type: createKeywordTypeNode({ keyword: 'string' }),\n          }),\n        ],\n        createTypeNode(indexProperty.type),\n      );\n      members.push(indexSignature);\n    }\n  }\n\n  const node = isIndexMapped\n    ? members[0]!\n    : // @ts-expect-error\n      ts.factory.createTypeLiteralNode(members);\n  return maybeNullable({\n    isNullable,\n    // @ts-expect-error\n    node,\n  });\n};\n\n/**\n * Create type union node. Example `string | number | boolean`\n * @param types - the types in the union\n * @param isNullable - if the whole type can be null\n * @returns ts.UnionTypeNode\n */\nexport const createTypeUnionNode = ({\n  isNullable,\n  types,\n}: {\n  isNullable?: boolean;\n  types: (any | ts.TypeNode)[];\n}) => {\n  const nodes = types.map((type) => createTypeNode(type));\n  const node = ts.factory.createUnionTypeNode(nodes);\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type intersection node. Example `string & number & boolean`\n * @param types - the types in the union\n * @param isNullable - if the whole type can be null\n * @returns ts.IntersectionTypeNode | ts.UnionTypeNode\n */\nexport const createTypeIntersectionNode = ({\n  isNullable,\n  types,\n}: {\n  isNullable?: boolean;\n  types: (any | ts.TypeNode)[];\n}) => {\n  const nodes = types.map((type) => createTypeNode(type));\n  const node = ts.factory.createIntersectionTypeNode(nodes);\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type tuple node. Example `string, number, boolean`\n * @param isNullable if the whole type can be null\n * @param types the types in the union\n * @returns ts.UnionTypeNode\n */\nexport const createTypeTupleNode = ({\n  isNullable = false,\n  types,\n}: {\n  isNullable?: boolean;\n  types: Array<any | ts.TypeNode>;\n}) => {\n  const nodes = types.map((type) => createTypeNode(type));\n  const node = ts.factory.createTupleTypeNode(nodes);\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type record node. Example `{ [key: string]: string }`\n * @param keys - key types.\n * @param values - value types.\n * @param isNullable - if the whole type can be null\n * @returns ts.TypeReferenceNode | ts.UnionTypeNode\n */\nexport const createTypeRecordNode = (\n  keys: (any | ts.TypeNode)[],\n  values: (any | ts.TypeNode)[],\n  isNullable: boolean = false,\n  useLegacyResolution: boolean = true,\n) => {\n  const keyNode = createTypeUnionNode({\n    types: keys,\n  });\n  const valueNode = createTypeUnionNode({\n    types: values,\n  });\n  // NOTE: We use the syntax `{ [key: string]: string }` because using a Record causes\n  //       invalid types with circular dependencies. This is functionally the same.\n  // Ref: https://github.com/hey-api/openapi-ts/issues/370\n  const node = createTypeInterfaceNode({\n    properties: [\n      {\n        name: `[key: ${tsNodeToString({ node: keyNode, unescape: true })}]`,\n        type: valueNode,\n      },\n    ],\n    useLegacyResolution,\n  });\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type array node. Example `Array<string | number>`\n * @param types - the types\n * @param isNullable - if the whole type can be null\n * @returns ts.TypeReferenceNode | ts.UnionTypeNode\n */\nexport const createTypeArrayNode = (\n  types: (any | ts.TypeNode)[] | ts.TypeNode | string,\n  isNullable: boolean = false,\n) => {\n  const node = createTypeReferenceNode({\n    typeArguments: [\n      // @ts-expect-error\n      Array.isArray(types) ? createTypeUnionNode({ types }) : types,\n    ],\n    typeName: 'Array',\n  });\n  return maybeNullable({ isNullable, node });\n};\n","import * as classes from './classes';\nimport * as convert from './convert';\nimport * as module from './module';\nimport * as _return from './return';\nimport * as transform from './transform';\nimport * as typedef from './typedef';\nimport * as types from './types';\nimport * as utils from './utils';\n\nexport type { Property } from './typedef';\nexport type { FunctionParameter } from './types';\nexport type { Comments } from './utils';\n\nexport const compiler = {\n  anonymousFunction: types.createAnonymousFunction,\n  arrayLiteralExpression: types.createArrayLiteralExpression,\n  arrowFunction: types.createArrowFunction,\n  asExpression: types.createAsExpression,\n  assignment: types.createAssignment,\n  awaitExpression: types.createAwaitExpression,\n  binaryExpression: transform.createBinaryExpression,\n  block: types.createBlock,\n  callExpression: module.createCallExpression,\n  classDeclaration: classes.createClassDeclaration,\n  conditionalExpression: types.createConditionalExpression,\n  constVariable: module.createConstVariable,\n  constructorDeclaration: classes.createConstructorDeclaration,\n  enumDeclaration: types.createEnumDeclaration,\n  exportAllDeclaration: module.createExportAllDeclaration,\n  exportNamedDeclaration: module.createNamedExportDeclarations,\n  expressionToStatement: convert.expressionToStatement,\n  forOfStatement: types.createForOfStatement,\n  functionTypeNode: types.createFunctionTypeNode,\n  identifier: utils.createIdentifier,\n  ifStatement: transform.createIfStatement,\n  indexedAccessTypeNode: types.createIndexedAccessTypeNode,\n  isTsNode: utils.isTsNode,\n  keywordTypeNode: types.createKeywordTypeNode,\n  literalTypeNode: types.createLiteralTypeNode,\n  mappedTypeNode: types.createMappedTypeNode,\n  methodDeclaration: classes.createMethodDeclaration,\n  namedImportDeclarations: module.createNamedImportDeclarations,\n  namespaceDeclaration: types.createNamespaceDeclaration,\n  newExpression: types.createNewExpression,\n  nodeToString: utils.tsNodeToString,\n  null: types.createNull,\n  objectExpression: types.createObjectType,\n  ots: utils.ots,\n  parameterDeclaration: types.createParameterDeclaration,\n  propertyAccessExpression: types.createPropertyAccessExpression,\n  propertyAccessExpressions: transform.createPropertyAccessExpressions,\n  propertyAssignment: types.createPropertyAssignment,\n  propertyDeclaration: utils.createPropertyDeclaration,\n  regularExpressionLiteral: types.createRegularExpressionLiteral,\n  returnFunctionCall: _return.createReturnFunctionCall,\n  returnStatement: _return.createReturnStatement,\n  returnVariable: _return.createReturnVariable,\n  safeAccessExpression: transform.createSafeAccessExpression,\n  stringLiteral: types.createStringLiteral,\n  stringToTsNodes: utils.stringToTsNodes,\n  templateLiteralType: types.createTemplateLiteralType,\n  this: utils.createThis,\n  transformArrayMap: transform.createArrayMapTransform,\n  transformArrayMutation: transform.createArrayTransformMutation,\n  transformDateMutation: transform.createDateTransformMutation,\n  transformFunctionMutation: transform.createFunctionTransformMutation,\n  transformNewDate: transform.createDateTransformerExpression,\n  typeAliasDeclaration: types.createTypeAliasDeclaration,\n  typeArrayNode: typedef.createTypeArrayNode,\n  typeInterfaceNode: typedef.createTypeInterfaceNode,\n  typeIntersectionNode: typedef.createTypeIntersectionNode,\n  typeNode: types.createTypeNode,\n  typeOfExpression: types.createTypeOfExpression,\n  typeOperatorNode: types.createTypeOperatorNode,\n  typeParameterDeclaration: types.createTypeParameterDeclaration,\n  typeParenthesizedNode: types.createTypeParenthesizedNode,\n  typeRecordNode: typedef.createTypeRecordNode,\n  typeReferenceNode: types.createTypeReferenceNode,\n  typeTupleNode: typedef.createTypeTupleNode,\n  typeUnionNode: typedef.createTypeUnionNode,\n  valueToExpression: types.toExpression,\n};\n","import type { PathLike } from 'node:fs';\nimport fs from 'node:fs';\n\nexport const ensureDirSync = (path: PathLike) => {\n  if (!fs.existsSync(path)) {\n    fs.mkdirSync(path, { recursive: true });\n  }\n};\n\nexport const removeDirSync = (path: PathLike) => {\n  if (fs.existsSync(path)) {\n    fs.rmSync(path, { force: true, recursive: true });\n  }\n};\n\n/**\n * Construct a relative import path to modules. This is used for example\n * in plugins to import types or SDK module.\n */\nexport const relativeModulePath = ({\n  moduleOutput,\n  sourceOutput,\n}: {\n  /**\n   * Output path to the imported module.\n   * @example\n   * 'types'\n   */\n  moduleOutput: string;\n  /**\n   * Output path to the source module.\n   * @example\n   * '@tanstack/react-query'\n   */\n  sourceOutput: string;\n}): string => {\n  const outputParts = sourceOutput.split('/');\n  const relativePath =\n    Array.from({ length: outputParts.length }).fill('').join('../') || './';\n  return `${relativePath}${moduleOutput}`;\n};\n","import fs from 'node:fs';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\n\nimport ts from 'typescript';\n\nimport type { ImportExportItemObject } from '../compiler/utils';\nimport type { Client } from '../plugins/@hey-api/client-core/types';\nimport { getClientPlugin } from '../plugins/@hey-api/client-core/utils';\nimport type { DefinePlugin } from '../plugins/types';\nimport type { Config } from '../types/config';\nimport { ensureDirSync, relativeModulePath } from './utils';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst getClientSrcPath = (name: string) => {\n  const pluginFilePathComponents = name.split(path.sep);\n  const clientSrcPath = pluginFilePathComponents\n    .slice(0, pluginFilePathComponents.length - 1)\n    .join(path.sep);\n  return clientSrcPath;\n};\n\n/**\n * Returns path to the client module. When using client packages, this will be\n * simply the name of the package. When bundling a client, this will be a\n * relative path to the bundled client folder.\n */\nexport const clientModulePath = ({\n  config,\n  sourceOutput,\n}: {\n  config: Config;\n  sourceOutput: string;\n}): string => {\n  const client = getClientPlugin(config);\n\n  if ('bundle' in client.config && client.config.bundle) {\n    return relativeModulePath({\n      moduleOutput: 'client',\n      sourceOutput,\n    });\n  }\n\n  if (path.isAbsolute(client.name)) {\n    const clientSrcPath = getClientSrcPath(client.name);\n    const outputPath = path.resolve(config.output.path);\n    return path.relative(outputPath, clientSrcPath).replace(/\\\\/g, '/');\n  }\n\n  return client.name;\n};\n\nexport const clientApi = {\n  Options: {\n    asType: true,\n    name: 'Options',\n  },\n  OptionsLegacyParser: {\n    asType: true,\n    name: 'OptionsLegacyParser',\n  },\n} satisfies Record<string, ImportExportItemObject>;\n\nconst replaceRelativeImports = (filePath: string) => {\n  let content = fs.readFileSync(filePath, 'utf8');\n\n  // Replace relative imports to append .js extension for ESM compatibility\n  // This handles patterns like: from './foo' -> from './foo.js'\n  // and: from '../bar' -> from '../bar.js'\n  content = content.replace(\n    /from\\s+['\"](\\.\\.?\\/[^'\"]*?)['\"]/g,\n    (match, importPath) => {\n      // Don't add .js if it already has an extension\n      const lastSlashIndex = importPath.lastIndexOf('/');\n      const fileName =\n        lastSlashIndex >= 0 ? importPath.slice(lastSlashIndex + 1) : importPath;\n      if (fileName.includes('.')) {\n        return match;\n      }\n      return `from '${importPath}.js'`;\n    },\n  );\n\n  fs.writeFileSync(filePath, content, 'utf8');\n};\n\n/**\n * Creates a `client` folder containing the same modules as the client package.\n */\nexport const generateClientBundle = ({\n  outputPath,\n  plugin,\n  tsConfig,\n}: {\n  outputPath: string;\n  plugin: DefinePlugin<Client.Config & { name: string }>['Config'];\n  tsConfig: ts.ParsedCommandLine | null;\n}): void => {\n  // copy Hey API clients to output\n  const isHeyApiClientPlugin = plugin.name.startsWith('@hey-api/client-');\n  if (isHeyApiClientPlugin) {\n    const shouldAppendJs =\n      tsConfig?.options.moduleResolution === ts.ModuleResolutionKind.NodeNext;\n\n    // copy client core\n    const coreOutputPath = path.resolve(outputPath, 'core');\n    ensureDirSync(coreOutputPath);\n    const coreDistPath = path.resolve(__dirname, 'clients', 'core');\n    fs.cpSync(coreDistPath, coreOutputPath, { recursive: true });\n    if (shouldAppendJs) {\n      const coreFiles = fs.readdirSync(coreOutputPath);\n      for (const file of coreFiles) {\n        replaceRelativeImports(path.resolve(coreOutputPath, file));\n      }\n    }\n    // copy client bundle\n    const clientOutputPath = path.resolve(outputPath, 'client');\n    ensureDirSync(clientOutputPath);\n    const clientDistFolderName = plugin.name.slice('@hey-api/client-'.length);\n    const clientDistPath = path.resolve(\n      __dirname,\n      'clients',\n      clientDistFolderName,\n    );\n    fs.cpSync(clientDistPath, clientOutputPath, { recursive: true });\n    if (shouldAppendJs) {\n      const clientFiles = fs.readdirSync(clientOutputPath);\n      for (const file of clientFiles) {\n        replaceRelativeImports(path.resolve(clientOutputPath, file));\n      }\n    }\n    return;\n  }\n\n  let clientSrcPath = '';\n  if (path.isAbsolute(plugin.name)) {\n    clientSrcPath = getClientSrcPath(plugin.name);\n  }\n\n  // copy custom local client to output\n  if (clientSrcPath) {\n    const dirPath = path.resolve(outputPath, 'client');\n    ensureDirSync(dirPath);\n    fs.cpSync(clientSrcPath, dirPath, {\n      recursive: true,\n    });\n    return;\n  }\n\n  // copy third-party client to output\n  const clientModulePath = path.normalize(require.resolve(plugin.name));\n  const clientModulePathComponents = clientModulePath.split(path.sep);\n  const clientDistPath = clientModulePathComponents\n    .slice(0, clientModulePathComponents.indexOf('dist') + 1)\n    .join(path.sep);\n\n  const indexJsFile =\n    clientModulePathComponents[clientModulePathComponents.length - 1];\n  const distFiles = [indexJsFile!, 'index.d.ts', 'index.d.cts'];\n  const dirPath = path.resolve(outputPath, 'client');\n  ensureDirSync(dirPath);\n  for (const file of distFiles) {\n    fs.copyFileSync(\n      path.resolve(clientDistPath, file),\n      path.resolve(dirPath, file),\n    );\n  }\n};\n","const parseUrlRegExp =\n  /^(([^:/?#]+):)?((\\/\\/)?([^:/?#]*)(:?([^/?#]*)))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\ninterface Url {\n  host: string;\n  path: string;\n  port: string;\n  protocol: string;\n}\n\nexport const parseUrl = (value: string): Url => {\n  const errorResponse: Url = {\n    host: '',\n    path: '',\n    port: '',\n    protocol: '',\n  };\n\n  parseUrlRegExp.lastIndex = 0;\n  const match = value.match(parseUrlRegExp);\n\n  if (!match) {\n    return errorResponse;\n  }\n\n  const host = match[5] || '';\n\n  // value is a relative file system path\n  if (host === '.' || host === '..') {\n    return errorResponse;\n  }\n\n  const path = match[8] || '';\n  const protocol = match[2] || '';\n\n  // value is probably a Windows file system path\n  if (protocol.length === 1) {\n    return errorResponse;\n  }\n\n  return {\n    host,\n    path: path === '/' ? '' : path,\n    port: match[7] || '',\n    protocol,\n  };\n};\n","const jsonPointerSlash = /~1/g;\nconst jsonPointerTilde = /~0/g;\n\nexport const irRef = '#/ir/';\n\nexport const isRefOpenApiComponent = ($ref: string): boolean => {\n  const path = jsonPointerToPath($ref);\n  // reusable components are nested within components/<namespace>/<name>\n  return path.length === 3 && path[0] === 'components';\n};\n\n/**\n * Returns the reusable component name from `$ref`.\n */\nexport const refToName = ($ref: string): string => {\n  const path = jsonPointerToPath($ref);\n  const name = path[path.length - 1]!;\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  return decodeURI(name);\n};\n\n/**\n * Encodes a path segment for use in a JSON Pointer (RFC 6901).\n *\n * - Replaces all '~' with '~0'.\n * - Replaces all '/' with '~1'.\n *\n * This ensures that path segments containing these characters are safely\n * represented in JSON Pointer strings.\n *\n * @param segment - The path segment (string or number) to encode.\n * @returns The encoded segment as a string.\n */\nexport const encodeJsonPointerSegment = (segment: string | number): string =>\n  String(segment).replace(/~/g, '~0').replace(/\\//g, '~1');\n\n/**\n * Converts a JSON Pointer string (RFC 6901) to an array of path segments.\n *\n * - Removes the leading '#' if present.\n * - Splits the pointer on '/'.\n * - Decodes '~1' to '/' and '~0' to '~' in each segment.\n * - Returns an empty array for the root pointer ('#' or '').\n *\n * @param pointer - The JSON Pointer string to convert (e.g., '#/components/schemas/Foo').\n * @returns An array of decoded path segments.\n */\nexport const jsonPointerToPath = (pointer: string): ReadonlyArray<string> => {\n  let clean = pointer.trim();\n  if (clean.startsWith('#')) {\n    clean = clean.slice(1);\n  }\n  if (clean.startsWith('/')) {\n    clean = clean.slice(1);\n  }\n  if (!clean) {\n    return [];\n  }\n  return clean\n    .split('/')\n    .map((part) =>\n      part.replace(jsonPointerSlash, '/').replace(jsonPointerTilde, '~'),\n    );\n};\n\n/**\n * Normalizes a JSON Pointer string to a canonical form.\n *\n * - Ensures the pointer starts with '#'.\n * - Removes trailing slashes (except for root).\n * - Collapses multiple consecutive slashes into one.\n * - Trims whitespace from the input.\n *\n * @param pointer - The JSON Pointer string to normalize.\n * @returns The normalized JSON Pointer string.\n */\nexport const normalizeJsonPointer = (pointer: string): string => {\n  let normalized = pointer.trim();\n  if (!normalized.startsWith('#')) {\n    normalized = `#${normalized}`;\n  }\n  // Remove trailing slashes (except for root)\n  if (normalized.length > 1 && normalized.endsWith('/')) {\n    normalized = normalized.slice(0, -1);\n  }\n  // Collapse multiple slashes\n  normalized = normalized.replace(/\\/+/g, '/');\n  return normalized;\n};\n\n/**\n * Encode path as JSON Pointer (RFC 6901).\n *\n * @param path\n * @returns\n */\nexport const pathToJsonPointer = (\n  path: ReadonlyArray<string | number>,\n): string => {\n  const segments = path.map(encodeJsonPointerSegment).join('/');\n  return '#' + (segments ? `/${segments}` : '');\n};\n\nexport const resolveRef = <T>({\n  $ref,\n  spec,\n}: {\n  $ref: string;\n  spec: Record<string, any>;\n}): T => {\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  const path = jsonPointerToPath(decodeURI($ref));\n\n  let current = spec;\n\n  for (const part of path) {\n    const segment = part as keyof typeof current;\n    if (current[segment] === undefined) {\n      throw new Error(`Reference not found: ${$ref}`);\n    }\n    current = current[segment];\n  }\n\n  return current as T;\n};\n","import type { StringCase } from '../types/case';\n\nconst uppercaseRegExp = /[\\p{Lu}]/u;\nconst lowercaseRegExp = /[\\p{Ll}]/u;\nconst identifierRegExp = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst separatorsRegExp = /[_.\\- `\\\\[\\]{}\\\\/]+/;\n\nconst leadingSeparatorsRegExp = new RegExp(`^${separatorsRegExp.source}`);\nconst separatorsAndIdentifierRegExp = new RegExp(\n  `${separatorsRegExp.source}${identifierRegExp.source}`,\n  'gu',\n);\nconst numbersAndIdentifierRegExp = new RegExp(\n  `\\\\d+${identifierRegExp.source}`,\n  'gu',\n);\n\nconst preserveCase = ({\n  case: _case,\n  string,\n}: {\n  readonly case: StringCase;\n  string: string;\n}) => {\n  let isLastCharLower = false;\n  let isLastCharUpper = false;\n  let isLastLastCharUpper = false;\n  let isLastLastCharPreserved = false;\n\n  const separator =\n    _case === 'snake_case' || _case === 'SCREAMING_SNAKE_CASE' ? '_' : '-';\n\n  for (let index = 0; index < string.length; index++) {\n    const character = string[index]!;\n    isLastLastCharPreserved =\n      index > 2 ? string[index - 3] === separator : true;\n\n    let nextIndex = index + 1;\n    let nextCharacter = string[nextIndex];\n    separatorsRegExp.lastIndex = 0;\n    while (nextCharacter && separatorsRegExp.test(nextCharacter)) {\n      nextIndex += 1;\n      nextCharacter = string[nextIndex];\n    }\n    const isSeparatorBeforeNextCharacter = nextIndex !== index + 1;\n\n    lowercaseRegExp.lastIndex = 0;\n    uppercaseRegExp.lastIndex = 0;\n    if (\n      uppercaseRegExp.test(character) &&\n      (isLastCharLower ||\n        (nextCharacter &&\n          !isSeparatorBeforeNextCharacter &&\n          nextCharacter !== 's' &&\n          lowercaseRegExp.test(nextCharacter)))\n    ) {\n      // insert separator behind character\n      string = `${string.slice(0, index)}${separator}${string.slice(index)}`;\n      index++;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharLower = false;\n      isLastCharUpper = true;\n    } else if (\n      isLastCharUpper &&\n      isLastLastCharUpper &&\n      lowercaseRegExp.test(character) &&\n      !isLastLastCharPreserved &&\n      // naive detection of plurals\n      !(\n        character === 's' &&\n        (!nextCharacter || nextCharacter.toLocaleLowerCase() !== nextCharacter)\n      )\n    ) {\n      // insert separator 2 characters behind\n      string = `${string.slice(0, index - 1)}${separator}${string.slice(index - 1)}`;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharLower = true;\n      isLastCharUpper = false;\n    } else {\n      const characterLower = character.toLocaleLowerCase();\n      const characterUpper = character.toLocaleUpperCase();\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharLower =\n        characterLower === character && characterUpper !== character;\n      isLastCharUpper =\n        characterUpper === character && characterLower !== character;\n    }\n  }\n\n  return string;\n};\n\nexport const stringCase = ({\n  case: _case,\n  stripLeadingSeparators = true,\n  value,\n}: {\n  readonly case: StringCase | undefined;\n  /**\n   * If leading separators have a semantic meaning, we might not want to\n   * remove them.\n   */\n  stripLeadingSeparators?: boolean;\n  value: string;\n}): string => {\n  let result = value.trim();\n\n  if (!result.length) {\n    return '';\n  }\n\n  if (!_case || _case === 'preserve') {\n    return result;\n  }\n\n  if (result.length === 1) {\n    separatorsRegExp.lastIndex = 0;\n    if (separatorsRegExp.test(result)) {\n      return '';\n    }\n\n    return _case === 'PascalCase' || _case === 'SCREAMING_SNAKE_CASE'\n      ? result.toLocaleUpperCase()\n      : result.toLocaleLowerCase();\n  }\n\n  const hasUpperCase = result !== result.toLocaleLowerCase();\n\n  if (hasUpperCase) {\n    result = preserveCase({ case: _case, string: result });\n  }\n\n  if (stripLeadingSeparators || result[0] !== value[0]) {\n    result = result.replace(leadingSeparatorsRegExp, '');\n  }\n\n  result =\n    _case === 'SCREAMING_SNAKE_CASE'\n      ? result.toLocaleUpperCase()\n      : result.toLocaleLowerCase();\n\n  if (_case === 'PascalCase') {\n    result = `${result.charAt(0).toLocaleUpperCase()}${result.slice(1)}`;\n  }\n\n  if (_case === 'snake_case' || _case === 'SCREAMING_SNAKE_CASE') {\n    result = result.replaceAll(\n      separatorsAndIdentifierRegExp,\n      (match, identifier, offset) => {\n        if (offset === 0 && !stripLeadingSeparators) {\n          return match;\n        }\n        return `_${identifier}`;\n      },\n    );\n\n    if (result[result.length - 1] === '_') {\n      // strip trailing underscore\n      result = result.slice(0, result.length - 1);\n    }\n  } else {\n    separatorsAndIdentifierRegExp.lastIndex = 0;\n    numbersAndIdentifierRegExp.lastIndex = 0;\n\n    result = result.replaceAll(\n      numbersAndIdentifierRegExp,\n      (match, _, offset) => {\n        if (['_', '-', '.'].includes(result.charAt(offset + match.length))) {\n          return match;\n        }\n\n        return match.toLocaleUpperCase();\n      },\n    );\n\n    result = result.replaceAll(\n      separatorsAndIdentifierRegExp,\n      (match, identifier, offset) => {\n        if (\n          offset === 0 &&\n          !stripLeadingSeparators &&\n          match[0] &&\n          value.startsWith(match[0])\n        ) {\n          return match;\n        }\n        return identifier.toLocaleUpperCase();\n      },\n    );\n  }\n\n  return result;\n};\n","import type { StringCase } from '../../../types/case';\nimport type { Config } from '../../../types/config';\nimport { irRef } from '../../../utils/ref';\nimport { stringCase } from '../../../utils/stringCase';\n\ninterface OperationIRRef {\n  /**\n   * Operation ID\n   */\n  id: string;\n}\n\n// TODO: this needs refactor\nexport const operationIrRef = ({\n  case: _case = 'PascalCase',\n  config,\n  id,\n  parameterId,\n  type,\n}: OperationIRRef & {\n  readonly case?: StringCase;\n  config: Pick<Config, 'plugins'>;\n  parameterId?: string;\n  type: 'data' | 'error' | 'errors' | 'parameter' | 'response' | 'responses';\n}): string => {\n  let affix = '';\n  switch (type) {\n    case 'data':\n    case 'error': // error union\n    case 'errors': // errors map\n    case 'parameter':\n    case 'response': // response union\n    case 'responses': // responses map\n      affix = `${(type[0] ?? '').toLocaleUpperCase()}${type.slice(1)}`;\n      break;\n  }\n  let separate = true;\n  if (config.plugins['@hey-api/typescript']?.config.case === 'preserve') {\n    separate = false;\n  }\n  const separator = separate ? '-' : '';\n  const parts: Array<string> = [\n    irRef,\n    stringCase({\n      case: _case,\n      value: id,\n    }),\n    separator,\n    affix,\n  ];\n  if (parameterId) {\n    parts.push(\n      separator,\n      stringCase({\n        case: _case,\n        value: parameterId,\n      }),\n    );\n  }\n  return parts.join('');\n};\n","import type { Identifier, TypeScriptFile } from '../../../generate/files';\nimport type { IR } from '../../../ir/types';\nimport { operationIrRef } from '../../shared/utils/ref';\n\nexport const typesId = 'types';\n\nfunction refIdentifier<T extends Identifier>(\n  identifier: T,\n  onGet?: (identifier: T) => void,\n): T {\n  return {\n    ...identifier,\n    get name() {\n      onGet?.(identifier);\n      return identifier.name;\n    },\n  };\n}\n\nexport const importIdentifier = ({\n  context,\n  file,\n  operation,\n  type,\n}: {\n  context: IR.Context;\n  file: TypeScriptFile;\n  operation: IR.OperationObject;\n  type: Parameters<typeof operationIrRef>[0]['type'];\n}): Identifier => {\n  const identifier = context.file({ id: typesId })!.identifier({\n    $ref: operationIrRef({\n      config: context.config,\n      id: operation.id,\n      type,\n    }),\n    namespace: 'type',\n  });\n  return refIdentifier(identifier, (ref) => {\n    if (ref.name) {\n      file.import({\n        asType: true,\n        module: file.relativePathToFile({ context, id: typesId }),\n        name: ref.name,\n      });\n    }\n  });\n};\n","import { compiler } from '../../../compiler';\nimport { clientModulePath } from '../../../generate/client';\nimport { parseUrl } from '../../../utils/url';\nimport { typesId } from '../typescript/ref';\nimport type { PluginHandler } from './types';\nimport { clientId, getClientBaseUrlKey } from './utils';\n\nconst resolveBaseUrlString = ({\n  plugin,\n}: Parameters<PluginHandler>[0]): string | undefined => {\n  const { baseUrl } = plugin.config;\n\n  if (baseUrl === false) {\n    return;\n  }\n\n  if (typeof baseUrl === 'string') {\n    return baseUrl;\n  }\n\n  const { servers } = plugin.context.ir;\n\n  if (!servers) {\n    return;\n  }\n\n  return servers[typeof baseUrl === 'number' ? baseUrl : 0]?.url;\n};\n\nexport const createClient = ({ plugin }: Parameters<PluginHandler>[0]) => {\n  const file = plugin.context.file({ id: clientId })!;\n\n  const clientModule = clientModulePath({\n    config: plugin.context.config,\n    sourceOutput: file.nameWithoutExtension(),\n  });\n  const createClient = file.import({\n    module: clientModule,\n    name: 'createClient',\n  });\n  const createConfig = file.import({\n    module: clientModule,\n    name: 'createConfig',\n  });\n  const clientOptions = file.import({\n    asType: true,\n    module: file.relativePathToFile({ context: plugin.context, id: typesId }),\n    name: 'ClientOptions',\n  });\n\n  const createClientConfig = plugin.config.runtimeConfigPath\n    ? file.import({\n        module: file.relativePathToFile({\n          context: plugin.context,\n          id: plugin.config.runtimeConfigPath,\n        }),\n        name: 'createClientConfig',\n      })\n    : undefined;\n\n  const defaultValues: Array<unknown> = [];\n\n  const resolvedBaseUrl = resolveBaseUrlString({\n    plugin: plugin as any,\n  });\n  if (resolvedBaseUrl) {\n    const url = parseUrl(resolvedBaseUrl);\n    if (url.protocol && url.host && !resolvedBaseUrl.includes('{')) {\n      defaultValues.push({\n        key: getClientBaseUrlKey(plugin.context.config),\n        value: resolvedBaseUrl,\n      });\n    } else if (resolvedBaseUrl !== '/' && resolvedBaseUrl.startsWith('/')) {\n      const baseUrl = resolvedBaseUrl.endsWith('/')\n        ? resolvedBaseUrl.slice(0, -1)\n        : resolvedBaseUrl;\n      defaultValues.push({\n        key: getClientBaseUrlKey(plugin.context.config),\n        value: baseUrl,\n      });\n    }\n  }\n\n  if ('throwOnError' in plugin.config && plugin.config.throwOnError) {\n    defaultValues.push({\n      key: 'throwOnError',\n      value: true,\n    });\n  }\n\n  const createConfigParameters = [\n    compiler.callExpression({\n      functionName: createConfig.name,\n      parameters: defaultValues.length\n        ? [compiler.objectExpression({ obj: defaultValues })]\n        : undefined,\n      types: [compiler.typeReferenceNode({ typeName: clientOptions.name })],\n    }),\n  ];\n\n  const statement = compiler.constVariable({\n    exportConst: true,\n    expression: compiler.callExpression({\n      functionName: createClient.name,\n      parameters: createClientConfig\n        ? [\n            compiler.callExpression({\n              functionName: createClientConfig.name,\n              parameters: createConfigParameters,\n            }),\n          ]\n        : createConfigParameters,\n    }),\n    name: 'client',\n  });\n  file.add(statement);\n};\n","import { compiler } from '../../../compiler';\nimport { clientModulePath } from '../../../generate/client';\nimport { clientId } from '../client-core/utils';\nimport { typesId } from '../typescript/ref';\nimport type { PluginHandler } from './types';\n\nexport const createClientConfigType = ({\n  plugin,\n}: Parameters<PluginHandler>[0]) => {\n  const file = plugin.context.file({ id: clientId })!;\n\n  const clientModule = clientModulePath({\n    config: plugin.context.config,\n    sourceOutput: file.nameWithoutExtension(),\n  });\n  const clientOptions = file.import({\n    asType: true,\n    module: file.relativePathToFile({ context: plugin.context, id: typesId }),\n    name: 'ClientOptions',\n  });\n  const configType = file.import({\n    asType: true,\n    module: clientModule,\n    name: 'Config',\n  });\n  const defaultClientOptions = file.import({\n    alias: 'DefaultClientOptions',\n    asType: true,\n    module: clientModule,\n    name: 'ClientOptions',\n  });\n\n  const defaultClientOptionsType = compiler.typeReferenceNode({\n    typeName: defaultClientOptions.name,\n  });\n  const tType = compiler.typeReferenceNode({ typeName: 'T' });\n\n  const typeCreateClientConfig = compiler.typeAliasDeclaration({\n    comment: [\n      'The `createClientConfig()` function will be called on client initialization',\n      \"and the returned object will become the client's initial configuration.\",\n      '',\n      'You may want to initialize your client this way instead of calling',\n      \"`setConfig()`. This is useful for example if you're using Next.js\",\n      'to ensure your client always has the correct values.',\n    ],\n    exportType: true,\n    name: 'CreateClientConfig',\n    type: compiler.functionTypeNode({\n      parameters: [\n        compiler.parameterDeclaration({\n          name: 'override',\n          required: false,\n          type: compiler.typeReferenceNode({\n            typeArguments: [\n              compiler.typeIntersectionNode({\n                types: [defaultClientOptionsType, tType],\n              }),\n            ],\n            typeName: configType.name,\n          }),\n        }),\n      ],\n      returnType: compiler.typeReferenceNode({\n        typeArguments: [\n          compiler.typeIntersectionNode({\n            types: [\n              compiler.typeReferenceNode({\n                typeArguments: [defaultClientOptionsType],\n                typeName: 'Required',\n              }),\n              tType,\n            ],\n          }),\n        ],\n        typeName: configType.name,\n      }),\n    }),\n    typeParameters: [\n      {\n        default: compiler.typeReferenceNode({ typeName: clientOptions.name }),\n        extends: defaultClientOptionsType,\n        name: 'T',\n      },\n    ],\n  });\n\n  file.add(typeCreateClientConfig);\n};\n","import { clientId } from '../client-core/utils';\nimport { createClient } from './client';\nimport { createClientConfigType } from './createClientConfig';\nimport type { PluginHandler } from './types';\n\nexport const clientPluginHandler = ({\n  plugin,\n}: Parameters<PluginHandler>[0]) => {\n  plugin.createFile({\n    id: clientId,\n    path: plugin.output,\n  });\n\n  createClientConfigType({\n    plugin: plugin as any,\n  });\n  createClient({\n    plugin: plugin as any,\n  });\n};\n","import { definePluginConfig } from '../../shared/utils/config';\nimport { clientDefaultConfig, clientDefaultMeta } from '../client-core/config';\nimport { clientPluginHandler } from '../client-core/plugin';\nimport type { HeyApiClientAxiosPlugin } from './types';\n\nexport const defaultConfig: HeyApiClientAxiosPlugin['Config'] = {\n  ...clientDefaultMeta,\n  config: {\n    ...clientDefaultConfig,\n    throwOnError: false,\n  },\n  handler: clientPluginHandler as HeyApiClientAxiosPlugin['Handler'],\n  name: '@hey-api/client-axios',\n};\n\n/**\n * Type helper for `@hey-api/client-axios` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import { definePluginConfig } from '../../shared/utils/config';\nimport { clientDefaultConfig, clientDefaultMeta } from '../client-core/config';\nimport { clientPluginHandler } from '../client-core/plugin';\nimport type { HeyApiClientFetchPlugin } from './types';\n\nexport const defaultConfig: HeyApiClientFetchPlugin['Config'] = {\n  ...clientDefaultMeta,\n  config: {\n    ...clientDefaultConfig,\n    throwOnError: false,\n  },\n  handler: clientPluginHandler as HeyApiClientFetchPlugin['Handler'],\n  name: '@hey-api/client-fetch',\n};\n\n/**\n * Type helper for `@hey-api/client-fetch` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import { definePluginConfig } from '../../shared/utils/config';\nimport { clientDefaultConfig, clientDefaultMeta } from '../client-core/config';\nimport { clientPluginHandler } from '../client-core/plugin';\nimport type { HeyApiClientNextPlugin } from './types';\n\nexport const defaultConfig: HeyApiClientNextPlugin['Config'] = {\n  ...clientDefaultMeta,\n  config: {\n    ...clientDefaultConfig,\n    throwOnError: false,\n  },\n  handler: clientPluginHandler as HeyApiClientNextPlugin['Handler'],\n  name: '@hey-api/client-next',\n};\n\n/**\n * Type helper for `@hey-api/client-next` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import { definePluginConfig } from '../../shared/utils/config';\nimport { clientDefaultConfig, clientDefaultMeta } from '../client-core/config';\nimport { clientPluginHandler } from '../client-core/plugin';\nimport type { HeyApiClientNuxtPlugin } from './types';\n\nexport const defaultConfig: HeyApiClientNuxtPlugin['Config'] = {\n  ...clientDefaultMeta,\n  config: clientDefaultConfig,\n  handler: clientPluginHandler as HeyApiClientNuxtPlugin['Handler'],\n  name: '@hey-api/client-nuxt',\n};\n\n/**\n * Type helper for `@hey-api/client-nuxt` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import { definePluginConfig } from '../../shared/utils/config';\nimport type { HeyApiClientLegacyAngularPlugin } from './types';\n\nexport const defaultConfig: HeyApiClientLegacyAngularPlugin['Config'] = {\n  config: {},\n  handler: () => {},\n  name: 'legacy/angular',\n  output: 'client',\n  tags: ['client'],\n};\n\n/**\n * Type helper for `legacy/angular` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import { definePluginConfig } from '../../shared/utils/config';\nimport type { HeyApiClientLegacyAxiosPlugin } from './types';\n\nexport const defaultConfig: HeyApiClientLegacyAxiosPlugin['Config'] = {\n  config: {},\n  handler: () => {},\n  name: 'legacy/axios',\n  output: 'client',\n  tags: ['client'],\n};\n\n/**\n * Type helper for `legacy/axios` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import { definePluginConfig } from '../../shared/utils/config';\nimport type { HeyApiClientLegacyFetchPlugin } from './types';\n\nexport const defaultConfig: HeyApiClientLegacyFetchPlugin['Config'] = {\n  config: {},\n  handler: () => {},\n  name: 'legacy/fetch',\n  output: 'client',\n  tags: ['client'],\n};\n\n/**\n * Type helper for `legacy/fetch` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import { definePluginConfig } from '../../shared/utils/config';\nimport type { HeyApiClientLegacyNodePlugin } from './types';\n\nexport const defaultConfig: HeyApiClientLegacyNodePlugin['Config'] = {\n  config: {},\n  handler: () => {},\n  name: 'legacy/node',\n  output: 'client',\n  tags: ['client'],\n};\n\n/**\n * Type helper for `legacy/node` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import { definePluginConfig } from '../../shared/utils/config';\nimport type { HeyApiClientLegacyXhrPlugin } from './types';\n\nexport const defaultConfig: HeyApiClientLegacyXhrPlugin['Config'] = {\n  config: {},\n  handler: () => {},\n  name: 'legacy/xhr',\n  output: 'client',\n  tags: ['client'],\n};\n\n/**\n * Type helper for `legacy/xhr` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import {\n  illegalStartCharactersRegExp,\n  reservedBrowserGlobalsRegExp,\n  reservedJavaScriptGlobalsRegExp,\n  reservedJavaScriptKeywordsRegExp,\n  reservedNodeGlobalsRegExp,\n  reservedTypeScriptKeywordsRegExp,\n} from '../../../utils/regexp';\n\nconst regexps = [\n  reservedJavaScriptKeywordsRegExp,\n  reservedTypeScriptKeywordsRegExp,\n  reservedJavaScriptGlobalsRegExp,\n  reservedNodeGlobalsRegExp,\n  reservedBrowserGlobalsRegExp,\n];\n\nexport const ensureValidIdentifier = (name: string): string => {\n  let identifier = name.replace(/[^$\\u200c\\u200d\\p{ID_Continue}]/gu, '_');\n\n  illegalStartCharactersRegExp.lastIndex = 0;\n  if (illegalStartCharactersRegExp.test(identifier)) {\n    return `_${identifier}`;\n  }\n\n  for (const regexp of regexps) {\n    if (identifier.startsWith('_')) {\n      return identifier;\n    }\n\n    identifier = identifier.replace(regexp, '_$1');\n  }\n\n  return identifier;\n};\n","import { compiler } from '../../../compiler';\nimport type { IR } from '../../../ir/types';\nimport type { OpenApiV2_0_XTypes } from '../../../openApi/2.0.x';\nimport type { OpenApiV3_0_XTypes } from '../../../openApi/3.0.x';\nimport type { OpenApiV3_1_XTypes } from '../../../openApi/3.1.x';\nimport { ensureValidIdentifier } from '../../../openApi/shared/utils/identifier';\nimport type { OpenApi } from '../../../openApi/types';\nimport type { HeyApiSchemasPlugin } from './types';\n\nconst schemasId = 'schemas';\n\nconst stripSchema = ({\n  plugin,\n  schema,\n}: {\n  plugin: HeyApiSchemasPlugin['Instance'];\n  schema:\n    | OpenApiV2_0_XTypes['SchemaObject']\n    | OpenApiV3_0_XTypes['SchemaObject']\n    | OpenApiV3_1_XTypes['SchemaObject'];\n}) => {\n  if (plugin.config.type === 'form') {\n    if (schema.description) {\n      delete schema.description;\n    }\n\n    if (schema['x-enum-descriptions']) {\n      delete schema['x-enum-descriptions'];\n    }\n\n    if (schema['x-enum-varnames']) {\n      delete schema['x-enum-varnames'];\n    }\n\n    if (schema['x-enumNames']) {\n      delete schema['x-enumNames'];\n    }\n\n    if (schema.title) {\n      delete schema.title;\n    }\n  }\n};\n\nconst schemaToJsonSchemaDraft_04 = ({\n  context,\n  plugin,\n  schema: _schema,\n}: {\n  context: IR.Context;\n  plugin: HeyApiSchemasPlugin['Instance'];\n  schema: OpenApiV2_0_XTypes['SchemaObject'];\n}): OpenApiV2_0_XTypes['SchemaObject'] => {\n  if (Array.isArray(_schema)) {\n    return _schema.map((item) =>\n      schemaToJsonSchemaDraft_04({\n        context,\n        plugin,\n        schema: item,\n      }),\n    ) as unknown as OpenApiV2_0_XTypes['SchemaObject'];\n  }\n\n  const schema = structuredClone(_schema);\n\n  if (schema.$ref) {\n    // refs using unicode characters become encoded, didn't investigate why\n    // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n    schema.$ref = decodeURI(schema.$ref);\n    return schema;\n  }\n\n  stripSchema({ plugin, schema });\n\n  if (\n    schema.additionalProperties &&\n    typeof schema.additionalProperties !== 'boolean'\n  ) {\n    schema.additionalProperties = schemaToJsonSchemaDraft_04({\n      context,\n      plugin,\n      schema: schema.additionalProperties,\n    });\n  }\n\n  if (schema.allOf) {\n    schema.allOf = schema.allOf.map((item) =>\n      schemaToJsonSchemaDraft_04({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.items) {\n    schema.items = schemaToJsonSchemaDraft_04({\n      context,\n      plugin,\n      schema: schema.items as OpenApiV2_0_XTypes['SchemaObject'],\n    });\n  }\n\n  if (schema.properties) {\n    for (const name in schema.properties) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean') {\n        schema.properties[name] = schemaToJsonSchemaDraft_04({\n          context,\n          plugin,\n          schema: property,\n        });\n      }\n    }\n  }\n\n  return schema;\n};\n\nconst schemaToJsonSchemaDraft_05 = ({\n  context,\n  plugin,\n  schema: _schema,\n}: {\n  context: IR.Context;\n  plugin: HeyApiSchemasPlugin['Instance'];\n  schema:\n    | OpenApiV3_0_XTypes['SchemaObject']\n    | OpenApiV3_0_XTypes['ReferenceObject'];\n}):\n  | OpenApiV3_0_XTypes['SchemaObject']\n  | OpenApiV3_0_XTypes['ReferenceObject'] => {\n  if (Array.isArray(_schema)) {\n    return _schema.map((item) =>\n      schemaToJsonSchemaDraft_05({\n        context,\n        plugin,\n        schema: item,\n      }),\n    ) as\n      | OpenApiV3_0_XTypes['SchemaObject']\n      | OpenApiV3_0_XTypes['ReferenceObject'];\n  }\n\n  const schema = structuredClone(_schema);\n\n  if ('$ref' in schema) {\n    // refs using unicode characters become encoded, didn't investigate why\n    // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n    schema.$ref = decodeURI(schema.$ref);\n    return schema;\n  }\n\n  stripSchema({ plugin, schema });\n\n  if (\n    schema.additionalProperties &&\n    typeof schema.additionalProperties !== 'boolean'\n  ) {\n    schema.additionalProperties = schemaToJsonSchemaDraft_05({\n      context,\n      plugin,\n      schema: schema.additionalProperties,\n    });\n  }\n\n  if (schema.allOf) {\n    schema.allOf = schema.allOf.map((item) =>\n      schemaToJsonSchemaDraft_05({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.anyOf) {\n    schema.anyOf = schema.anyOf.map((item) =>\n      schemaToJsonSchemaDraft_05({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.items) {\n    schema.items = schemaToJsonSchemaDraft_05({\n      context,\n      plugin,\n      schema: schema.items,\n    });\n  }\n\n  if (schema.oneOf) {\n    schema.oneOf = schema.oneOf.map((item) =>\n      schemaToJsonSchemaDraft_05({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.properties) {\n    for (const name in schema.properties) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean') {\n        schema.properties[name] = schemaToJsonSchemaDraft_05({\n          context,\n          plugin,\n          schema: property,\n        });\n      }\n    }\n  }\n\n  return schema;\n};\n\nconst schemaToJsonSchema2020_12 = ({\n  context,\n  plugin,\n  schema: _schema,\n}: {\n  context: IR.Context;\n  plugin: HeyApiSchemasPlugin['Instance'];\n  schema: OpenApiV3_1_XTypes['SchemaObject'];\n}): OpenApiV3_1_XTypes['SchemaObject'] => {\n  if (Array.isArray(_schema)) {\n    return _schema.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    ) as OpenApiV3_1_XTypes['SchemaObject'];\n  }\n\n  const schema = structuredClone(_schema);\n\n  stripSchema({ plugin, schema });\n\n  if (schema.$ref) {\n    // refs using unicode characters become encoded, didn't investigate why\n    // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n    schema.$ref = decodeURI(schema.$ref);\n  }\n\n  if (\n    schema.additionalProperties &&\n    typeof schema.additionalProperties !== 'boolean'\n  ) {\n    schema.additionalProperties = schemaToJsonSchema2020_12({\n      context,\n      plugin,\n      schema: schema.additionalProperties,\n    });\n  }\n\n  if (schema.allOf) {\n    schema.allOf = schema.allOf.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.anyOf) {\n    schema.anyOf = schema.anyOf.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.items) {\n    schema.items = schemaToJsonSchema2020_12({\n      context,\n      plugin,\n      schema: schema.items,\n    });\n  }\n\n  if (schema.oneOf) {\n    schema.oneOf = schema.oneOf.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.prefixItems) {\n    schema.prefixItems = schema.prefixItems.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.properties) {\n    for (const name in schema.properties) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean') {\n        schema.properties[name] = schemaToJsonSchema2020_12({\n          context,\n          plugin,\n          schema: property,\n        });\n      }\n    }\n  }\n\n  return schema;\n};\n\nconst schemaName = ({\n  name,\n  plugin,\n  schema,\n}: {\n  name: string;\n  plugin: HeyApiSchemasPlugin['Instance'];\n  schema:\n    | OpenApiV2_0_XTypes['SchemaObject']\n    | OpenApiV3_0_XTypes['ReferenceObject']\n    | OpenApiV3_0_XTypes['SchemaObject']\n    | OpenApiV3_1_XTypes['SchemaObject'];\n}): string => {\n  let customName = '';\n\n  if (plugin.config.nameBuilder) {\n    if (typeof plugin.config.nameBuilder === 'function') {\n      customName = plugin.config.nameBuilder(name, schema);\n    } else {\n      customName = plugin.config.nameBuilder.replace('{{name}}', name);\n    }\n  }\n\n  if (!customName) {\n    customName = `${name}Schema`;\n  }\n\n  return ensureValidIdentifier(customName);\n};\n\nconst schemasV2_0_X = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context<OpenApi.V2_0_X>;\n  plugin: HeyApiSchemasPlugin['Instance'];\n}) => {\n  if (!context.spec.definitions) {\n    return;\n  }\n\n  for (const name in context.spec.definitions) {\n    const schema = context.spec.definitions[name]!;\n    const obj = schemaToJsonSchemaDraft_04({\n      context,\n      plugin,\n      schema,\n    });\n    const statement = compiler.constVariable({\n      assertion: 'const',\n      exportConst: true,\n      expression: compiler.objectExpression({ obj }),\n      name: schemaName({ name, plugin, schema }),\n    });\n    context.file({ id: schemasId })!.add(statement);\n  }\n};\n\nconst schemasV3_0_X = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context<OpenApi.V3_0_X>;\n  plugin: HeyApiSchemasPlugin['Instance'];\n}) => {\n  if (!context.spec.components) {\n    return;\n  }\n\n  for (const name in context.spec.components.schemas) {\n    const schema = context.spec.components.schemas[name]!;\n    const obj = schemaToJsonSchemaDraft_05({\n      context,\n      plugin,\n      schema,\n    });\n    const statement = compiler.constVariable({\n      assertion: 'const',\n      exportConst: true,\n      expression: compiler.objectExpression({ obj }),\n      name: schemaName({ name, plugin, schema }),\n    });\n    context.file({ id: schemasId })!.add(statement);\n  }\n};\n\nconst schemasV3_1_X = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context<OpenApi.V3_1_X>;\n  plugin: HeyApiSchemasPlugin['Instance'];\n}) => {\n  if (!context.spec.components) {\n    return;\n  }\n\n  for (const name in context.spec.components.schemas) {\n    const schema = context.spec.components.schemas[name]!;\n    const obj = schemaToJsonSchema2020_12({\n      context,\n      plugin,\n      schema,\n    });\n    const statement = compiler.constVariable({\n      assertion: 'const',\n      exportConst: true,\n      expression: compiler.objectExpression({ obj }),\n      name: schemaName({ name, plugin, schema }),\n    });\n    context.file({ id: schemasId })!.add(statement);\n  }\n};\n\nexport const handler: HeyApiSchemasPlugin['Handler'] = ({ plugin }) => {\n  plugin.createFile({\n    id: schemasId,\n    path: plugin.output,\n  });\n\n  if ('swagger' in plugin.context.spec) {\n    schemasV2_0_X({\n      context: plugin.context as IR.Context<OpenApi.V2_0_X>,\n      plugin,\n    });\n    return;\n  }\n\n  switch (plugin.context.spec.openapi) {\n    case '3.0.0':\n    case '3.0.1':\n    case '3.0.2':\n    case '3.0.3':\n    case '3.0.4':\n      schemasV3_0_X({\n        context: plugin.context as IR.Context<OpenApi.V3_0_X>,\n        plugin,\n      });\n      break;\n    case '3.1.0':\n    case '3.1.1':\n      schemasV3_1_X({\n        context: plugin.context as IR.Context<OpenApi.V3_1_X>,\n        plugin,\n      });\n      break;\n    default:\n      throw new Error('Unsupported OpenAPI specification');\n  }\n};\n","import fs from 'node:fs';\nimport path from 'node:path';\n\nimport ts from 'typescript';\n\nimport { compiler } from '../compiler';\nimport { type ImportExportItemObject, tsNodeToString } from '../compiler/utils';\nimport type { IR } from '../ir/types';\nimport { ensureValidIdentifier } from '../openApi/shared/utils/identifier';\nimport type { StringCase } from '../types/case';\nimport { stringCase } from '../utils/stringCase';\nimport { ensureDirSync } from './utils';\n\nexport interface Identifier {\n  /**\n   * Did this function add a new property to the file's `identifiers` map?\n   */\n  created: boolean;\n  /**\n   * The resolved identifier name. False means the identifier has been blacklisted.\n   */\n  name: string | false;\n}\n\ntype NamespaceEntry = Pick<Identifier, 'name'> & {\n  /**\n   * Ref to the type in OpenAPI specification.\n   */\n  $ref: string;\n};\n\nexport type Identifiers = Record<\n  string,\n  {\n    /**\n     * TypeScript enum only namespace.\n     *\n     * @example\n     * ```ts\n     * export enum Foo = {\n     *   FOO = 'foo'\n     * }\n     * ```\n     */\n    enum?: Record<string, NamespaceEntry>;\n    /**\n     * Type namespace. Types, interfaces, and type aliases exist here.\n     *\n     * @example\n     * ```ts\n     * export type Foo = string;\n     * ```\n     */\n    type?: Record<string, NamespaceEntry>;\n    /**\n     * Value namespace. Variables, functions, classes, and constants exist here.\n     *\n     * @example\n     * ```js\n     * export const foo = '';\n     * ```\n     */\n    value?: Record<string, NamespaceEntry>;\n  }\n>;\n\ntype Namespace = keyof Identifiers[keyof Identifiers];\n\nexport type FileImportResult = Pick<ImportExportItemObject, 'asType' | 'name'>;\n\nexport class TypeScriptFile {\n  /**\n   * Should the exports from this file be re-exported in the index barrel file?\n   */\n  private _exportFromIndex: boolean;\n  private _headers: Array<string> = [];\n  private _id: string;\n  private _identifierCase: StringCase | undefined;\n  private _imports = new Map<string, Map<string, ImportExportItemObject>>();\n  private _items: Array<ts.Node | string> = [];\n  private _name: string;\n  private _path: string;\n\n  public identifiers: Identifiers = {};\n\n  /**\n   * Path relative to the client output root.\n   */\n  // TODO: parser - add relative path property for quick access, currently\n  // everything is resolved into an absolute path with cwd\n  // public relativePath: string;\n\n  public constructor({\n    dir,\n    exportFromIndex = false,\n    header = true,\n    id,\n    identifierCase,\n    name,\n  }: {\n    dir: string;\n    /**\n     * Should the exports from this file be re-exported in the index barrel file?\n     */\n    exportFromIndex?: boolean;\n    header?: boolean;\n    /**\n     * Unique file ID. Used to generate correct relative paths to the file.\n     * This should be refactored later as it's basically the file name unless\n     * nested inside another folder.\n     */\n    id: string;\n    identifierCase?: StringCase;\n    name: string;\n  }) {\n    this._exportFromIndex = exportFromIndex;\n    this._id = id;\n    this._identifierCase = identifierCase;\n    this._name = this._setName(name);\n    this._path = path.resolve(dir, this._name);\n\n    if (header) {\n      this._headers.push(\n        '// This file is auto-generated by @hey-api/openapi-ts',\n      );\n    }\n  }\n\n  public add(...nodes: Array<ts.Node | string>) {\n    this._items = this._items.concat(nodes);\n  }\n\n  /**\n   * Prevents a specific identifier from being created. This is useful for\n   * transformers where we know a certain transformer won't be needed, and\n   * we want to avoid attempting to create since we know it won't happen.\n   */\n  public blockIdentifier({\n    $ref,\n    namespace,\n  }: Pick<EnsureUniqueIdentifierData, '$ref'> & {\n    namespace: Namespace;\n  }): Identifier {\n    const { name, ref } = parseRef($ref);\n    const refValue =\n      this.identifiers[name.toLocaleLowerCase()]?.[namespace]?.[ref];\n    if (!refValue) {\n      throw new Error(\n        `Identifier for $ref ${$ref} in namespace ${namespace} not found`,\n      );\n    }\n\n    refValue.name = false;\n\n    return {\n      created: false,\n      name: refValue.name,\n    };\n  }\n\n  public get exportFromIndex(): boolean {\n    return this._exportFromIndex;\n  }\n\n  public get id(): string {\n    return this._id;\n  }\n\n  public identifier(\n    args: Pick<\n      EnsureUniqueIdentifierData,\n      '$ref' | 'count' | 'create' | 'nameTransformer'\n    > & {\n      case?: StringCase;\n      namespace: Namespace;\n    },\n  ): Identifier {\n    return ensureUniqueIdentifier({\n      case: args.case ?? this._identifierCase,\n      identifiers: this.identifiers,\n      ...args,\n    });\n  }\n\n  /**\n   * Adds an import to the provided module. Handles duplication, returns added\n   * import. Returns the imported name. If we import an aliased export, `name`\n   * will be equal to the specified `alias`.\n   */\n  public import({\n    module,\n    ...importedItem\n  }: ImportExportItemObject & {\n    module: string;\n  }): FileImportResult {\n    let moduleMap = this._imports.get(module);\n\n    if (!moduleMap) {\n      moduleMap = new Map<string, ImportExportItemObject>();\n      this._imports.set(module, moduleMap);\n    }\n\n    const match = moduleMap.get(importedItem.name);\n    if (match) {\n      return {\n        ...match,\n        name: match.alias || match.name,\n      };\n    }\n\n    moduleMap.set(importedItem.name, importedItem);\n    return {\n      ...importedItem,\n      name: importedItem.alias || importedItem.name,\n    };\n  }\n\n  public isEmpty() {\n    return !this._items.length;\n  }\n\n  public nameWithoutExtension() {\n    const { name } = splitNameAndExtension(this._name);\n    return name;\n  }\n\n  public relativePathToFile({\n    context,\n    id,\n  }: {\n    context: IR.Context;\n    id: string;\n  }): string {\n    let filePath = '';\n\n    // relative file path\n    if (id.startsWith('.')) {\n      let configFileParts: Array<string> = [];\n      // if providing a custom configuration file, relative paths must resolve\n      // relative to the configuration file.\n      if (context.config.configFile) {\n        const cfgParts = context.config.configFile.split('/');\n        configFileParts = cfgParts.slice(0, cfgParts.length - 1);\n      }\n      filePath = path.resolve(process.cwd(), ...configFileParts, id);\n    } else {\n      const file = context.file({ id });\n      if (!file) {\n        throw new Error(`File with id ${id} does not exist`);\n      }\n      filePath = file._path;\n    }\n\n    const thisPathParts = this._path.split(path.sep);\n    const filePathParts = filePath.split(path.sep);\n\n    let index = -1;\n    let relativePath = '';\n    for (const part of thisPathParts) {\n      index += 1;\n      if (filePathParts[index] !== part) {\n        const pathArray = Array.from({\n          length: thisPathParts.length - index,\n        }).fill('');\n        const relativePathToFile = filePathParts.slice(index);\n        const relativeFolder = relativePathToFile.slice(\n          0,\n          relativePathToFile.length - 1,\n        );\n        if (relativeFolder.length) {\n          relativeFolder.push('');\n        }\n        relativePath =\n          (pathArray.join('../') || './') + relativeFolder.join('/');\n        break;\n      }\n    }\n\n    const fileName = filePathParts[filePathParts.length - 1]!;\n    // TODO: parser - cache responses\n    return `${relativePath}${splitNameAndExtension(fileName).name}`;\n  }\n\n  public remove(options?: Parameters<typeof fs.rmSync>[1]) {\n    fs.rmSync(this._path, options);\n  }\n\n  /**\n   * Removes last node form the stack. Works as undo.\n   */\n  public removeNode() {\n    this._items = this._items.slice(0, this._items.length - 1);\n  }\n\n  private _setName(fileName: string) {\n    if (fileName.includes('index')) {\n      return fileName;\n    }\n\n    const { extension, name } = splitNameAndExtension(fileName);\n    return [name, 'gen', extension].filter(Boolean).join('.');\n  }\n\n  private _toString(separator: string, tsConfig: ts.ParsedCommandLine | null) {\n    let output: Array<string> = [];\n    if (this._headers.length) {\n      output.push(this._headers.join('\\n'));\n    }\n\n    const shouldAppendJs =\n      tsConfig?.options.moduleResolution === ts.ModuleResolutionKind.NodeNext;\n\n    const importsStringArray: Array<string> = [];\n\n    for (const [_module, moduleMap] of this._imports.entries()) {\n      const imports = Array.from(moduleMap.values());\n\n      let resolvedModule = _module;\n      if (\n        shouldAppendJs &&\n        (resolvedModule.startsWith('./') || resolvedModule.startsWith('../'))\n      ) {\n        if (resolvedModule === './client') {\n          resolvedModule = './client/index.js';\n        } else {\n          resolvedModule = `${resolvedModule}.js`;\n        }\n      }\n\n      const node = compiler.namedImportDeclarations({\n        imports,\n        module: resolvedModule,\n      });\n      importsStringArray.push(tsNodeToString({ node }));\n    }\n    if (importsStringArray.length) {\n      output.push(importsStringArray.join('\\n'));\n    }\n    output = output.concat(\n      this._items.map((node) =>\n        typeof node === 'string'\n          ? node\n          : tsNodeToString({ node, unescape: true }),\n      ),\n    );\n    return output.join(separator);\n  }\n\n  public write(separator = '\\n', tsConfig: ts.ParsedCommandLine | null = null) {\n    if (this.isEmpty()) {\n      this.remove({ force: true });\n      return;\n    }\n\n    let dir = this._path;\n    if (typeof this._path === 'string') {\n      const parts = this._path.split(path.sep);\n      dir = parts.slice(0, parts.length - 1).join(path.sep);\n    }\n    ensureDirSync(dir);\n    fs.writeFileSync(this._path, this._toString(separator, tsConfig));\n  }\n}\n\nconst parseRef = (\n  $ref: string,\n): {\n  /**\n   * Extracted name from `$ref`, equal to the last part or property name.\n   */\n  name: string;\n  /**\n   * List of properties extracted from `$ref`, if any.\n   */\n  properties: ReadonlyArray<string>;\n  /**\n   * `$ref` without properties if they're included in `$ref`, otherwise\n   * `ref` is equal to `$ref`.\n   */\n  ref: string;\n} => {\n  let ref = $ref;\n  const properties: string[] = [];\n\n  const parts = ref.split('/');\n  let name = parts[parts.length - 1] || '';\n\n  let propIndex = parts.indexOf('properties');\n\n  if (propIndex !== -1) {\n    ref = parts.slice(0, propIndex).join('/');\n    name = parts[propIndex - 1] || '';\n\n    while (propIndex + 1 < parts.length) {\n      const prop = parts[propIndex + 1];\n      if (!prop) {\n        throw new Error(`Invalid $ref: ${$ref}`);\n      }\n      properties.push(prop);\n      propIndex += 2;\n    }\n  }\n\n  return {\n    name,\n    properties,\n    ref,\n  };\n};\n\nconst transformName = (\n  name: string,\n  transformer: ((name: string) => string) | string,\n  identifierCase?: StringCase,\n): string => {\n  if (typeof transformer === 'function') {\n    return transformer(name);\n  }\n\n  const separator = identifierCase === 'preserve' ? '' : '-';\n  return transformer.replace('{{name}}', `${separator}${name}${separator}`);\n};\n\ninterface EnsureUniqueIdentifierData {\n  $ref: string;\n  case: StringCase | undefined;\n  count?: number;\n  create?: boolean;\n  identifiers: Identifiers;\n  /**\n   * Transforms name obtained from `$ref` before it's passed to `stringCase()`.\n   */\n  nameTransformer?: ((name: string) => string) | string;\n  namespace: Namespace;\n}\n\nconst ensureUniqueIdentifier = ({\n  $ref,\n  case: identifierCase,\n  count = 1,\n  create = false,\n  identifiers,\n  nameTransformer,\n  namespace,\n}: EnsureUniqueIdentifierData): Identifier => {\n  const { name, properties, ref } = parseRef($ref);\n\n  if (!name) {\n    return {\n      created: false,\n      name: '',\n    };\n  }\n\n  let nameWithCasingAndTransformer = stringCase({\n    case: identifierCase,\n    value: nameTransformer\n      ? transformName(name, nameTransformer, identifierCase)\n      : name,\n  });\n  if (count > 1) {\n    nameWithCasingAndTransformer = `${nameWithCasingAndTransformer}${count}`;\n  }\n  const lowercaseName = nameWithCasingAndTransformer.toLocaleLowerCase();\n  if (!identifiers[lowercaseName]) {\n    identifiers[lowercaseName] = {};\n  }\n  const identifier = identifiers[lowercaseName];\n\n  // Enum declarations can only merge with namespace or other enum\n  // declarations, so we need to ensure we don't mix them up.\n  if (\n    (namespace === 'enum' && (identifier.type || identifier.value)) ||\n    (namespace !== 'enum' && identifier.enum)\n  ) {\n    return ensureUniqueIdentifier({\n      $ref: ref,\n      case: identifierCase,\n      count: count + 1,\n      create,\n      identifiers,\n      nameTransformer,\n      namespace,\n    });\n  }\n\n  if (!identifier[namespace]) {\n    identifier[namespace] = {};\n  }\n  const id = identifier[namespace];\n\n  const refValue = id[ref];\n  if (refValue) {\n    let name = refValue.name;\n    if (properties.length) {\n      name += properties.map((property) => `['${property}']`).join('');\n    }\n    return {\n      created: false,\n      name: name as string,\n    };\n  }\n\n  let nameValue = id[nameWithCasingAndTransformer];\n  if (nameValue) {\n    if (nameValue.$ref === ref) {\n      return {\n        created: false,\n        name: nameValue.name,\n      };\n    }\n\n    return ensureUniqueIdentifier({\n      $ref: ref,\n      case: identifierCase,\n      count: count + 1,\n      create,\n      identifiers,\n      nameTransformer,\n      namespace,\n    });\n  }\n\n  if (!create) {\n    delete identifier[namespace];\n    return {\n      created: false,\n      name: '',\n    };\n  }\n\n  nameValue = {\n    $ref: ref,\n    name: ensureValidIdentifier(nameWithCasingAndTransformer),\n  };\n  id[nameWithCasingAndTransformer] = nameValue;\n  id[nameValue.$ref] = nameValue;\n\n  return {\n    created: true,\n    name: nameValue.name,\n  };\n};\n\nconst splitNameAndExtension = (fileName: string) => {\n  const match = fileName.match(/\\.[0-9a-z]+$/i);\n  const extension = match ? match[0].slice(1) : '';\n  const name = fileName.slice(\n    0,\n    fileName.length - (extension ? extension.length + 1 : 0),\n  );\n  return { extension, name };\n};\n\nexport const _test = {\n  ensureUniqueIdentifier,\n  parseRef,\n  splitNameAndExtension,\n};\n","import fs from 'node:fs';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\n\nimport ts from 'typescript';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport const findPackageJson = (): unknown | undefined => {\n  let dir = __dirname;\n  while (dir !== path.dirname(dir)) {\n    const files = fs.readdirSync(dir);\n    const candidates = files.filter((file) => file === 'package.json');\n\n    if (candidates[0]) {\n      const packageJsonPath = path.join(dir, candidates[0]);\n      return JSON.parse(\n        fs.readFileSync(packageJsonPath, {\n          encoding: 'utf8',\n        }),\n      );\n    }\n\n    dir = path.dirname(dir);\n  }\n\n  return;\n};\n\nexport const findTsConfigPath = (\n  tsConfigPath?: 'off' | (string & {}),\n): string | null => {\n  if (tsConfigPath === 'off') {\n    return null;\n  }\n\n  if (tsConfigPath) {\n    const resolved = path.isAbsolute(tsConfigPath)\n      ? tsConfigPath\n      : path.resolve(__dirname, tsConfigPath);\n    return fs.existsSync(resolved) ? resolved : null;\n  }\n\n  let dir = __dirname;\n  while (dir !== path.dirname(dir)) {\n    const files = fs.readdirSync(dir);\n    const candidates = files\n      .filter((file) => file.startsWith('tsconfig') && file.endsWith('.json'))\n      .sort((file) => (file === 'tsconfig.json' ? -1 : 1));\n\n    if (candidates[0]) {\n      return path.join(dir, candidates[0]);\n    }\n\n    dir = path.dirname(dir);\n  }\n\n  return null;\n};\n\nexport const loadTsConfig = (\n  configPath: string | null,\n): ts.ParsedCommandLine | null => {\n  if (!configPath) {\n    return null;\n  }\n\n  const raw = ts.readConfigFile(configPath, ts.sys.readFile);\n\n  if (raw.error) {\n    throw new Error(`Couldn't read tsconfig from path: ${configPath}`);\n  }\n\n  return ts.parseJsonConfigFileContent(\n    raw.config,\n    ts.sys,\n    path.dirname(configPath),\n  );\n};\n","import fs from 'node:fs';\nimport path from 'node:path';\n\nimport colors from 'ansi-colors';\n\nimport { findPackageJson } from './generate/tsConfig';\nimport { ensureDirSync } from './generate/utils';\n\nexport const isInteractive = process.stdin.isTTY && process.stdout.isTTY;\n\nexport class HeyApiError extends Error {\n  args: ReadonlyArray<unknown>;\n  event: string;\n  pluginName: string;\n\n  constructor({\n    args,\n    error,\n    event,\n    name,\n    pluginName,\n  }: {\n    args: unknown[];\n    error: Error;\n    event: string;\n    name: string;\n    pluginName: string;\n  }) {\n    const message = error instanceof Error ? error.message : 'Unknown error';\n    super(message);\n\n    this.args = args;\n    this.cause = error.cause;\n    this.event = event;\n    this.name = name || error.name;\n    this.pluginName = pluginName;\n    this.stack = error.stack;\n  }\n}\n\nexport const logCrashReport = (error: unknown, logsDir: string): string => {\n  const logName = `openapi-ts-error-${Date.now()}.log`;\n  const fullDir = path.resolve(process.cwd(), logsDir);\n  ensureDirSync(fullDir);\n  const logPath = path.resolve(fullDir, logName);\n\n  let logContent = `[${new Date().toISOString()}] `;\n\n  if (error instanceof HeyApiError) {\n    logContent += `${error.name} during event \"${error.event}\"\\n`;\n    if (error.pluginName) {\n      logContent += `Plugin: ${error.pluginName}\\n`;\n    }\n    logContent += `Arguments: ${JSON.stringify(error.args, null, 2)}\\n\\n`;\n  }\n\n  const message = error instanceof Error ? error.message : String(error);\n  const stack = error instanceof Error ? error.stack : undefined;\n\n  logContent += `Error: ${message}\\n`;\n  if (stack) {\n    logContent += `Stack:\\n${stack}\\n`;\n  }\n\n  fs.writeFileSync(logPath, logContent);\n\n  return logPath;\n};\n\nexport const openGitHubIssueWithCrashReport = async (error: unknown) => {\n  let body = '';\n\n  if (error instanceof HeyApiError) {\n    if (error.pluginName) {\n      body += `**Plugin**: \\`${error.pluginName}\\`\\n`;\n    }\n    body += `**Event**: \\`${error.event}\\`\\n`;\n    body += `**Arguments**:\\n\\`\\`\\`ts\\n${JSON.stringify(error.args, null, 2)}\\n\\`\\`\\`\\n\\n`;\n  }\n\n  const message = error instanceof Error ? error.message : String(error);\n  const stack = error instanceof Error ? error.stack : undefined;\n\n  body += `**Error**: \\`${message}\\`\\n`;\n  if (stack) {\n    body += `\\n**Stack Trace**:\\n\\`\\`\\`\\n${stack}\\n\\`\\`\\``;\n  }\n\n  const search = new URLSearchParams({\n    body,\n    labels: 'bug 🔥',\n    title: 'Crash Report',\n  });\n\n  const packageJson = findPackageJson();\n  let bugsUrl: string | undefined;\n  if (\n    packageJson &&\n    typeof packageJson === 'object' &&\n    'bugs' in packageJson &&\n    packageJson.bugs &&\n    typeof packageJson.bugs === 'object' &&\n    'url' in packageJson.bugs &&\n    typeof packageJson.bugs.url === 'string'\n  ) {\n    bugsUrl = packageJson.bugs.url;\n    if (bugsUrl && !bugsUrl.endsWith('/')) {\n      bugsUrl += '/';\n    }\n  }\n\n  if (bugsUrl) {\n    const url = `${bugsUrl}new?${search.toString()}`;\n    const open = (await import('open')).default;\n    await open(url);\n  }\n};\n\nexport const printCrashReport = ({\n  error,\n  logPath,\n}: {\n  error: unknown;\n  logPath: string | undefined;\n}) => {\n  const packageJson = findPackageJson();\n  let name: string | undefined;\n  if (\n    packageJson &&\n    typeof packageJson === 'object' &&\n    'name' in packageJson &&\n    typeof packageJson.name === 'string'\n  ) {\n    name = packageJson.name;\n  }\n  process.stderr.write(\n    `\\n🛑 ${colors.cyan(name || '')} ${colors.red('encountered an error.')}` +\n      `\\n\\n${colors.red('❗️ Error:')} ${colors.white(typeof error === 'string' ? error : error instanceof Error ? error.message : 'Unknown error')}` +\n      (logPath\n        ? `\\n\\n${colors.cyan('📄 Crash log saved to:')} ${colors.gray(logPath)}`\n        : ''),\n  );\n};\n\nexport const shouldReportCrash = async (): Promise<boolean> => {\n  if (!isInteractive) {\n    return false;\n  }\n\n  return new Promise((resolve) => {\n    process.stdout.write(\n      `${colors.yellow('\\n\\n📢 Open a GitHub issue with crash details?')} ${colors.yellow('(y/N):')}`,\n    );\n    process.stdin.setEncoding('utf8');\n    process.stdin.once('data', (data: string) => {\n      resolve(data.trim().toLowerCase() === 'y');\n    });\n  });\n};\n","import { HeyApiError } from '../../../error';\nimport type { IR } from '../../../ir/types';\nimport type { OpenApi } from '../../../openApi/types';\nimport type { PluginConfigMap } from '../../config';\nimport type { Plugin } from '../../types';\nimport type { WalkEvent, WalkEventType } from '../types/instance';\n\nexport class PluginInstance<T extends Plugin.Types = Plugin.Types> {\n  public api: T['api'];\n  public config: Omit<T['resolvedConfig'], 'name' | 'output'>;\n  public context: IR.Context;\n  public dependencies: Required<Plugin.Config<T>>['dependencies'] = [];\n  private handler: Plugin.Config<T>['handler'];\n  public name: T['resolvedConfig']['name'];\n  public output: Required<T['config']>['output'];\n\n  public constructor(\n    props: Pick<\n      Required<Plugin.Config<T>>,\n      'config' | 'dependencies' | 'handler'\n    > & {\n      api?: T['api'];\n      context: IR.Context<OpenApi.V2_0_X | OpenApi.V3_0_X | OpenApi.V3_1_X>;\n      name: string;\n      output: string;\n    },\n  ) {\n    this.api = props.api ?? {};\n    this.config = props.config;\n    this.context = props.context;\n    this.dependencies = props.dependencies;\n    this.handler = props.handler;\n    this.name = props.name;\n    this.output = props.output;\n  }\n\n  public createFile(file: IR.ContextFile) {\n    return this.context.createFile({\n      exportFromIndex: this.config.exportFromIndex,\n      ...file,\n    });\n  }\n\n  /**\n   * Iterates over various input elements as specified by the event types, in\n   * a specific order: servers, schemas, parameters, request bodies, then\n   * operations.\n   *\n   * This ensures, for example, that schemas are always processed before\n   * operations, which may reference them.\n   *\n   * @template T - The event type(s) to yield. Defaults to all event types.\n   * @param events - The event types to walk over. If none are provided, all event types are included.\n   * @param callback - Function to execute for each event.\n   *\n   * @example\n   * // Iterate over all operations and schemas\n   * plugin.forEach('operation', 'schema', (event) => {\n   *   if (event.type === 'operation') {\n   *     // handle operation\n   *   } else if (event.type === 'schema') {\n   *     // handle schema\n   *   }\n   * });\n   */\n  public forEach<T extends WalkEventType = WalkEventType>(\n    ...args: [\n      ...events: ReadonlyArray<T>,\n      callback: (event: WalkEvent<T>) => void,\n    ]\n  ): void {\n    const events = args.slice(0, -1) as ReadonlyArray<T>;\n    const callback = args[args.length - 1] as (event: WalkEvent<T>) => void;\n    const eventSet = new Set(\n      events.length\n        ? events\n        : ([\n            'operation',\n            'parameter',\n            'requestBody',\n            'schema',\n            'server',\n          ] as ReadonlyArray<WalkEventType>),\n    );\n\n    if (eventSet.has('server') && this.context.ir.servers) {\n      for (const server of this.context.ir.servers) {\n        const event: WalkEvent<'server'> = { server, type: 'server' };\n        try {\n          callback(event as WalkEvent<T>);\n        } catch (error) {\n          this.forEachError(error, event);\n        }\n      }\n    }\n\n    if (eventSet.has('schema') && this.context.ir.components?.schemas) {\n      for (const name in this.context.ir.components.schemas) {\n        const event: WalkEvent<'schema'> = {\n          $ref: `#/components/schemas/${name}`,\n          name,\n          schema: this.context.ir.components.schemas[name]!,\n          type: 'schema',\n        };\n        try {\n          callback(event as WalkEvent<T>);\n        } catch (error) {\n          this.forEachError(error, event);\n        }\n      }\n    }\n\n    if (eventSet.has('parameter') && this.context.ir.components?.parameters) {\n      for (const name in this.context.ir.components.parameters) {\n        const event: WalkEvent<'parameter'> = {\n          $ref: `#/components/parameters/${name}`,\n          name,\n          parameter: this.context.ir.components.parameters[name]!,\n          type: 'parameter',\n        };\n        try {\n          callback(event as WalkEvent<T>);\n        } catch (error) {\n          this.forEachError(error, event);\n        }\n      }\n    }\n\n    if (\n      eventSet.has('requestBody') &&\n      this.context.ir.components?.requestBodies\n    ) {\n      for (const name in this.context.ir.components.requestBodies) {\n        const event: WalkEvent<'requestBody'> = {\n          $ref: `#/components/requestBodies/${name}`,\n          name,\n          requestBody: this.context.ir.components.requestBodies[name]!,\n          type: 'requestBody',\n        };\n        try {\n          callback(event as WalkEvent<T>);\n        } catch (error) {\n          this.forEachError(error, event);\n        }\n      }\n    }\n\n    if (eventSet.has('operation') && this.context.ir.paths) {\n      for (const path in this.context.ir.paths) {\n        const pathItem =\n          this.context.ir.paths[path as keyof typeof this.context.ir.paths];\n        for (const _method in pathItem) {\n          const method = _method as keyof typeof pathItem;\n          const event: WalkEvent<'operation'> = {\n            method,\n            operation: pathItem[method]!,\n            path,\n            type: 'operation',\n          };\n          try {\n            callback(event as WalkEvent<T>);\n          } catch (error) {\n            this.forEachError(error, event);\n          }\n        }\n      }\n    }\n  }\n\n  private forEachError(error: unknown, event: WalkEvent) {\n    const originalError =\n      error instanceof Error ? error : new Error(String(error));\n    throw new HeyApiError({\n      args: [event],\n      error: originalError,\n      event: event.type,\n      name: 'Error',\n      pluginName: this.name,\n    });\n  }\n\n  /**\n   * Retrieves a registered plugin instance by its name from the context. This\n   * allows plugins to access other plugins that have been registered in the\n   * same context, enabling cross-plugin communication and dependencies.\n   *\n   * @param name Plugin name as defined in the configuration.\n   * @returns The plugin instance if found, undefined otherwise.\n   */\n  public getPlugin<T extends keyof PluginConfigMap>(\n    name: T,\n  ): T extends any ? PluginInstance<PluginConfigMap[T]> | undefined : never {\n    return this.context.plugins[name] as any;\n  }\n\n  /**\n   * Executes plugin's handler function.\n   */\n  public async run() {\n    await this.handler({ plugin: this });\n  }\n}\n","import path from 'node:path';\n\nimport { TypeScriptFile } from '../generate/files';\nimport type { PluginConfigMap } from '../plugins/config';\nimport { PluginInstance } from '../plugins/shared/utils/instance';\nimport type { PluginNames } from '../plugins/types';\nimport type { StringCase } from '../types/case';\nimport type { Config } from '../types/config';\nimport type { Files } from '../types/utils';\nimport { resolveRef } from '../utils/ref';\nimport type { IR } from './types';\n\nexport interface ContextFile {\n  /**\n   * Should the exports from this file be re-exported in the index barrel file?\n   */\n  exportFromIndex?: boolean;\n  /**\n   * Unique file identifier.\n   */\n  id: string;\n  /**\n   * Define casing for identifiers in this file.\n   */\n  identifierCase?: StringCase;\n  /**\n   * Relative file path to the output path.\n   *\n   * @example\n   * 'bar/foo.ts'\n   */\n  path: string;\n}\n\nexport class IRContext<Spec extends Record<string, any> = any> {\n  /**\n   * Configuration for parsing and generating the output. This\n   * is a mix of user-provided and default values.\n   */\n  public config: Config;\n  /**\n   * A map of files that will be generated from `spec`.\n   */\n  public files: Files = {};\n  /**\n   * Intermediate representation model obtained from `spec`.\n   */\n  public ir: IR.Model = {};\n  /**\n   * A map of registered plugin instances, keyed by plugin name. Plugins are\n   * registered through the `registerPlugin` method and can be accessed by\n   * their configured name from the config.\n   */\n  public plugins: Partial<\n    Record<PluginNames, PluginInstance<PluginConfigMap[keyof PluginConfigMap]>>\n  > = {};\n  /**\n   * Resolved specification from `input`.\n   */\n  public spec: Spec;\n\n  constructor({ config, spec }: { config: Config; spec: Spec }) {\n    this.config = config;\n    this.spec = spec;\n  }\n\n  /**\n   * Create and return a new TypeScript file. Also set the current file context\n   * to the newly created file.\n   */\n  public createFile(file: ContextFile): TypeScriptFile {\n    // TODO: parser - handle attempt to create duplicate\n    const outputParts = file.path.split('/');\n    const outputDir = path.resolve(\n      this.config.output.path,\n      ...outputParts.slice(0, outputParts.length - 1),\n    );\n    const createdFile = new TypeScriptFile({\n      dir: outputDir,\n      exportFromIndex: file.exportFromIndex,\n      id: file.id,\n      identifierCase: file.identifierCase,\n      name: `${outputParts[outputParts.length - 1]}.ts`,\n    });\n    this.files[file.id] = createdFile;\n    return createdFile;\n  }\n\n  /**\n   * Returns a resolved and dereferenced schema from `spec`.\n   */\n  public dereference<T>(schema: { $ref: string }) {\n    const resolved = this.resolveRef<T>(schema.$ref);\n    const dereferenced = {\n      ...schema,\n      ...resolved,\n    } as T;\n    // @ts-expect-error\n    delete dereferenced.$ref;\n    return dereferenced;\n  }\n\n  /**\n   * Returns a specific file by ID from `files`.\n   */\n  public file({ id }: Pick<ContextFile, 'id'>): TypeScriptFile | undefined {\n    return this.files[id];\n  }\n\n  /**\n   * Registers a new plugin to the global context.\n   *\n   * @param name Plugin name.\n   * @returns Registered plugin instance.\n   */\n  private registerPlugin<T extends PluginNames>(\n    name: T,\n  ): PluginInstance<PluginConfigMap[T]> {\n    const plugin = this.config.plugins[name]!;\n    const instance = new PluginInstance({\n      api: plugin.api,\n      config: plugin.config as any,\n      context: this as any,\n      dependencies: plugin.dependencies ?? [],\n      handler: plugin.handler,\n      name: plugin.name,\n      output: plugin.output!,\n    });\n    this.plugins[instance.name] = instance;\n    return instance;\n  }\n\n  /**\n   * Registers all plugins in the order specified by the configuration and returns\n   * an array of the registered PluginInstance objects. Each plugin is instantiated\n   * and added to the context's plugins map.\n   *\n   * @returns {ReadonlyArray<PluginInstance>} An array of registered plugin instances in order.\n   */\n  public registerPlugins(): ReadonlyArray<PluginInstance> {\n    return this.config.pluginOrder.map((name) => this.registerPlugin(name));\n  }\n\n  // TODO: parser - works the same as resolveRef, but for IR schemas.\n  // for now, they map 1:1, but if they diverge (like with OpenAPI 2.0),\n  // we will want to rewrite $refs at parse time, so they continue pointing\n  // to the correct IR location\n  public resolveIrRef<T>($ref: string) {\n    return resolveRef<T>({\n      $ref,\n      spec: this.ir,\n    });\n  }\n\n  /**\n   * Returns a resolved reference from `spec`.\n   */\n  public resolveRef<T>($ref: string) {\n    return resolveRef<T>({\n      $ref,\n      spec: this.spec,\n    });\n  }\n}\n","import type { Pagination } from './pagination';\nimport type { IR } from './types';\n\nconst getPaginationSchema = ({\n  context,\n  parameter,\n}: {\n  context: IR.Context;\n  parameter: IR.ParameterObject;\n}): IR.SchemaObject | undefined => {\n  if (!parameter.pagination) {\n    return;\n  }\n\n  if (parameter.pagination === true) {\n    return parameter.schema;\n  }\n\n  let schema = parameter.schema;\n  if (schema.$ref) {\n    schema = context.resolveIrRef<IR.SchemaObject>(schema.$ref);\n  }\n\n  return schema.properties![parameter.pagination]!;\n};\n\nexport const hasParameterGroupObjectRequired = (\n  parameterGroup?: Record<string, IR.ParameterObject>,\n): boolean => {\n  for (const name in parameterGroup) {\n    if (parameterGroup[name]!.required) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport const hasParametersObjectRequired = (\n  parameters: IR.ParametersObject | undefined,\n): boolean => {\n  if (!parameters) {\n    return false;\n  }\n\n  if (hasParameterGroupObjectRequired(parameters.cookie)) {\n    return true;\n  }\n\n  if (hasParameterGroupObjectRequired(parameters.header)) {\n    return true;\n  }\n\n  if (hasParameterGroupObjectRequired(parameters.path)) {\n    return true;\n  }\n\n  if (hasParameterGroupObjectRequired(parameters.query)) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const parameterWithPagination = ({\n  context,\n  parameters,\n}: {\n  context: IR.Context;\n  parameters: IR.ParametersObject | undefined;\n}): Pagination | undefined => {\n  if (!parameters) {\n    return;\n  }\n\n  for (const name in parameters.cookie) {\n    const parameter = parameters.cookie[name]!;\n    if (parameter.pagination) {\n      return {\n        in: parameter.location,\n        name:\n          parameter.pagination === true\n            ? name\n            : `${name}.${parameter.pagination}`,\n        schema: getPaginationSchema({ context, parameter })!,\n      };\n    }\n  }\n\n  for (const name in parameters.header) {\n    const parameter = parameters.header[name]!;\n    if (parameter.pagination) {\n      return {\n        in: parameter.location,\n        name:\n          parameter.pagination === true\n            ? name\n            : `${name}.${parameter.pagination}`,\n        schema: getPaginationSchema({ context, parameter })!,\n      };\n    }\n  }\n\n  for (const name in parameters.path) {\n    const parameter = parameters.path[name]!;\n    if (parameter.pagination) {\n      return {\n        in: parameter.location,\n        name:\n          parameter.pagination === true\n            ? name\n            : `${name}.${parameter.pagination}`,\n        schema: getPaginationSchema({ context, parameter })!,\n      };\n    }\n  }\n\n  for (const name in parameters.query) {\n    const parameter = parameters.query[name]!;\n    if (parameter.pagination) {\n      return {\n        in: parameter.location,\n        name:\n          parameter.pagination === true\n            ? name\n            : `${name}.${parameter.pagination}`,\n        schema: getPaginationSchema({ context, parameter })!,\n      };\n    }\n  }\n\n  return;\n};\n","import type { IR } from './types';\n\n/**\n * Ensure we don't produce redundant types, e.g. string | string.\n */\nexport const deduplicateSchema = <T extends IR.SchemaObject>({\n  detectFormat = true,\n  schema,\n}: {\n  detectFormat?: boolean;\n  schema: T;\n}): T => {\n  if (!schema.items) {\n    return schema;\n  }\n\n  const uniqueItems: Array<IR.SchemaObject> = [];\n  const typeIds: Array<string> = [];\n\n  for (const item of schema.items) {\n    // skip nested schemas for now, handle if necessary\n    if ((!item.type && item.items) || schema.type === 'tuple') {\n      uniqueItems.push(item);\n      continue;\n    }\n\n    if (\n      // no `type` might still include `$ref` or `const`\n      !item.type ||\n      item.type === 'boolean' ||\n      item.type === 'integer' ||\n      item.type === 'null' ||\n      item.type === 'number' ||\n      item.type === 'string' ||\n      item.type === 'unknown' ||\n      item.type === 'void'\n    ) {\n      // const needs namespace to handle empty string values, otherwise\n      // fallback would equal an actual value and we would skip an item\n      const constant = item.const !== undefined ? `const-${item.const}` : '';\n      const format =\n        item.format !== undefined && detectFormat\n          ? `format-${item.format}`\n          : '';\n      const typeId = `${item.$ref ?? ''}${item.type ?? ''}${constant}${format}`;\n      if (!typeIds.includes(typeId)) {\n        typeIds.push(typeId);\n        uniqueItems.push(item);\n      }\n      continue;\n    }\n\n    uniqueItems.push(item);\n  }\n\n  let result = { ...schema };\n  result.items = uniqueItems;\n\n  if (\n    result.items.length <= 1 &&\n    result.type !== 'array' &&\n    result.type !== 'enum' &&\n    result.type !== 'tuple'\n  ) {\n    // bring the only item up to clean up the schema\n    const liftedSchema = result.items[0];\n    delete result.logicalOperator;\n    delete result.items;\n    result = {\n      ...result,\n      ...liftedSchema,\n    };\n  }\n\n  // exclude unknown if it's the only type left\n  if (result.type === 'unknown') {\n    return {} as T;\n  }\n\n  return result;\n};\n","export const deepClone = <T>(obj: T): T => JSON.parse(JSON.stringify(obj));\n\n/**\n * Accepts `accessScopes` from two schemas and returns a merged and\n * deduplicated value.\n */\nexport const mergeSchemaAccessScopes = (\n  a: ReadonlyArray<'both' | 'read' | 'write'> | undefined,\n  b: ReadonlyArray<'both' | 'read' | 'write'> | undefined,\n): ReadonlyArray<'both' | 'read' | 'write'> | undefined => {\n  if (!a?.length) {\n    return b?.length ? b : undefined;\n  }\n\n  if (!b?.length) {\n    return a;\n  }\n\n  const mergedScopes = new Set(a);\n\n  for (const scope of b) {\n    mergedScopes.add(scope);\n  }\n\n  return mergedScopes.size > a.length ? Array.from(mergedScopes) : a;\n};\n","import { mergeSchemaAccessScopes } from '../openApi/shared/utils/schema';\nimport type { IR } from './types';\n\nconst assignItems = ({\n  items,\n  schema,\n}: {\n  items: Array<IR.SchemaObject>;\n  schema: IR.SchemaObject;\n}) => {\n  for (const item of items) {\n    schema.accessScopes = mergeSchemaAccessScopes(\n      schema.accessScopes,\n      item.accessScopes,\n    );\n  }\n  schema.items = items;\n};\n\n/**\n * Simply adds `items` to the schema. Also handles setting the logical operator\n * and avoids setting it for a single item or tuples.\n */\nexport const addItemsToSchema = ({\n  items,\n  logicalOperator = 'or',\n  mutateSchemaOneItem = false,\n  schema,\n}: {\n  items: Array<IR.SchemaObject>;\n  logicalOperator?: IR.SchemaObject['logicalOperator'];\n  mutateSchemaOneItem?: boolean;\n  schema: IR.SchemaObject;\n}) => {\n  if (!items.length) {\n    return schema;\n  }\n\n  if (schema.type === 'tuple') {\n    assignItems({ items, schema });\n    return schema;\n  }\n\n  if (items.length !== 1) {\n    assignItems({ items, schema });\n    schema.logicalOperator = logicalOperator;\n    return schema;\n  }\n\n  if (mutateSchemaOneItem) {\n    // bring composition up to avoid extraneous brackets\n    schema = {\n      ...schema,\n      ...items[0],\n    };\n    return schema;\n  }\n\n  assignItems({ items, schema });\n  return schema;\n};\n","import type { Pagination } from './pagination';\nimport {\n  hasParametersObjectRequired,\n  parameterWithPagination,\n} from './parameter';\nimport { deduplicateSchema } from './schema';\nimport type { IR } from './types';\nimport { addItemsToSchema } from './utils';\n\nexport const hasOperationDataRequired = (\n  operation: IR.OperationObject,\n): boolean => {\n  if (hasParametersObjectRequired(operation.parameters)) {\n    return true;\n  }\n\n  if (operation.body?.required) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const createOperationKey = ({\n  method,\n  path,\n}: {\n  method: string;\n  path: string;\n}) => `${method.toUpperCase()} ${path}`;\n\nexport const operationPagination = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}): Pagination | undefined => {\n  const body = operation.body;\n\n  if (!body || !body.pagination) {\n    return parameterWithPagination({\n      context,\n      parameters: operation.parameters,\n    });\n  }\n\n  if (body.pagination === true) {\n    return {\n      in: 'body',\n      name: 'body',\n      schema: body.schema,\n    };\n  }\n\n  const schema = body.schema;\n  const resolvedSchema = schema.$ref\n    ? context.resolveIrRef<IR.RequestBodyObject | IR.SchemaObject>(schema.$ref)\n    : schema;\n\n  const finalSchema =\n    'schema' in resolvedSchema ? resolvedSchema.schema : resolvedSchema;\n  const paginationProp = finalSchema?.properties?.[body.pagination];\n\n  if (!paginationProp) {\n    return parameterWithPagination({\n      context,\n      parameters: operation.parameters,\n    });\n  }\n\n  return {\n    in: 'body',\n    name: body.pagination,\n    schema: paginationProp,\n  };\n};\n\ntype StatusGroup = '1XX' | '2XX' | '3XX' | '4XX' | '5XX' | 'default';\n\nexport const statusCodeToGroup = ({\n  statusCode,\n}: {\n  statusCode: string;\n}): StatusGroup => {\n  switch (statusCode) {\n    case '1XX':\n      return '1XX';\n    case '2XX':\n      return '2XX';\n    case '3XX':\n      return '3XX';\n    case '4XX':\n      return '4XX';\n    case '5XX':\n      return '5XX';\n    case 'default':\n      return 'default';\n    default:\n      return `${statusCode[0]}XX` as StatusGroup;\n  }\n};\n\ninterface OperationResponsesMap {\n  /**\n   * A deduplicated union of all error types. Unknown types are omitted.\n   */\n  error?: IR.SchemaObject;\n  /**\n   * An object containing a map of status codes for each error type.\n   */\n  errors?: IR.SchemaObject;\n  /**\n   * A deduplicated union of all response types. Unknown types are omitted.\n   */\n  response?: IR.SchemaObject;\n  /**\n   * An object containing a map of status codes for each response type.\n   */\n  responses?: IR.SchemaObject;\n}\n\nexport const operationResponsesMap = (\n  operation: IR.OperationObject,\n): OperationResponsesMap => {\n  const result: OperationResponsesMap = {};\n\n  if (!operation.responses) {\n    return result;\n  }\n\n  const errors: Omit<IR.SchemaObject, 'properties'> &\n    Pick<Required<IR.SchemaObject>, 'properties'> = {\n    properties: {},\n    type: 'object',\n  };\n\n  const responses: Omit<IR.SchemaObject, 'properties'> &\n    Pick<Required<IR.SchemaObject>, 'properties'> = {\n    properties: {},\n    type: 'object',\n  };\n\n  // store default response to be evaluated last\n  let defaultResponse: IR.ResponseObject | undefined;\n\n  for (const name in operation.responses) {\n    const response = operation.responses[name]!;\n\n    switch (statusCodeToGroup({ statusCode: name })) {\n      case '1XX':\n      case '3XX':\n        // TODO: parser - handle informational and redirection status codes\n        break;\n      case '2XX':\n        responses.properties[name] = response.schema;\n        break;\n      case '4XX':\n      case '5XX':\n        errors.properties[name] = response.schema;\n        break;\n      case 'default':\n        defaultResponse = response;\n        break;\n    }\n  }\n\n  // infer default response type\n  if (defaultResponse) {\n    let inferred = false;\n\n    // assume default is intended for success if none exists yet\n    if (!Object.keys(responses.properties).length) {\n      responses.properties.default = defaultResponse.schema;\n      inferred = true;\n    }\n\n    const description = (\n      defaultResponse.schema.description ?? ''\n    ).toLocaleLowerCase();\n    const $ref = (defaultResponse.schema.$ref ?? '').toLocaleLowerCase();\n\n    // TODO: parser - this could be rewritten using regular expressions\n    const successKeywords = ['success'];\n    if (\n      successKeywords.some(\n        (keyword) => description.includes(keyword) || $ref.includes(keyword),\n      )\n    ) {\n      responses.properties.default = defaultResponse.schema;\n      inferred = true;\n    }\n\n    // TODO: parser - this could be rewritten using regular expressions\n    const errorKeywords = ['error', 'problem'];\n    if (\n      errorKeywords.some(\n        (keyword) => description.includes(keyword) || $ref.includes(keyword),\n      )\n    ) {\n      errors.properties.default = defaultResponse.schema;\n      inferred = true;\n    }\n\n    // if no keyword match, assume default schema is intended for error\n    if (!inferred) {\n      errors.properties.default = defaultResponse.schema;\n    }\n  }\n\n  const errorKeys = Object.keys(errors.properties);\n  if (errorKeys.length) {\n    errors.required = errorKeys;\n    result.errors = errors;\n\n    let errorUnion = addItemsToSchema({\n      items: Object.values(errors.properties),\n      mutateSchemaOneItem: true,\n      schema: {},\n    });\n    errorUnion = deduplicateSchema({ schema: errorUnion });\n    if (Object.keys(errorUnion).length && errorUnion.type !== 'unknown') {\n      result.error = errorUnion;\n    }\n  }\n\n  const responseKeys = Object.keys(responses.properties);\n  if (responseKeys.length) {\n    responses.required = responseKeys;\n    result.responses = responses;\n\n    let responseUnion = addItemsToSchema({\n      items: Object.values(responses.properties),\n      mutateSchemaOneItem: true,\n      schema: {},\n    });\n    responseUnion = deduplicateSchema({ schema: responseUnion });\n    if (Object.keys(responseUnion).length && responseUnion.type !== 'unknown') {\n      result.response = responseUnion;\n    }\n  }\n\n  return result;\n};\n","import { illegalStartCharactersRegExp } from '../../../utils/regexp';\n\nexport const ensureValidTypeScriptJavaScriptIdentifier = (name: string) => {\n  const replaced = name.replace(/[^$\\u200c\\u200d\\p{ID_Continue}]/gu, '_');\n  illegalStartCharactersRegExp.lastIndex = 0;\n  const startsWithIllegalCharacter =\n    illegalStartCharactersRegExp.test(replaced);\n  const valid = startsWithIllegalCharacter ? `_${replaced}` : replaced;\n  return valid;\n};\n\n/**\n * Sanitizes namespace identifiers so they are valid TypeScript identifiers of a certain form.\n *\n * 1: Remove any leading characters that are illegal as starting character of a typescript identifier.\n * 2: Replace illegal characters in remaining part of type name with hyphen (-).\n *\n * Step 1 should perhaps instead also replace illegal characters with underscore, or prefix with it, like sanitizeEnumName\n * does. The way this is now one could perhaps end up removing all characters, if all are illegal start characters. It\n * would be sort of a breaking change to do so, though, previously generated code might change then.\n *\n * JavaScript identifier regexp pattern retrieved from https://developer.mozilla.org/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers\n *\n * The output of this is expected to be converted to PascalCase\n */\nexport const sanitizeNamespaceIdentifier = (name: string) =>\n  name\n    .replace(/^[^\\p{ID_Start}]+/u, '')\n    .replace(/[^$\\u200c\\u200d\\p{ID_Continue}]/gu, '-')\n    .replace(/[$+]/g, '-');\n\nexport const sanitizeOperationParameterName = (name: string) => {\n  const withoutBrackets = name.replace('[]', 'Array');\n  return sanitizeNamespaceIdentifier(withoutBrackets);\n};\n","import { createOperationKey } from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { stringCase } from '../../../utils/stringCase';\nimport { sanitizeNamespaceIdentifier } from '../../common/parser/sanitize';\nimport type { State } from '../types/state';\n\nexport const httpMethods = [\n  'delete',\n  'get',\n  'head',\n  'options',\n  'patch',\n  'post',\n  'put',\n  'trace',\n] as const;\n\n/**\n * Returns an operation ID to use across the application. By default, we try\n * to use the provided ID. If it's not provided or the SDK is configured\n * to exclude it, we generate operation ID from its location.\n */\nexport const operationToId = ({\n  context,\n  count = 1,\n  id,\n  method,\n  path,\n  state,\n}: {\n  context: IR.Context;\n  count?: number;\n  id: string | undefined;\n  method: string;\n  path: string;\n  state: Pick<State, 'ids'>;\n}): string => {\n  let result: string;\n\n  if (\n    id &&\n    (!context.config.plugins['@hey-api/sdk'] ||\n      context.config.plugins['@hey-api/sdk'].config.operationId)\n  ) {\n    result = stringCase({\n      case: 'camelCase',\n      value: sanitizeNamespaceIdentifier(id),\n    });\n  } else {\n    const urlWithoutPlaceholders = path\n      .replace(/{(.*?)}/g, 'by-$1')\n      // replace slashes with hyphens for camelcase method at the end\n      .replace(/[/:+]/g, '-');\n\n    result = stringCase({\n      case: 'camelCase',\n      value: `${method}-${urlWithoutPlaceholders}`,\n    });\n  }\n\n  if (count > 1) {\n    result = `${result}${count}`;\n  }\n\n  if (state.ids.has(result)) {\n    return operationToId({\n      context,\n      count: count + 1,\n      id,\n      method,\n      path,\n      state,\n    });\n  }\n\n  state.ids.set(result, createOperationKey({ method, path }));\n\n  return result;\n};\n","import { createOperationKey } from '../../../ir/operation';\nimport type { Config } from '../../../types/config';\nimport type { PathItemObject, PathsObject } from '../../3.1.x/types/spec';\nimport type { OpenApi } from '../../types';\nimport type { ResourceMetadata } from '../graph/meta';\nimport { httpMethods } from './operation';\n\ntype FilterNamespace =\n  | 'body'\n  | 'operation'\n  | 'parameter'\n  | 'response'\n  | 'schema'\n  | 'unknown';\n\nconst namespaceNeedle = '/';\n\nexport const addNamespace = (\n  namespace: FilterNamespace,\n  value: string = '',\n): string => `${namespace}${namespaceNeedle}${value}`;\n\nexport const removeNamespace = (\n  key: string,\n): {\n  name: string;\n  namespace: FilterNamespace;\n} => {\n  const index = key.indexOf(namespaceNeedle);\n  const name = key.slice(index + 1);\n  return {\n    name,\n    namespace: key.slice(0, index)! as FilterNamespace,\n  };\n};\n\n/**\n * Converts reference strings from OpenAPI $ref keywords into namespaces.\n *\n * @example '#/components/schemas/Foo' -> 'schema'\n */\nexport const stringToNamespace = (value: string): FilterNamespace => {\n  switch (value) {\n    case 'parameters':\n      return 'parameter';\n    case 'requestBodies':\n      return 'body';\n    case 'responses':\n      return 'response';\n    case 'definitions':\n    case 'schemas':\n      return 'schema';\n    default:\n      return 'unknown';\n  }\n};\n\ntype FiltersConfigToState<T> = {\n  [K in keyof T]-?: NonNullable<T[K]> extends ReadonlyArray<infer U>\n    ? Set<U>\n    : NonNullable<T[K]> extends object\n      ? FiltersConfigToState<NonNullable<T[K]>>\n      : T[K];\n};\n\nexport type Filters = FiltersConfigToState<\n  NonNullable<Config['parser']['filters']>\n>;\n\ninterface SetAndRegExps {\n  regexps: Array<RegExp>;\n  set: Set<string>;\n}\n\nconst createFiltersSetAndRegExps = (\n  type: FilterNamespace,\n  filters: ReadonlyArray<string> | undefined,\n): SetAndRegExps => {\n  const keys: Array<string> = [];\n  const regexps: Array<RegExp> = [];\n  if (filters) {\n    for (const value of filters) {\n      if (value.startsWith('/') && value.endsWith('/')) {\n        regexps.push(new RegExp(value.slice(1, value.length - 1)));\n      } else {\n        keys.push(addNamespace(type, value));\n      }\n    }\n  }\n  return {\n    regexps,\n    set: new Set(keys),\n  };\n};\n\ninterface CollectFiltersSetFromRegExps {\n  excludeOperations: SetAndRegExps;\n  excludeParameters: SetAndRegExps;\n  excludeRequestBodies: SetAndRegExps;\n  excludeResponses: SetAndRegExps;\n  excludeSchemas: SetAndRegExps;\n  includeOperations: SetAndRegExps;\n  includeParameters: SetAndRegExps;\n  includeRequestBodies: SetAndRegExps;\n  includeResponses: SetAndRegExps;\n  includeSchemas: SetAndRegExps;\n}\n\nconst collectFiltersSetFromRegExpsOpenApiV2 = ({\n  excludeOperations,\n  excludeSchemas,\n  includeOperations,\n  includeSchemas,\n  spec,\n}: CollectFiltersSetFromRegExps & {\n  spec: OpenApi.V2_0_X;\n}) => {\n  if (\n    (excludeOperations.regexps.length || includeOperations.regexps.length) &&\n    spec.paths\n  ) {\n    for (const entry of Object.entries(spec.paths)) {\n      const path = entry[0] as keyof PathsObject;\n      const pathItem = entry[1] as PathItemObject;\n      for (const method of httpMethods) {\n        const operation = pathItem[method];\n        if (!operation) {\n          continue;\n        }\n\n        const key = createOperationKey({ method, path });\n        if (excludeOperations.regexps.some((regexp) => regexp.test(key))) {\n          excludeOperations.set.add(addNamespace('operation', key));\n        }\n        if (includeOperations.regexps.some((regexp) => regexp.test(key))) {\n          includeOperations.set.add(addNamespace('operation', key));\n        }\n      }\n    }\n  }\n\n  if (spec.definitions) {\n    // TODO: add parameters\n\n    if (excludeSchemas.regexps.length || includeSchemas.regexps.length) {\n      for (const key of Object.keys(spec.definitions)) {\n        if (excludeSchemas.regexps.some((regexp) => regexp.test(key))) {\n          excludeSchemas.set.add(addNamespace('schema', key));\n        }\n        if (includeSchemas.regexps.some((regexp) => regexp.test(key))) {\n          includeSchemas.set.add(addNamespace('schema', key));\n        }\n      }\n    }\n  }\n};\n\nconst collectFiltersSetFromRegExpsOpenApiV3 = ({\n  excludeOperations,\n  excludeParameters,\n  excludeRequestBodies,\n  excludeResponses,\n  excludeSchemas,\n  includeOperations,\n  includeParameters,\n  includeRequestBodies,\n  includeResponses,\n  includeSchemas,\n  spec,\n}: CollectFiltersSetFromRegExps & {\n  spec: OpenApi.V3_0_X | OpenApi.V3_1_X;\n}) => {\n  if (\n    (excludeOperations.regexps.length || includeOperations.regexps.length) &&\n    spec.paths\n  ) {\n    for (const entry of Object.entries(spec.paths)) {\n      const path = entry[0] as keyof PathsObject;\n      const pathItem = entry[1] as PathItemObject;\n      for (const method of httpMethods) {\n        const operation = pathItem[method];\n        if (!operation) {\n          continue;\n        }\n\n        const key = createOperationKey({ method, path });\n        if (excludeOperations.regexps.some((regexp) => regexp.test(key))) {\n          excludeOperations.set.add(addNamespace('operation', key));\n        }\n        if (includeOperations.regexps.some((regexp) => regexp.test(key))) {\n          includeOperations.set.add(addNamespace('operation', key));\n        }\n      }\n    }\n  }\n\n  if (spec.components) {\n    if (\n      (excludeParameters.regexps.length || includeParameters.regexps.length) &&\n      spec.components.parameters\n    ) {\n      for (const key of Object.keys(spec.components.parameters)) {\n        if (excludeParameters.regexps.some((regexp) => regexp.test(key))) {\n          excludeParameters.set.add(addNamespace('parameter', key));\n        }\n        if (includeParameters.regexps.some((regexp) => regexp.test(key))) {\n          includeParameters.set.add(addNamespace('parameter', key));\n        }\n      }\n    }\n\n    if (\n      (excludeRequestBodies.regexps.length ||\n        includeRequestBodies.regexps.length) &&\n      spec.components.requestBodies\n    ) {\n      for (const key of Object.keys(spec.components.requestBodies)) {\n        if (excludeRequestBodies.regexps.some((regexp) => regexp.test(key))) {\n          excludeRequestBodies.set.add(addNamespace('body', key));\n        }\n        if (includeRequestBodies.regexps.some((regexp) => regexp.test(key))) {\n          includeRequestBodies.set.add(addNamespace('body', key));\n        }\n      }\n    }\n\n    if (\n      (excludeResponses.regexps.length || includeResponses.regexps.length) &&\n      spec.components.responses\n    ) {\n      for (const key of Object.keys(spec.components.responses)) {\n        if (excludeResponses.regexps.some((regexp) => regexp.test(key))) {\n          excludeResponses.set.add(addNamespace('response', key));\n        }\n        if (includeResponses.regexps.some((regexp) => regexp.test(key))) {\n          includeResponses.set.add(addNamespace('response', key));\n        }\n      }\n    }\n\n    if (\n      (excludeSchemas.regexps.length || includeSchemas.regexps.length) &&\n      spec.components.schemas\n    ) {\n      for (const key of Object.keys(spec.components.schemas)) {\n        if (excludeSchemas.regexps.some((regexp) => regexp.test(key))) {\n          excludeSchemas.set.add(addNamespace('schema', key));\n        }\n        if (includeSchemas.regexps.some((regexp) => regexp.test(key))) {\n          includeSchemas.set.add(addNamespace('schema', key));\n        }\n      }\n    }\n  }\n};\n\nconst collectFiltersSetFromRegExps = ({\n  spec,\n  ...filters\n}: CollectFiltersSetFromRegExps & {\n  spec: OpenApi.V2_0_X | OpenApi.V3_0_X | OpenApi.V3_1_X;\n}): void => {\n  if ('swagger' in spec) {\n    collectFiltersSetFromRegExpsOpenApiV2({ ...filters, spec });\n  } else {\n    collectFiltersSetFromRegExpsOpenApiV3({ ...filters, spec });\n  }\n};\n\nexport const createFilters = (\n  config: Config['parser']['filters'],\n  spec: OpenApi.V2_0_X | OpenApi.V3_0_X | OpenApi.V3_1_X,\n): Filters => {\n  const excludeOperations = createFiltersSetAndRegExps(\n    'operation',\n    config?.operations?.exclude,\n  );\n  const includeOperations = createFiltersSetAndRegExps(\n    'operation',\n    config?.operations?.include,\n  );\n  const excludeParameters = createFiltersSetAndRegExps(\n    'parameter',\n    config?.parameters?.exclude,\n  );\n  const includeParameters = createFiltersSetAndRegExps(\n    'parameter',\n    config?.parameters?.include,\n  );\n  const excludeRequestBodies = createFiltersSetAndRegExps(\n    'body',\n    config?.requestBodies?.exclude,\n  );\n  const includeRequestBodies = createFiltersSetAndRegExps(\n    'body',\n    config?.requestBodies?.include,\n  );\n  const excludeResponses = createFiltersSetAndRegExps(\n    'response',\n    config?.responses?.exclude,\n  );\n  const includeResponses = createFiltersSetAndRegExps(\n    'response',\n    config?.responses?.include,\n  );\n  const excludeSchemas = createFiltersSetAndRegExps(\n    'schema',\n    config?.schemas?.exclude,\n  );\n  const includeSchemas = createFiltersSetAndRegExps(\n    'schema',\n    config?.schemas?.include,\n  );\n\n  collectFiltersSetFromRegExps({\n    excludeOperations,\n    excludeParameters,\n    excludeRequestBodies,\n    excludeResponses,\n    excludeSchemas,\n    includeOperations,\n    includeParameters,\n    includeRequestBodies,\n    includeResponses,\n    includeSchemas,\n    spec,\n  });\n\n  const filters: Filters = {\n    deprecated: config?.deprecated ?? true,\n    operations: {\n      exclude: excludeOperations.set,\n      include: includeOperations.set,\n    },\n    orphans: config?.orphans ?? false,\n    parameters: {\n      exclude: excludeParameters.set,\n      include: includeParameters.set,\n    },\n    preserveOrder: config?.preserveOrder ?? false,\n    requestBodies: {\n      exclude: excludeRequestBodies.set,\n      include: includeRequestBodies.set,\n    },\n    responses: {\n      exclude: excludeResponses.set,\n      include: includeResponses.set,\n    },\n    schemas: {\n      exclude: excludeSchemas.set,\n      include: includeSchemas.set,\n    },\n    tags: {\n      exclude: new Set(config?.tags?.exclude),\n      include: new Set(config?.tags?.include),\n    },\n  };\n  return filters;\n};\n\nexport const hasFilters = (config: Config['parser']['filters']): boolean => {\n  if (!config) {\n    return false;\n  }\n\n  // we explicitly want to strip orphans or deprecated\n  if (config.orphans === false || config.deprecated === false) {\n    return true;\n  }\n\n  return Boolean(\n    config.operations?.exclude?.length ||\n      config.operations?.include?.length ||\n      config.parameters?.exclude?.length ||\n      config.parameters?.include?.length ||\n      config.requestBodies?.exclude?.length ||\n      config.requestBodies?.include?.length ||\n      config.responses?.exclude?.length ||\n      config.responses?.include?.length ||\n      config.schemas?.exclude?.length ||\n      config.schemas?.include?.length ||\n      config.tags?.exclude?.length ||\n      config.tags?.include?.length,\n  );\n};\n\n/**\n * Collect operations that satisfy the include/exclude filters and schema dependencies.\n */\nconst collectOperations = ({\n  filters,\n  parameters,\n  requestBodies,\n  resourceMetadata,\n  responses,\n  schemas,\n}: {\n  filters: Filters;\n  parameters: Set<string>;\n  requestBodies: Set<string>;\n  resourceMetadata: ResourceMetadata;\n  responses: Set<string>;\n  schemas: Set<string>;\n}): {\n  operations: Set<string>;\n} => {\n  const finalSet = new Set<string>();\n  const initialSet = filters.operations.include.size\n    ? filters.operations.include\n    : new Set(resourceMetadata.operations.keys());\n  const stack = [...initialSet];\n  while (stack.length) {\n    const key = stack.pop()!;\n\n    if (filters.operations.exclude.has(key) || finalSet.has(key)) {\n      continue;\n    }\n\n    const node = resourceMetadata.operations.get(key);\n\n    if (!node) {\n      continue;\n    }\n\n    if (!filters.deprecated && node.deprecated) {\n      continue;\n    }\n\n    if (\n      filters.tags.exclude.size &&\n      node.tags.size &&\n      [...filters.tags.exclude].some((tag) => node.tags.has(tag))\n    ) {\n      continue;\n    }\n\n    if (\n      filters.tags.include.size &&\n      !new Set([...filters.tags.include].filter((tag) => node.tags.has(tag)))\n        .size\n    ) {\n      continue;\n    }\n\n    // skip operation if it references any component not included\n    if (\n      [...node.dependencies].some((dependency) => {\n        const { namespace } = removeNamespace(dependency);\n        switch (namespace) {\n          case 'body':\n            return !requestBodies.has(dependency);\n          case 'parameter':\n            return !parameters.has(dependency);\n          case 'response':\n            return !responses.has(dependency);\n          case 'schema':\n            return !schemas.has(dependency);\n          default:\n            return false;\n        }\n      })\n    ) {\n      continue;\n    }\n\n    finalSet.add(key);\n  }\n  return { operations: finalSet };\n};\n\n/**\n * Collect parameters that satisfy the include/exclude filters and schema dependencies.\n */\nconst collectParameters = ({\n  filters,\n  resourceMetadata,\n  schemas,\n}: {\n  filters: Filters;\n  resourceMetadata: ResourceMetadata;\n  schemas: Set<string>;\n}): {\n  parameters: Set<string>;\n} => {\n  const finalSet = new Set<string>();\n  const initialSet = filters.parameters.include.size\n    ? filters.parameters.include\n    : new Set(resourceMetadata.parameters.keys());\n  const stack = [...initialSet];\n  while (stack.length) {\n    const key = stack.pop()!;\n\n    if (filters.parameters.exclude.has(key) || finalSet.has(key)) {\n      continue;\n    }\n\n    const node = resourceMetadata.parameters.get(key);\n\n    if (!node) {\n      continue;\n    }\n\n    if (!filters.deprecated && node.deprecated) {\n      continue;\n    }\n\n    finalSet.add(key);\n\n    if (!node.dependencies.size) {\n      continue;\n    }\n\n    for (const dependency of node.dependencies) {\n      const { namespace } = removeNamespace(dependency);\n      switch (namespace) {\n        case 'body': {\n          if (filters.requestBodies.exclude.has(dependency)) {\n            finalSet.delete(key);\n          } else if (!finalSet.has(dependency)) {\n            stack.push(dependency);\n          }\n          break;\n        }\n        case 'schema': {\n          if (filters.schemas.exclude.has(dependency)) {\n            finalSet.delete(key);\n          } else if (!schemas.has(dependency)) {\n            schemas.add(dependency);\n          }\n          break;\n        }\n      }\n    }\n  }\n  return { parameters: finalSet };\n};\n\n/**\n * Collect request bodies that satisfy the include/exclude filters and schema dependencies.\n */\nconst collectRequestBodies = ({\n  filters,\n  resourceMetadata,\n  schemas,\n}: {\n  filters: Filters;\n  resourceMetadata: ResourceMetadata;\n  schemas: Set<string>;\n}): {\n  requestBodies: Set<string>;\n} => {\n  const finalSet = new Set<string>();\n  const initialSet = filters.requestBodies.include.size\n    ? filters.requestBodies.include\n    : new Set(resourceMetadata.requestBodies.keys());\n  const stack = [...initialSet];\n  while (stack.length) {\n    const key = stack.pop()!;\n\n    if (filters.requestBodies.exclude.has(key) || finalSet.has(key)) {\n      continue;\n    }\n\n    const node = resourceMetadata.requestBodies.get(key);\n\n    if (!node) {\n      continue;\n    }\n\n    if (!filters.deprecated && node.deprecated) {\n      continue;\n    }\n\n    finalSet.add(key);\n\n    if (!node.dependencies.size) {\n      continue;\n    }\n\n    for (const dependency of node.dependencies) {\n      const { namespace } = removeNamespace(dependency);\n      switch (namespace) {\n        case 'body': {\n          if (filters.requestBodies.exclude.has(dependency)) {\n            finalSet.delete(key);\n          } else if (!finalSet.has(dependency)) {\n            stack.push(dependency);\n          }\n          break;\n        }\n        case 'schema': {\n          if (filters.schemas.exclude.has(dependency)) {\n            finalSet.delete(key);\n          } else if (!schemas.has(dependency)) {\n            schemas.add(dependency);\n          }\n          break;\n        }\n      }\n    }\n  }\n  return { requestBodies: finalSet };\n};\n\n/**\n * Collect responses that satisfy the include/exclude filters and schema dependencies.\n */\nconst collectResponses = ({\n  filters,\n  resourceMetadata,\n  schemas,\n}: {\n  filters: Filters;\n  resourceMetadata: ResourceMetadata;\n  schemas: Set<string>;\n}): {\n  responses: Set<string>;\n} => {\n  const finalSet = new Set<string>();\n  const initialSet = filters.responses.include.size\n    ? filters.responses.include\n    : new Set(resourceMetadata.responses.keys());\n  const stack = [...initialSet];\n  while (stack.length) {\n    const key = stack.pop()!;\n\n    if (filters.responses.exclude.has(key) || finalSet.has(key)) {\n      continue;\n    }\n\n    const node = resourceMetadata.responses.get(key);\n\n    if (!node) {\n      continue;\n    }\n\n    if (!filters.deprecated && node.deprecated) {\n      continue;\n    }\n\n    finalSet.add(key);\n\n    if (!node.dependencies.size) {\n      continue;\n    }\n\n    for (const dependency of node.dependencies) {\n      const { namespace } = removeNamespace(dependency);\n      switch (namespace) {\n        case 'body': {\n          if (filters.requestBodies.exclude.has(dependency)) {\n            finalSet.delete(key);\n          } else if (!finalSet.has(dependency)) {\n            stack.push(dependency);\n          }\n          break;\n        }\n        case 'schema': {\n          if (filters.schemas.exclude.has(dependency)) {\n            finalSet.delete(key);\n          } else if (!schemas.has(dependency)) {\n            schemas.add(dependency);\n          }\n          break;\n        }\n      }\n    }\n  }\n  return { responses: finalSet };\n};\n\n/**\n * Collect schemas that satisfy the include/exclude filters.\n */\nconst collectSchemas = ({\n  filters,\n  resourceMetadata,\n}: {\n  filters: Filters;\n  resourceMetadata: ResourceMetadata;\n}): {\n  schemas: Set<string>;\n} => {\n  const finalSet = new Set<string>();\n  const initialSet = filters.schemas.include.size\n    ? filters.schemas.include\n    : new Set(resourceMetadata.schemas.keys());\n  const stack = [...initialSet];\n  while (stack.length) {\n    const key = stack.pop()!;\n\n    if (filters.schemas.exclude.has(key) || finalSet.has(key)) {\n      continue;\n    }\n\n    const node = resourceMetadata.schemas.get(key);\n\n    if (!node) {\n      continue;\n    }\n\n    if (!filters.deprecated && node.deprecated) {\n      continue;\n    }\n\n    finalSet.add(key);\n\n    if (!node.dependencies.size) {\n      continue;\n    }\n\n    for (const dependency of node.dependencies) {\n      const { namespace } = removeNamespace(dependency);\n      switch (namespace) {\n        case 'schema': {\n          if (\n            !finalSet.has(dependency) &&\n            !filters.schemas.exclude.has(dependency)\n          ) {\n            stack.push(dependency);\n          }\n          break;\n        }\n      }\n    }\n  }\n  return { schemas: finalSet };\n};\n\n/**\n * Drop parameters that depend on already excluded parameters.\n */\nconst dropExcludedParameters = ({\n  filters,\n  parameters,\n  resourceMetadata,\n}: {\n  filters: Filters;\n  parameters: Set<string>;\n  resourceMetadata: ResourceMetadata;\n}): void => {\n  if (!filters.parameters.exclude.size) {\n    return;\n  }\n\n  for (const key of parameters) {\n    const node = resourceMetadata.parameters.get(key);\n\n    if (!node?.dependencies.size) {\n      continue;\n    }\n\n    for (const excludedKey of filters.parameters.exclude) {\n      if (node.dependencies.has(excludedKey)) {\n        parameters.delete(key);\n        break;\n      }\n    }\n  }\n};\n\n/**\n * Drop request bodies that depend on already excluded request bodies.\n */\nconst dropExcludedRequestBodies = ({\n  filters,\n  requestBodies,\n  resourceMetadata,\n}: {\n  filters: Filters;\n  requestBodies: Set<string>;\n  resourceMetadata: ResourceMetadata;\n}): void => {\n  if (!filters.requestBodies.exclude.size) {\n    return;\n  }\n\n  for (const key of requestBodies) {\n    const node = resourceMetadata.requestBodies.get(key);\n\n    if (!node?.dependencies.size) {\n      continue;\n    }\n\n    for (const excludedKey of filters.requestBodies.exclude) {\n      if (node.dependencies.has(excludedKey)) {\n        requestBodies.delete(key);\n        break;\n      }\n    }\n  }\n};\n\n/**\n * Drop responses that depend on already excluded responses.\n */\nconst dropExcludedResponses = ({\n  filters,\n  resourceMetadata,\n  responses,\n}: {\n  filters: Filters;\n  resourceMetadata: ResourceMetadata;\n  responses: Set<string>;\n}): void => {\n  if (!filters.responses.exclude.size) {\n    return;\n  }\n\n  for (const key of responses) {\n    const node = resourceMetadata.responses.get(key);\n\n    if (!node?.dependencies.size) {\n      continue;\n    }\n\n    for (const excludedKey of filters.responses.exclude) {\n      if (node.dependencies.has(excludedKey)) {\n        responses.delete(key);\n        break;\n      }\n    }\n  }\n};\n\n/**\n * Drop schemas that depend on already excluded schemas.\n */\nconst dropExcludedSchemas = ({\n  filters,\n  resourceMetadata,\n  schemas,\n}: {\n  filters: Filters;\n  resourceMetadata: ResourceMetadata;\n  schemas: Set<string>;\n}): void => {\n  if (!filters.schemas.exclude.size) {\n    return;\n  }\n\n  for (const key of schemas) {\n    const node = resourceMetadata.schemas.get(key);\n\n    if (!node?.dependencies.size) {\n      continue;\n    }\n\n    for (const excludedKey of filters.schemas.exclude) {\n      if (node.dependencies.has(excludedKey)) {\n        schemas.delete(key);\n        break;\n      }\n    }\n  }\n};\n\nconst dropOrphans = ({\n  operationDependencies,\n  parameters,\n  requestBodies,\n  responses,\n  schemas,\n}: {\n  operationDependencies: Set<string>;\n  parameters: Set<string>;\n  requestBodies: Set<string>;\n  responses: Set<string>;\n  schemas: Set<string>;\n}) => {\n  for (const key of schemas) {\n    if (!operationDependencies.has(key)) {\n      schemas.delete(key);\n    }\n  }\n  for (const key of parameters) {\n    if (!operationDependencies.has(key)) {\n      parameters.delete(key);\n    }\n  }\n  for (const key of requestBodies) {\n    if (!operationDependencies.has(key)) {\n      requestBodies.delete(key);\n    }\n  }\n  for (const key of responses) {\n    if (!operationDependencies.has(key)) {\n      responses.delete(key);\n    }\n  }\n};\n\nconst collectOperationDependencies = ({\n  operations,\n  resourceMetadata,\n}: {\n  operations: Set<string>;\n  resourceMetadata: ResourceMetadata;\n}): {\n  operationDependencies: Set<string>;\n} => {\n  const finalSet = new Set<string>();\n  const initialSet = new Set(\n    [...operations].flatMap((key) => [\n      ...(resourceMetadata.operations.get(key)?.dependencies ?? []),\n    ]),\n  );\n  const stack = [...initialSet];\n  while (stack.length) {\n    const key = stack.pop()!;\n\n    if (finalSet.has(key)) {\n      continue;\n    }\n\n    finalSet.add(key);\n\n    const { namespace } = removeNamespace(key);\n    let dependencies: Set<string> | undefined;\n    if (namespace === 'body') {\n      dependencies = resourceMetadata.requestBodies.get(key)?.dependencies;\n    } else if (namespace === 'operation') {\n      dependencies = resourceMetadata.operations.get(key)?.dependencies;\n    } else if (namespace === 'parameter') {\n      dependencies = resourceMetadata.parameters.get(key)?.dependencies;\n    } else if (namespace === 'response') {\n      dependencies = resourceMetadata.responses.get(key)?.dependencies;\n    } else if (namespace === 'schema') {\n      dependencies = resourceMetadata.schemas.get(key)?.dependencies;\n    }\n\n    if (!dependencies?.size) {\n      continue;\n    }\n\n    for (const dependency of dependencies) {\n      if (!finalSet.has(dependency)) {\n        stack.push(dependency);\n      }\n    }\n  }\n  return { operationDependencies: finalSet };\n};\n\nexport const createFilteredDependencies = ({\n  filters,\n  resourceMetadata,\n}: {\n  filters: Filters;\n  resourceMetadata: ResourceMetadata;\n}): {\n  operations: Set<string>;\n  parameters: Set<string>;\n  requestBodies: Set<string>;\n  responses: Set<string>;\n  schemas: Set<string>;\n} => {\n  const { schemas } = collectSchemas({ filters, resourceMetadata });\n  const { parameters } = collectParameters({\n    filters,\n    resourceMetadata,\n    schemas,\n  });\n  const { requestBodies } = collectRequestBodies({\n    filters,\n    resourceMetadata,\n    schemas,\n  });\n  const { responses } = collectResponses({\n    filters,\n    resourceMetadata,\n    schemas,\n  });\n\n  dropExcludedSchemas({ filters, resourceMetadata, schemas });\n  dropExcludedParameters({ filters, parameters, resourceMetadata });\n  dropExcludedRequestBodies({ filters, requestBodies, resourceMetadata });\n  dropExcludedResponses({ filters, resourceMetadata, responses });\n\n  // collect operations after dropping components\n  const { operations } = collectOperations({\n    filters,\n    parameters,\n    requestBodies,\n    resourceMetadata,\n    responses,\n    schemas,\n  });\n\n  if (!filters.orphans && operations.size) {\n    const { operationDependencies } = collectOperationDependencies({\n      operations,\n      resourceMetadata,\n    });\n    dropOrphans({\n      operationDependencies,\n      parameters,\n      requestBodies,\n      responses,\n      schemas,\n    });\n  }\n\n  return {\n    operations,\n    parameters,\n    requestBodies,\n    responses,\n    schemas,\n  };\n};\n","import { createOperationKey } from '../../../ir/operation';\nimport { jsonPointerToPath } from '../../../utils/ref';\nimport { addNamespace, stringToNamespace } from '../utils/filter';\nimport type { Graph } from '../utils/graph';\nimport { httpMethods } from '../utils/operation';\n\nexport type ResourceMetadata = {\n  operations: Map<\n    string,\n    {\n      dependencies: Set<string>;\n      deprecated: boolean;\n      tags: Set<string>;\n    }\n  >;\n  parameters: Map<\n    string,\n    {\n      dependencies: Set<string>;\n      deprecated: boolean;\n    }\n  >;\n  requestBodies: Map<\n    string,\n    {\n      dependencies: Set<string>;\n      deprecated: boolean;\n    }\n  >;\n  responses: Map<\n    string,\n    {\n      dependencies: Set<string>;\n      deprecated: boolean;\n    }\n  >;\n  schemas: Map<\n    string,\n    {\n      dependencies: Set<string>;\n      deprecated: boolean;\n    }\n  >;\n};\n\n/**\n * Builds a resource metadata map from a Graph, matching the old Graph interface\n * for compatibility with filtering code.\n */\nexport const buildResourceMetadata = (\n  graph: Graph,\n): {\n  resourceMetadata: ResourceMetadata;\n} => {\n  const resourceMetadata: ResourceMetadata = {\n    operations: new Map(),\n    parameters: new Map(),\n    requestBodies: new Map(),\n    responses: new Map(),\n    schemas: new Map(),\n  };\n\n  const getDependencies = (pointer: string): Set<string> => {\n    const dependencies = new Set<string>();\n    const nodeDeps = graph.allDependencies.get(pointer);\n    if (nodeDeps?.size) {\n      for (const dep of nodeDeps) {\n        const path = jsonPointerToPath(dep);\n        const type = path[path.length - 2];\n        const name = path[path.length - 1];\n        if (type && name) {\n          const namespace = stringToNamespace(type);\n          if (namespace === 'unknown') {\n            console.warn(`unsupported type: ${type}`);\n          }\n          dependencies.add(addNamespace(namespace, name));\n        }\n      }\n    }\n    return dependencies;\n  };\n\n  // Process each node to find top-level resources\n  for (const [pointer, nodeInfo] of graph.nodes) {\n    // const node = nodeInfo.node as Record<string, unknown>;\n    const path = jsonPointerToPath(pointer);\n\n    // OpenAPI 3.x\n    if (path[0] === 'components') {\n      if (path.length === 3) {\n        if (path[1] === 'schemas') {\n          // Schema: #/components/schemas/{name}\n          const name = path[path.length - 1]!;\n          resourceMetadata.schemas.set(addNamespace('schema', name), {\n            dependencies: getDependencies(pointer),\n            deprecated: nodeInfo.deprecated ?? false,\n          });\n        } else if (path[1] === 'parameters') {\n          // Parameter: #/components/parameters/{name}\n          const name = path[path.length - 1]!;\n          resourceMetadata.parameters.set(addNamespace('parameter', name), {\n            dependencies: getDependencies(pointer),\n            deprecated: nodeInfo.deprecated ?? false,\n          });\n        } else if (path[1] === 'requestBodies') {\n          // RequestBody: #/components/requestBodies/{name}\n          const name = path[path.length - 1]!;\n          resourceMetadata.requestBodies.set(addNamespace('body', name), {\n            dependencies: getDependencies(pointer),\n            deprecated: nodeInfo.deprecated ?? false,\n          });\n        } else if (path[1] === 'responses') {\n          // Response: #/components/responses/{name}\n          const name = path[path.length - 1]!;\n          resourceMetadata.responses.set(addNamespace('response', name), {\n            dependencies: getDependencies(pointer),\n            deprecated: nodeInfo.deprecated ?? false,\n          });\n        }\n      }\n      continue;\n    }\n\n    if (path[0] === 'paths') {\n      if (\n        path.length === 3 &&\n        httpMethods.includes(path[2] as (typeof httpMethods)[number])\n      ) {\n        // Operation: #/paths/{path}/{method}\n        const method = path[path.length - 1]!;\n        const operationPath = path.slice(1, -1).join('/');\n        const operationKey = createOperationKey({\n          method,\n          path: operationPath,\n        });\n        resourceMetadata.operations.set(\n          addNamespace('operation', operationKey),\n          {\n            dependencies: getDependencies(pointer),\n            deprecated: nodeInfo.deprecated ?? false,\n            tags: nodeInfo.tags ?? new Set(),\n          },\n        );\n      }\n      continue;\n    }\n\n    // OpenAPI 2.0\n    if (path[0] === 'definitions') {\n      if (path.length === 2) {\n        // Schema: #/definitions/{name}\n        const name = path[path.length - 1]!;\n        resourceMetadata.schemas.set(addNamespace('schema', name), {\n          dependencies: getDependencies(pointer),\n          deprecated: nodeInfo.deprecated ?? false,\n        });\n      }\n      continue;\n    }\n  }\n\n  return { resourceMetadata };\n};\n","import type { StringCase } from '../../../types/case';\nimport { stringCase } from '../../../utils/stringCase';\n\nexport const buildName = ({\n  config,\n  name,\n}: {\n  config: {\n    case: StringCase;\n    name: string | ((name: string) => string);\n  };\n  name: string;\n}): string => {\n  if (typeof config.name === 'function') {\n    name = config.name(name);\n  } else {\n    name = config.name.replace('{{name}}', name);\n  }\n\n  return stringCase({ case: config.case, value: name });\n};\n","export const childSchemaRelationships = [\n  ['additionalProperties', 'single'],\n  ['allOf', 'array'],\n  ['anyOf', 'array'],\n  ['contains', 'single'],\n  ['dependentSchemas', 'objectMap'],\n  ['else', 'single'],\n  ['if', 'single'],\n  ['items', 'singleOrArray'],\n  ['oneOf', 'array'],\n  ['patternProperties', 'objectMap'],\n  ['properties', 'objectMap'],\n  ['propertyNames', 'single'],\n  ['then', 'single'],\n] as const;\n","export const getSchemasObject = (\n  spec: unknown,\n): Record<string, unknown> | undefined => {\n  if (hasComponentsSchemasObject(spec)) {\n    return (spec as any).components.schemas;\n  }\n  if (hasDefinitionsObject(spec)) {\n    return (spec as any).definitions;\n  }\n  return;\n};\n\n/**\n * Checks if the given spec has a valid OpenAPI 3.x components.schemas object.\n * Returns true if present, false otherwise.\n */\nexport const hasComponentsSchemasObject = (spec: unknown): boolean =>\n  typeof spec === 'object' &&\n  spec !== null &&\n  'components' in spec &&\n  typeof (spec as any).components === 'object' &&\n  (spec as any).components !== null &&\n  'schemas' in (spec as any).components &&\n  typeof (spec as any).components.schemas === 'object' &&\n  (spec as any).components.schemas !== null;\n\n/**\n * Checks if the given spec has a valid OpenAPI 2.0 definitions object.\n * Returns true if present, false otherwise.\n */\nexport const hasDefinitionsObject = (spec: unknown): boolean =>\n  typeof spec === 'object' &&\n  spec !== null &&\n  'definitions' in spec &&\n  typeof (spec as any).definitions === 'object' &&\n  (spec as any).definitions !== null;\n","type Obj =\n  | Record<string, unknown>\n  | Set<string>\n  | ReadonlyArray<string | undefined>;\n\nconst hasName = (obj: Obj, value: string): boolean => {\n  if (obj instanceof Set) {\n    return obj.has(value);\n  }\n  if (obj instanceof Array) {\n    return obj.includes(value);\n  }\n  return value in obj;\n};\n\nexport const getUniqueComponentName = ({\n  base: _base,\n  components,\n  extraComponents,\n}: {\n  base: string;\n  /**\n   * Input components.\n   */\n  components: Obj;\n  /**\n   * Temporary input components, waiting to be inserted for example.\n   */\n  extraComponents?: Obj;\n}): string => {\n  let index = 2;\n  // Strip trailing number. For example, if base is \"foo2\", the clean base will be \"foo\"\n  const base = _base.replace(/\\d+$/, '');\n  let name = base;\n  while (\n    hasName(components, name) ||\n    (extraComponents && hasName(extraComponents, name))\n  ) {\n    name = `${base}${index}`;\n    index += 1;\n  }\n  return name;\n};\n\nexport const isPathRootSchema = (path: ReadonlyArray<string | number>) =>\n  (path.length === 3 && path[0] === 'components' && path[1] === 'schemas') ||\n  (path.length === 2 && path[0] === 'definitions');\n\nexport const specToSchemasPointerNamespace = (spec: unknown): string => {\n  if (spec && typeof spec === 'object') {\n    if ('swagger' in spec) {\n      // #/definitions/SchemaName\n      return '#/definitions/';\n    }\n\n    if ('openapi' in spec) {\n      // #/components/schemas/SchemaName\n      return '#/components/schemas/';\n    }\n  }\n\n  return '';\n};\n","import type { Config } from '../../../types/config';\nimport { jsonPointerToPath } from '../../../utils/ref';\nimport { buildName } from '../utils/name';\nimport { deepClone } from '../utils/schema';\nimport { childSchemaRelationships } from '../utils/schemaChildRelationships';\nimport { getSchemasObject } from '../utils/transforms';\nimport {\n  getUniqueComponentName,\n  isPathRootSchema,\n  specToSchemasPointerNamespace,\n} from './utils';\n\ntype EnumsConfig = Config['parser']['transforms']['enums'];\n\n/**\n * Generate a unique, structural signature for an enum schema for deduplication.\n * Only considers 'type' and sorted 'enum' values, ignoring other fields.\n *\n * @param schema - The schema object to analyze\n * @returns A string signature if the schema is an enum, otherwise undefined\n */\nconst getEnumSignature = (schema: unknown): string | undefined => {\n  if (\n    !schema ||\n    typeof schema !== 'object' ||\n    !('enum' in schema) ||\n    !(schema.enum instanceof Array)\n  ) {\n    return;\n  }\n  // Use type + sorted enum values for signature\n  const type = ('type' in schema ? schema.type : undefined) || '';\n  const values = [...schema.enum].sort();\n  return JSON.stringify({ type, values });\n};\n\ntype NodeInfo = {\n  key: string | number | null;\n  node: unknown;\n  parent: unknown;\n  path: ReadonlyArray<string | number>;\n};\n\n/**\n * Recursively walk all schemas in the OpenAPI spec, visiting every object/array\n * that could contain an enum. Calls the visitor with node info for each.\n *\n * @param key - The key of the current node\n * @param node - The current node\n * @param parent - The parent node\n * @param path - The path to the current node\n * @param visitor - Function to call for each visited node\n */\nconst walkSchemas = ({\n  key,\n  node,\n  parent,\n  path,\n  visitor,\n}: NodeInfo & {\n  visitor: (nodeInfo: NodeInfo) => void;\n}) => {\n  if (!node || typeof node !== 'object' || node instanceof Array) return;\n\n  const value = node as Record<string, unknown>;\n\n  if (\n    'type' in value ||\n    'enum' in value ||\n    childSchemaRelationships.some(([keyword]) => keyword in value)\n  ) {\n    visitor({ key, node, parent, path });\n  }\n\n  for (const [k, v] of Object.entries(value)) {\n    if (typeof v === 'object' && v !== null) {\n      if (v instanceof Array) {\n        v.forEach((item, index) =>\n          walkSchemas({\n            key: index,\n            node: item,\n            parent: v,\n            path: [...path, k, index],\n            visitor,\n          }),\n        );\n      } else {\n        walkSchemas({\n          key: k,\n          node: v,\n          parent: node,\n          path: [...path, k],\n          visitor,\n        });\n      }\n    }\n  }\n};\n\n/**\n * Inlines all root/top-level enums by replacing $refs to them with the actual enum schema,\n * and then removes the now-unreferenced root enums from the schemas object.\n *\n * @param spec - The OpenAPI spec object to transform\n */\nconst inlineMode = ({ spec }: { spec: unknown }) => {\n  const schemasObj = getSchemasObject(spec);\n  if (!schemasObj) {\n    return;\n  }\n\n  const schemasPointerNamespace = specToSchemasPointerNamespace(spec);\n\n  // Collect all root enums\n  const rootEnums: Record<string, unknown> = {};\n  for (const [name, schema] of Object.entries(schemasObj)) {\n    const signature = getEnumSignature(schema);\n    if (signature) {\n      rootEnums[`${schemasPointerNamespace}${name}`] = schema;\n    }\n  }\n\n  // Walk the spec and replace $refs to root enums with inline enum schemas\n  const replaceEnumRefs = (node: unknown) => {\n    if (node instanceof Array) {\n      node.forEach(replaceEnumRefs);\n    } else if (node && typeof node === 'object') {\n      for (const [k, v] of Object.entries(node)) {\n        if (k === '$ref' && typeof v === 'string' && v in rootEnums) {\n          // Replace $ref with a deep clone of the enum schema\n          Object.assign(node, deepClone(rootEnums[v]));\n          delete (node as Record<string, unknown>)['$ref'];\n        } else {\n          replaceEnumRefs(v);\n        }\n      }\n    }\n  };\n  replaceEnumRefs(spec);\n\n  // Remove unreferenced root enums\n  for (const pointer of Object.keys(rootEnums)) {\n    const path = jsonPointerToPath(pointer);\n    const name = path[path.length - 1]!;\n    if (name) {\n      delete schemasObj[name];\n    }\n  }\n};\n\n/**\n * Promotes all inline enums to reusable root components (if mode is 'root'),\n * deduplicates by signature, and replaces inline enums with $refs.\n *\n * Naming, casing, and deduplication are controlled by the enums transform config.\n * Existing root enums are reused if structurally identical.\n *\n * @param spec - The OpenAPI spec object to transform\n * @param config - The enums transform config\n */\nconst rootMode = ({ config, spec }: { config: EnumsConfig; spec: unknown }) => {\n  const schemasObj = getSchemasObject(spec);\n  if (!schemasObj) {\n    return;\n  }\n\n  // Build a map of existing root enum signatures to their names for deduplication\n  const rootEnumSignatures: Record<string, string> = {};\n  for (const [name, schema] of Object.entries(schemasObj)) {\n    const signature = getEnumSignature(schema);\n    if (signature) {\n      rootEnumSignatures[signature] = name;\n    }\n  }\n\n  // Collect all inline enums (not at root schemas)\n  const inlineEnums: Array<{\n    key: string | number | null;\n    node: unknown;\n    parent: unknown;\n    path: ReadonlyArray<string | number>;\n    signature: string;\n  }> = [];\n\n  walkSchemas({\n    key: null,\n    node: spec,\n    parent: null,\n    path: [],\n    visitor: (nodeInfo) => {\n      if (!isPathRootSchema(nodeInfo.path)) {\n        const signature = getEnumSignature(nodeInfo.node);\n        if (signature) {\n          inlineEnums.push({ ...nodeInfo, signature });\n        }\n      }\n    },\n  });\n\n  // Deduplicate and assign unique names for promoted enums\n  const signatureToName: Record<string, string | undefined> = {};\n  const signatureToSchema: Record<string, unknown> = {};\n\n  for (const { key, node, signature } of inlineEnums) {\n    if (signature in signatureToName) {\n      // Already handled\n      continue;\n    }\n\n    // Use existing root enum if available\n    if (signature in rootEnumSignatures) {\n      signatureToName[signature] = rootEnumSignatures[signature];\n      continue;\n    }\n\n    // Generate a unique name for the new root enum using config\n    const base = buildName({\n      config,\n      name:\n        typeof node === 'object' &&\n        node &&\n        'title' in node &&\n        typeof node.title === 'string'\n          ? node.title\n          : String(key),\n    });\n    const name = getUniqueComponentName({\n      base,\n      components: schemasObj,\n      extraComponents: Object.values(signatureToName),\n    });\n    signatureToName[signature] = name;\n    signatureToSchema[signature] = node;\n  }\n\n  // Add new root enums to the schemas object\n  for (const [signature, name] of Object.entries(signatureToName)) {\n    // Only add if not already present\n    const schema = signatureToSchema[signature];\n    if (name && !(name in schemasObj) && schema && typeof schema === 'object') {\n      schemasObj[name] = schema;\n    }\n  }\n\n  // Replace inline enums with $ref to the new root enum\n  const schemasPointerNamespace = specToSchemasPointerNamespace(spec);\n  for (const { key, parent, signature } of inlineEnums) {\n    const name = signatureToName[signature];\n    if (name && key != null && parent && typeof parent === 'object') {\n      (parent as Record<string, unknown>)[key] = {\n        $ref: `${schemasPointerNamespace}${name}`,\n      };\n    }\n  }\n};\n\n/**\n * Applies the enums transform according to the configured mode ('inline' or 'root').\n *\n * - In 'inline' mode, all root enums are inlined and removed.\n * - In 'root' mode, all inline enums are promoted to root components and deduplicated.\n *\n * @param config - The enums transform config\n * @param spec - The OpenAPI spec object to transform\n */\nexport const enumsTransform = ({\n  config,\n  spec,\n}: {\n  config: EnumsConfig;\n  spec: unknown;\n}) => {\n  if (config.mode === 'inline') {\n    inlineMode({ spec });\n    return;\n  }\n\n  if (config.mode === 'root') {\n    rootMode({ config, spec });\n    return;\n  }\n};\n","import { normalizeJsonPointer, pathToJsonPointer } from '../../../utils/ref';\nimport { childSchemaRelationships } from './schemaChildRelationships';\n\n/**\n * Represents the possible access scopes for OpenAPI nodes.\n * - 'normal': Default scope for regular nodes.\n * - 'read': Node is read-only (e.g., readOnly: true).\n * - 'write': Node is write-only (e.g., writeOnly: true).\n */\nexport type Scope = 'normal' | 'read' | 'write';\n\n/**\n * Information about a node in the OpenAPI graph.\n *\n * @property deprecated - Whether the node is deprecated. Optional.\n * @property key - The property name or array index in the parent, or null for root.\n * @property node - The actual object at this pointer in the spec.\n * @property parentPointer - The JSON Pointer of the parent node, or null for root.\n * @property scopes - The set of access scopes for this node, if any. Optional.\n * @property tags - The set of tags for this node, if any. Optional.\n */\ntype NodeInfo = {\n  /** Whether the node is deprecated. Optional. */\n  deprecated?: boolean;\n  /** The property name or array index in the parent, or null for root. */\n  key: string | number | null;\n  /** The actual object at this pointer in the spec.  */\n  node: unknown;\n  /** The JSON Pointer of the parent node, or null for root. */\n  parentPointer: string | null;\n  /** The set of access scopes for this node, if any. Optional. */\n  scopes?: Set<Scope>;\n  /** The set of tags for this node, if any. Optional. */\n  tags?: Set<string>;\n};\n\n/**\n * The main graph structure for OpenAPI node analysis.\n *\n * @property dependencies - For each node, the set of normalized JSON Pointers it references via $ref.\n * @property nodes - Map from normalized JSON Pointer to NodeInfo for every node in the spec.\n * @property reverseDependencies - For each node, the set of nodes that reference it via $ref.\n */\nexport type Graph = {\n  /**\n   * For each node, the set of all (transitive) normalized JSON Pointers it references via $ref anywhere in its subtree.\n   * This includes both direct and indirect dependencies, making it useful for filtering, codegen, and tree-shaking.\n   */\n  allDependencies: Map<string, Set<string>>;\n  /** For each node, the set of normalized JSON Pointers it references via $ref. */\n  dependencies: Map<string, Set<string>>;\n  /** Map from normalized JSON Pointer to NodeInfo for every node in the spec. */\n  nodes: Map<string, NodeInfo>;\n  /** For each node, the set of nodes that reference it via $ref. */\n  reverseDependencies: Map<string, Set<string>>;\n};\n\n/**\n * Ensures every relevant child node (e.g., properties, items) in the graph has a `scopes` property.\n * If a node does not have its own scopes, it inherits from its parent if available.\n *\n * @param nodes - Map of JSON Pointer to NodeInfo.\n */\nexport const annotateChildScopes = (nodes: Graph['nodes']): void => {\n  for (const [, nodeInfo] of nodes) {\n    if (nodeInfo.scopes) continue;\n\n    if (nodeInfo.parentPointer) {\n      const parentInfo = nodes.get(nodeInfo.parentPointer);\n      if (parentInfo?.scopes) {\n        nodeInfo.scopes = new Set(parentInfo.scopes);\n      }\n    }\n  }\n};\n\n/**\n * Recursively collects all $ref dependencies in the subtree rooted at `pointer`.\n */\nconst collectAllDependenciesForPointer = ({\n  graph,\n  pointer,\n  visited,\n}: {\n  graph: Graph;\n  pointer: string;\n  visited: Set<string>;\n}): Set<string> => {\n  if (visited.has(pointer)) {\n    return new Set();\n  }\n\n  visited.add(pointer);\n\n  const nodeInfo = graph.nodes.get(pointer);\n  if (!nodeInfo) {\n    return new Set();\n  }\n\n  const allDependencies = new Set<string>();\n\n  // Add direct $ref dependencies for this node\n  // (from the dependencies map, or by checking nodeInfo.node directly)\n  // We'll use the dependencies map for consistency:\n  const dependencies = graph.dependencies.get(pointer);\n  if (dependencies) {\n    for (const depPointer of dependencies) {\n      allDependencies.add(depPointer);\n      // Recursively collect dependencies of the referenced node\n      const transitiveDependencies = collectAllDependenciesForPointer({\n        graph,\n        pointer: depPointer,\n        visited,\n      });\n      for (const dep of transitiveDependencies) {\n        allDependencies.add(dep);\n      }\n    }\n  }\n\n  // Recursively collect dependencies of all children\n  for (const [childPointer, childInfo] of graph.nodes) {\n    if (childInfo.parentPointer === pointer) {\n      const transitiveDependencies = collectAllDependenciesForPointer({\n        graph,\n        pointer: childPointer,\n        visited,\n      });\n      for (const dep of transitiveDependencies) {\n        allDependencies.add(dep);\n      }\n    }\n  }\n\n  return allDependencies;\n};\n\n/**\n * Propagates scopes through the graph using a worklist algorithm.\n * Each node's scopes will be updated to include any scopes inherited via $ref dependencies, combinator/child relationships, and parent relationships.\n * Handles cycles and deep chains efficiently.\n *\n * Whenever a node's scopes change, all dependents are notified:\n *   - Its parent (if any)\n *   - All nodes that reference it via $ref (reverse dependencies)\n *   - Combinator parents (allOf/anyOf/oneOf) if applicable\n *\n * @param graph - The Graph structure containing nodes, dependencies, and reverseDependencies.\n */\nexport const propagateScopes = (graph: Graph): void => {\n  const worklist: Set<string> = new Set(\n    Array.from(graph.nodes.entries())\n      .filter(([, nodeInfo]) => nodeInfo.scopes && nodeInfo.scopes.size > 0)\n      .map(([pointer]) => pointer),\n  );\n\n  /**\n   * Notifies all dependents of a node that its scopes may have changed.\n   * Dependents include:\n   *   - The parent node (if any)\n   *   - All nodes that reference this node via $ref (reverse dependencies)\n   *   - Combinator parents (allOf/anyOf/oneOf) if this node is a combinator child\n   *\n   * @param pointer - The JSON pointer of the node whose dependents to notify\n   * @param nodeInfo - The NodeInfo of the node\n   * @param childPointer - (Optional) The pointer of the child, used to detect combinator parents\n   */\n  const notifyAllDependents = (\n    pointer: string,\n    nodeInfo: NodeInfo,\n    childPointer?: string,\n  ) => {\n    if (nodeInfo.parentPointer) {\n      worklist.add(nodeInfo.parentPointer);\n    }\n    const reverseDependencies = graph.reverseDependencies.get(pointer);\n    if (reverseDependencies) {\n      for (const dependentPointer of reverseDependencies) {\n        worklist.add(dependentPointer);\n      }\n    }\n    if (childPointer) {\n      // If this is a combinator child, notify the combinator parent\n      const combinatorChildMatch = childPointer.match(\n        /(.*)\\/(allOf|anyOf|oneOf)\\/\\d+$/,\n      );\n      if (combinatorChildMatch) {\n        const combinatorParentPointer = combinatorChildMatch[1];\n        if (combinatorParentPointer) {\n          worklist.add(combinatorParentPointer);\n        }\n      }\n    }\n  };\n\n  /**\n   * Propagates scopes from a child node to its parent node.\n   * If the parent's scopes change, notifies all dependents.\n   *\n   * @param pointer - The parent node's pointer\n   * @param nodeInfo - The parent node's NodeInfo\n   * @param childPointer - The child node's pointer\n   */\n  const propagateChildScopes = (\n    pointer: string,\n    nodeInfo: NodeInfo,\n    childPointer: string,\n  ): void => {\n    if (!nodeInfo?.scopes) return;\n    const childInfo = graph.nodes.get(childPointer);\n    if (!childInfo?.scopes) return;\n    const changed = propagateScopesToNode(childInfo, nodeInfo);\n    if (changed) {\n      notifyAllDependents(pointer, nodeInfo, childPointer);\n    }\n  };\n\n  while (worklist.size > 0) {\n    const pointer = worklist.values().next().value!;\n    worklist.delete(pointer);\n\n    const nodeInfo = graph.nodes.get(pointer);\n    if (!nodeInfo) continue;\n\n    if (!nodeInfo.scopes) {\n      nodeInfo.scopes = new Set();\n    }\n\n    const node = nodeInfo.node as Record<string, unknown>;\n\n    // Propagate scopes from all child schema relationships (combinators, properties, etc.)\n    for (const [keyword, type] of childSchemaRelationships) {\n      if (!node || typeof node !== 'object' || !(keyword in node)) continue;\n      const value = node[keyword];\n      if (type === 'array' && value instanceof Array) {\n        for (let index = 0; index < value.length; index++) {\n          const childPointer = `${pointer}/${keyword}/${index}`;\n          propagateChildScopes(pointer, nodeInfo, childPointer);\n        }\n      } else if (\n        type === 'objectMap' &&\n        typeof value === 'object' &&\n        value !== null &&\n        !(value instanceof Array)\n      ) {\n        for (const key of Object.keys(value)) {\n          const childPointer = `${pointer}/${keyword}/${key}`;\n          propagateChildScopes(pointer, nodeInfo, childPointer);\n        }\n      } else if (\n        type === 'single' &&\n        typeof value === 'object' &&\n        value !== null\n      ) {\n        const childPointer = `${pointer}/${keyword}`;\n        propagateChildScopes(pointer, nodeInfo, childPointer);\n      } else if (type === 'singleOrArray') {\n        if (value instanceof Array) {\n          for (let index = 0; index < value.length; index++) {\n            const childPointer = `${pointer}/${keyword}/${index}`;\n            propagateChildScopes(pointer, nodeInfo, childPointer);\n          }\n        } else if (typeof value === 'object' && value !== null) {\n          const childPointer = `${pointer}/${keyword}`;\n          propagateChildScopes(pointer, nodeInfo, childPointer);\n        }\n      }\n    }\n\n    // Propagate scopes from $ref dependencies\n    const dependencies = graph.dependencies.get(pointer);\n    if (dependencies) {\n      for (const depPointer of dependencies) {\n        const depNode = graph.nodes.get(depPointer);\n        if (depNode?.scopes) {\n          const changed = propagateScopesToNode(depNode, nodeInfo);\n          if (changed) {\n            notifyAllDependents(pointer, nodeInfo);\n          }\n        }\n      }\n    }\n\n    // Propagate scopes up the parent chain\n    if (nodeInfo.parentPointer) {\n      const parentInfo = graph.nodes.get(nodeInfo.parentPointer);\n      if (parentInfo) {\n        const changed = propagateScopesToNode(nodeInfo, parentInfo);\n        if (changed) {\n          notifyAllDependents(nodeInfo.parentPointer, parentInfo);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Propagates scopes from one node to another.\n * Adds any scopes from fromNodeInfo to toNodeInfo that are not already present.\n * Returns true if any scopes were added, false otherwise.\n *\n * @param fromNodeInfo - The node to propagate scopes from\n * @param toNodeInfo - The node to propagate scopes to\n * @returns boolean - Whether any scopes were added\n */\nconst propagateScopesToNode = (\n  fromNodeInfo: NodeInfo,\n  toNodeInfo: NodeInfo,\n): boolean => {\n  if (!fromNodeInfo.scopes) {\n    return false;\n  }\n\n  if (!toNodeInfo.scopes) {\n    toNodeInfo.scopes = new Set();\n  }\n\n  let changed = false;\n\n  for (const scope of fromNodeInfo.scopes) {\n    if (!toNodeInfo.scopes.has(scope)) {\n      toNodeInfo.scopes.add(scope);\n      changed = true;\n    }\n  }\n\n  return changed;\n};\n\n/**\n * Seeds each node in the graph with its local access scope(s) based on its own properties.\n * - 'read' if readOnly: true\n * - 'write' if writeOnly: true\n * - 'normal' if node is an object property\n *\n * Only non-array objects are considered for scope seeding.\n *\n * @param nodes - Map of JSON Pointer to NodeInfo.\n */\nexport const seedLocalScopes = (nodes: Graph['nodes']): void => {\n  for (const [pointer, nodeInfo] of nodes) {\n    const { node } = nodeInfo;\n\n    if (typeof node !== 'object' || node === null || node instanceof Array) {\n      continue;\n    }\n\n    if ('readOnly' in node && node.readOnly === true) {\n      nodeInfo.scopes = new Set(['read']);\n    } else if ('writeOnly' in node && node.writeOnly === true) {\n      nodeInfo.scopes = new Set(['write']);\n    } else if (pointer.match(/\\/properties\\/[^/]+$/)) {\n      nodeInfo.scopes = new Set(['normal']);\n    }\n  }\n};\n\n/**\n * Builds a graph of all nodes in an OpenAPI spec, indexed by normalized JSON Pointer,\n * and tracks all $ref dependencies and reverse dependencies between nodes.\n *\n * - All keys in the returned maps are normalized JSON Pointers (RFC 6901, always starting with '#').\n * - The `nodes` map allows fast lookup of any node and its parent/key context.\n * - The `dependencies` map records, for each node, the set of normalized pointers it references via $ref.\n * - The `reverseDependencies` map records, for each node, the set of nodes that reference it via $ref.\n * - After construction, all nodes will have their local and propagated scopes annotated.\n *\n * @param root The root object (e.g., the OpenAPI spec)\n * @returns An object with:\n *   - nodes: Map from normalized JSON Pointer string to NodeInfo\n *   - dependencies: Map from normalized JSON Pointer string to Set of referenced normalized JSON Pointers\n *   - reverseDependencies: Map from normalized JSON Pointer string to Set of referencing normalized JSON Pointers\n */\nexport const buildGraph = (\n  root: unknown,\n): {\n  graph: Graph;\n} => {\n  const graph: Graph = {\n    allDependencies: new Map(),\n    dependencies: new Map(),\n    nodes: new Map(),\n    reverseDependencies: new Map(),\n  };\n\n  const walk = ({\n    key,\n    node,\n    parentPointer,\n    path,\n  }: NodeInfo & {\n    path: ReadonlyArray<string | number>;\n  }) => {\n    if (typeof node !== 'object' || node === null) {\n      return;\n    }\n\n    const pointer = pathToJsonPointer(path);\n\n    let deprecated: boolean | undefined;\n    let tags: Set<string> | undefined;\n\n    if (typeof node === 'object' && node !== null) {\n      // Check for deprecated property\n      if ('deprecated' in node && typeof node.deprecated === 'boolean') {\n        deprecated = Boolean(node.deprecated);\n      }\n      // If this node has a $ref, record the dependency\n      if ('$ref' in node && typeof node.$ref === 'string') {\n        const refPointer = normalizeJsonPointer(node.$ref);\n        if (!graph.dependencies.has(pointer)) {\n          graph.dependencies.set(pointer, new Set());\n        }\n        graph.dependencies.get(pointer)!.add(refPointer);\n      }\n      // Check for tags property (should be an array of strings)\n      if ('tags' in node && node.tags instanceof Array) {\n        tags = new Set(node.tags.filter((tag) => typeof tag === 'string'));\n      }\n    }\n\n    graph.nodes.set(pointer, { deprecated, key, node, parentPointer, tags });\n\n    if (node instanceof Array) {\n      node.forEach((item, index) =>\n        walk({\n          key: index,\n          node: item,\n          parentPointer: pointer,\n          path: [...path, index],\n        }),\n      );\n    } else {\n      for (const [childKey, value] of Object.entries(node)) {\n        walk({\n          key: childKey,\n          node: value,\n          parentPointer: pointer,\n          path: [...path, childKey],\n        });\n      }\n    }\n  };\n\n  walk({\n    key: null,\n    node: root,\n    parentPointer: null,\n    path: [],\n  });\n\n  for (const [pointerFrom, pointers] of graph.dependencies) {\n    for (const pointerTo of pointers) {\n      if (!graph.reverseDependencies.has(pointerTo)) {\n        graph.reverseDependencies.set(pointerTo, new Set());\n      }\n      graph.reverseDependencies.get(pointerTo)!.add(pointerFrom);\n    }\n  }\n\n  seedLocalScopes(graph.nodes);\n  propagateScopes(graph);\n  annotateChildScopes(graph.nodes);\n\n  for (const pointer of graph.nodes.keys()) {\n    const allDependencies = collectAllDependenciesForPointer({\n      graph,\n      pointer,\n      visited: new Set(),\n    });\n    graph.allDependencies.set(pointer, allDependencies);\n  }\n\n  return { graph };\n};\n","import type { Config } from '../../../types/config';\nimport { jsonPointerToPath } from '../../../utils/ref';\nimport { buildGraph, type Graph, type Scope } from '../utils/graph';\nimport { buildName } from '../utils/name';\nimport { deepClone } from '../utils/schema';\nimport { childSchemaRelationships } from '../utils/schemaChildRelationships';\nimport {\n  getSchemasObject,\n  hasComponentsSchemasObject,\n  hasDefinitionsObject,\n} from '../utils/transforms';\nimport {\n  getUniqueComponentName,\n  isPathRootSchema,\n  specToSchemasPointerNamespace,\n} from './utils';\n\ntype OriginalSchemas = Record<string, unknown>;\n\ntype SplitSchemas = {\n  /** Key is the original schema pointer. */\n  mapping: Record<\n    string,\n    {\n      read?: string;\n      write?: string;\n    }\n  >;\n  /** splitPointer -> originalPointer */\n  reverseMapping: Record<string, string>;\n  /** name -> schema object */\n  schemas: Record<string, unknown>;\n};\n\ntype ReadWriteConfig = Config['parser']['transforms']['readWrite'];\n\nconst schemaKeys = new Set([\n  'additionalProperties',\n  'allOf',\n  'anyOf',\n  'items',\n  'not',\n  'oneOf',\n  'patternProperties',\n  'properties',\n  'schema',\n]);\n\nconst getComponentContext = (\n  path: ReadonlyArray<string | number>,\n): Scope | undefined => {\n  // OpenAPI 3.x: #/components/{type}/{name}\n  if (path.length === 3 && path[0] === 'components') {\n    const type = path[1];\n    if (type === 'parameters') return 'write';\n    if (type === 'requestBodies') return 'write';\n    if (type === 'responses') return 'read';\n    if (type === 'headers') return 'read';\n  }\n  // OpenAPI 2.x: #/parameters/{name}, #/responses/{name}\n  if (path.length === 2) {\n    const type = path[0];\n    if (type === 'parameters') return 'write';\n    if (type === 'responses') return 'read';\n  }\n  return;\n};\n\n/**\n * Capture the original schema objects by pointer before splitting.\n * This is used to safely remove only the true originals after splitting,\n * even if names are swapped or overwritten by split variants.\n */\nconst captureOriginalSchemas = (spec: unknown): OriginalSchemas => {\n  const originals: OriginalSchemas = {};\n  if (hasComponentsSchemasObject(spec)) {\n    for (const [name, obj] of Object.entries(\n      (spec as any).components.schemas,\n    )) {\n      originals[`#/components/schemas/${name}`] = obj;\n    }\n  } else if (hasDefinitionsObject(spec)) {\n    for (const [name, obj] of Object.entries((spec as any).definitions)) {\n      originals[`#/definitions/${name}`] = obj;\n    }\n  }\n  return originals;\n};\n\n/**\n * Inserts split schemas into the spec at the correct location (OpenAPI 3.x or 2.0).\n * This function is robust to spec version and will assign all split schemas\n * to either components.schemas (OAS3) or definitions (OAS2).\n *\n * @param spec - The OpenAPI spec object\n * @param split - The split schemas (from splitSchemas)\n */\nconst insertSplitSchemasIntoSpec = (\n  spec: unknown,\n  split: Pick<SplitSchemas, 'schemas'>,\n) => {\n  if (hasComponentsSchemasObject(spec)) {\n    Object.assign((spec as any).components.schemas, split.schemas);\n  } else if (hasDefinitionsObject(spec)) {\n    Object.assign((spec as any).definitions, split.schemas);\n  }\n};\n\n/**\n * Prunes a schema by removing all child schemas (in any structural keyword)\n * that are marked with the given scope (readOnly/writeOnly), or that are $ref to a schema\n * that is exclusively the excluded scope (according to the graph).\n *\n * Uses childSchemaRelationships for parity with graph traversal.\n * Returns true if the schema itself should be removed from its parent.\n *\n * @param graph - The Graph containing all nodes and their scopes\n * @param schema - The schema object to prune\n * @param scope - The scope to exclude ('readOnly' or 'writeOnly')\n * @returns boolean - Whether the schema should be removed from its parent\n */\nconst pruneSchemaByScope = (\n  graph: Graph,\n  schema: unknown,\n  scope: 'readOnly' | 'writeOnly',\n): boolean => {\n  if (schema && typeof schema === 'object') {\n    // Remove $ref if the referenced schema is exclusively the excluded scope\n    if (\n      '$ref' in schema &&\n      typeof (schema as Record<string, unknown>)['$ref'] === 'string'\n    ) {\n      const ref = (schema as Record<string, unknown>)['$ref'] as string;\n      const nodeInfo = graph.nodes.get(ref);\n      if (nodeInfo?.scopes) {\n        // Only remove $ref if the referenced schema is *exclusively* the excluded scope.\n        // This ensures 'normal' or multi-scope schemas are always kept.\n        if (\n          (scope === 'writeOnly' &&\n            nodeInfo.scopes.size === 1 &&\n            nodeInfo.scopes.has('write')) ||\n          (scope === 'readOnly' &&\n            nodeInfo.scopes.size === 1 &&\n            nodeInfo.scopes.has('read'))\n        ) {\n          delete (schema as Record<string, unknown>)['$ref'];\n          // If the schema is now empty, remove it\n          if (\n            !childSchemaRelationships.some(([keyword]) => keyword in schema)\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    // Recursively prune all child schemas according to childSchemaRelationships\n    for (const [keyword, type] of childSchemaRelationships) {\n      if (!(keyword in schema)) {\n        continue;\n      }\n      const value = (schema as Record<string, unknown>)[keyword];\n      if (type === 'array' && value instanceof Array) {\n        for (let index = value.length - 1; index >= 0; index--) {\n          const item = value[index];\n          if (\n            item &&\n            typeof item === 'object' &&\n            (item as Record<string, unknown>)[scope] === true\n          ) {\n            value.splice(index, 1);\n          } else {\n            const shouldRemove = pruneSchemaByScope(graph, item, scope);\n            if (shouldRemove) value.splice(index, 1);\n          }\n        }\n        if (!value.length) {\n          delete (schema as Record<string, unknown>)[keyword];\n        }\n      } else if (\n        type === 'objectMap' &&\n        typeof value === 'object' &&\n        value !== null &&\n        !(value instanceof Array)\n      ) {\n        const objMap = value as Record<string, unknown>;\n        for (const key of Object.keys(objMap)) {\n          const prop = objMap[key];\n          if (\n            prop &&\n            typeof prop === 'object' &&\n            (prop as Record<string, unknown>)[scope] === true\n          ) {\n            delete objMap[key];\n          } else {\n            const shouldRemove = pruneSchemaByScope(graph, prop, scope);\n            if (shouldRemove) {\n              delete objMap[key];\n            }\n          }\n        }\n        if (!Object.keys(objMap).length) {\n          delete (schema as Record<string, unknown>)[keyword];\n        }\n      } else if (\n        type === 'single' &&\n        typeof value === 'object' &&\n        value !== null\n      ) {\n        if ((value as Record<string, unknown>)[scope] === true) {\n          delete (schema as Record<string, unknown>)[keyword];\n        } else {\n          const shouldRemove = pruneSchemaByScope(graph, value, scope);\n          if (shouldRemove) {\n            delete (schema as Record<string, unknown>)[keyword];\n          }\n        }\n      } else if (type === 'singleOrArray') {\n        if (value instanceof Array) {\n          for (let index = value.length - 1; index >= 0; index--) {\n            const item = value[index];\n            if (\n              item &&\n              typeof item === 'object' &&\n              (item as Record<string, unknown>)[scope] === true\n            ) {\n              value.splice(index, 1);\n            } else {\n              const shouldRemove = pruneSchemaByScope(graph, item, scope);\n              if (shouldRemove) value.splice(index, 1);\n            }\n          }\n          if (!value.length) {\n            delete (schema as Record<string, unknown>)[keyword];\n          }\n        } else if (typeof value === 'object' && value !== null) {\n          if ((value as Record<string, unknown>)[scope] === true) {\n            delete (schema as Record<string, unknown>)[keyword];\n          } else {\n            const shouldRemove = pruneSchemaByScope(graph, value, scope);\n            if (shouldRemove) {\n              delete (schema as Record<string, unknown>)[keyword];\n            }\n          }\n        }\n      }\n    }\n    // After all removals, if this is type: object and has no structural fields, remove it\n    if (\n      (schema as Record<string, unknown>).type === 'object' &&\n      !childSchemaRelationships.some(([keyword]) => keyword in schema)\n    ) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Remove only the true original schemas that were split, by object identity.\n * This is robust to swaps, overwrites, and name collisions.\n *\n * @param originalSchemas - Map of original pointers to their schema objects (captured before splitting)\n * @param spec - The OpenAPI spec object\n * @param split - The split mapping (from splitSchemas)\n */\nconst removeOriginalSplitSchemas = ({\n  originalSchemas,\n  spec,\n  split,\n}: {\n  originalSchemas: OriginalSchemas;\n  spec: unknown;\n  split: Pick<SplitSchemas, 'mapping'>;\n}) => {\n  const schemasObj = getSchemasObject(spec);\n\n  for (const originalPointer of Object.keys(split.mapping)) {\n    const path = jsonPointerToPath(originalPointer);\n    const name = path[path.length - 1]!;\n    if (\n      typeof name === 'string' &&\n      schemasObj &&\n      Object.prototype.hasOwnProperty.call(schemasObj, name) &&\n      schemasObj[name] === originalSchemas[originalPointer]\n    ) {\n      delete schemasObj[name];\n    }\n  }\n};\n\n/**\n * Splits schemas with both 'read' and 'write' scopes into read/write variants.\n * Returns the new schemas and a mapping from original pointer to new variant pointers.\n *\n * @param config - The readWrite transform config\n * @param graph - The Graph containing all nodes and their scopes\n * @param spec - The OpenAPI spec object\n * @returns SplitSchemas - The split schemas and pointer mappings\n */\nexport const splitSchemas = ({\n  config,\n  graph,\n  spec,\n}: {\n  config: ReadWriteConfig;\n  graph: Graph;\n  spec: unknown;\n}): SplitSchemas => {\n  const existingNames = new Set<string>();\n  const split: SplitSchemas = {\n    mapping: {},\n    reverseMapping: {},\n    schemas: {},\n  };\n\n  const schemasPointerNamespace = specToSchemasPointerNamespace(spec);\n  const schemasNamespaceSegments =\n    schemasPointerNamespace.split('/').length - 1;\n\n  /**\n   * Extracts the schema name from pointer, but only if it's a top-level schema\n   * pointer. Returns an empty string if it's a nested pointer.\n   * @param pointer\n   * @returns Schema's base name.\n   */\n  const pointerToSchema = (pointer: string): string => {\n    if (pointer.startsWith(schemasPointerNamespace)) {\n      const path = jsonPointerToPath(pointer);\n      if (path.length === schemasNamespaceSegments) {\n        return path[schemasNamespaceSegments - 1] || '';\n      }\n    }\n    return '';\n  };\n\n  // Collect all existing schema names\n  for (const pointer of graph.nodes.keys()) {\n    const name = pointerToSchema(pointer);\n    if (name) existingNames.add(name);\n  }\n\n  for (const [pointer, nodeInfo] of graph.nodes) {\n    const name = pointerToSchema(pointer);\n    // Only split top-level schemas, with both read-only and write-only scopes.\n    if (\n      !name ||\n      !(nodeInfo.scopes?.has('read') && nodeInfo.scopes?.has('write'))\n    ) {\n      continue;\n    }\n\n    // read variant\n    const readSchema = deepClone<unknown>(nodeInfo.node);\n    pruneSchemaByScope(graph, readSchema, 'writeOnly');\n    const readBase = buildName({\n      config: config.responses,\n      name,\n    });\n    const readName =\n      readBase === name\n        ? readBase\n        : getUniqueComponentName({\n            base: readBase,\n            components: existingNames,\n          });\n    existingNames.add(readName);\n    split.schemas[readName] = readSchema;\n    const readPointer = `${schemasPointerNamespace}${readName}`;\n\n    // write variant\n    const writeSchema = deepClone<unknown>(nodeInfo.node);\n    pruneSchemaByScope(graph, writeSchema, 'readOnly');\n    const writeBase = buildName({\n      config: config.requests,\n      name,\n    });\n    const writeName =\n      writeBase === name && writeBase !== readName\n        ? writeBase\n        : getUniqueComponentName({\n            base: writeBase,\n            components: existingNames,\n          });\n    existingNames.add(writeName);\n    split.schemas[writeName] = writeSchema;\n    const writePointer = `${schemasPointerNamespace}${writeName}`;\n\n    split.mapping[pointer] = {\n      read: readPointer,\n      write: writePointer,\n    };\n    split.reverseMapping[readPointer] = pointer;\n    split.reverseMapping[writePointer] = pointer;\n  }\n\n  return split;\n};\n\ntype WalkArgs = {\n  context: Scope | null;\n  currentPointer: string | null;\n  inSchema: boolean;\n  node: unknown;\n  path: ReadonlyArray<string | number>;\n};\n\n/**\n * Recursively updates $ref fields in the spec to point to the correct read/write variant\n * according to the current context (read/write), using the split mapping.\n *\n * @param spec - The OpenAPI spec object\n * @param split - The split mapping (from splitSchemas)\n */\nexport const updateRefsInSpec = (\n  spec: unknown,\n  split: Omit<SplitSchemas, 'schemas'>,\n): void => {\n  const schemasPointerNamespace = specToSchemasPointerNamespace(spec);\n\n  const walk = ({\n    context,\n    currentPointer,\n    inSchema,\n    node,\n    path,\n  }: WalkArgs): void => {\n    if (node instanceof Array) {\n      node.forEach((item, index) =>\n        walk({\n          context,\n          currentPointer,\n          inSchema,\n          node: item,\n          path: [...path, index],\n        }),\n      );\n    } else if (node && typeof node === 'object') {\n      // Detect if we're entering a split schema variant\n      let nextPointer = currentPointer;\n      let nextContext = context;\n      if (isPathRootSchema(path)) {\n        nextPointer = `${schemasPointerNamespace}${path[2]}`;\n        const originalPointer = split.reverseMapping[nextPointer];\n        if (originalPointer) {\n          const mapping = split.mapping[originalPointer];\n          if (mapping?.read === nextPointer) {\n            nextContext = 'read';\n          } else if (mapping?.write === nextPointer) {\n            nextContext = 'write';\n          }\n        }\n      }\n\n      const compContext = getComponentContext(path);\n      if (compContext !== undefined) {\n        // For each component, walk with the correct context\n        for (const key in node) {\n          if (!Object.prototype.hasOwnProperty.call(node, key)) {\n            continue;\n          }\n          walk({\n            context: compContext,\n            currentPointer: nextPointer,\n            inSchema: false,\n            node: (node as Record<string, unknown>)[key],\n            path: [...path, key],\n          });\n        }\n        return;\n      }\n\n      for (const key in node) {\n        if (!Object.prototype.hasOwnProperty.call(node, key)) {\n          continue;\n        }\n        const value = (node as Record<string, unknown>)[key];\n\n        // Only treat context switches at the OpenAPI structure level (not inside schemas)\n        if (!inSchema) {\n          if (key === 'requestBody') {\n            walk({\n              context: 'write',\n              currentPointer: nextPointer,\n              inSchema: false,\n              node: value,\n              path: [...path, key],\n            });\n            continue;\n          }\n          if (key === 'responses') {\n            walk({\n              context: 'read',\n              currentPointer: nextPointer,\n              inSchema: false,\n              node: value,\n              path: [...path, key],\n            });\n            continue;\n          }\n          if (key === 'parameters' && Array.isArray(value)) {\n            value.forEach((param, index) => {\n              if (param && typeof param === 'object' && 'schema' in param) {\n                walk({\n                  context: 'write',\n                  currentPointer: nextPointer,\n                  inSchema: true,\n                  node: param.schema,\n                  path: [...path, key, index, 'schema'],\n                });\n              }\n              // Also handle content (OpenAPI 3.x)\n              if (param && typeof param === 'object' && 'content' in param) {\n                walk({\n                  context: 'write',\n                  currentPointer: nextPointer,\n                  inSchema: false,\n                  node: param.content,\n                  path: [...path, key, index, 'content'],\n                });\n              }\n            });\n            continue;\n          }\n          // OpenAPI 3.x: headers in responses\n          if (\n            key === 'headers' &&\n            typeof value === 'object' &&\n            value !== null\n          ) {\n            for (const headerKey in value) {\n              if (!Object.prototype.hasOwnProperty.call(value, headerKey)) {\n                continue;\n              }\n              walk({\n                context: 'read',\n                currentPointer: nextPointer,\n                inSchema: false,\n                node: (value as Record<string, unknown>)[headerKey],\n                path: [...path, key, headerKey],\n              });\n            }\n            continue;\n          }\n        }\n\n        // Entering a schema context\n        if (schemaKeys.has(key)) {\n          walk({\n            context: nextContext,\n            currentPointer: nextPointer,\n            inSchema: true,\n            node: value,\n            path: [...path, key],\n          });\n        } else if (key === '$ref' && typeof value === 'string') {\n          const map = split.mapping[value];\n          if (nextContext === 'read' && map?.read) {\n            (node as Record<string, unknown>)[key] = map.read;\n          } else if (nextContext === 'write' && map?.write) {\n            (node as Record<string, unknown>)[key] = map.write;\n          }\n        } else {\n          walk({\n            context: nextContext,\n            currentPointer: nextPointer,\n            inSchema,\n            node: value,\n            path: [...path, key],\n          });\n        }\n      }\n    }\n  };\n  walk({\n    context: null,\n    currentPointer: null,\n    inSchema: false,\n    node: spec,\n    path: [],\n  });\n};\n\n/**\n * Orchestrates the full read/write transform:\n * - Captures original schemas\n * - Splits schemas into read/write variants\n * - Inserts split schemas into the spec\n * - Updates $refs throughout the spec\n * - Removes original schemas that were split\n *\n * @param config - The readWrite transform config\n * @param spec - The OpenAPI spec object\n */\nexport const readWriteTransform = ({\n  config,\n  spec,\n}: {\n  config: ReadWriteConfig;\n  spec: unknown;\n}) => {\n  const { graph } = buildGraph(spec);\n  const originalSchemas = captureOriginalSchemas(spec);\n  const split = splitSchemas({ config, graph, spec });\n  insertSplitSchemasIntoSpec(spec, split);\n  updateRefsInSpec(spec, split);\n  removeOriginalSplitSchemas({ originalSchemas, spec, split });\n};\n","import type { IR } from '../../../ir/types';\nimport { enumsTransform } from './enums';\nimport { readWriteTransform } from './readWrite';\n\nexport const transformOpenApiSpec = ({ context }: { context: IR.Context }) => {\n  if (context.config.parser.transforms.enums.enabled) {\n    enumsTransform({\n      config: context.config.parser.transforms.enums,\n      spec: context.spec,\n    });\n  }\n\n  if (context.config.parser.transforms.readWrite.enabled) {\n    readWriteTransform({\n      config: context.config.parser.transforms.readWrite,\n      spec: context.spec,\n    });\n  }\n};\n","import type { IR } from '../../../ir/types';\n\nexport const mergeParametersObjects = ({\n  source,\n  target,\n}: {\n  source: IR.ParametersObject | undefined;\n  target: IR.ParametersObject | undefined;\n}): IR.ParametersObject | undefined => {\n  const result = { ...target };\n\n  if (source) {\n    if (source.cookie) {\n      if (result.cookie) {\n        result.cookie = {\n          ...result.cookie,\n          ...source.cookie,\n        };\n      } else {\n        result.cookie = source.cookie;\n      }\n    }\n\n    if (source.header) {\n      if (result.header) {\n        result.header = {\n          ...result.header,\n          ...source.header,\n        };\n      } else {\n        result.header = source.header;\n      }\n    }\n\n    if (source.path) {\n      if (result.path) {\n        result.path = {\n          ...result.path,\n          ...source.path,\n        };\n      } else {\n        result.path = source.path;\n      }\n    }\n\n    if (source.query) {\n      if (result.query) {\n        result.query = {\n          ...result.query,\n          ...source.query,\n        };\n      } else {\n        result.query = source.query;\n      }\n    }\n  }\n\n  if (!Object.keys(result).length) {\n    return;\n  }\n\n  return result;\n};\n","import colors from 'ansi-colors';\n\nimport type { IR } from '../../../ir/types';\n\nexport interface ValidatorIssue {\n  /**\n   * Machine-readable issue code\n   *\n   * @example\n   * 'invalid_type'\n   */\n  code: 'duplicate_key' | 'invalid_type' | 'missing_required_field';\n  /**\n   * Optional additional data.\n   *\n   * @example\n   * 'expectedType'\n   */\n  context?: Record<string, any>;\n  /**\n   * Human-readable issue summary.\n   */\n  message: string;\n  /**\n   * JSONPath-like array to issue location.\n   */\n  path: ReadonlyArray<string | number>;\n  /**\n   * Error severity.\n   */\n  severity: 'error' | 'warning';\n}\n\nexport interface ValidatorResult {\n  issues: ReadonlyArray<ValidatorIssue>;\n  valid: boolean;\n}\n\nconst isSimpleKey = (key: string) => /^[A-Za-z_$][A-Za-z0-9_$]*$/.test(key);\n\nconst formatPath = (path: ReadonlyArray<string | number>): string =>\n  path\n    .map((segment, i) => {\n      if (typeof segment === 'number') {\n        return `[${segment}]`;\n      }\n\n      if (i === 0) {\n        // first segment no dot or brackets\n        return segment;\n      }\n\n      return isSimpleKey(segment)\n        ? `.${segment}`\n        : `['${segment.replace(/\"/g, \"\\\\'\")}']`;\n    })\n    .join('');\n\nconst formatValidatorIssue = (issue: ValidatorIssue): string => {\n  const pathStr = formatPath(issue.path);\n  const level =\n    issue.severity === 'error' ? colors.bold.red : colors.bold.yellow;\n\n  const highlightedMessage = issue.message.replace(/`([^`]+)`/g, (_, code) =>\n    colors.yellow(`\\`${code}\\``),\n  );\n\n  return `${level(`[${issue.severity.toUpperCase()}]`)} ${colors.cyan(pathStr)}: ${highlightedMessage}`;\n};\n\nconst shouldPrint = ({\n  context,\n  issue,\n}: {\n  context: IR.Context;\n  issue: ValidatorIssue;\n}) => {\n  if (context.config.logs.level === 'silent') {\n    return false;\n  }\n\n  if (issue.severity === 'error') {\n    return context.config.logs.level !== 'warn';\n  }\n\n  return true;\n};\n\nexport const handleValidatorResult = ({\n  context,\n  result,\n}: {\n  context: IR.Context;\n  result: ValidatorResult;\n}) => {\n  for (const issue of result.issues) {\n    if (shouldPrint({ context, issue })) {\n      console.log(formatValidatorIssue(issue));\n    }\n  }\n\n  if (!result.valid) {\n    process.exit(1);\n  }\n};\n","import { createOperationKey } from '../../../ir/operation';\nimport { addNamespace, removeNamespace } from '../../shared/utils/filter';\nimport { httpMethods } from '../../shared/utils/operation';\nimport type {\n  OpenApiV2_0_X,\n  OperationObject,\n  PathItemObject,\n  PathsObject,\n} from '../types/spec';\n\n/**\n * Replace source spec with filtered version.\n */\nexport const filterSpec = ({\n  operations,\n  preserveOrder,\n  schemas,\n  spec,\n}: {\n  operations: Set<string>;\n  parameters: Set<string>;\n  preserveOrder: boolean;\n  requestBodies: Set<string>;\n  responses: Set<string>;\n  schemas: Set<string>;\n  spec: OpenApiV2_0_X;\n}) => {\n  if (spec.definitions) {\n    const filtered: typeof spec.definitions = {};\n\n    if (preserveOrder) {\n      for (const [name, source] of Object.entries(spec.definitions)) {\n        if (schemas.has(addNamespace('schema', name))) {\n          filtered[name] = source;\n        }\n      }\n    } else {\n      for (const key of schemas) {\n        const { name } = removeNamespace(key);\n        const source = spec.definitions[name];\n        if (source) {\n          filtered[name] = source;\n        }\n      }\n    }\n\n    spec.definitions = filtered;\n  }\n\n  if (spec.paths) {\n    for (const entry of Object.entries(spec.paths)) {\n      const path = entry[0] as keyof PathsObject;\n      const pathItem = entry[1] as PathItemObject;\n\n      for (const method of httpMethods) {\n        // @ts-expect-error\n        const operation = pathItem[method] as OperationObject;\n        if (!operation) {\n          continue;\n        }\n\n        const key = addNamespace(\n          'operation',\n          createOperationKey({ method, path }),\n        );\n        if (!operations.has(key)) {\n          // @ts-expect-error\n          delete pathItem[method];\n        }\n      }\n\n      // remove paths that have no operations left\n      if (!Object.keys(pathItem).length) {\n        delete spec.paths[path];\n      }\n    }\n  }\n};\n","const fileLikeRegExp =\n  /^(application\\/(pdf|rtf|msword|vnd\\.(ms-|openxmlformats-officedocument\\.)|zip|x-(7z|tar|rar|zip|iso)|octet-stream|gzip|x-msdownload|json\\+download|xml|x-yaml|x-7z-compressed|x-tar)|text\\/(yaml|css|javascript)|audio\\/(mpeg|wav)|video\\/(mp4|x-matroska)|image\\/(vnd\\.adobe\\.photoshop|svg\\+xml))(; ?charset=[^;]+)?$/i;\nconst jsonMimeRegExp = /^application\\/(.*\\+)?json(;.*)?$/i;\nconst multipartFormDataMimeRegExp = /^multipart\\/form-data(;.*)?$/i;\nconst textMimeRegExp = /^text\\/[a-z0-9.+-]+(;.*)?$/i;\nconst xWwwFormUrlEncodedMimeRegExp =\n  /^application\\/x-www-form-urlencoded(;.*)?$/i;\nconst octetStreamMimeRegExp = /^application\\/octet-stream(;.*)?$/i;\n\nexport type IRMediaType =\n  | 'form-data'\n  | 'json'\n  | 'text'\n  | 'url-search-params'\n  | 'octet-stream';\n\nexport const isMediaTypeFileLike = ({\n  mediaType,\n}: {\n  mediaType: string;\n}): boolean => {\n  fileLikeRegExp.lastIndex = 0;\n  return fileLikeRegExp.test(mediaType);\n};\n\nexport const mediaTypeToIrMediaType = ({\n  mediaType,\n}: {\n  mediaType: string;\n}): IRMediaType | undefined => {\n  jsonMimeRegExp.lastIndex = 0;\n  if (jsonMimeRegExp.test(mediaType)) {\n    return 'json';\n  }\n\n  multipartFormDataMimeRegExp.lastIndex = 0;\n  if (multipartFormDataMimeRegExp.test(mediaType)) {\n    return 'form-data';\n  }\n\n  textMimeRegExp.lastIndex = 0;\n  if (textMimeRegExp.test(mediaType)) {\n    return 'text';\n  }\n\n  xWwwFormUrlEncodedMimeRegExp.lastIndex = 0;\n  if (xWwwFormUrlEncodedMimeRegExp.test(mediaType)) {\n    return 'url-search-params';\n  }\n\n  octetStreamMimeRegExp.lastIndex = 0;\n  if (octetStreamMimeRegExp.test(mediaType)) {\n    return 'octet-stream';\n  }\n\n  return;\n};\n","import type { IRMediaType } from '../../../ir/mediaType';\nimport {\n  isMediaTypeFileLike,\n  mediaTypeToIrMediaType,\n} from '../../../ir/mediaType';\nimport type {\n  ReferenceObject,\n  ResponseObject,\n  SchemaObject,\n} from '../types/spec';\n\ninterface Content {\n  mediaType: string;\n  schema: SchemaObject | ReferenceObject | undefined;\n  type: IRMediaType | undefined;\n}\n\nexport const contentToSchema = ({\n  content,\n}: {\n  content: Content;\n}): SchemaObject | undefined => {\n  const { mediaType, schema } = content;\n\n  if (schema && '$ref' in schema) {\n    return {\n      allOf: [{ ...schema }],\n    };\n  }\n\n  if (!schema) {\n    if (isMediaTypeFileLike({ mediaType })) {\n      return {\n        format: 'binary',\n        type: 'string',\n      };\n    }\n    return;\n  }\n\n  if (\n    schema.type === 'string' &&\n    !schema.format &&\n    isMediaTypeFileLike({ mediaType })\n  ) {\n    return {\n      ...schema,\n      format: 'binary',\n    };\n  }\n\n  return schema;\n};\n\nexport const mediaTypeObjects = ({\n  mimeTypes,\n  response,\n}: {\n  mimeTypes: ReadonlyArray<string> | undefined;\n  response: Pick<ResponseObject, 'schema'>;\n}): ReadonlyArray<Content> => {\n  const objects: Array<Content> = [];\n\n  for (const mediaType of mimeTypes ?? []) {\n    objects.push({\n      mediaType,\n      schema: response.schema,\n      type: mediaTypeToIrMediaType({ mediaType }),\n    });\n  }\n\n  return objects;\n};\n","import type { Config } from '../types/config';\nimport type { IR } from './types';\n\nexport function getPaginationKeywordsRegExp(\n  pagination: Config['parser']['pagination'],\n): RegExp {\n  const pattern = `^(${pagination.keywords.join('|')})$`;\n  return new RegExp(pattern);\n}\n\nexport interface Pagination {\n  in: string;\n  name: string;\n  schema: IR.SchemaObject;\n}\n","import { refToName } from '../../../utils/ref';\n\nexport const discriminatorValues = (\n  $ref: string,\n  mapping?: Record<string, string>,\n): ReadonlyArray<string> => {\n  const values: Array<string> = [];\n\n  for (const name in mapping) {\n    if (mapping[name] === $ref) {\n      values.push(name);\n    }\n  }\n\n  if (!values.length) {\n    return [refToName($ref)];\n  }\n\n  return values;\n};\n","import type { IR } from '../../../ir/types';\nimport { addItemsToSchema } from '../../../ir/utils';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  SchemaState,\n  SchemaType,\n  SchemaWithRequired,\n} from '../../shared/types/schema';\nimport { discriminatorValues } from '../../shared/utils/discriminator';\nimport { mergeSchemaAccessScopes } from '../../shared/utils/schema';\nimport type { SchemaObject } from '../types/spec';\n\nexport const getSchemaType = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): SchemaType<SchemaObject> | undefined => {\n  if (schema.type) {\n    return schema.type;\n  }\n\n  // infer object based on the presence of properties\n  if (schema.properties) {\n    return 'object';\n  }\n\n  return;\n};\n\nconst parseSchemaJsDoc = ({\n  irSchema,\n  schema,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  if (schema.description) {\n    irSchema.description = schema.description;\n  }\n\n  if (schema.title) {\n    irSchema.title = schema.title;\n  }\n};\n\nconst parseSchemaMeta = ({\n  irSchema,\n  schema,\n  state,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}) => {\n  if (schema.default !== undefined) {\n    irSchema.default = schema.default;\n  }\n\n  if (schema.exclusiveMaximum) {\n    if (schema.maximum !== undefined) {\n      irSchema.exclusiveMaximum = schema.maximum;\n    }\n  } else if (schema.maximum !== undefined) {\n    irSchema.maximum = schema.maximum;\n  }\n\n  if (schema.exclusiveMinimum) {\n    if (schema.minimum !== undefined) {\n      irSchema.exclusiveMinimum = schema.minimum;\n    }\n  } else if (schema.minimum !== undefined) {\n    irSchema.minimum = schema.minimum;\n  }\n\n  if (schema.format) {\n    irSchema.format = schema.format;\n  }\n\n  if (schema.maxItems !== undefined) {\n    irSchema.maxItems = schema.maxItems;\n  }\n\n  if (schema.maxLength !== undefined) {\n    irSchema.maxLength = schema.maxLength;\n  }\n\n  if (schema.minItems !== undefined) {\n    irSchema.minItems = schema.minItems;\n  }\n\n  if (schema.minLength !== undefined) {\n    irSchema.minLength = schema.minLength;\n  }\n\n  if (schema.pattern) {\n    irSchema.pattern = schema.pattern;\n  }\n\n  if (schema.readOnly) {\n    irSchema.accessScope = 'read';\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'read',\n    ]);\n  } else if (state.isProperty) {\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'both',\n    ]);\n  }\n};\n\nconst parseArray = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (schema.maxItems && schema.maxItems === schema.minItems) {\n    irSchema.type = 'tuple';\n  } else {\n    irSchema.type = 'array';\n  }\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n\n  if (schema.items) {\n    const irItemsSchema = schemaToIrSchema({\n      context,\n      schema: schema.items,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irItemsSchema.accessScopes,\n    );\n\n    if (\n      !schemaItems.length &&\n      schema.maxItems &&\n      schema.maxItems === schema.minItems\n    ) {\n      schemaItems = Array(schema.maxItems).fill(irItemsSchema);\n    } else {\n      if ('$ref' in schema.items) {\n        schemaItems.push(irItemsSchema);\n      } else {\n        const ofArray = schema.items.allOf;\n        if (ofArray && ofArray.length > 1 && !schema.items['x-nullable']) {\n          // bring composition up to avoid incorrectly nested arrays\n          irSchema = {\n            ...irSchema,\n            ...irItemsSchema,\n          };\n        } else {\n          schemaItems.push(irItemsSchema);\n        }\n      }\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseBoolean = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'boolean';\n\n  return irSchema;\n};\n\nconst parseNumber = ({\n  irSchema = {},\n  schema,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = schema.type;\n\n  return irSchema;\n};\n\nconst parseObject = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'object';\n\n  const schemaProperties: Record<string, IR.SchemaObject> = {};\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    if (typeof property === 'boolean') {\n      // TODO: parser - handle boolean properties\n    } else {\n      const irPropertySchema = schemaToIrSchema({\n        context,\n        schema: property,\n        state: {\n          ...state,\n          isProperty: true,\n        },\n      });\n      irSchema.accessScopes = mergeSchemaAccessScopes(\n        irSchema.accessScopes,\n        irPropertySchema.accessScopes,\n      );\n      schemaProperties[name] = irPropertySchema;\n    }\n  }\n\n  if (Object.keys(schemaProperties).length) {\n    irSchema.properties = schemaProperties;\n  }\n\n  if (schema.additionalProperties === undefined) {\n    if (!irSchema.properties) {\n      irSchema.additionalProperties = {\n        type: 'unknown',\n      };\n    }\n  } else if (typeof schema.additionalProperties === 'boolean') {\n    irSchema.additionalProperties = {\n      type: schema.additionalProperties ? 'unknown' : 'never',\n    };\n  } else {\n    const irAdditionalPropertiesSchema = schemaToIrSchema({\n      context,\n      schema: schema.additionalProperties,\n      state,\n    });\n    irSchema.additionalProperties = irAdditionalPropertiesSchema;\n  }\n\n  if (schema.required) {\n    irSchema.required = schema.required;\n  }\n\n  return irSchema;\n};\n\nconst parseString = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'string';\n\n  return irSchema;\n};\n\nconst initIrSchema = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  parseSchemaJsDoc({\n    irSchema,\n    schema,\n  });\n\n  return irSchema;\n};\n\nconst parseAllOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'allOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaType = getSchemaType({ schema });\n\n  const compositionSchemas = schema.allOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    const irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    if (schema.required) {\n      if (irCompositionSchema.required) {\n        irCompositionSchema.required = [\n          ...irCompositionSchema.required,\n          ...schema.required,\n        ];\n      } else {\n        irCompositionSchema.required = schema.required;\n      }\n    }\n\n    schemaItems.push(irCompositionSchema);\n\n    if (compositionSchema.$ref) {\n      const ref = context.resolveRef<SchemaObject>(compositionSchema.$ref);\n      // `$ref` should be passed from the root `parseSchema()` call\n      if (ref.discriminator && state.$ref) {\n        const values = discriminatorValues(state.$ref);\n        const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n          (value) => ({\n            const: value,\n            type: 'string',\n          }),\n        );\n        const irDiscriminatorSchema: IR.SchemaObject = {\n          properties: {\n            [ref.discriminator]:\n              valueSchemas.length > 1\n                ? {\n                    items: valueSchemas,\n                    logicalOperator: 'or',\n                  }\n                : valueSchemas[0]!,\n          },\n          type: 'object',\n        };\n        if (ref.required?.includes(ref.discriminator)) {\n          irDiscriminatorSchema.required = [ref.discriminator];\n        }\n        schemaItems.push(irDiscriminatorSchema);\n      }\n\n      if (!state.circularReferenceTracker.has(compositionSchema.$ref)) {\n        const irRefSchema = schemaToIrSchema({\n          context,\n          schema: ref,\n          state: {\n            ...state,\n            $ref: compositionSchema.$ref,\n          },\n        });\n        irSchema.accessScopes = mergeSchemaAccessScopes(\n          irSchema.accessScopes,\n          irRefSchema.accessScopes,\n        );\n      }\n    }\n  }\n\n  if (schemaType === 'object') {\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      for (const requiredProperty of irObjectSchema.required ?? []) {\n        if (!irObjectSchema.properties[requiredProperty]) {\n          for (const compositionSchema of compositionSchemas) {\n            // TODO: parser - this could be probably resolved more accurately\n            const finalCompositionSchema = compositionSchema.$ref\n              ? context.resolveRef<SchemaObject>(compositionSchema.$ref)\n              : compositionSchema;\n\n            if (\n              getSchemaType({ schema: finalCompositionSchema }) === 'object'\n            ) {\n              const irCompositionSchema = parseOneType({\n                context,\n                schema: {\n                  ...finalCompositionSchema,\n                  type: 'object',\n                },\n                state,\n              });\n\n              irSchema.accessScopes = mergeSchemaAccessScopes(\n                irSchema.accessScopes,\n                irCompositionSchema.accessScopes,\n              );\n\n              if (irCompositionSchema.properties?.[requiredProperty]) {\n                irObjectSchema.properties[requiredProperty] =\n                  irCompositionSchema.properties[requiredProperty];\n                break;\n              }\n            }\n          }\n        }\n      }\n      schemaItems.push(irObjectSchema);\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    logicalOperator: 'and',\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schema['x-nullable']) {\n    // nest composition to avoid producing an intersection with null\n    const nestedItems: Array<IR.SchemaObject> = [\n      {\n        type: 'null',\n      },\n    ];\n\n    if (schemaItems.length) {\n      nestedItems.unshift(irSchema);\n    }\n\n    irSchema = {\n      items: nestedItems,\n      logicalOperator: 'or',\n    };\n\n    // TODO: parser - this is a hack to bring back up meta fields\n    // without it, some schemas were missing original deprecated\n    if (nestedItems[0]!.deprecated) {\n      irSchema.deprecated = nestedItems[0]!.deprecated;\n    }\n\n    // TODO: parser - this is a hack to bring back up meta fields\n    // without it, some schemas were missing original description\n    if (nestedItems[0]!.description) {\n      irSchema.description = nestedItems[0]!.description;\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseEnum = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'enum'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  irSchema.type = 'enum';\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n\n  for (const [index, enumValue] of schema.enum.entries()) {\n    const typeOfEnumValue = typeof enumValue;\n    let enumType: SchemaType<SchemaObject> | 'null' | undefined;\n\n    if (\n      typeOfEnumValue === 'string' ||\n      typeOfEnumValue === 'number' ||\n      typeOfEnumValue === 'boolean'\n    ) {\n      enumType = typeOfEnumValue;\n    } else if (typeOfEnumValue === 'object' && Array.isArray(enumValue)) {\n      enumType = 'array';\n    } else if (enumValue === null) {\n      // nullable must be true\n      if (schema['x-nullable']) {\n        enumType = 'null';\n      }\n    } else {\n      console.warn(\n        '🚨',\n        `unhandled \"${typeOfEnumValue}\" typeof value \"${enumValue}\" for enum`,\n        schema.enum,\n      );\n    }\n\n    if (!enumType) {\n      continue;\n    }\n\n    const irTypeSchema = parseOneType({\n      context,\n      schema: {\n        description: schema['x-enum-descriptions']?.[index],\n        title:\n          schema['x-enum-varnames']?.[index] ?? schema['x-enumNames']?.[index],\n        // cast enum to string temporarily\n        type: enumType === 'null' ? 'string' : enumType,\n      },\n      state,\n    });\n\n    irTypeSchema.const = enumValue;\n\n    // cast enum back\n    if (enumType === 'null') {\n      irTypeSchema.type = enumType;\n    }\n\n    if (irTypeSchema.type === 'array') {\n      irTypeSchema.type = 'tuple';\n    }\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irTypeSchema.accessScopes,\n    );\n\n    schemaItems.push(irTypeSchema);\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseRef = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, '$ref'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  irSchema.$ref = decodeURI(schema.$ref);\n\n  // rewrite definitions refs as the internal schema follows OpenAPI 3.x syntax\n  // and stores all definitions as reusable schemas\n  irSchema.$ref = irSchema.$ref.replace(\n    /#\\/definitions\\/([^/]+)/g,\n    '#/components/schemas/$1',\n  );\n\n  if (!state.circularReferenceTracker.has(schema.$ref)) {\n    const refSchema = context.resolveRef<SchemaObject>(schema.$ref);\n    const irRefSchema = schemaToIrSchema({\n      context,\n      schema: refSchema,\n      state: {\n        ...state,\n        $ref: schema.$ref,\n        isProperty: false,\n      },\n    });\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irRefSchema.accessScopes,\n    );\n  }\n\n  return irSchema;\n};\n\nconst parseNullableType = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  const typeIrSchema: IR.SchemaObject = {};\n\n  parseSchemaMeta({\n    irSchema: typeIrSchema,\n    schema,\n    state,\n  });\n\n  if (typeIrSchema.default === null) {\n    // clear to avoid duplicate default inside the non-null schema.\n    // this would produce incorrect validator output\n    delete typeIrSchema.default;\n  }\n\n  const schemaItems: Array<IR.SchemaObject> = [\n    parseOneType({\n      context,\n      irSchema: typeIrSchema,\n      schema,\n      state,\n    }),\n    {\n      type: 'null',\n    },\n  ];\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseType = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  const irSchema = initIrSchema({ schema });\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n    state,\n  });\n\n  const type = getSchemaType({ schema });\n\n  if (!type) {\n    return irSchema;\n  }\n\n  if (schema['x-nullable']) {\n    return parseNullableType({\n      context,\n      irSchema,\n      schema: {\n        ...schema,\n        type,\n      },\n      state,\n    });\n  }\n\n  return parseOneType({\n    context,\n    irSchema,\n    schema: {\n      ...schema,\n      type,\n    },\n    state,\n  });\n};\n\nconst parseOneType = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n\n    parseSchemaMeta({\n      irSchema,\n      schema,\n      state,\n    });\n  }\n\n  switch (schema.type) {\n    case 'array':\n      return parseArray({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'boolean':\n      return parseBoolean({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'integer':\n    case 'number':\n      return parseNumber({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'object':\n      return parseObject({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'string':\n      return parseString({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    default:\n      // gracefully handle invalid type\n      return parseUnknown({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n  }\n};\n\nconst parseUnknown = ({\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  irSchema.type = 'unknown';\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n    state,\n  });\n\n  return irSchema;\n};\n\nexport const schemaToIrSchema = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaObject;\n  state: SchemaState | undefined;\n}): IR.SchemaObject => {\n  if (!state) {\n    state = {\n      circularReferenceTracker: new Set(),\n    };\n  }\n\n  if (state.$ref) {\n    state.circularReferenceTracker.add(state.$ref);\n  }\n\n  if (schema.$ref) {\n    return parseRef({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, '$ref'>,\n      state,\n    });\n  }\n\n  if (schema.enum) {\n    return parseEnum({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'enum'>,\n      state,\n    });\n  }\n\n  if (schema.allOf) {\n    return parseAllOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'allOf'>,\n      state,\n    });\n  }\n\n  // infer object based on the presence of properties\n  if (schema.type || schema.properties) {\n    return parseType({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'type'>,\n      state,\n    });\n  }\n\n  return parseUnknown({\n    context,\n    schema,\n    state,\n  });\n};\n\nexport const parseSchema = ({\n  $ref,\n  context,\n  schema,\n}: {\n  $ref: string;\n  context: IR.Context;\n  schema: SchemaObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.schemas) {\n    context.ir.components.schemas = {};\n  }\n\n  context.ir.components.schemas[refToName($ref)] = schemaToIrSchema({\n    context,\n    schema,\n    state: {\n      $ref,\n      circularReferenceTracker: new Set(),\n    },\n  });\n};\n","import { getPaginationKeywordsRegExp } from '../../../ir/pagination';\nimport type { IR } from '../../../ir/types';\nimport type { SchemaType } from '../../shared/types/schema';\nimport type { ParameterObject, ReferenceObject } from '../types/spec';\nimport type { SchemaObject } from '../types/spec';\nimport { getSchemaType } from './schema';\n\nconst isPaginationType = (\n  schemaType: SchemaType<SchemaObject> | undefined,\n): boolean =>\n  schemaType === 'boolean' ||\n  schemaType === 'integer' ||\n  schemaType === 'number' ||\n  schemaType === 'string';\n\n// We handle only simple values for now, up to 1 nested field\nexport const paginationField = ({\n  context,\n  name,\n  schema,\n}: {\n  context: IR.Context;\n  name: string;\n  schema:\n    | ParameterObject\n    | SchemaObject\n    | ReferenceObject\n    | {\n        in: undefined;\n      };\n}): boolean | string => {\n  const paginationRegExp = getPaginationKeywordsRegExp(\n    context.config.parser.pagination,\n  );\n  if (paginationRegExp.test(name)) {\n    return true;\n  }\n\n  if ('$ref' in schema) {\n    const ref = context.resolveRef<ParameterObject | SchemaObject>(\n      schema.$ref ?? '',\n    );\n\n    if ('in' in ref && ref.in) {\n      const refSchema =\n        'schema' in ref\n          ? ref.schema\n          : {\n              ...ref,\n              in: undefined,\n            };\n\n      return paginationField({\n        context,\n        name,\n        schema: refSchema,\n      });\n    }\n\n    return paginationField({\n      context,\n      name,\n      schema: ref,\n    });\n  }\n\n  if ('in' in schema) {\n    if (!schema.in) {\n      return false;\n    }\n\n    const finalSchema =\n      'schema' in schema\n        ? schema.schema\n        : {\n            ...schema,\n            in: undefined,\n          };\n\n    return paginationField({\n      context,\n      name,\n      schema: finalSchema,\n    });\n  }\n\n  for (const name in schema.properties) {\n    const paginationRegExp = getPaginationKeywordsRegExp(\n      context.config.parser.pagination,\n    );\n\n    if (paginationRegExp.test(name)) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean' && !('$ref' in property)) {\n        const schemaType = getSchemaType({ schema: property });\n        // TODO: resolve deeper references\n\n        if (isPaginationType(schemaType)) {\n          return name;\n        }\n      }\n    }\n  }\n\n  for (const allOf of schema.allOf ?? []) {\n    const pagination = paginationField({\n      context,\n      name,\n      schema: allOf,\n    });\n    if (pagination) {\n      return pagination;\n    }\n  }\n\n  return false;\n};\n","import type { IR, IRBodyObject } from '../../../ir/types';\nimport type { State } from '../../shared/types/state';\nimport { operationToId } from '../../shared/utils/operation';\nimport type {\n  OperationObject,\n  ParameterObject,\n  PathItemObject,\n  ResponseObject,\n  SchemaObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { contentToSchema, mediaTypeObjects } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\ninterface Operation\n  extends Omit<OperationObject, 'parameters'>,\n    Pick<IR.OperationObject, 'parameters'> {\n  requestBody?: OperationObject['parameters'];\n}\n\nconst parseOperationJsDoc = ({\n  irOperation,\n  operation,\n}: {\n  irOperation: IR.OperationObject;\n  operation: Operation;\n}) => {\n  if (operation.deprecated !== undefined) {\n    irOperation.deprecated = operation.deprecated;\n  }\n\n  if (operation.description) {\n    irOperation.description = operation.description;\n  }\n\n  if (operation.summary) {\n    irOperation.summary = operation.summary;\n  }\n\n  if (operation.tags?.length) {\n    irOperation.tags = operation.tags;\n  }\n};\n\nconst initIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation: IR.OperationObject = {\n    id: operationToId({\n      context,\n      id: operation.operationId,\n      method,\n      path,\n      state,\n    }),\n    method,\n    path,\n  };\n\n  if (operation.operationId) {\n    irOperation.operationId = operation.operationId;\n  }\n\n  parseOperationJsDoc({\n    irOperation,\n    operation,\n  });\n\n  return irOperation;\n};\n\nconst operationToIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation = initIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    state,\n  });\n\n  if (operation.parameters) {\n    irOperation.parameters = operation.parameters;\n  }\n\n  let isRequestBodyRequired = false;\n  const requestBodyObject: IRBodyObject = {\n    mediaType: '',\n    schema: {\n      properties: {},\n      required: [],\n      type: 'object',\n    },\n  };\n  const requestBodyObjectRequired: Array<string> = [];\n\n  for (const requestBodyParameter of operation.requestBody ?? []) {\n    const requestBody =\n      '$ref' in requestBodyParameter\n        ? context.resolveRef<ParameterObject>(requestBodyParameter.$ref)\n        : requestBodyParameter;\n    const schema: SchemaObject =\n      requestBody.in === 'body'\n        ? requestBody.schema\n        : {\n            ...requestBody,\n            format: requestBody.type === 'file' ? 'binary' : requestBody.format,\n            required: undefined,\n            type: requestBody.type === 'file' ? 'string' : requestBody.type,\n          };\n    const contents = mediaTypeObjects({\n      mimeTypes: operation.consumes,\n      response: { schema },\n    });\n    // TODO: add support for multiple content types, for now prefer JSON\n    const content =\n      contents.find((content) => content.type === 'json') || contents[0];\n\n    if (content) {\n      const pagination = paginationField({\n        context,\n        name: '',\n        schema:\n          content.schema && '$ref' in content.schema\n            ? {\n                allOf: [{ ...content.schema }],\n                description: requestBody.description,\n              }\n            : {\n                description: requestBody.description,\n                ...content.schema,\n              },\n      });\n\n      const irSchema = schemaToIrSchema({\n        context,\n        schema:\n          '$ref' in requestBody\n            ? {\n                allOf: [\n                  {\n                    ...requestBody,\n                    $ref: requestBody.$ref as string,\n                    required: [],\n                    type: 'string',\n                  },\n                ],\n                description: requestBody.description,\n              }\n            : content.schema && '$ref' in content.schema\n              ? {\n                  allOf: [{ ...content.schema }],\n                  description: requestBody.description,\n                }\n              : {\n                  description: requestBody.description,\n                  ...content.schema,\n                },\n        state: undefined,\n      });\n\n      requestBodyObject.mediaType = content.mediaType;\n\n      if (requestBody.in === 'body') {\n        requestBodyObject.schema = irSchema;\n      } else {\n        requestBodyObject.schema.properties![requestBody.name] = irSchema;\n\n        if (requestBody.required) {\n          requestBodyObjectRequired.push(requestBody.name);\n        }\n      }\n\n      if (pagination) {\n        requestBodyObject.pagination = pagination;\n      }\n\n      if (content.type) {\n        requestBodyObject.type = content.type;\n      }\n    }\n\n    if (requestBody.required) {\n      isRequestBodyRequired = true;\n    }\n  }\n\n  if (requestBodyObject.mediaType) {\n    if (requestBodyObjectRequired.length) {\n      requestBodyObject.schema.required = requestBodyObjectRequired;\n    }\n\n    irOperation.body = requestBodyObject;\n\n    if (isRequestBodyRequired) {\n      irOperation.body.required = isRequestBodyRequired;\n    }\n  }\n\n  for (const name in operation.responses) {\n    if (!irOperation.responses) {\n      irOperation.responses = {};\n    }\n\n    const response = operation.responses[name]!;\n    const responseObject =\n      '$ref' in response\n        ? context.resolveRef<ResponseObject>(response.$ref)\n        : response;\n    const contents = mediaTypeObjects({\n      // assume JSON by default\n      mimeTypes: operation.produces ? operation.produces : ['application/json'],\n      response: responseObject,\n    });\n    // TODO: add support for multiple content types, for now prefer JSON\n    const content =\n      contents.find((content) => content.type === 'json') || contents[0];\n\n    if (content) {\n      irOperation.responses[name] = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema: {\n            description: responseObject.description,\n            ...contentToSchema({ content }),\n          },\n          state: undefined,\n        }),\n      };\n    } else {\n      irOperation.responses[name] = {\n        schema: {\n          description: responseObject.description,\n          // TODO: parser - cover all statues with empty response bodies\n          // 1xx, 204, 205, 304\n          type: name === '204' ? 'void' : 'unknown',\n        },\n      };\n    }\n  }\n\n  if (operation.security) {\n    const securitySchemeObjects: Array<IR.SecurityObject> = [];\n\n    for (const securityRequirementObject of operation.security) {\n      for (const name in securityRequirementObject) {\n        const securitySchemeObject = securitySchemesMap.get(name);\n\n        if (!securitySchemeObject) {\n          continue;\n        }\n\n        let irSecuritySchemeObject: IR.SecurityObject | undefined;\n\n        if (securitySchemeObject.type === 'apiKey') {\n          irSecuritySchemeObject = securitySchemeObject;\n        }\n\n        if (securitySchemeObject.type === 'basic') {\n          irSecuritySchemeObject = {\n            description: securitySchemeObject.description,\n            scheme: 'basic',\n            type: 'http',\n          };\n        }\n\n        if (securitySchemeObject.type === 'oauth2') {\n          irSecuritySchemeObject = {\n            description: securitySchemeObject.description,\n            flows: {},\n            type: 'oauth2',\n          };\n\n          switch (securitySchemeObject.flow) {\n            case 'accessCode':\n              irSecuritySchemeObject.flows.authorizationCode = {\n                authorizationUrl: securitySchemeObject.authorizationUrl!,\n                scopes: securitySchemeObject.scopes,\n                tokenUrl: securitySchemeObject.tokenUrl!,\n              };\n              break;\n            case 'application':\n              irSecuritySchemeObject.flows.clientCredentials = {\n                scopes: securitySchemeObject.scopes,\n                tokenUrl: securitySchemeObject.tokenUrl!,\n              };\n              break;\n            case 'implicit':\n              irSecuritySchemeObject.flows.implicit = {\n                authorizationUrl: securitySchemeObject.authorizationUrl!,\n                scopes: securitySchemeObject.scopes,\n              };\n              break;\n            case 'password':\n              irSecuritySchemeObject.flows.password = {\n                scopes: securitySchemeObject.scopes,\n                tokenUrl: securitySchemeObject.tokenUrl!,\n              };\n              break;\n          }\n        }\n\n        if (!irSecuritySchemeObject) {\n          continue;\n        }\n\n        securitySchemeObjects.push(irSecuritySchemeObject);\n      }\n    }\n\n    if (securitySchemeObjects.length) {\n      irOperation.security = securitySchemeObjects;\n    }\n  }\n\n  // TODO: parser - handle servers\n  // qux: operation.servers\n\n  return irOperation;\n};\n\nexport const parseOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: {\n  context: IR.Context;\n  method: Extract<\n    keyof PathItemObject,\n    'delete' | 'get' | 'head' | 'options' | 'patch' | 'post' | 'put' | 'trace'\n  >;\n  operation: Operation;\n  path: keyof IR.PathsObject;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}) => {\n  if (!context.ir.paths) {\n    context.ir.paths = {};\n  }\n\n  if (!context.ir.paths[path]) {\n    context.ir.paths[path] = {};\n  }\n\n  context.ir.paths[path][method] = operationToIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    securitySchemesMap,\n    state,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport type {\n  OperationObject,\n  ParameterObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\ntype Parameter = Exclude<ParameterObject, { in: 'body' }>;\n\n/**\n * Returns default parameter `explode` based on value of `collectionFormat`.\n */\nconst defaultExplode = (\n  collectionFormat: Parameter['collectionFormat'],\n): boolean => {\n  switch (collectionFormat) {\n    case 'multi':\n      return true;\n    case 'csv':\n    case 'pipes':\n    case 'ssv':\n    case 'tsv':\n    default:\n      return false;\n  }\n};\n\n/**\n * Returns default parameter `style` based on value of `in`.\n */\nconst defaultStyle = (\n  _in: Parameter['in'],\n): Required<IR.ParameterObject>['style'] => {\n  switch (_in) {\n    case 'header':\n    case 'path':\n      return 'simple';\n    case 'query':\n    default:\n      return 'form';\n  }\n};\n\nexport const parametersArrayToObject = ({\n  context,\n  operation,\n  parameters,\n}: {\n  context: IR.Context;\n  operation: OperationObject;\n  parameters?: ReadonlyArray<ParameterObject | ReferenceObject>;\n}): IR.ParametersObject | undefined => {\n  if (!parameters || !Object.keys(parameters).length) {\n    return;\n  }\n\n  const parametersObject: IR.ParametersObject = {};\n\n  for (const parameterOrReference of parameters) {\n    const parameter =\n      '$ref' in parameterOrReference\n        ? context.dereference<ParameterObject>(parameterOrReference)\n        : parameterOrReference;\n\n    // push request body parameters into a separate field\n    if (parameter.in === 'body' || parameter.in === 'formData') {\n      // @ts-expect-error\n      if (!operation.requestBody) {\n        // @ts-expect-error\n        operation.requestBody = [];\n      }\n\n      // @ts-expect-error\n      operation.requestBody.push(parameter);\n      continue;\n    }\n\n    if (!parametersObject[parameter.in]) {\n      parametersObject[parameter.in] = {};\n    }\n\n    // lowercase keys for case insensitive access\n    parametersObject[parameter.in]![parameter.name.toLocaleLowerCase()] =\n      parameterToIrParameter({\n        context,\n        parameter,\n      });\n  }\n\n  return parametersObject;\n};\n\nconst parameterToIrParameter = ({\n  context,\n  parameter,\n}: {\n  context: IR.Context;\n  parameter: Parameter;\n}): IR.ParameterObject => {\n  const schema = parameter;\n\n  const finalSchema: SchemaObject =\n    schema && '$ref' in schema\n      ? {\n          allOf: [\n            {\n              ...schema,\n              $ref: schema.$ref as string,\n              required: Array.isArray(schema.required) ? schema.required : [],\n              type: schema.type as SchemaObject['type'],\n            },\n          ],\n          description: parameter.description,\n        }\n      : {\n          description: parameter.description,\n          ...schema,\n          required: Array.isArray(schema.required) ? schema.required : [],\n          type: schema.type as SchemaObject['type'],\n        };\n\n  const pagination = paginationField({\n    context,\n    name: parameter.name,\n    schema: finalSchema,\n  });\n\n  const style = defaultStyle(parameter.in);\n  const explode = defaultExplode(parameter.collectionFormat);\n  const allowReserved = false;\n\n  const irParameter: IR.ParameterObject = {\n    allowReserved,\n    explode,\n    location: parameter.in as IR.ParameterObject['location'],\n    name: parameter.name,\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n      state: undefined,\n    }),\n    style,\n  };\n\n  if (parameter.description) {\n    irParameter.description = parameter.description;\n  }\n\n  if (pagination) {\n    irParameter.pagination = pagination;\n  }\n\n  if (parameter.required) {\n    irParameter.required = parameter.required;\n  }\n\n  return irParameter;\n};\n","import type { IR } from '../../../ir/types';\nimport { parseUrl } from '../../../utils/url';\n\nexport const parseServers = ({ context }: { context: IR.Context }) => {\n  let schemes: ReadonlyArray<string> = context.spec.schemes ?? [];\n  let host = context.spec.host ?? '';\n  const path = context.spec.basePath ?? '';\n\n  if (typeof context.config.input.path === 'string') {\n    const url = parseUrl(context.config.input.path);\n\n    if (!schemes.length) {\n      if (url.protocol) {\n        schemes = [url.protocol] as typeof schemes;\n      }\n    }\n\n    if (!host) {\n      host = `${url.host}${url.port ? `:${url.port}` : ''}`;\n    }\n  }\n\n  if (!schemes.length) {\n    schemes = [''];\n  }\n\n  const servers = schemes\n    .map((scheme) => `${scheme ? `${scheme}://` : ''}${host}${path}`)\n    .filter(Boolean);\n\n  if (servers.length) {\n    context.ir.servers = servers.map((url) => ({\n      url,\n    }));\n  }\n};\n","import { createOperationKey } from '../../../ir/operation';\nimport { httpMethods } from '../../shared/utils/operation';\nimport type {\n  ValidatorIssue,\n  ValidatorResult,\n} from '../../shared/utils/validator';\nimport type { OpenApiV2_0_X, PathItemObject, PathsObject } from '../types/spec';\n\nexport const validateOpenApiSpec = (spec: OpenApiV2_0_X): ValidatorResult => {\n  const issues: Array<ValidatorIssue> = [];\n  const operationIds = new Map();\n\n  if (spec.paths) {\n    for (const entry of Object.entries(spec.paths)) {\n      const path = entry[0] as keyof PathsObject;\n      const pathItem = entry[1] as PathItemObject;\n      for (const method of httpMethods) {\n        if (method === 'trace') {\n          continue;\n        }\n\n        const operation = pathItem[method];\n        if (!operation) {\n          continue;\n        }\n\n        const operationKey = createOperationKey({ method, path });\n\n        if (operation.operationId) {\n          if (!operationIds.has(operation.operationId)) {\n            operationIds.set(operation.operationId, operationKey);\n          } else {\n            issues.push({\n              code: 'duplicate_key',\n              context: {\n                key: 'operationId',\n                value: operation.operationId,\n              },\n              message:\n                'Duplicate `operationId` found. Each `operationId` must be unique.',\n              path: ['paths', path, method, 'operationId'],\n              severity: 'error',\n            });\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    issues,\n    valid: !issues.some((issue) => issue.severity === 'error'),\n  };\n};\n","import type { IR } from '../../../ir/types';\nimport { buildResourceMetadata } from '../../shared/graph/meta';\nimport { transformOpenApiSpec } from '../../shared/transforms';\nimport type { State } from '../../shared/types/state';\nimport {\n  createFilteredDependencies,\n  createFilters,\n  hasFilters,\n} from '../../shared/utils/filter';\nimport { buildGraph } from '../../shared/utils/graph';\nimport { mergeParametersObjects } from '../../shared/utils/parameter';\nimport { handleValidatorResult } from '../../shared/utils/validator';\nimport type {\n  OpenApiV2_0_X,\n  OperationObject,\n  PathItemObject,\n  PathsObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { filterSpec } from './filter';\nimport { parseOperation } from './operation';\nimport { parametersArrayToObject } from './parameter';\nimport { parseSchema } from './schema';\nimport { parseServers } from './server';\nimport { validateOpenApiSpec } from './validate';\n\ntype PathKeys<T extends keyof PathsObject = keyof PathsObject> =\n  keyof T extends infer K ? (K extends `/${string}` ? K : never) : never;\n\nexport const parseV2_0_X = (context: IR.Context<OpenApiV2_0_X>) => {\n  if (context.config.parser.validate_EXPERIMENTAL) {\n    const result = validateOpenApiSpec(context.spec);\n    handleValidatorResult({ context, result });\n  }\n\n  const shouldFilterSpec = hasFilters(context.config.parser.filters);\n  if (shouldFilterSpec) {\n    const filters = createFilters(context.config.parser.filters, context.spec);\n    const { graph } = buildGraph(context.spec);\n    const { resourceMetadata } = buildResourceMetadata(graph);\n    const sets = createFilteredDependencies({ filters, resourceMetadata });\n    filterSpec({\n      ...sets,\n      preserveOrder: filters.preserveOrder,\n      spec: context.spec,\n    });\n  }\n\n  transformOpenApiSpec({ context });\n\n  const state: State = {\n    ids: new Map(),\n  };\n  const securitySchemesMap = new Map<string, SecuritySchemeObject>();\n\n  for (const name in context.spec.securityDefinitions) {\n    const securitySchemeObject = context.spec.securityDefinitions[name]!;\n    securitySchemesMap.set(name, securitySchemeObject);\n  }\n\n  if (context.spec.definitions) {\n    for (const name in context.spec.definitions) {\n      const $ref = `#/definitions/${name}`;\n      const schema = context.spec.definitions[name]!;\n\n      parseSchema({\n        $ref,\n        context,\n        schema,\n      });\n    }\n  }\n\n  parseServers({ context });\n\n  for (const path in context.spec.paths) {\n    if (path.startsWith('x-')) {\n      continue;\n    }\n\n    const pathItem = context.spec.paths[path as PathKeys]!;\n\n    const finalPathItem = pathItem.$ref\n      ? {\n          ...context.resolveRef<PathItemObject>(pathItem.$ref),\n          ...pathItem,\n        }\n      : pathItem;\n\n    const commonOperation: OperationObject = {\n      consumes: context.spec.consumes,\n      produces: context.spec.produces,\n      responses: {},\n      security: context.spec.security,\n    };\n    const operationArgs: Omit<Parameters<typeof parseOperation>[0], 'method'> =\n      {\n        context,\n        operation: {\n          ...commonOperation,\n          parameters: parametersArrayToObject({\n            context,\n            operation: commonOperation,\n            parameters: finalPathItem.parameters,\n          }),\n        },\n        path: path as PathKeys,\n        securitySchemesMap,\n        state,\n      };\n\n    if (finalPathItem.delete) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.delete,\n          parameters: finalPathItem.delete.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'delete',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.delete,\n          parameters,\n        },\n      });\n    }\n\n    if (finalPathItem.get) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.get,\n          parameters: finalPathItem.get.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'get',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.get,\n          parameters,\n        },\n      });\n    }\n\n    if (finalPathItem.head) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.head,\n          parameters: finalPathItem.head.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'head',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.head,\n          parameters,\n        },\n      });\n    }\n\n    if (finalPathItem.options) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.options,\n          parameters: finalPathItem.options.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'options',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.options,\n          parameters,\n        },\n      });\n    }\n\n    if (finalPathItem.patch) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.patch,\n          parameters: finalPathItem.patch.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'patch',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.patch,\n          parameters,\n        },\n      });\n    }\n\n    if (finalPathItem.post) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.post,\n          parameters: finalPathItem.post.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'post',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.post,\n          parameters,\n        },\n      });\n    }\n\n    if (finalPathItem.put) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.put,\n          parameters: finalPathItem.put.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'put',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.put,\n          parameters,\n        },\n      });\n    }\n  }\n};\n","import { createOperationKey } from '../../../ir/operation';\nimport { addNamespace, removeNamespace } from '../../shared/utils/filter';\nimport { httpMethods } from '../../shared/utils/operation';\nimport type { OpenApiV3_0_X, PathItemObject, PathsObject } from '../types/spec';\n\n/**\n * Replace source spec with filtered version.\n */\nexport const filterSpec = ({\n  operations,\n  parameters,\n  preserveOrder,\n  requestBodies,\n  responses,\n  schemas,\n  spec,\n}: {\n  operations: Set<string>;\n  parameters: Set<string>;\n  preserveOrder: boolean;\n  requestBodies: Set<string>;\n  responses: Set<string>;\n  schemas: Set<string>;\n  spec: OpenApiV3_0_X;\n}) => {\n  if (spec.components) {\n    if (spec.components.parameters) {\n      const filtered: typeof spec.components.parameters = {};\n\n      if (preserveOrder) {\n        for (const [name, source] of Object.entries(\n          spec.components.parameters,\n        )) {\n          if (parameters.has(addNamespace('parameter', name))) {\n            filtered[name] = source;\n          }\n        }\n      } else {\n        for (const key of parameters) {\n          const { name } = removeNamespace(key);\n          const source = spec.components.parameters[name];\n          if (source) {\n            filtered[name] = source;\n          }\n        }\n      }\n\n      spec.components.parameters = filtered;\n    }\n\n    if (spec.components.requestBodies) {\n      const filtered: typeof spec.components.requestBodies = {};\n\n      if (preserveOrder) {\n        for (const [name, source] of Object.entries(\n          spec.components.requestBodies,\n        )) {\n          if (requestBodies.has(addNamespace('body', name))) {\n            filtered[name] = source;\n          }\n        }\n      } else {\n        for (const key of requestBodies) {\n          const { name } = removeNamespace(key);\n          const source = spec.components.requestBodies[name];\n          if (source) {\n            filtered[name] = source;\n          }\n        }\n      }\n\n      spec.components.requestBodies = filtered;\n    }\n\n    if (spec.components.responses) {\n      const filtered: typeof spec.components.responses = {};\n\n      if (preserveOrder) {\n        for (const [name, source] of Object.entries(\n          spec.components.responses,\n        )) {\n          if (responses.has(addNamespace('response', name))) {\n            filtered[name] = source;\n          }\n        }\n      } else {\n        for (const key of responses) {\n          const { name } = removeNamespace(key);\n          const source = spec.components.responses[name];\n          if (source) {\n            filtered[name] = source;\n          }\n        }\n      }\n\n      spec.components.responses = filtered;\n    }\n\n    if (spec.components.schemas) {\n      const filtered: typeof spec.components.schemas = {};\n\n      if (preserveOrder) {\n        for (const [name, source] of Object.entries(spec.components.schemas)) {\n          if (schemas.has(addNamespace('schema', name))) {\n            filtered[name] = source;\n          }\n        }\n      } else {\n        for (const key of schemas) {\n          const { name } = removeNamespace(key);\n          const source = spec.components.schemas[name];\n          if (source) {\n            filtered[name] = source;\n          }\n        }\n      }\n\n      spec.components.schemas = filtered;\n    }\n  }\n\n  if (spec.paths) {\n    for (const entry of Object.entries(spec.paths)) {\n      const path = entry[0] as keyof PathsObject;\n      const pathItem = entry[1] as PathItemObject;\n\n      for (const method of httpMethods) {\n        const operation = pathItem[method];\n        if (!operation) {\n          continue;\n        }\n\n        const key = addNamespace(\n          'operation',\n          createOperationKey({ method, path }),\n        );\n        if (!operations.has(key)) {\n          delete pathItem[method];\n        }\n      }\n\n      // remove paths that have no operations left\n      if (!Object.keys(pathItem).length) {\n        delete spec.paths[path];\n      }\n    }\n  }\n};\n","import type { IRMediaType } from '../../../ir/mediaType';\nimport {\n  isMediaTypeFileLike,\n  mediaTypeToIrMediaType,\n} from '../../../ir/mediaType';\nimport type {\n  MediaTypeObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\n\ninterface Content {\n  mediaType: string;\n  schema: SchemaObject | ReferenceObject | undefined;\n  type: IRMediaType | undefined;\n}\n\nexport const contentToSchema = ({\n  content,\n}: {\n  content: Content;\n}): SchemaObject | undefined => {\n  const { mediaType, schema } = content;\n\n  if (schema && '$ref' in schema) {\n    return {\n      allOf: [{ ...schema }],\n    };\n  }\n\n  if (!schema) {\n    if (isMediaTypeFileLike({ mediaType })) {\n      return {\n        format: 'binary',\n        type: 'string',\n      };\n    }\n    return;\n  }\n\n  if (\n    schema.type === 'string' &&\n    !schema.format &&\n    isMediaTypeFileLike({ mediaType })\n  ) {\n    return {\n      ...schema,\n      format: 'binary',\n    };\n  }\n\n  return schema;\n};\n\nexport const mediaTypeObjects = ({\n  content,\n}: {\n  content: Record<string, MediaTypeObject> | undefined;\n}): ReadonlyArray<Content> => {\n  const objects: Array<Content> = [];\n\n  for (const mediaType in content) {\n    objects.push({\n      mediaType,\n      schema: content[mediaType]!.schema,\n      type: mediaTypeToIrMediaType({ mediaType }),\n    });\n  }\n\n  return objects;\n};\n","import type { IR } from '../../../ir/types';\nimport { addItemsToSchema } from '../../../ir/utils';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  SchemaState,\n  SchemaType,\n  SchemaWithRequired,\n} from '../../shared/types/schema';\nimport { discriminatorValues } from '../../shared/utils/discriminator';\nimport { mergeSchemaAccessScopes } from '../../shared/utils/schema';\nimport type { ReferenceObject, SchemaObject } from '../types/spec';\n\nexport const getSchemaType = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): SchemaType<SchemaObject> | undefined => {\n  if (schema.type) {\n    return schema.type;\n  }\n\n  // infer object based on the presence of properties\n  if (schema.properties) {\n    return 'object';\n  }\n\n  return;\n};\n\nconst parseSchemaJsDoc = ({\n  irSchema,\n  schema,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  if (schema.deprecated !== undefined) {\n    irSchema.deprecated = schema.deprecated;\n  }\n\n  if (schema.description) {\n    irSchema.description = schema.description;\n  }\n\n  if (schema.title) {\n    irSchema.title = schema.title;\n  }\n};\n\nconst parseSchemaMeta = ({\n  irSchema,\n  schema,\n  state,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}) => {\n  if (schema.default !== undefined) {\n    irSchema.default = schema.default;\n  }\n\n  if (schema.exclusiveMaximum) {\n    if (schema.maximum !== undefined) {\n      irSchema.exclusiveMaximum = schema.maximum;\n    }\n  } else if (schema.maximum !== undefined) {\n    irSchema.maximum = schema.maximum;\n  }\n\n  if (schema.exclusiveMinimum) {\n    if (schema.minimum !== undefined) {\n      irSchema.exclusiveMinimum = schema.minimum;\n    }\n  } else if (schema.minimum !== undefined) {\n    irSchema.minimum = schema.minimum;\n  }\n\n  if (schema.format) {\n    irSchema.format = schema.format;\n  }\n\n  if (schema.maxItems !== undefined) {\n    irSchema.maxItems = schema.maxItems;\n  }\n\n  if (schema.maxLength !== undefined) {\n    irSchema.maxLength = schema.maxLength;\n  }\n\n  if (schema.minItems !== undefined) {\n    irSchema.minItems = schema.minItems;\n  }\n\n  if (schema.minLength !== undefined) {\n    irSchema.minLength = schema.minLength;\n  }\n\n  if (schema.pattern) {\n    irSchema.pattern = schema.pattern;\n  }\n\n  if (schema.readOnly) {\n    irSchema.accessScope = 'read';\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'read',\n    ]);\n  } else if (schema.writeOnly) {\n    irSchema.accessScope = 'write';\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'write',\n    ]);\n  } else if (state.isProperty) {\n    irSchema.accessScopes = mergeSchemaAccessScopes(irSchema.accessScopes, [\n      'both',\n    ]);\n  }\n};\n\nconst parseArray = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (schema.maxItems && schema.maxItems === schema.minItems) {\n    irSchema.type = 'tuple';\n  } else {\n    irSchema.type = 'array';\n  }\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n\n  if (schema.items) {\n    const irItemsSchema = schemaToIrSchema({\n      context,\n      schema: schema.items,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irItemsSchema.accessScopes,\n    );\n\n    if (\n      !schemaItems.length &&\n      schema.maxItems &&\n      schema.maxItems === schema.minItems\n    ) {\n      schemaItems = Array(schema.maxItems).fill(irItemsSchema);\n    } else {\n      if ('$ref' in schema.items) {\n        schemaItems.push(irItemsSchema);\n      } else {\n        const ofArray =\n          schema.items.allOf || schema.items.anyOf || schema.items.oneOf;\n        if (ofArray && ofArray.length > 1 && !schema.items.nullable) {\n          // bring composition up to avoid incorrectly nested arrays\n          irSchema = {\n            ...irSchema,\n            ...irItemsSchema,\n          };\n        } else {\n          schemaItems.push(irItemsSchema);\n        }\n      }\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseBoolean = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'boolean';\n\n  return irSchema;\n};\n\nconst parseNumber = ({\n  irSchema = {},\n  schema,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = schema.type;\n\n  return irSchema;\n};\n\nconst parseObject = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'object';\n\n  const schemaProperties: Record<string, IR.SchemaObject> = {};\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    if (typeof property === 'boolean') {\n      // TODO: parser - handle boolean properties\n    } else {\n      const irPropertySchema = schemaToIrSchema({\n        context,\n        schema: property,\n        state: {\n          ...state,\n          isProperty: true,\n        },\n      });\n      irSchema.accessScopes = mergeSchemaAccessScopes(\n        irSchema.accessScopes,\n        irPropertySchema.accessScopes,\n      );\n      schemaProperties[name] = irPropertySchema;\n    }\n  }\n\n  if (Object.keys(schemaProperties).length) {\n    irSchema.properties = schemaProperties;\n  }\n\n  if (schema.additionalProperties === undefined) {\n    if (!irSchema.properties) {\n      irSchema.additionalProperties = {\n        type: 'unknown',\n      };\n    }\n  } else if (typeof schema.additionalProperties === 'boolean') {\n    irSchema.additionalProperties = {\n      type: schema.additionalProperties ? 'unknown' : 'never',\n    };\n  } else {\n    const irAdditionalPropertiesSchema = schemaToIrSchema({\n      context,\n      schema: schema.additionalProperties,\n      state,\n    });\n    irSchema.additionalProperties = irAdditionalPropertiesSchema;\n  }\n\n  if (schema.required) {\n    irSchema.required = schema.required;\n  }\n\n  return irSchema;\n};\n\nconst parseString = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'string';\n\n  return irSchema;\n};\n\nconst initIrSchema = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  parseSchemaJsDoc({\n    irSchema,\n    schema,\n  });\n\n  return irSchema;\n};\n\nconst parseAllOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'allOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaType = getSchemaType({ schema });\n\n  const compositionSchemas = schema.allOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    const irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    if (schema.required) {\n      if (irCompositionSchema.required) {\n        irCompositionSchema.required = [\n          ...irCompositionSchema.required,\n          ...schema.required,\n        ];\n      } else {\n        irCompositionSchema.required = schema.required;\n      }\n    }\n\n    schemaItems.push(irCompositionSchema);\n\n    if ('$ref' in compositionSchema) {\n      const ref = context.resolveRef<SchemaObject>(compositionSchema.$ref);\n      // `$ref` should be passed from the root `parseSchema()` call\n      if (ref.discriminator && state.$ref) {\n        const values = discriminatorValues(\n          state.$ref,\n          ref.discriminator.mapping,\n        );\n        const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n          (value) => ({\n            const: value,\n            type: 'string',\n          }),\n        );\n        const irDiscriminatorSchema: IR.SchemaObject = {\n          properties: {\n            [ref.discriminator.propertyName]:\n              valueSchemas.length > 1\n                ? {\n                    items: valueSchemas,\n                    logicalOperator: 'or',\n                  }\n                : valueSchemas[0]!,\n          },\n          type: 'object',\n        };\n        if (ref.required?.includes(ref.discriminator.propertyName)) {\n          irDiscriminatorSchema.required = [ref.discriminator.propertyName];\n        }\n        schemaItems.push(irDiscriminatorSchema);\n      }\n\n      if (!state.circularReferenceTracker.has(compositionSchema.$ref)) {\n        const irRefSchema = schemaToIrSchema({\n          context,\n          schema: ref,\n          state: {\n            ...state,\n            $ref: compositionSchema.$ref,\n          },\n        });\n        irSchema.accessScopes = mergeSchemaAccessScopes(\n          irSchema.accessScopes,\n          irRefSchema.accessScopes,\n        );\n      }\n    }\n  }\n\n  if (schemaType === 'object') {\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      for (const requiredProperty of irObjectSchema.required ?? []) {\n        if (!irObjectSchema.properties[requiredProperty]) {\n          for (const compositionSchema of compositionSchemas) {\n            // TODO: parser - this could be probably resolved more accurately\n            const finalCompositionSchema =\n              '$ref' in compositionSchema\n                ? context.resolveRef<SchemaObject>(compositionSchema.$ref)\n                : compositionSchema;\n\n            if (\n              getSchemaType({ schema: finalCompositionSchema }) === 'object'\n            ) {\n              const irCompositionSchema = parseOneType({\n                context,\n                schema: {\n                  ...finalCompositionSchema,\n                  type: 'object',\n                },\n                state,\n              });\n\n              irSchema.accessScopes = mergeSchemaAccessScopes(\n                irSchema.accessScopes,\n                irCompositionSchema.accessScopes,\n              );\n\n              if (irCompositionSchema.properties?.[requiredProperty]) {\n                irObjectSchema.properties[requiredProperty] =\n                  irCompositionSchema.properties[requiredProperty];\n                break;\n              }\n            }\n          }\n        }\n      }\n      schemaItems.push(irObjectSchema);\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    logicalOperator: 'and',\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schema.nullable) {\n    // nest composition to avoid producing an intersection with null\n    const nestedItems: Array<IR.SchemaObject> = [\n      {\n        type: 'null',\n      },\n    ];\n\n    if (schemaItems.length) {\n      nestedItems.unshift(irSchema);\n    }\n\n    irSchema = {\n      items: nestedItems,\n      logicalOperator: 'or',\n    };\n\n    // TODO: parser - this is a hack to bring back up meta fields\n    // without it, some schemas were missing original deprecated\n    if (nestedItems[0]!.deprecated) {\n      irSchema.deprecated = nestedItems[0]!.deprecated;\n    }\n\n    // TODO: parser - this is a hack to bring back up meta fields\n    // without it, some schemas were missing original description\n    if (nestedItems[0]!.description) {\n      irSchema.description = nestedItems[0]!.description;\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseAnyOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'anyOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaType = getSchemaType({ schema });\n\n  const compositionSchemas = schema.anyOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    let irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    // `$ref` should be defined with discriminators\n    if (schema.discriminator && '$ref' in compositionSchema) {\n      const values = discriminatorValues(\n        compositionSchema.$ref,\n        schema.discriminator.mapping,\n      );\n      const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n        (value) => ({\n          const: value,\n          type: 'string',\n        }),\n      );\n      const irDiscriminatorSchema: IR.SchemaObject = {\n        properties: {\n          [schema.discriminator.propertyName]:\n            valueSchemas.length > 1\n              ? {\n                  items: valueSchemas,\n                  logicalOperator: 'or',\n                }\n              : valueSchemas[0]!,\n        },\n        type: 'object',\n      };\n      irCompositionSchema = {\n        items: [irDiscriminatorSchema, irCompositionSchema],\n        logicalOperator: 'and',\n      };\n    }\n\n    schemaItems.push(irCompositionSchema);\n  }\n\n  if (schema.nullable) {\n    schemaItems.push({ type: 'null' });\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaType === 'object') {\n    // nest composition to avoid producing a union with object properties\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      irSchema = {\n        items: [irSchema, irObjectSchema],\n        logicalOperator: 'and',\n      };\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseEnum = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'enum'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  irSchema.type = 'enum';\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n\n  for (const [index, enumValue] of schema.enum.entries()) {\n    const typeOfEnumValue = typeof enumValue;\n    let enumType: SchemaType<SchemaObject> | 'null' | undefined;\n\n    if (\n      typeOfEnumValue === 'string' ||\n      typeOfEnumValue === 'number' ||\n      typeOfEnumValue === 'boolean'\n    ) {\n      enumType = typeOfEnumValue;\n    } else if (typeOfEnumValue === 'object' && Array.isArray(enumValue)) {\n      enumType = 'array';\n    } else if (enumValue === null) {\n      // nullable must be true\n      if (schema.nullable) {\n        enumType = 'null';\n      }\n    } else {\n      console.warn(\n        '🚨',\n        `unhandled \"${typeOfEnumValue}\" typeof value \"${enumValue}\" for enum`,\n        schema.enum,\n      );\n    }\n\n    if (!enumType) {\n      continue;\n    }\n\n    const irTypeSchema = parseOneType({\n      context,\n      schema: {\n        description: schema['x-enum-descriptions']?.[index],\n        title:\n          schema['x-enum-varnames']?.[index] ?? schema['x-enumNames']?.[index],\n        // cast enum to string temporarily\n        type: enumType === 'null' ? 'string' : enumType,\n      },\n      state,\n    });\n\n    irTypeSchema.const = enumValue;\n\n    // cast enum back\n    if (enumType === 'null') {\n      irTypeSchema.type = enumType;\n    }\n\n    if (irTypeSchema.type === 'array') {\n      irTypeSchema.type = 'tuple';\n    }\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irTypeSchema.accessScopes,\n    );\n\n    schemaItems.push(irTypeSchema);\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseOneOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'oneOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n  const schemaType = getSchemaType({ schema });\n\n  const compositionSchemas = schema.oneOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    let irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irCompositionSchema.accessScopes,\n    );\n\n    // `$ref` should be defined with discriminators\n    if (schema.discriminator && '$ref' in compositionSchema) {\n      const values = discriminatorValues(\n        compositionSchema.$ref,\n        schema.discriminator.mapping,\n      );\n      const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n        (value) => ({\n          const: value,\n          type: 'string',\n        }),\n      );\n      const irDiscriminatorSchema: IR.SchemaObject = {\n        properties: {\n          [schema.discriminator.propertyName]:\n            valueSchemas.length > 1\n              ? {\n                  items: valueSchemas,\n                  logicalOperator: 'or',\n                }\n              : valueSchemas[0]!,\n        },\n        required: [schema.discriminator.propertyName],\n        type: 'object',\n      };\n      irCompositionSchema = {\n        items: [irDiscriminatorSchema, irCompositionSchema],\n        logicalOperator: 'and',\n      };\n    }\n\n    // since we know oneOf will be using \"or\" logical operator, if the parsed\n    // composition schema also has an \"or\" operator, we can bring it up\n    // to avoid unnecessary brackets\n    if (\n      irCompositionSchema.logicalOperator === 'or' &&\n      irCompositionSchema.type !== 'array' &&\n      irCompositionSchema.items\n    ) {\n      schemaItems = schemaItems.concat(irCompositionSchema.items);\n    } else {\n      schemaItems.push(irCompositionSchema);\n    }\n  }\n\n  if (schema.nullable) {\n    schemaItems.push({ type: 'null' });\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaType === 'object') {\n    // nest composition to avoid producing a union with object properties\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irObjectSchema.accessScopes,\n    );\n\n    if (irObjectSchema.properties) {\n      irSchema = {\n        items: [irSchema, irObjectSchema],\n        logicalOperator: 'and',\n      };\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseRef = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: ReferenceObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  irSchema.$ref = decodeURI(schema.$ref);\n\n  if (!state.circularReferenceTracker.has(schema.$ref)) {\n    const refSchema = context.resolveRef<SchemaObject>(schema.$ref);\n    const irRefSchema = schemaToIrSchema({\n      context,\n      schema: refSchema,\n      state: {\n        ...state,\n        $ref: schema.$ref,\n        isProperty: false,\n      },\n    });\n    irSchema.accessScopes = mergeSchemaAccessScopes(\n      irSchema.accessScopes,\n      irRefSchema.accessScopes,\n    );\n  }\n\n  return irSchema;\n};\n\nconst parseNullableType = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  const typeIrSchema: IR.SchemaObject = {};\n\n  parseSchemaMeta({\n    irSchema: typeIrSchema,\n    schema,\n    state,\n  });\n\n  if (typeIrSchema.default === null) {\n    // clear to avoid duplicate default inside the non-null schema.\n    // this would produce incorrect validator output\n    delete typeIrSchema.default;\n  }\n\n  const schemaItems: Array<IR.SchemaObject> = [\n    parseOneType({\n      context,\n      irSchema: typeIrSchema,\n      schema,\n      state,\n    }),\n    {\n      type: 'null',\n    },\n  ];\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseType = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  const irSchema = initIrSchema({ schema });\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n    state,\n  });\n\n  const type = getSchemaType({ schema });\n\n  if (!type) {\n    return irSchema;\n  }\n\n  if (!schema.nullable) {\n    return parseOneType({\n      context,\n      irSchema,\n      schema: {\n        ...schema,\n        type,\n      },\n      state,\n    });\n  }\n\n  return parseNullableType({\n    context,\n    irSchema,\n    schema: {\n      ...schema,\n      type,\n    },\n    state,\n  });\n};\n\nconst parseOneType = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n\n    parseSchemaMeta({\n      irSchema,\n      schema,\n      state,\n    });\n  }\n\n  switch (schema.type) {\n    case 'array':\n      return parseArray({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'boolean':\n      return parseBoolean({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'integer':\n    case 'number':\n      return parseNumber({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'object':\n      return parseObject({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'string':\n      return parseString({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    default:\n      // gracefully handle invalid type\n      return parseUnknown({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n  }\n};\n\nconst parseUnknown = ({\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  irSchema.type = 'unknown';\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n    state,\n  });\n\n  return irSchema;\n};\n\nexport const schemaToIrSchema = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaObject | ReferenceObject;\n  state: SchemaState | undefined;\n}): IR.SchemaObject => {\n  if (!state) {\n    state = {\n      circularReferenceTracker: new Set(),\n    };\n  }\n\n  if (state.$ref) {\n    state.circularReferenceTracker.add(state.$ref);\n  }\n\n  if ('$ref' in schema) {\n    return parseRef({\n      context,\n      schema,\n      state,\n    });\n  }\n\n  if (schema.enum) {\n    return parseEnum({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'enum'>,\n      state,\n    });\n  }\n\n  if (schema.allOf) {\n    return parseAllOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'allOf'>,\n      state,\n    });\n  }\n\n  if (schema.anyOf) {\n    return parseAnyOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'anyOf'>,\n      state,\n    });\n  }\n\n  if (schema.oneOf) {\n    return parseOneOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'oneOf'>,\n      state,\n    });\n  }\n\n  // infer object based on the presence of properties\n  if (schema.type || schema.properties) {\n    return parseType({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'type'>,\n      state,\n    });\n  }\n\n  return parseUnknown({\n    context,\n    schema,\n    state,\n  });\n};\n\nexport const parseSchema = ({\n  $ref,\n  context,\n  schema,\n}: {\n  $ref: string;\n  context: IR.Context;\n  schema: SchemaObject | ReferenceObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.schemas) {\n    context.ir.components.schemas = {};\n  }\n\n  context.ir.components.schemas[refToName($ref)] = schemaToIrSchema({\n    context,\n    schema,\n    state: {\n      $ref,\n      circularReferenceTracker: new Set(),\n    },\n  });\n};\n","import { getPaginationKeywordsRegExp } from '../../../ir/pagination';\nimport type { IR } from '../../../ir/types';\nimport type { SchemaType } from '../../shared/types/schema';\nimport type {\n  ParameterObject,\n  ReferenceObject,\n  RequestBodyObject,\n} from '../types/spec';\nimport type { SchemaObject } from '../types/spec';\nimport { mediaTypeObjects } from './mediaType';\nimport { getSchemaType } from './schema';\n\nconst isPaginationType = (\n  schemaType: SchemaType<SchemaObject> | undefined,\n): boolean =>\n  schemaType === 'boolean' ||\n  schemaType === 'integer' ||\n  schemaType === 'number' ||\n  schemaType === 'string';\n\n// We handle only simple values for now, up to 1 nested field\nexport const paginationField = ({\n  context,\n  name,\n  schema,\n}: {\n  context: IR.Context;\n  name: string;\n  schema: SchemaObject | ReferenceObject;\n}): boolean | string => {\n  const paginationRegExp = getPaginationKeywordsRegExp(\n    context.config.parser.pagination,\n  );\n  if (paginationRegExp.test(name)) {\n    return true;\n  }\n\n  if ('$ref' in schema) {\n    const ref = context.resolveRef<\n      ParameterObject | RequestBodyObject | SchemaObject\n    >(schema.$ref);\n\n    if ('content' in ref || 'in' in ref) {\n      let refSchema: SchemaObject | ReferenceObject | undefined;\n\n      if ('in' in ref) {\n        refSchema = ref.schema;\n      }\n\n      if (!refSchema) {\n        // parameter or body\n        const contents = mediaTypeObjects({ content: ref.content });\n        // TODO: add support for multiple content types, for now prefer JSON\n        const content =\n          contents.find((content) => content.type === 'json') || contents[0];\n        if (content?.schema) {\n          refSchema = content.schema;\n        }\n      }\n\n      if (!refSchema) {\n        return false;\n      }\n\n      return paginationField({\n        context,\n        name,\n        schema: refSchema,\n      });\n    }\n\n    return paginationField({\n      context,\n      name,\n      schema: ref,\n    });\n  }\n\n  for (const name in schema.properties) {\n    const paginationRegExp = getPaginationKeywordsRegExp(\n      context.config.parser.pagination,\n    );\n\n    if (paginationRegExp.test(name)) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean' && !('$ref' in property)) {\n        const schemaType = getSchemaType({ schema: property });\n        // TODO: resolve deeper references\n\n        if (isPaginationType(schemaType)) {\n          return name;\n        }\n      }\n    }\n  }\n\n  for (const allOf of schema.allOf ?? []) {\n    const pagination = paginationField({\n      context,\n      name,\n      schema: allOf,\n    });\n    if (pagination) {\n      return pagination;\n    }\n  }\n\n  return false;\n};\n","import type { IR } from '../../../ir/types';\nimport type { State } from '../../shared/types/state';\nimport { operationToId } from '../../shared/utils/operation';\nimport type {\n  OperationObject,\n  PathItemObject,\n  RequestBodyObject,\n  ResponseObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { contentToSchema, mediaTypeObjects } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\ninterface Operation\n  extends Omit<OperationObject, 'parameters'>,\n    Pick<IR.OperationObject, 'parameters'> {}\n\nconst parseOperationJsDoc = ({\n  irOperation,\n  operation,\n}: {\n  irOperation: IR.OperationObject;\n  operation: Operation;\n}) => {\n  if (operation.deprecated !== undefined) {\n    irOperation.deprecated = operation.deprecated;\n  }\n\n  if (operation.description) {\n    irOperation.description = operation.description;\n  }\n\n  if (operation.summary) {\n    irOperation.summary = operation.summary;\n  }\n\n  if (operation.tags?.length) {\n    irOperation.tags = operation.tags;\n  }\n};\n\nconst initIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation: IR.OperationObject = {\n    id: operationToId({\n      context,\n      id: operation.operationId,\n      method,\n      path,\n      state,\n    }),\n    method,\n    path,\n  };\n\n  if (operation.operationId) {\n    irOperation.operationId = operation.operationId;\n  }\n\n  parseOperationJsDoc({\n    irOperation,\n    operation,\n  });\n\n  return irOperation;\n};\n\nconst operationToIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation = initIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    state,\n  });\n\n  if (operation.parameters) {\n    irOperation.parameters = operation.parameters;\n  }\n\n  if (operation.requestBody) {\n    const requestBody =\n      '$ref' in operation.requestBody\n        ? context.resolveRef<RequestBodyObject>(operation.requestBody.$ref)\n        : operation.requestBody;\n    const contents = mediaTypeObjects({ content: requestBody.content });\n    // TODO: add support for multiple content types, for now prefer JSON\n    const content =\n      contents.find((content) => content.type === 'json') || contents[0];\n\n    if (content) {\n      const pagination = paginationField({\n        context,\n        name: '',\n        schema:\n          content.schema && '$ref' in content.schema\n            ? {\n                allOf: [{ ...content.schema }],\n                description: requestBody.description,\n              }\n            : {\n                description: requestBody.description,\n                ...content.schema,\n              },\n      });\n\n      irOperation.body = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema:\n            '$ref' in operation.requestBody\n              ? {\n                  allOf: [{ ...operation.requestBody }],\n                  description: requestBody.description,\n                }\n              : content.schema && '$ref' in content.schema\n                ? {\n                    allOf: [{ ...content.schema }],\n                    description: requestBody.description,\n                  }\n                : {\n                    description: requestBody.description,\n                    ...content.schema,\n                  },\n          state: undefined,\n        }),\n      };\n\n      if (pagination) {\n        irOperation.body.pagination = pagination;\n      }\n\n      if (requestBody.required) {\n        irOperation.body.required = requestBody.required;\n      }\n\n      if (content.type) {\n        irOperation.body.type = content.type;\n      }\n    }\n  }\n\n  for (const name in operation.responses) {\n    if (!irOperation.responses) {\n      irOperation.responses = {};\n    }\n\n    const response = operation.responses[name]!;\n    const responseObject =\n      '$ref' in response\n        ? context.resolveRef<ResponseObject>(response.$ref)\n        : response;\n    const contents = mediaTypeObjects({ content: responseObject.content });\n    // TODO: add support for multiple content types, for now prefer JSON\n    const content =\n      contents.find((content) => content.type === 'json') || contents[0];\n\n    if (content) {\n      irOperation.responses[name] = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema: {\n            description: responseObject.description,\n            ...contentToSchema({ content }),\n          },\n          state: undefined,\n        }),\n      };\n    } else {\n      irOperation.responses[name] = {\n        schema: {\n          description: responseObject.description,\n          // TODO: parser - cover all statues with empty response bodies\n          // 1xx, 204, 205, 304\n          type: name === '204' ? 'void' : 'unknown',\n        },\n      };\n    }\n  }\n\n  if (operation.security) {\n    const securitySchemeObjects: Array<IR.SecurityObject> = [];\n\n    for (const securityRequirementObject of operation.security) {\n      for (const name in securityRequirementObject) {\n        const securitySchemeObject = securitySchemesMap.get(name);\n\n        if (!securitySchemeObject) {\n          continue;\n        }\n\n        securitySchemeObjects.push(securitySchemeObject);\n      }\n    }\n\n    if (securitySchemeObjects.length) {\n      irOperation.security = securitySchemeObjects;\n    }\n  }\n\n  // TODO: parser - handle servers\n  // qux: operation.servers\n\n  return irOperation;\n};\n\nexport const parseOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: {\n  context: IR.Context;\n  method: Extract<\n    keyof PathItemObject,\n    'delete' | 'get' | 'head' | 'options' | 'patch' | 'post' | 'put' | 'trace'\n  >;\n  operation: Operation;\n  path: keyof IR.PathsObject;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}) => {\n  if (!context.ir.paths) {\n    context.ir.paths = {};\n  }\n\n  if (!context.ir.paths[path]) {\n    context.ir.paths[path] = {};\n  }\n\n  if (operation.servers) {\n    context.ir.servers = [...(context.ir.servers ?? []), ...operation.servers];\n  }\n\n  context.ir.paths[path][method] = operationToIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    securitySchemesMap,\n    state,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  ParameterObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\nimport { mediaTypeObjects } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\n/**\n * Returns default parameter `allowReserved` based on value of `in`.\n */\nconst defaultAllowReserved = (\n  _in: ParameterObject['in'],\n): boolean | undefined => {\n  switch (_in) {\n    // this keyword only applies to parameters with an `in` value of `query`\n    case 'query':\n      return false;\n    default:\n      return;\n  }\n};\n\n/**\n * Returns default parameter `explode` based on value of `style`.\n */\nconst defaultExplode = (style: Required<ParameterObject>['style']): boolean => {\n  switch (style) {\n    // default value for `deepObject` is `false`, but that behavior is undefined\n    // so we use `true` to make this work with the `client-fetch` package\n    case 'deepObject':\n    case 'form':\n      return true;\n    default:\n      return false;\n  }\n};\n\n/**\n * Returns default parameter `style` based on value of `in`.\n */\nconst defaultStyle = (\n  _in: ParameterObject['in'],\n): Required<IR.ParameterObject>['style'] => {\n  switch (_in) {\n    case 'header':\n    case 'path':\n      return 'simple';\n    case 'cookie':\n    case 'query':\n      return 'form';\n  }\n};\n\nexport const parametersArrayToObject = ({\n  context,\n  parameters,\n}: {\n  context: IR.Context;\n  parameters?: ReadonlyArray<ParameterObject | ReferenceObject>;\n}): IR.ParametersObject | undefined => {\n  if (!parameters || !Object.keys(parameters).length) {\n    return;\n  }\n\n  const parametersObject: IR.ParametersObject = {};\n\n  for (const parameterOrReference of parameters) {\n    const parameter =\n      '$ref' in parameterOrReference\n        ? context.dereference<ParameterObject>(parameterOrReference)\n        : parameterOrReference;\n\n    if (!parametersObject[parameter.in]) {\n      parametersObject[parameter.in] = {};\n    }\n\n    // lowercase keys for case insensitive access\n    parametersObject[parameter.in]![parameter.name.toLocaleLowerCase()] =\n      parameterToIrParameter({\n        context,\n        parameter,\n      });\n  }\n\n  return parametersObject;\n};\n\nconst parameterToIrParameter = ({\n  context,\n  parameter,\n}: {\n  context: IR.Context;\n  parameter: ParameterObject;\n}): IR.ParameterObject => {\n  // TODO: parser - fix\n  let schema = parameter.schema;\n\n  if (!schema) {\n    const contents = mediaTypeObjects({ content: parameter.content });\n    // TODO: add support for multiple content types, for now prefer JSON\n    const content =\n      contents.find((content) => content.type === 'json') || contents[0];\n    if (content) {\n      schema = content.schema;\n    }\n  }\n\n  const finalSchema: SchemaObject =\n    schema && '$ref' in schema\n      ? {\n          allOf: [{ ...schema }],\n          deprecated: parameter.deprecated,\n          description: parameter.description,\n        }\n      : {\n          deprecated: parameter.deprecated,\n          description: parameter.description,\n          ...schema,\n        };\n\n  const pagination = paginationField({\n    context,\n    name: parameter.name,\n    schema: finalSchema,\n  });\n\n  const style = parameter.style || defaultStyle(parameter.in);\n  const explode =\n    parameter.explode !== undefined ? parameter.explode : defaultExplode(style);\n  const allowReserved =\n    parameter.allowReserved !== undefined\n      ? parameter.allowReserved\n      : defaultAllowReserved(parameter.in);\n\n  const irParameter: IR.ParameterObject = {\n    allowReserved,\n    explode,\n    location: parameter.in,\n    name: parameter.name,\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n      state: undefined,\n    }),\n    style,\n  };\n\n  if (parameter.deprecated) {\n    irParameter.deprecated = parameter.deprecated;\n  }\n\n  if (parameter.description) {\n    irParameter.description = parameter.description;\n  }\n\n  if (pagination) {\n    irParameter.pagination = pagination;\n  }\n\n  if (parameter.required) {\n    irParameter.required = parameter.required;\n  }\n\n  return irParameter;\n};\n\nexport const parseParameter = ({\n  $ref,\n  context,\n  parameter,\n}: {\n  $ref: string;\n  context: IR.Context;\n  parameter: ParameterObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.parameters) {\n    context.ir.components.parameters = {};\n  }\n\n  context.ir.components.parameters[refToName($ref)] = parameterToIrParameter({\n    context,\n    parameter,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport { refToName } from '../../../utils/ref';\nimport type { RequestBodyObject, SchemaObject } from '../types/spec';\nimport { mediaTypeObjects } from './mediaType';\nimport { schemaToIrSchema } from './schema';\n\nconst requestBodyToIrRequestBody = ({\n  context,\n  requestBody,\n}: {\n  context: IR.Context;\n  requestBody: RequestBodyObject;\n}): IR.RequestBodyObject => {\n  // TODO: parser - fix\n  const contents = mediaTypeObjects({ content: requestBody.content });\n  // TODO: add support for multiple content types, for now prefer JSON\n  const content =\n    contents.find((content) => content.type === 'json') || contents[0];\n  const schema = content ? content.schema : undefined;\n\n  const finalSchema: SchemaObject = {\n    description: requestBody.description,\n    ...schema,\n  };\n\n  const irRequestBody: IR.RequestBodyObject = {\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n      state: undefined,\n    }),\n  };\n\n  if (requestBody.description) {\n    irRequestBody.description = requestBody.description;\n  }\n\n  if (requestBody.required) {\n    irRequestBody.required = requestBody.required;\n  }\n\n  return irRequestBody;\n};\n\nexport const parseRequestBody = ({\n  $ref,\n  context,\n  requestBody,\n}: {\n  $ref: string;\n  context: IR.Context;\n  requestBody: RequestBodyObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.requestBodies) {\n    context.ir.components.requestBodies = {};\n  }\n\n  context.ir.components.requestBodies[refToName($ref)] =\n    requestBodyToIrRequestBody({\n      context,\n      requestBody,\n    });\n};\n","import type { IR } from '../../../ir/types';\nimport { parseUrl } from '../../../utils/url';\n\nexport const parseServers = ({ context }: { context: IR.Context }) => {\n  if (context.spec.servers) {\n    context.ir.servers = context.spec.servers;\n    return;\n  }\n\n  if (typeof context.config.input.path === 'string') {\n    const url = parseUrl(context.config.input.path);\n    context.ir.servers = [\n      {\n        url: `${url.protocol ? `${url.protocol}://` : ''}${url.host}${url.port ? `:${url.port}` : ''}`,\n      },\n    ];\n  }\n\n  if (!context.ir.servers) {\n    context.ir.servers = [\n      {\n        url: '/',\n      },\n    ];\n  }\n};\n","import { createOperationKey } from '../../../ir/operation';\nimport { httpMethods } from '../../shared/utils/operation';\nimport type {\n  ValidatorIssue,\n  ValidatorResult,\n} from '../../shared/utils/validator';\nimport type { OpenApiV3_0_X, PathItemObject, PathsObject } from '../types/spec';\n\nexport const validateOpenApiSpec = (spec: OpenApiV3_0_X): ValidatorResult => {\n  const issues: Array<ValidatorIssue> = [];\n  const operationIds = new Map();\n\n  if (spec.paths) {\n    for (const entry of Object.entries(spec.paths)) {\n      const path = entry[0] as keyof PathsObject;\n      const pathItem = entry[1] as PathItemObject;\n      for (const method of httpMethods) {\n        const operation = pathItem[method];\n        if (!operation) {\n          continue;\n        }\n\n        const operationKey = createOperationKey({ method, path });\n\n        if (operation.operationId) {\n          if (!operationIds.has(operation.operationId)) {\n            operationIds.set(operation.operationId, operationKey);\n          } else {\n            issues.push({\n              code: 'duplicate_key',\n              context: {\n                key: 'operationId',\n                value: operation.operationId,\n              },\n              message:\n                'Duplicate `operationId` found. Each `operationId` must be unique.',\n              path: ['paths', path, method, 'operationId'],\n              severity: 'error',\n            });\n          }\n        }\n      }\n    }\n  }\n\n  if (spec.servers) {\n    if (typeof spec.servers !== 'object' || !Array.isArray(spec.servers)) {\n      issues.push({\n        code: 'invalid_type',\n        message: '`servers` must be an array.',\n        path: [],\n        severity: 'error',\n      });\n    }\n\n    for (let index = 0; index < spec.servers.length; index++) {\n      const server = spec.servers[index];\n      if (!server || typeof server !== 'object') {\n        issues.push({\n          code: 'invalid_type',\n          context: {\n            actual: typeof server,\n            expected: 'object',\n          },\n          message: 'Each entry in `servers` must be an object.',\n          path: ['servers', index],\n          severity: 'error',\n        });\n      } else {\n        if (!server.url) {\n          issues.push({\n            code: 'missing_required_field',\n            context: {\n              field: 'url',\n            },\n            message: 'Missing required field `url` in server object.',\n            path: ['servers', index],\n            severity: 'error',\n          });\n        }\n      }\n    }\n  }\n\n  return {\n    issues,\n    valid: !issues.some((issue) => issue.severity === 'error'),\n  };\n};\n","import type { IR } from '../../../ir/types';\nimport { buildResourceMetadata } from '../../shared/graph/meta';\nimport { transformOpenApiSpec } from '../../shared/transforms';\nimport type { State } from '../../shared/types/state';\nimport {\n  createFilteredDependencies,\n  createFilters,\n  hasFilters,\n} from '../../shared/utils/filter';\nimport { buildGraph } from '../../shared/utils/graph';\nimport { mergeParametersObjects } from '../../shared/utils/parameter';\nimport { handleValidatorResult } from '../../shared/utils/validator';\nimport type {\n  OpenApiV3_0_X,\n  ParameterObject,\n  PathItemObject,\n  PathsObject,\n  RequestBodyObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { filterSpec } from './filter';\nimport { parseOperation } from './operation';\nimport { parametersArrayToObject, parseParameter } from './parameter';\nimport { parseRequestBody } from './requestBody';\nimport { parseSchema } from './schema';\nimport { parseServers } from './server';\nimport { validateOpenApiSpec } from './validate';\n\nexport const parseV3_0_X = (context: IR.Context<OpenApiV3_0_X>) => {\n  if (context.config.parser.validate_EXPERIMENTAL) {\n    const result = validateOpenApiSpec(context.spec);\n    handleValidatorResult({ context, result });\n  }\n\n  const shouldFilterSpec = hasFilters(context.config.parser.filters);\n  if (shouldFilterSpec) {\n    const filters = createFilters(context.config.parser.filters, context.spec);\n    const { graph } = buildGraph(context.spec);\n    const { resourceMetadata } = buildResourceMetadata(graph);\n    const sets = createFilteredDependencies({ filters, resourceMetadata });\n    filterSpec({\n      ...sets,\n      preserveOrder: filters.preserveOrder,\n      spec: context.spec,\n    });\n  }\n\n  transformOpenApiSpec({ context });\n\n  const state: State = {\n    ids: new Map(),\n  };\n  const securitySchemesMap = new Map<string, SecuritySchemeObject>();\n\n  // TODO: parser - handle more component types, old parser handles only parameters and schemas\n  if (context.spec.components) {\n    for (const name in context.spec.components.securitySchemes) {\n      const securityOrReference =\n        context.spec.components.securitySchemes[name]!;\n      const securitySchemeObject =\n        '$ref' in securityOrReference\n          ? context.resolveRef<SecuritySchemeObject>(securityOrReference.$ref)\n          : securityOrReference;\n      securitySchemesMap.set(name, securitySchemeObject);\n    }\n\n    for (const name in context.spec.components.parameters) {\n      const $ref = `#/components/parameters/${name}`;\n      const parameterOrReference = context.spec.components.parameters[name]!;\n      const parameter =\n        '$ref' in parameterOrReference\n          ? context.resolveRef<ParameterObject>(parameterOrReference.$ref)\n          : parameterOrReference;\n\n      parseParameter({\n        $ref,\n        context,\n        parameter,\n      });\n    }\n\n    for (const name in context.spec.components.requestBodies) {\n      const $ref = `#/components/requestBodies/${name}`;\n      const requestBodyOrReference =\n        context.spec.components.requestBodies[name]!;\n      const requestBody =\n        '$ref' in requestBodyOrReference\n          ? context.resolveRef<RequestBodyObject>(requestBodyOrReference.$ref)\n          : requestBodyOrReference;\n\n      parseRequestBody({\n        $ref,\n        context,\n        requestBody,\n      });\n    }\n\n    for (const name in context.spec.components.schemas) {\n      const $ref = `#/components/schemas/${name}`;\n      const schema = context.spec.components.schemas[name]!;\n\n      parseSchema({\n        $ref,\n        context,\n        schema,\n      });\n    }\n  }\n\n  parseServers({ context });\n\n  for (const path in context.spec.paths) {\n    const pathItem = context.spec.paths[path as keyof PathsObject]!;\n\n    const finalPathItem = pathItem.$ref\n      ? {\n          ...context.resolveRef<PathItemObject>(pathItem.$ref),\n          ...pathItem,\n        }\n      : pathItem;\n\n    const operationArgs: Omit<\n      Parameters<typeof parseOperation>[0],\n      'method' | 'operation'\n    > & {\n      operation: Omit<\n        Parameters<typeof parseOperation>[0]['operation'],\n        'responses'\n      >;\n    } = {\n      context,\n      operation: {\n        description: finalPathItem.description,\n        parameters: parametersArrayToObject({\n          context,\n          parameters: finalPathItem.parameters,\n        }),\n        security: context.spec.security,\n        servers: finalPathItem.servers,\n        summary: finalPathItem.summary,\n      },\n      path: path as keyof PathsObject,\n      securitySchemesMap,\n      state,\n    };\n\n    if (finalPathItem.delete) {\n      parseOperation({\n        ...operationArgs,\n        method: 'delete',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.delete,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.delete.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.get) {\n      parseOperation({\n        ...operationArgs,\n        method: 'get',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.get,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.get.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.head) {\n      parseOperation({\n        ...operationArgs,\n        method: 'head',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.head,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.head.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.options) {\n      parseOperation({\n        ...operationArgs,\n        method: 'options',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.options,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.options.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.patch) {\n      parseOperation({\n        ...operationArgs,\n        method: 'patch',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.patch,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.patch.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.post) {\n      parseOperation({\n        ...operationArgs,\n        method: 'post',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.post,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.post.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.put) {\n      parseOperation({\n        ...operationArgs,\n        method: 'put',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.put,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.put.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.trace) {\n      parseOperation({\n        ...operationArgs,\n        method: 'trace',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.trace,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.trace.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n  }\n};\n","import { createOperationKey } from '../../../ir/operation';\nimport { addNamespace, removeNamespace } from '../../shared/utils/filter';\nimport { httpMethods } from '../../shared/utils/operation';\nimport type { OpenApiV3_1_X, PathItemObject, PathsObject } from '../types/spec';\n\n/**\n * Replace source spec with filtered version.\n */\nexport const filterSpec = ({\n  operations,\n  parameters,\n  preserveOrder,\n  requestBodies,\n  responses,\n  schemas,\n  spec,\n}: {\n  operations: Set<string>;\n  parameters: Set<string>;\n  preserveOrder: boolean;\n  requestBodies: Set<string>;\n  responses: Set<string>;\n  schemas: Set<string>;\n  spec: OpenApiV3_1_X;\n}) => {\n  if (spec.components) {\n    if (spec.components.parameters) {\n      const filtered: typeof spec.components.parameters = {};\n\n      if (preserveOrder) {\n        for (const [name, source] of Object.entries(\n          spec.components.parameters,\n        )) {\n          if (parameters.has(addNamespace('parameter', name))) {\n            filtered[name] = source;\n          }\n        }\n      } else {\n        for (const key of parameters) {\n          const { name } = removeNamespace(key);\n          const source = spec.components.parameters[name];\n          if (source) {\n            filtered[name] = source;\n          }\n        }\n      }\n\n      spec.components.parameters = filtered;\n    }\n\n    if (spec.components.requestBodies) {\n      const filtered: typeof spec.components.requestBodies = {};\n\n      if (preserveOrder) {\n        for (const [name, source] of Object.entries(\n          spec.components.requestBodies,\n        )) {\n          if (requestBodies.has(addNamespace('body', name))) {\n            filtered[name] = source;\n          }\n        }\n      } else {\n        for (const key of requestBodies) {\n          const { name } = removeNamespace(key);\n          const source = spec.components.requestBodies[name];\n          if (source) {\n            filtered[name] = source;\n          }\n        }\n      }\n\n      spec.components.requestBodies = filtered;\n    }\n\n    if (spec.components.responses) {\n      const filtered: typeof spec.components.responses = {};\n\n      if (preserveOrder) {\n        for (const [name, source] of Object.entries(\n          spec.components.responses,\n        )) {\n          if (responses.has(addNamespace('response', name))) {\n            filtered[name] = source;\n          }\n        }\n      } else {\n        for (const key of responses) {\n          const { name } = removeNamespace(key);\n          const source = spec.components.responses[name];\n          if (source) {\n            filtered[name] = source;\n          }\n        }\n      }\n\n      spec.components.responses = filtered;\n    }\n\n    if (spec.components.schemas) {\n      const filtered: typeof spec.components.schemas = {};\n\n      if (preserveOrder) {\n        for (const [name, source] of Object.entries(spec.components.schemas)) {\n          if (schemas.has(addNamespace('schema', name))) {\n            filtered[name] = source;\n          }\n        }\n      } else {\n        for (const key of schemas) {\n          const { name } = removeNamespace(key);\n          const source = spec.components.schemas[name];\n          if (source) {\n            filtered[name] = source;\n          }\n        }\n      }\n\n      spec.components.schemas = filtered;\n    }\n  }\n\n  if (spec.paths) {\n    for (const entry of Object.entries(spec.paths)) {\n      const path = entry[0] as keyof PathsObject;\n      const pathItem = entry[1] as PathItemObject;\n\n      for (const method of httpMethods) {\n        const operation = pathItem[method];\n        if (!operation) {\n          continue;\n        }\n\n        const key = addNamespace(\n          'operation',\n          createOperationKey({ method, path }),\n        );\n        if (!operations.has(key)) {\n          delete pathItem[method];\n        }\n      }\n\n      // remove paths that have no operations left\n      if (!Object.keys(pathItem).length) {\n        delete spec.paths[path];\n      }\n    }\n  }\n};\n","import type { IRMediaType } from '../../../ir/mediaType';\nimport {\n  isMediaTypeFileLike,\n  mediaTypeToIrMediaType,\n} from '../../../ir/mediaType';\nimport type { MediaTypeObject, SchemaObject } from '../types/spec';\n\ninterface Content {\n  mediaType: string;\n  schema: SchemaObject | undefined;\n  type: IRMediaType | undefined;\n}\n\nexport const contentToSchema = ({\n  content,\n}: {\n  content: Content;\n}): SchemaObject | undefined => {\n  const { mediaType, schema } = content;\n\n  if (!schema) {\n    if (isMediaTypeFileLike({ mediaType })) {\n      return {\n        format: 'binary',\n        type: 'string',\n      };\n    }\n    return;\n  }\n\n  if (\n    schema.type === 'string' &&\n    !schema.format &&\n    isMediaTypeFileLike({ mediaType })\n  ) {\n    return {\n      ...schema,\n      format: 'binary',\n    };\n  }\n\n  return schema;\n};\n\nexport const mediaTypeObjects = ({\n  content,\n}: {\n  content: Record<string, MediaTypeObject> | undefined;\n}): ReadonlyArray<Content> => {\n  const objects: Array<Content> = [];\n\n  for (const mediaType in content) {\n    objects.push({\n      mediaType,\n      schema: content[mediaType]!.schema,\n      type: mediaTypeToIrMediaType({ mediaType }),\n    });\n  }\n\n  return objects;\n};\n","import type { IR } from '../../../ir/types';\nimport { addItemsToSchema } from '../../../ir/utils';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  SchemaState,\n  SchemaType,\n  SchemaWithRequired,\n} from '../../shared/types/schema';\nimport { discriminatorValues } from '../../shared/utils/discriminator';\nimport type { SchemaObject } from '../types/spec';\n\nexport const getSchemaTypes = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): ReadonlyArray<SchemaType<SchemaObject>> => {\n  if (typeof schema.type === 'string') {\n    return [schema.type];\n  }\n\n  if (schema.type) {\n    return schema.type;\n  }\n\n  // infer object based on the presence of properties\n  if (schema.properties) {\n    return ['object'];\n  }\n\n  return [];\n};\n\nconst parseSchemaJsDoc = ({\n  irSchema,\n  schema,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  if (schema.deprecated !== undefined) {\n    irSchema.deprecated = schema.deprecated;\n  }\n\n  if (schema.description) {\n    irSchema.description = schema.description;\n  }\n\n  if (schema.title) {\n    irSchema.title = schema.title;\n  }\n};\n\nconst parseSchemaMeta = ({\n  irSchema,\n  schema,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  if (schema.const !== undefined) {\n    irSchema.const = schema.const;\n\n    // try to infer schema type\n    if (!schema.type) {\n      if (schema.const === null) {\n        irSchema.type = 'null';\n      } else {\n        switch (typeof schema.const) {\n          case 'bigint':\n          case 'number':\n            irSchema.type = 'number';\n            break;\n          case 'boolean':\n            irSchema.type = 'boolean';\n            break;\n          case 'string':\n            irSchema.type = 'string';\n            break;\n        }\n      }\n    }\n  }\n\n  if (schema.default !== undefined) {\n    irSchema.default = schema.default;\n  }\n\n  if (schema.exclusiveMaximum !== undefined) {\n    irSchema.exclusiveMaximum = schema.exclusiveMaximum;\n  }\n\n  if (schema.exclusiveMinimum !== undefined) {\n    irSchema.exclusiveMinimum = schema.exclusiveMinimum;\n  }\n\n  if (schema.format) {\n    irSchema.format = schema.format;\n  }\n\n  if (schema.maximum !== undefined) {\n    irSchema.maximum = schema.maximum;\n  }\n\n  if (schema.maxItems !== undefined) {\n    irSchema.maxItems = schema.maxItems;\n  }\n\n  if (schema.maxLength !== undefined) {\n    irSchema.maxLength = schema.maxLength;\n  }\n\n  if (schema.minimum !== undefined) {\n    irSchema.minimum = schema.minimum;\n  }\n\n  if (schema.minItems !== undefined) {\n    irSchema.minItems = schema.minItems;\n  }\n\n  if (schema.minLength !== undefined) {\n    irSchema.minLength = schema.minLength;\n  }\n\n  if (schema.pattern) {\n    irSchema.pattern = schema.pattern;\n  }\n\n  if (schema.readOnly) {\n    irSchema.accessScope = 'read';\n  } else if (schema.writeOnly) {\n    irSchema.accessScope = 'write';\n  }\n};\n\nconst parseArray = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (\n    (schema.prefixItems && schema.prefixItems.length) ||\n    (schema.maxItems && schema.maxItems === schema.minItems) ||\n    schema.const !== undefined\n  ) {\n    irSchema.type = 'tuple';\n  } else {\n    irSchema.type = 'array';\n  }\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n\n  for (const item of schema.prefixItems ?? []) {\n    const irItemSchema = schemaToIrSchema({\n      context,\n      schema: item,\n      state,\n    });\n    schemaItems.push(irItemSchema);\n  }\n\n  if (schema.items) {\n    const irItemsSchema = schemaToIrSchema({\n      context,\n      schema: schema.items,\n      state,\n    });\n\n    if (\n      !schemaItems.length &&\n      schema.maxItems &&\n      schema.maxItems === schema.minItems\n    ) {\n      schemaItems = Array(schema.maxItems).fill(irItemsSchema);\n    } else {\n      const ofArray =\n        schema.items.allOf || schema.items.anyOf || schema.items.oneOf;\n      if (\n        ofArray &&\n        ofArray.length > 1 &&\n        !getSchemaTypes({ schema: schema.items }).includes('null')\n      ) {\n        // bring composition up to avoid incorrectly nested arrays\n        irSchema = {\n          ...irSchema,\n          ...irItemsSchema,\n        };\n      } else {\n        schemaItems.push(irItemsSchema);\n      }\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseBoolean = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  irSchema.type = 'boolean';\n\n  return irSchema;\n};\n\nconst parseNull = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  irSchema.type = 'null';\n\n  return irSchema;\n};\n\nconst parseNumber = ({\n  irSchema = {},\n  schema,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: Omit<SchemaObject, 'type'> & {\n    type: SchemaType<SchemaObject>;\n  };\n}): IR.SchemaObject => {\n  irSchema.type = schema.type;\n\n  return irSchema;\n};\n\nconst parseObject = ({\n  context,\n  irSchema = {},\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  irSchema.type = 'object';\n\n  const schemaProperties: Record<string, IR.SchemaObject> = {};\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    if (typeof property === 'boolean') {\n      // TODO: parser - handle boolean properties\n    } else {\n      const irPropertySchema = schemaToIrSchema({\n        context,\n        schema: property,\n        state: {\n          ...state,\n          isProperty: true,\n        },\n      });\n      schemaProperties[name] = irPropertySchema;\n    }\n  }\n\n  if (Object.keys(schemaProperties).length) {\n    irSchema.properties = schemaProperties;\n  }\n\n  if (schema.additionalProperties === undefined) {\n    if (!irSchema.properties) {\n      irSchema.additionalProperties = {\n        type: 'unknown',\n      };\n    }\n  } else if (typeof schema.additionalProperties === 'boolean') {\n    irSchema.additionalProperties = {\n      type: schema.additionalProperties ? 'unknown' : 'never',\n    };\n  } else {\n    const irAdditionalPropertiesSchema = schemaToIrSchema({\n      context,\n      schema: schema.additionalProperties,\n      state,\n    });\n    irSchema.additionalProperties = irAdditionalPropertiesSchema;\n  }\n\n  if (schema.propertyNames) {\n    irSchema.propertyNames = schemaToIrSchema({\n      context,\n      schema: schema.propertyNames,\n      state,\n    });\n  }\n\n  if (schema.required) {\n    irSchema.required = schema.required;\n  }\n\n  return irSchema;\n};\n\nconst parseString = ({\n  irSchema = {},\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  irSchema.type = 'string';\n\n  return irSchema;\n};\n\nconst initIrSchema = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  parseSchemaJsDoc({\n    irSchema,\n    schema,\n  });\n\n  return irSchema;\n};\n\nconst parseAllOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'allOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaTypes = getSchemaTypes({ schema });\n\n  const compositionSchemas = schema.allOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    const irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    if (schema.required) {\n      if (irCompositionSchema.required) {\n        irCompositionSchema.required = [\n          ...irCompositionSchema.required,\n          ...schema.required,\n        ];\n      } else {\n        irCompositionSchema.required = schema.required;\n      }\n    }\n\n    schemaItems.push(irCompositionSchema);\n\n    if (compositionSchema.$ref) {\n      const ref = context.resolveRef<SchemaObject>(compositionSchema.$ref);\n      // `$ref` should be passed from the root `parseSchema()` call\n      if (ref.discriminator && state.$ref) {\n        const values = discriminatorValues(\n          state.$ref,\n          ref.discriminator.mapping,\n        );\n        const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n          (value) => ({\n            const: value,\n            type: 'string',\n          }),\n        );\n        const irDiscriminatorSchema: IR.SchemaObject = {\n          properties: {\n            [ref.discriminator.propertyName]:\n              valueSchemas.length > 1\n                ? {\n                    items: valueSchemas,\n                    logicalOperator: 'or',\n                  }\n                : valueSchemas[0]!,\n          },\n          type: 'object',\n        };\n        if (ref.required?.includes(ref.discriminator.propertyName)) {\n          irDiscriminatorSchema.required = [ref.discriminator.propertyName];\n        }\n        schemaItems.push(irDiscriminatorSchema);\n      }\n\n      if (!state.circularReferenceTracker.has(compositionSchema.$ref)) {\n        schemaToIrSchema({\n          context,\n          schema: ref,\n          state: {\n            ...state,\n            $ref: compositionSchema.$ref,\n          },\n        });\n      }\n    }\n  }\n\n  if (schemaTypes.includes('object')) {\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    if (irObjectSchema.properties) {\n      for (const requiredProperty of irObjectSchema.required ?? []) {\n        if (!irObjectSchema.properties[requiredProperty]) {\n          for (const compositionSchema of compositionSchemas) {\n            // TODO: parser - this could be probably resolved more accurately\n            const finalCompositionSchema = compositionSchema.$ref\n              ? context.resolveRef<SchemaObject>(compositionSchema.$ref)\n              : compositionSchema;\n\n            if (\n              getSchemaTypes({ schema: finalCompositionSchema }).includes(\n                'object',\n              )\n            ) {\n              const irCompositionSchema = parseOneType({\n                context,\n                schema: {\n                  ...finalCompositionSchema,\n                  type: 'object',\n                },\n                state,\n              });\n\n              if (irCompositionSchema.properties?.[requiredProperty]) {\n                irObjectSchema.properties[requiredProperty] =\n                  irCompositionSchema.properties[requiredProperty];\n                break;\n              }\n            }\n          }\n        }\n      }\n      schemaItems.push(irObjectSchema);\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    logicalOperator: 'and',\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaTypes.includes('null')) {\n    // nest composition to avoid producing an intersection with null\n    const nestedItems: Array<IR.SchemaObject> = [\n      {\n        type: 'null',\n      },\n    ];\n\n    if (schemaItems.length) {\n      nestedItems.unshift(irSchema);\n    }\n\n    irSchema = {\n      items: nestedItems,\n      logicalOperator: 'or',\n    };\n  }\n\n  return irSchema;\n};\n\nconst parseAnyOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'anyOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaTypes = getSchemaTypes({ schema });\n\n  const compositionSchemas = schema.anyOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    let irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    // `$ref` should be defined with discriminators\n    if (schema.discriminator && compositionSchema.$ref) {\n      const values = discriminatorValues(\n        compositionSchema.$ref,\n        schema.discriminator.mapping,\n      );\n      const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n        (value) => ({\n          const: value,\n          type: 'string',\n        }),\n      );\n      const irDiscriminatorSchema: IR.SchemaObject = {\n        properties: {\n          [schema.discriminator.propertyName]:\n            valueSchemas.length > 1\n              ? {\n                  items: valueSchemas,\n                  logicalOperator: 'or',\n                }\n              : valueSchemas[0]!,\n        },\n        type: 'object',\n      };\n      irCompositionSchema = {\n        items: [irDiscriminatorSchema, irCompositionSchema],\n        logicalOperator: 'and',\n      };\n    }\n\n    schemaItems.push(irCompositionSchema);\n  }\n\n  if (schemaTypes.includes('null')) {\n    schemaItems.push({ type: 'null' });\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaTypes.includes('object')) {\n    // nest composition to avoid producing a union with object properties\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    if (irObjectSchema.properties) {\n      irSchema = {\n        items: [irSchema, irObjectSchema],\n        logicalOperator: 'and',\n      };\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseEnum = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'enum'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  irSchema.type = 'enum';\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaTypes = getSchemaTypes({ schema });\n\n  for (const [index, enumValue] of schema.enum.entries()) {\n    const typeOfEnumValue = typeof enumValue;\n    let enumType: SchemaType<SchemaObject> | undefined;\n\n    if (\n      typeOfEnumValue === 'string' ||\n      typeOfEnumValue === 'number' ||\n      typeOfEnumValue === 'boolean'\n    ) {\n      enumType = typeOfEnumValue;\n    } else if (typeOfEnumValue === 'object' && Array.isArray(enumValue)) {\n      enumType = 'array';\n    } else if (enumValue === null) {\n      // type must contain null\n      if (schemaTypes.includes('null')) {\n        enumType = 'null';\n      }\n    } else {\n      console.warn(\n        '🚨',\n        `unhandled \"${typeOfEnumValue}\" typeof value \"${enumValue}\" for enum`,\n        schema.enum,\n      );\n    }\n\n    if (!enumType) {\n      continue;\n    }\n\n    const irTypeSchema = parseOneType({\n      context,\n      schema: {\n        const: enumValue,\n        description: schema['x-enum-descriptions']?.[index],\n        title:\n          schema['x-enum-varnames']?.[index] ?? schema['x-enumNames']?.[index],\n        type: enumType,\n      },\n      state,\n    });\n\n    schemaItems.push(irTypeSchema);\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseOneOf = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'oneOf'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n  const schemaTypes = getSchemaTypes({ schema });\n\n  const compositionSchemas = schema.oneOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    let irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n      state,\n    });\n\n    // `$ref` should be defined with discriminators\n    if (schema.discriminator && compositionSchema.$ref) {\n      const values = discriminatorValues(\n        compositionSchema.$ref,\n        schema.discriminator.mapping,\n      );\n      const valueSchemas: ReadonlyArray<IR.SchemaObject> = values.map(\n        (value) => ({\n          const: value,\n          type: 'string',\n        }),\n      );\n      const irDiscriminatorSchema: IR.SchemaObject = {\n        properties: {\n          [schema.discriminator.propertyName]:\n            valueSchemas.length > 1\n              ? {\n                  items: valueSchemas,\n                  logicalOperator: 'or',\n                }\n              : valueSchemas[0]!,\n        },\n        required: [schema.discriminator.propertyName],\n        type: 'object',\n      };\n      irCompositionSchema = {\n        items: [irDiscriminatorSchema, irCompositionSchema],\n        logicalOperator: 'and',\n      };\n    }\n\n    // since we know oneOf will be using \"or\" logical operator, if the parsed\n    // composition schema also has an \"or\" operator, we can bring it up\n    // to avoid unnecessary brackets\n    if (\n      irCompositionSchema.logicalOperator === 'or' &&\n      irCompositionSchema.type !== 'array' &&\n      irCompositionSchema.items\n    ) {\n      schemaItems = schemaItems.concat(irCompositionSchema.items);\n    } else {\n      schemaItems.push(irCompositionSchema);\n    }\n  }\n\n  if (schemaTypes.includes('null')) {\n    schemaItems.push({ type: 'null' });\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaTypes.includes('object')) {\n    // nest composition to avoid producing a union with object properties\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n      state,\n    });\n\n    if (irObjectSchema.properties) {\n      irSchema = {\n        items: [irSchema, irObjectSchema],\n        logicalOperator: 'and',\n      };\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseRef = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, '$ref'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const irRefSchema: IR.SchemaObject = {};\n\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  irRefSchema.$ref = decodeURI(schema.$ref);\n\n  if (!state.circularReferenceTracker.has(schema.$ref)) {\n    const refSchema = context.resolveRef<SchemaObject>(schema.$ref);\n    schemaToIrSchema({\n      context,\n      schema: refSchema,\n      state: {\n        ...state,\n        $ref: schema.$ref,\n        isProperty: false,\n      },\n    });\n  }\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  schemaItems.push(irRefSchema);\n\n  if (schema.type && typeof schema.type !== 'string') {\n    if (schema.type.includes('null')) {\n      schemaItems.push({ type: 'null' });\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseOneType = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: Omit<SchemaObject, 'type'> & {\n    type: SchemaType<SchemaObject>;\n  };\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n    parseSchemaMeta({ irSchema, schema });\n  }\n\n  switch (schema.type) {\n    case 'array':\n      return parseArray({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'boolean':\n      return parseBoolean({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'integer':\n    case 'number':\n      return parseNumber({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'null':\n      return parseNull({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'object':\n      return parseObject({\n        context,\n        irSchema,\n        schema,\n        state,\n      });\n    case 'string':\n      return parseString({\n        context,\n        irSchema,\n        schema,\n      });\n    default:\n      // gracefully handle invalid type\n      return parseUnknown({ context, irSchema, schema });\n  }\n};\n\nconst parseManyTypes = ({\n  context,\n  irSchema,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: Omit<SchemaObject, 'type'> & {\n    type: ReadonlyArray<SchemaType<SchemaObject>>;\n  };\n  state: SchemaState;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  const typeIrSchema: IR.SchemaObject = {};\n\n  parseSchemaMeta({ irSchema: typeIrSchema, schema });\n\n  if (schema.type.includes('null') && typeIrSchema.default === null) {\n    // clear to avoid duplicate default inside the non-null schema.\n    // this would produce incorrect validator output\n    delete typeIrSchema.default;\n  }\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n\n  for (const type of schema.type) {\n    if (type === 'null') {\n      schemaItems.push({ type: 'null' });\n    } else {\n      const irTypeSchema = parseOneType({\n        context,\n        irSchema: typeIrSchema,\n        schema: {\n          ...schema,\n          type,\n        },\n        state,\n      });\n\n      schemaItems.push(irTypeSchema);\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseType = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n  state: SchemaState;\n}): IR.SchemaObject => {\n  const irSchema = initIrSchema({ schema });\n\n  parseSchemaMeta({ irSchema, schema });\n\n  const schemaTypes = getSchemaTypes({ schema });\n\n  if (schemaTypes.length === 1) {\n    return parseOneType({\n      context,\n      irSchema,\n      schema: {\n        ...schema,\n        type: schemaTypes[0]!,\n      },\n      state,\n    });\n  }\n\n  return parseManyTypes({\n    context,\n    irSchema,\n    schema: {\n      ...schema,\n      type: schemaTypes,\n    },\n    state,\n  });\n};\n\nconst parseUnknown = ({\n  irSchema,\n  schema,\n}: {\n  context: IR.Context;\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  irSchema.type = 'unknown';\n\n  parseSchemaMeta({ irSchema, schema });\n\n  return irSchema;\n};\n\nexport const schemaToIrSchema = ({\n  context,\n  schema,\n  state,\n}: {\n  context: IR.Context;\n  schema: SchemaObject;\n  state: SchemaState | undefined;\n}): IR.SchemaObject => {\n  if (!state) {\n    state = {\n      circularReferenceTracker: new Set(),\n    };\n  }\n\n  if (state.$ref) {\n    state.circularReferenceTracker.add(state.$ref);\n  }\n\n  if (schema.$ref) {\n    return parseRef({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, '$ref'>,\n      state,\n    });\n  }\n\n  if (schema.enum) {\n    return parseEnum({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'enum'>,\n      state,\n    });\n  }\n\n  if (schema.allOf) {\n    return parseAllOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'allOf'>,\n      state,\n    });\n  }\n\n  if (schema.anyOf) {\n    return parseAnyOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'anyOf'>,\n      state,\n    });\n  }\n\n  if (schema.oneOf) {\n    return parseOneOf({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'oneOf'>,\n      state,\n    });\n  }\n\n  // infer object based on the presence of properties\n  if (schema.type || schema.properties) {\n    return parseType({\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'type'>,\n      state,\n    });\n  }\n\n  return parseUnknown({ context, schema });\n};\n\nexport const parseSchema = ({\n  $ref,\n  context,\n  schema,\n}: {\n  $ref: string;\n  context: IR.Context;\n  schema: SchemaObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.schemas) {\n    context.ir.components.schemas = {};\n  }\n\n  context.ir.components.schemas[refToName($ref)] = schemaToIrSchema({\n    context,\n    schema,\n    state: {\n      $ref,\n      circularReferenceTracker: new Set(),\n    },\n  });\n};\n","import { getPaginationKeywordsRegExp } from '../../../ir/pagination';\nimport type { IR } from '../../../ir/types';\nimport type { SchemaType } from '../../shared/types/schema';\nimport type { ParameterObject, RequestBodyObject } from '../types/spec';\nimport type { SchemaObject } from '../types/spec';\nimport { mediaTypeObjects } from './mediaType';\nimport { getSchemaTypes } from './schema';\n\nconst isPaginationType = (\n  schemaTypes: ReadonlyArray<SchemaType<SchemaObject>>,\n): boolean =>\n  schemaTypes.includes('boolean') ||\n  schemaTypes.includes('integer') ||\n  schemaTypes.includes('number') ||\n  schemaTypes.includes('string');\n\n// We handle only simple values for now, up to 1 nested field\nexport const paginationField = ({\n  context,\n  name,\n  schema,\n}: {\n  context: IR.Context;\n  name: string;\n  schema: SchemaObject;\n}): boolean | string => {\n  const paginationRegExp = getPaginationKeywordsRegExp(\n    context.config.parser.pagination,\n  );\n  if (paginationRegExp.test(name)) {\n    return true;\n  }\n\n  if (schema.$ref) {\n    const ref = context.resolveRef<\n      ParameterObject | RequestBodyObject | SchemaObject\n    >(schema.$ref);\n\n    if ('content' in ref || 'in' in ref) {\n      let refSchema: SchemaObject | undefined;\n\n      if ('in' in ref) {\n        refSchema = ref.schema;\n      }\n\n      if (!refSchema) {\n        // parameter or body\n        const contents = mediaTypeObjects({ content: ref.content });\n        // TODO: add support for multiple content types, for now prefer JSON\n        const content =\n          contents.find((content) => content.type === 'json') || contents[0];\n        if (content?.schema) {\n          refSchema = content.schema;\n        }\n      }\n\n      if (!refSchema) {\n        return false;\n      }\n\n      return paginationField({\n        context,\n        name,\n        schema: refSchema,\n      });\n    }\n\n    return paginationField({\n      context,\n      name,\n      schema: ref,\n    });\n  }\n\n  for (const name in schema.properties) {\n    const paginationRegExp = getPaginationKeywordsRegExp(\n      context.config.parser.pagination,\n    );\n\n    if (paginationRegExp.test(name)) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean') {\n        // TODO: resolve deeper references\n        const schemaTypes = getSchemaTypes({ schema: property });\n\n        if (!schemaTypes.length) {\n          const compositionSchemas = property.anyOf ?? property.oneOf;\n          const nonNullCompositionSchemas = (compositionSchemas ?? []).filter(\n            (schema) => schema.type !== 'null',\n          );\n          if (nonNullCompositionSchemas.length === 1) {\n            const schemaTypes = getSchemaTypes({\n              schema: nonNullCompositionSchemas[0]!,\n            });\n            if (isPaginationType(schemaTypes)) {\n              return name;\n            }\n          }\n        }\n\n        if (isPaginationType(schemaTypes)) {\n          return name;\n        }\n      }\n    }\n  }\n\n  for (const allOf of schema.allOf ?? []) {\n    const pagination = paginationField({\n      context,\n      name,\n      schema: allOf,\n    });\n    if (pagination) {\n      return pagination;\n    }\n  }\n\n  return false;\n};\n","import type { IR } from '../../../ir/types';\nimport type { State } from '../../shared/types/state';\nimport { operationToId } from '../../shared/utils/operation';\nimport type {\n  OperationObject,\n  PathItemObject,\n  RequestBodyObject,\n  ResponseObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { contentToSchema, mediaTypeObjects } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\ninterface Operation\n  extends Omit<OperationObject, 'parameters'>,\n    Pick<IR.OperationObject, 'parameters'> {}\n\nconst parseOperationJsDoc = ({\n  irOperation,\n  operation,\n}: {\n  irOperation: IR.OperationObject;\n  operation: Operation;\n}) => {\n  if (operation.deprecated !== undefined) {\n    irOperation.deprecated = operation.deprecated;\n  }\n\n  if (operation.description) {\n    irOperation.description = operation.description;\n  }\n\n  if (operation.summary) {\n    irOperation.summary = operation.summary;\n  }\n\n  if (operation.tags?.length) {\n    irOperation.tags = operation.tags;\n  }\n};\n\nconst initIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation: IR.OperationObject = {\n    id: operationToId({\n      context,\n      id: operation.operationId,\n      method,\n      path,\n      state,\n    }),\n    method,\n    path,\n  };\n\n  if (operation.operationId) {\n    irOperation.operationId = operation.operationId;\n  }\n\n  parseOperationJsDoc({\n    irOperation,\n    operation,\n  });\n\n  return irOperation;\n};\n\nconst operationToIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}): IR.OperationObject => {\n  const irOperation = initIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    state,\n  });\n\n  if (operation.parameters) {\n    irOperation.parameters = operation.parameters;\n  }\n\n  if (operation.requestBody) {\n    const requestBody =\n      '$ref' in operation.requestBody\n        ? context.resolveRef<RequestBodyObject>(operation.requestBody.$ref)\n        : operation.requestBody;\n    const contents = mediaTypeObjects({ content: requestBody.content });\n    // TODO: add support for multiple content types, for now prefer JSON\n    const content =\n      contents.find((content) => content.type === 'json') || contents[0];\n\n    if (content) {\n      const pagination = paginationField({\n        context,\n        name: '',\n        schema: {\n          description: requestBody.description,\n          ...content.schema,\n        },\n      });\n\n      irOperation.body = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema: {\n            description: requestBody.description,\n            ...('$ref' in operation.requestBody\n              ? operation.requestBody\n              : content.schema),\n          },\n          state: undefined,\n        }),\n      };\n\n      if (pagination) {\n        irOperation.body.pagination = pagination;\n      }\n\n      if (requestBody.required) {\n        irOperation.body.required = requestBody.required;\n      }\n\n      if (content.type) {\n        irOperation.body.type = content.type;\n      }\n    }\n  }\n\n  for (const name in operation.responses) {\n    if (!irOperation.responses) {\n      irOperation.responses = {};\n    }\n\n    const response = operation.responses[name]!;\n    const responseObject =\n      '$ref' in response\n        ? context.resolveRef<ResponseObject>(response.$ref)\n        : response;\n    const contents = mediaTypeObjects({ content: responseObject.content });\n    // TODO: add support for multiple content types, for now prefer JSON\n    const content =\n      contents.find((content) => content.type === 'json') || contents[0];\n\n    if (content) {\n      irOperation.responses[name] = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema: {\n            description: responseObject.description,\n            ...contentToSchema({ content }),\n          },\n          state: undefined,\n        }),\n      };\n    } else {\n      irOperation.responses[name] = {\n        schema: {\n          description: responseObject.description,\n          // TODO: parser - cover all statues with empty response bodies\n          // 1xx, 204, 205, 304\n          type: name === '204' ? 'void' : 'unknown',\n        },\n      };\n    }\n  }\n\n  if (operation.security) {\n    const securitySchemeObjects: Array<IR.SecurityObject> = [];\n\n    for (const securityRequirementObject of operation.security) {\n      for (const name in securityRequirementObject) {\n        const securitySchemeObject = securitySchemesMap.get(name);\n\n        if (!securitySchemeObject) {\n          continue;\n        }\n\n        securitySchemeObjects.push(securitySchemeObject);\n      }\n    }\n\n    if (securitySchemeObjects.length) {\n      irOperation.security = securitySchemeObjects;\n    }\n  }\n\n  // TODO: parser - handle servers\n  // qux: operation.servers\n\n  return irOperation;\n};\n\nexport const parseOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n  state,\n}: {\n  context: IR.Context;\n  method: Extract<\n    keyof PathItemObject,\n    'delete' | 'get' | 'head' | 'options' | 'patch' | 'post' | 'put' | 'trace'\n  >;\n  operation: Operation;\n  path: keyof IR.PathsObject;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n  state: State;\n}) => {\n  if (!context.ir.paths) {\n    context.ir.paths = {};\n  }\n\n  if (!context.ir.paths[path]) {\n    context.ir.paths[path] = {};\n  }\n\n  if (operation.servers) {\n    context.ir.servers = [...(context.ir.servers ?? []), ...operation.servers];\n  }\n\n  context.ir.paths[path][method] = operationToIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    securitySchemesMap,\n    state,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  ParameterObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\nimport { mediaTypeObjects } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\n/**\n * Returns default parameter `allowReserved` based on value of `in`.\n */\nconst defaultAllowReserved = (\n  _in: ParameterObject['in'],\n): boolean | undefined => {\n  switch (_in) {\n    // this keyword only applies to parameters with an `in` value of `query`\n    case 'query':\n      return false;\n    default:\n      return;\n  }\n};\n\n/**\n * Returns default parameter `explode` based on value of `style`.\n */\nconst defaultExplode = (style: Required<ParameterObject>['style']): boolean => {\n  switch (style) {\n    // default value for `deepObject` is `false`, but that behavior is undefined\n    // so we use `true` to make this work with the `client-fetch` package\n    case 'deepObject':\n    case 'form':\n      return true;\n    default:\n      return false;\n  }\n};\n\n/**\n * Returns default parameter `style` based on value of `in`.\n */\nconst defaultStyle = (\n  _in: ParameterObject['in'],\n): Required<ParameterObject>['style'] => {\n  switch (_in) {\n    case 'header':\n    case 'path':\n      return 'simple';\n    case 'cookie':\n    case 'query':\n      return 'form';\n  }\n};\n\nexport const parametersArrayToObject = ({\n  context,\n  parameters,\n}: {\n  context: IR.Context;\n  parameters?: ReadonlyArray<ParameterObject | ReferenceObject>;\n}): IR.ParametersObject | undefined => {\n  if (!parameters || !Object.keys(parameters).length) {\n    return;\n  }\n\n  const parametersObject: IR.ParametersObject = {};\n\n  for (const parameterOrReference of parameters) {\n    const parameter =\n      '$ref' in parameterOrReference\n        ? context.dereference<ParameterObject>(parameterOrReference)\n        : parameterOrReference;\n\n    if (!parametersObject[parameter.in]) {\n      parametersObject[parameter.in] = {};\n    }\n\n    // lowercase keys for case insensitive access\n    parametersObject[parameter.in]![parameter.name.toLocaleLowerCase()] =\n      parameterToIrParameter({\n        context,\n        parameter,\n      });\n  }\n\n  return parametersObject;\n};\n\nconst parameterToIrParameter = ({\n  context,\n  parameter,\n}: {\n  context: IR.Context;\n  parameter: ParameterObject;\n}): IR.ParameterObject => {\n  // TODO: parser - fix\n  let schema = parameter.schema;\n\n  if (!schema) {\n    const contents = mediaTypeObjects({ content: parameter.content });\n    // TODO: add support for multiple content types, for now prefer JSON\n    const content =\n      contents.find((content) => content.type === 'json') || contents[0];\n    if (content) {\n      schema = content.schema;\n    }\n  }\n\n  const finalSchema: SchemaObject = {\n    deprecated: parameter.deprecated,\n    description: parameter.description,\n    ...schema,\n  };\n\n  const pagination = paginationField({\n    context,\n    name: parameter.name,\n    schema: finalSchema,\n  });\n\n  const style = parameter.style || defaultStyle(parameter.in);\n  const explode =\n    parameter.explode !== undefined ? parameter.explode : defaultExplode(style);\n  const allowReserved =\n    parameter.allowReserved !== undefined\n      ? parameter.allowReserved\n      : defaultAllowReserved(parameter.in);\n\n  const irParameter: IR.ParameterObject = {\n    allowReserved,\n    explode,\n    location: parameter.in,\n    name: parameter.name,\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n      state: undefined,\n    }),\n    style,\n  };\n\n  if (parameter.deprecated) {\n    irParameter.deprecated = parameter.deprecated;\n  }\n\n  if (parameter.description) {\n    irParameter.description = parameter.description;\n  }\n\n  if (pagination) {\n    irParameter.pagination = pagination;\n  }\n\n  if (parameter.required) {\n    irParameter.required = parameter.required;\n  }\n\n  return irParameter;\n};\n\nexport const parseParameter = ({\n  $ref,\n  context,\n  parameter,\n}: {\n  $ref: string;\n  context: IR.Context;\n  parameter: ParameterObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.parameters) {\n    context.ir.components.parameters = {};\n  }\n\n  context.ir.components.parameters[refToName($ref)] = parameterToIrParameter({\n    context,\n    parameter,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport { refToName } from '../../../utils/ref';\nimport type { RequestBodyObject, SchemaObject } from '../types/spec';\nimport { mediaTypeObjects } from './mediaType';\nimport { schemaToIrSchema } from './schema';\n\nconst requestBodyToIrRequestBody = ({\n  context,\n  requestBody,\n}: {\n  context: IR.Context;\n  requestBody: RequestBodyObject;\n}): IR.RequestBodyObject => {\n  // TODO: parser - fix\n  const contents = mediaTypeObjects({ content: requestBody.content });\n  // TODO: add support for multiple content types, for now prefer JSON\n  const content =\n    contents.find((content) => content.type === 'json') || contents[0];\n  const schema = content ? content.schema : undefined;\n\n  const finalSchema: SchemaObject = {\n    description: requestBody.description,\n    ...schema,\n  };\n\n  const irRequestBody: IR.RequestBodyObject = {\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n      state: undefined,\n    }),\n  };\n\n  if (requestBody.description) {\n    irRequestBody.description = requestBody.description;\n  }\n\n  if (requestBody.required) {\n    irRequestBody.required = requestBody.required;\n  }\n\n  return irRequestBody;\n};\n\nexport const parseRequestBody = ({\n  $ref,\n  context,\n  requestBody,\n}: {\n  $ref: string;\n  context: IR.Context;\n  requestBody: RequestBodyObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.requestBodies) {\n    context.ir.components.requestBodies = {};\n  }\n\n  context.ir.components.requestBodies[refToName($ref)] =\n    requestBodyToIrRequestBody({\n      context,\n      requestBody,\n    });\n};\n","import type { IR } from '../../../ir/types';\nimport { parseUrl } from '../../../utils/url';\n\nexport const parseServers = ({ context }: { context: IR.Context }) => {\n  if (context.spec.servers) {\n    context.ir.servers = context.spec.servers;\n    return;\n  }\n\n  if (typeof context.config.input.path === 'string') {\n    const url = parseUrl(context.config.input.path);\n    context.ir.servers = [\n      {\n        url: `${url.protocol ? `${url.protocol}://` : ''}${url.host}${url.port ? `:${url.port}` : ''}`,\n      },\n    ];\n  }\n\n  if (!context.ir.servers) {\n    context.ir.servers = [\n      {\n        url: '/',\n      },\n    ];\n  }\n};\n","import { createOperationKey } from '../../../ir/operation';\nimport { httpMethods } from '../../shared/utils/operation';\nimport type {\n  ValidatorIssue,\n  ValidatorResult,\n} from '../../shared/utils/validator';\nimport type { OpenApiV3_1_X, PathItemObject, PathsObject } from '../types/spec';\n\nexport const validateOpenApiSpec = (spec: OpenApiV3_1_X): ValidatorResult => {\n  const issues: Array<ValidatorIssue> = [];\n  const operationIds = new Map();\n\n  if (spec.paths) {\n    for (const entry of Object.entries(spec.paths)) {\n      const path = entry[0] as keyof PathsObject;\n      const pathItem = entry[1] as PathItemObject;\n      for (const method of httpMethods) {\n        const operation = pathItem[method];\n        if (!operation) {\n          continue;\n        }\n\n        const operationKey = createOperationKey({ method, path });\n\n        if (operation.operationId) {\n          if (!operationIds.has(operation.operationId)) {\n            operationIds.set(operation.operationId, operationKey);\n          } else {\n            issues.push({\n              code: 'duplicate_key',\n              context: {\n                key: 'operationId',\n                value: operation.operationId,\n              },\n              message:\n                'Duplicate `operationId` found. Each `operationId` must be unique.',\n              path: ['paths', path, method, 'operationId'],\n              severity: 'error',\n            });\n          }\n        }\n      }\n    }\n  }\n\n  if (spec.servers) {\n    if (typeof spec.servers !== 'object' || !Array.isArray(spec.servers)) {\n      issues.push({\n        code: 'invalid_type',\n        message: '`servers` must be an array.',\n        path: [],\n        severity: 'error',\n      });\n    }\n\n    for (let index = 0; index < spec.servers.length; index++) {\n      const server = spec.servers[index];\n      if (!server || typeof server !== 'object') {\n        issues.push({\n          code: 'invalid_type',\n          context: {\n            actual: typeof server,\n            expected: 'object',\n          },\n          message: 'Each entry in `servers` must be an object.',\n          path: ['servers', index],\n          severity: 'error',\n        });\n      } else {\n        if (!server.url) {\n          issues.push({\n            code: 'missing_required_field',\n            context: {\n              field: 'url',\n            },\n            message: 'Missing required field `url` in server object.',\n            path: ['servers', index],\n            severity: 'error',\n          });\n        }\n      }\n    }\n  }\n\n  return {\n    issues,\n    valid: !issues.some((issue) => issue.severity === 'error'),\n  };\n};\n","import type { IR } from '../../../ir/types';\nimport { buildResourceMetadata } from '../../shared/graph/meta';\nimport { transformOpenApiSpec } from '../../shared/transforms';\nimport type { State } from '../../shared/types/state';\nimport {\n  createFilteredDependencies,\n  createFilters,\n  hasFilters,\n} from '../../shared/utils/filter';\nimport { buildGraph } from '../../shared/utils/graph';\nimport { mergeParametersObjects } from '../../shared/utils/parameter';\nimport { handleValidatorResult } from '../../shared/utils/validator';\nimport type {\n  OpenApiV3_1_X,\n  ParameterObject,\n  PathItemObject,\n  PathsObject,\n  RequestBodyObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { filterSpec } from './filter';\nimport { parseOperation } from './operation';\nimport { parametersArrayToObject, parseParameter } from './parameter';\nimport { parseRequestBody } from './requestBody';\nimport { parseSchema } from './schema';\nimport { parseServers } from './server';\nimport { validateOpenApiSpec } from './validate';\n\nexport const parseV3_1_X = (context: IR.Context<OpenApiV3_1_X>) => {\n  if (context.config.parser.validate_EXPERIMENTAL) {\n    const result = validateOpenApiSpec(context.spec);\n    handleValidatorResult({ context, result });\n  }\n\n  const shouldFilterSpec = hasFilters(context.config.parser.filters);\n  if (shouldFilterSpec) {\n    const filters = createFilters(context.config.parser.filters, context.spec);\n    const { graph } = buildGraph(context.spec);\n    const { resourceMetadata } = buildResourceMetadata(graph);\n    const sets = createFilteredDependencies({ filters, resourceMetadata });\n    filterSpec({\n      ...sets,\n      preserveOrder: filters.preserveOrder,\n      spec: context.spec,\n    });\n  }\n\n  transformOpenApiSpec({ context });\n\n  const state: State = {\n    ids: new Map(),\n  };\n  const securitySchemesMap = new Map<string, SecuritySchemeObject>();\n\n  // TODO: parser - handle more component types, old parser handles only parameters and schemas\n  if (context.spec.components) {\n    for (const name in context.spec.components.securitySchemes) {\n      const securityOrReference =\n        context.spec.components.securitySchemes[name]!;\n      const securitySchemeObject =\n        '$ref' in securityOrReference\n          ? context.resolveRef<SecuritySchemeObject>(securityOrReference.$ref)\n          : securityOrReference;\n      securitySchemesMap.set(name, securitySchemeObject);\n    }\n\n    for (const name in context.spec.components.parameters) {\n      const $ref = `#/components/parameters/${name}`;\n      const parameterOrReference = context.spec.components.parameters[name]!;\n      const parameter =\n        '$ref' in parameterOrReference\n          ? context.resolveRef<ParameterObject>(parameterOrReference.$ref)\n          : parameterOrReference;\n\n      parseParameter({\n        $ref,\n        context,\n        parameter,\n      });\n    }\n\n    for (const name in context.spec.components.requestBodies) {\n      const $ref = `#/components/requestBodies/${name}`;\n      const requestBodyOrReference =\n        context.spec.components.requestBodies[name]!;\n      const requestBody =\n        '$ref' in requestBodyOrReference\n          ? context.resolveRef<RequestBodyObject>(requestBodyOrReference.$ref)\n          : requestBodyOrReference;\n\n      parseRequestBody({\n        $ref,\n        context,\n        requestBody,\n      });\n    }\n\n    for (const name in context.spec.components.schemas) {\n      const $ref = `#/components/schemas/${name}`;\n      const schema = context.spec.components.schemas[name]!;\n\n      parseSchema({\n        $ref,\n        context,\n        schema,\n      });\n    }\n  }\n\n  parseServers({ context });\n\n  for (const path in context.spec.paths) {\n    const pathItem = context.spec.paths[path as keyof PathsObject]!;\n\n    const finalPathItem = pathItem.$ref\n      ? {\n          ...context.resolveRef<PathItemObject>(pathItem.$ref),\n          ...pathItem,\n        }\n      : pathItem;\n\n    const operationArgs: Omit<Parameters<typeof parseOperation>[0], 'method'> =\n      {\n        context,\n        operation: {\n          description: finalPathItem.description,\n          parameters: parametersArrayToObject({\n            context,\n            parameters: finalPathItem.parameters,\n          }),\n          security: context.spec.security,\n          servers: finalPathItem.servers,\n          summary: finalPathItem.summary,\n        },\n        path: path as keyof PathsObject,\n        securitySchemesMap,\n        state,\n      };\n\n    if (finalPathItem.delete) {\n      parseOperation({\n        ...operationArgs,\n        method: 'delete',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.delete,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.delete.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.get) {\n      parseOperation({\n        ...operationArgs,\n        method: 'get',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.get,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.get.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.head) {\n      parseOperation({\n        ...operationArgs,\n        method: 'head',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.head,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.head.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.options) {\n      parseOperation({\n        ...operationArgs,\n        method: 'options',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.options,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.options.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.patch) {\n      parseOperation({\n        ...operationArgs,\n        method: 'patch',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.patch,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.patch.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.post) {\n      parseOperation({\n        ...operationArgs,\n        method: 'post',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.post,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.post.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.put) {\n      parseOperation({\n        ...operationArgs,\n        method: 'put',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.put,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.put.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    if (finalPathItem.trace) {\n      parseOperation({\n        ...operationArgs,\n        method: 'trace',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.trace,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.trace.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n  }\n};\n","export const refParametersPartial = '#/components/parameters/';\n\nexport const refSchemasPartial = '#/components/schemas/';\n","import { ensureValidTypeScriptJavaScriptIdentifier } from '../openApi';\nimport type { Config } from '../types/config';\nimport { getConfig } from './config';\nimport { reservedJavaScriptKeywordsRegExp } from './regexp';\nimport { stringCase } from './stringCase';\n\nexport const transformClassName = ({\n  config,\n  name,\n}: {\n  config: Config;\n  name: string;\n}) => {\n  const plugin = config.plugins['@hey-api/sdk'];\n  if (plugin?.config.classNameBuilder) {\n    let customName = '';\n\n    if (typeof plugin.config.classNameBuilder === 'function') {\n      customName = plugin.config.classNameBuilder(name);\n    } else {\n      customName = plugin.config.classNameBuilder.replace('{{name}}', name);\n    }\n\n    return customName;\n  }\n\n  return name;\n};\n\nexport const transformTypeName = (name: string) => {\n  const config = getConfig();\n  if (config.plugins['@hey-api/typescript']?.config.style === 'PascalCase') {\n    return stringCase({\n      case: 'PascalCase',\n      value: name,\n    });\n  }\n  return name;\n};\n\n/**\n * This method is meant to be used to process definition names\n * and return a cleaned up, transformed version that is legal\n * to use in the output code.\n *\n * For example, a definition with name \"400\" would result in \"_400\",\n * \"import\" would result in \"_import\", etc. This also respects the\n * casing configuration for types.\n *\n * @param name Name of the definition in OpenAPI specification.\n * @returns A cleaned up, transformed name usable in output code.\n */\nexport const cleanAndTransformTypeName = (name: string) => {\n  const transformed = transformTypeName(name);\n  const cleaned = ensureValidTypeScriptJavaScriptIdentifier(transformed);\n  const result = cleaned.replace(reservedJavaScriptKeywordsRegExp, '_$1');\n  return result;\n};\n","export function unique<T>(value: T, index: number, arr: T[]): boolean {\n  return arr.indexOf(value) === index;\n}\n","export function sort(a: string, b: string): number {\n  const nameA = a.toLocaleLowerCase();\n  const nameB = b.toLocaleLowerCase();\n  return nameA.localeCompare(nameB, 'en');\n}\n\nexport const sorterByName = <T extends { name: string }>(a: T, b: T) =>\n  sort(a.name, b.name);\n\nexport function sortByName<T extends { name: string }>(items: T[]): T[] {\n  return items.sort(sorterByName);\n}\n","import type { Enum, Model } from '../openApi';\nimport { ensureValidTypeScriptJavaScriptIdentifier } from '../openApi';\nimport { unescapeName } from './escape';\nimport { sort } from './sort';\nimport { unique } from './unique';\n\n/**\n * Sanitizes names of enums, so they are valid typescript identifiers of a certain form.\n *\n * 1: Replace all characters not legal as part of identifier with '_'\n * 2: Add '_' prefix if first character of enum name has character not legal for start of identifier\n * 3: Add '_' where the string transitions from lowercase to uppercase\n * 4: Transform the whole string to uppercase\n *\n * Javascript identifier regexp pattern retrieved from https://developer.mozilla.org/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers\n */\nexport const enumKey = (value?: string | number, customName?: string) => {\n  if (customName) {\n    return customName;\n  }\n  // prefix numbers with underscore\n  if (typeof value === 'number') {\n    return `'_${value}'`;\n  }\n\n  let key = '';\n  if (typeof value === 'string') {\n    key = value\n      .replace(/[^$\\u200c\\u200d\\p{ID_Continue}]/gu, '_')\n      .replace(/^([^$_\\p{ID_Start}])/u, '_$1')\n      .replace(/(\\p{Lowercase})(\\p{Uppercase}+)/gu, '$1_$2');\n  }\n  key = key.trim();\n  if (!key) {\n    key = 'empty_string';\n  }\n  return key.toUpperCase();\n};\n\nexport const enumUnionType = (enums: Enum[]) =>\n  enums\n    .map((enumerator) => enumValue(enumerator.value, true))\n    .filter(unique)\n    .join(' | ');\n\nexport const enumValue = (value?: string | number, union: boolean = false) => {\n  if (typeof value === 'string') {\n    if (value.includes(\"'\") && union) {\n      return `\"${value}\"`;\n    }\n    return `'${value}'`;\n  }\n  return value;\n};\n\nexport const enumEntry = (enumerator: Enum) => {\n  const key = enumKey(enumerator.value, enumerator.customName);\n  const value = enumValue(enumerator.value);\n  return { key, value };\n};\n\n/**\n * Represent enum in `meta` object for deduplication\n */\nexport const enumMeta = (model: Model): Required<Model>['meta'] => {\n  // serialize enum values in namespace for quick lookup\n  const serialized = model.enum\n    .map((enumerator) => enumEntry(enumerator))\n    .sort((a, b) => sort(a.key, b.key))\n    .map((enumerator) => `${enumerator.key}=${enumerator.value}`)\n    .join('&');\n  return {\n    $ref: `enum/${model.name}/${serialized}`,\n    name: ensureValidTypeScriptJavaScriptIdentifier(unescapeName(model.name)),\n  };\n};\n","import { getType } from '../openApi';\nimport { refParametersPartial, refSchemasPartial } from './const';\nimport { reservedJavaScriptKeywordsRegExp } from './regexp';\nimport { cleanAndTransformTypeName } from './transform';\n\nexport const getParametersMeta = (definitionName: string) => {\n  const definitionType = getType({ type: definitionName });\n  /**\n   * Prefix parameter names to avoid name conflicts with schemas.\n   * Assuming people are mostly interested in importing schema types\n   * and don't care about this name as much. It should be resolved in\n   * a cleaner way, there just isn't a good deduplication strategy\n   * today. This is a workaround in the meantime, hopefully reducing\n   * the chance of conflicts.\n   *\n   * Example where this would break: schema named `ParameterFoo` and\n   * parameter named `Foo` (this would transform to `ParameterFoo`)\n   *\n   * Note: there's a related code to this workaround in `getType()`\n   * method that needs to be cleaned up when this is addressed.\n   */\n  const name = `Parameter${definitionType.base.replace(reservedJavaScriptKeywordsRegExp, '_$1')}`;\n  const meta = {\n    $ref: refParametersPartial + definitionName,\n    name,\n  };\n  return meta;\n};\n\n/**\n * @param definitionName Name of the schema definition in OpenAPI specification.\n * @returns meta object\n */\nexport const getSchemasMeta = (definitionName: string) => {\n  const name = cleanAndTransformTypeName(definitionName);\n  const meta = {\n    $ref: refSchemasPartial + definitionName,\n    name,\n  };\n  return meta;\n};\n","import type ts from 'typescript';\n\nimport { compiler, type Property } from '../compiler';\nimport type { Model } from '../openApi';\nimport { sanitizeOperationParameterName } from '../openApi';\nimport type { Client } from '../types/client';\nimport { getConfig, isLegacyClient } from './config';\nimport { refSchemasPartial } from './const';\nimport { enumValue } from './enum';\nimport { escapeComment, escapeName, unescapeName } from './escape';\nimport { getSchemasMeta } from './meta';\nimport { reservedJavaScriptKeywordsRegExp } from './regexp';\nimport { stringCase } from './stringCase';\nimport { unique } from './unique';\n\nexport const isModelDate = (model: Model): boolean =>\n  model.format === 'date' || model.format === 'date-time';\n\nconst base = (model: Model) => {\n  const config = getConfig();\n\n  if (model.base === 'binary') {\n    return compiler.typeUnionNode({\n      types: ['Blob', 'File'],\n    });\n  }\n\n  if (\n    config.plugins['@hey-api/transformers']?.config.dates &&\n    isModelDate(model)\n  ) {\n    return compiler.typeNode('Date');\n  }\n\n  return compiler.typeNode(model.base);\n};\n\nconst typeReference = (model: Model) => {\n  // nullable is false when base is null to avoid duplicate null statements\n  const isNullable = model.base === 'null' ? false : model.isNullable;\n  let typeNode = base(model);\n  /**\n   * special handling for single reference. The current approach didn't handle\n   * transformed names, this fixes that. We should add a more robust solution,\n   * but this will work for now.\n   * {@link https://github.com/hey-api/openapi-ts/issues/768}\n   */\n  if (model.export === 'reference' && model.$refs.length === 1) {\n    if (model.$refs[0]!.startsWith(refSchemasPartial)) {\n      const meta = getSchemasMeta(model.base);\n      typeNode = compiler.typeNode(meta.name);\n    }\n  }\n  const unionNode = compiler.typeUnionNode({\n    isNullable,\n    types: [typeNode],\n  });\n  return unionNode;\n};\n\nconst typeArray = (model: Model) => {\n  if (model.link) {\n    // We treat an array of `model.link` as constant size array definition.\n    if (Array.isArray(model.link)) {\n      const types = model.link.map((m) => toType(m));\n      const tuple = compiler.typeTupleNode({\n        isNullable: model.isNullable,\n        types,\n      });\n      return tuple;\n    }\n\n    // Special case where we use tuple to define constant size array.\n    if (\n      model.export === 'array' &&\n      model.maxItems &&\n      model.minItems &&\n      model.maxItems === model.minItems &&\n      model.maxItems <= 100\n    ) {\n      const types = Array(model.maxItems).fill(toType(model.link));\n      const tuple = compiler.typeTupleNode({\n        isNullable: model.isNullable,\n        types,\n      });\n      return tuple;\n    }\n\n    return compiler.typeArrayNode([toType(model.link)], model.isNullable);\n  }\n\n  return compiler.typeArrayNode([base(model)], model.isNullable);\n};\n\nconst typeEnum = (model: Model) => {\n  const values = model.enum.map((enumerator) => enumValue(enumerator.value));\n  return compiler.typeUnionNode({\n    isNullable: model.isNullable,\n    types: values,\n  });\n};\n\nconst typeDict = (model: Model) => {\n  const type =\n    model.link && !Array.isArray(model.link) ? toType(model.link) : base(model);\n  return compiler.typeRecordNode(['string'], [type], model.isNullable, true);\n};\n\nconst typeUnionOrIntersection = ({\n  model,\n  style,\n}: {\n  model: Model;\n  style: 'intersection' | 'union';\n}) => {\n  const types = model.properties\n    .map((model) => {\n      const str = compiler.nodeToString({\n        node: toType(model),\n        unescape: true,\n      });\n      return str;\n    })\n    .filter(unique);\n\n  const node =\n    style === 'union'\n      ? compiler.typeUnionNode({\n          // avoid printing duplicate null statements\n          isNullable:\n            model.isNullable &&\n            !model.properties.find((property) => property.isNullable),\n          types,\n        })\n      : compiler.typeIntersectionNode({\n          isNullable: model.isNullable,\n          types,\n        });\n\n  // top-level models don't need parentheses around them\n  if (model.meta) {\n    return node;\n  }\n\n  return compiler.typeParenthesizedNode({\n    type: node,\n  });\n};\n\nconst typeInterface = (model: Model) => {\n  if (!model.properties.length) {\n    return compiler.typeNode('unknown');\n  }\n\n  const config = getConfig();\n\n  const isLegacy = isLegacyClient(config);\n\n  const properties: Property[] = model.properties.map((property) => {\n    let maybeRequired = property.isRequired ? '' : '?';\n    let value = toType(property);\n    let name = !isLegacy\n      ? escapeName(unescapeName(transformTypeKeyName(property.name)))\n      : // special test for 1XX status codes. We need a more robust system\n        // for escaping values depending on context in which they're printed,\n        // but since this works for client packages, it's not worth it right now\n        /^\\dXX$/.test(property.name)\n        ? escapeName(property.name)\n        : property.name;\n    // special case for additional properties type\n    if (property.name === '[key: string]') {\n      name = property.name;\n      if (maybeRequired) {\n        maybeRequired = '';\n        value = compiler.typeUnionNode({\n          types: [value, 'undefined'],\n        });\n      }\n    }\n    return {\n      comment: [\n        property.description && escapeComment(property.description),\n        property.deprecated && '@deprecated',\n      ],\n      isReadOnly: property.isReadOnly,\n      isRequired: maybeRequired === '',\n      name,\n      type: value,\n    };\n  });\n\n  return compiler.typeInterfaceNode({\n    isNullable: model.isNullable,\n    properties,\n    useLegacyResolution: true,\n  });\n};\n\nexport const toType = (model: Model): ts.TypeNode => {\n  switch (model.export) {\n    case 'all-of':\n      return typeUnionOrIntersection({\n        model,\n        style: 'intersection',\n      });\n    case 'any-of':\n    case 'one-of':\n      return typeUnionOrIntersection({\n        model,\n        style: 'union',\n      });\n    case 'array':\n      return typeArray(model);\n    case 'dictionary':\n      return typeDict(model);\n    case 'enum':\n      return typeEnum(model);\n    case 'interface':\n      return typeInterface(model);\n    case 'const':\n    case 'generic':\n    case 'reference':\n    default:\n      return typeReference(model);\n  }\n};\n\nexport interface SetUniqueTypeNameResult {\n  /**\n   * Did this function add a new property to the `client.types` object?\n   */\n  created: boolean;\n  /**\n   * Unique name for the exported type.\n   */\n  name: string;\n}\n\n/**\n * Generates a unique name for the exported type for given model meta.\n * @param args.client Internal client instance\n * @param args.count Unique key for deduplication\n * @param args.create If a name record does not exist, should it be created?\n * @param args.meta Meta property from the model\n * @param args.nameTransformer Function for transforming name into the final\n * value. In different contexts, a different strategy might be used. For\n * example, slashes `/` are invalid in TypeScript identifiers, but okay in\n * a JavaScript object key name.\n * @returns {SetUniqueTypeNameResult}\n */\nexport const setUniqueTypeName = ({\n  client,\n  count = 1,\n  create = false,\n  meta,\n  nameTransformer,\n}: Pick<Required<Model>, 'meta'> & {\n  client: Client;\n  count?: number;\n  create?: boolean;\n  nameTransformer?: (value: string) => string;\n}): SetUniqueTypeNameResult => {\n  let result: SetUniqueTypeNameResult = {\n    created: false,\n    name: '',\n  };\n  let name = meta.name;\n  if (nameTransformer) {\n    name = nameTransformer(name);\n  }\n  if (count > 1) {\n    name = `${name}${count}`;\n  }\n  const type = client.types[name];\n  if (!type) {\n    if (create) {\n      client.types[name] = meta;\n      result = {\n        created: true,\n        name,\n      };\n    }\n  } else if (type.$ref === meta.$ref) {\n    result = {\n      created: false,\n      name,\n    };\n  } else {\n    result = setUniqueTypeName({\n      client,\n      count: count + 1,\n      create,\n      meta,\n      nameTransformer,\n    });\n  }\n  return result;\n};\n\nexport interface UnsetUniqueTypeNameResult {\n  /**\n   * Did this function delete a property from the `client.types` object?\n   */\n  deleted: boolean;\n  /**\n   * Unique name removed from the `client.types` object.\n   */\n  name: string;\n}\n\nexport const unsetUniqueTypeName = ({\n  client,\n  name,\n}: {\n  client: Client;\n  name: string;\n}): UnsetUniqueTypeNameResult => {\n  let result: UnsetUniqueTypeNameResult = {\n    deleted: false,\n    name: '',\n  };\n  if (!client.types[name]) {\n    return result;\n  }\n  delete client.types[name];\n  result = {\n    deleted: true,\n    name,\n  };\n  return result;\n};\n\n/**\n * Replaces any invalid characters from a parameter name.\n * For example: 'filter.someProperty' becomes 'filterSomeProperty'.\n */\nexport const transformTypeKeyName = (value: string): string => {\n  const config = getConfig();\n\n  // transform only for legacy clients\n  if (!isLegacyClient(config)) {\n    return value;\n  }\n\n  const name = stringCase({\n    case: 'camelCase',\n    value: sanitizeOperationParameterName(value),\n  }).replace(reservedJavaScriptKeywordsRegExp, '_$1');\n  return name;\n};\n","import type { Config } from '../../../types/config';\nimport { getConfig, isLegacyClient } from '../../../utils/config';\nimport { stringCase } from '../../../utils/stringCase';\nimport { transformTypeKeyName } from '../../../utils/type';\nimport type {\n  OperationParameter,\n  OperationResponse,\n} from '../interfaces/client';\nimport { sanitizeNamespaceIdentifier } from './sanitize';\n\nexport const getOperationResponseHeader = (\n  operationResponses: OperationResponse[],\n): string | null => {\n  const header = operationResponses.find(\n    (operationResponses) => operationResponses.in === 'header',\n  );\n  if (header) {\n    return header.name;\n  }\n  return null;\n};\n\n/**\n * Does this operation have at least one required parameter?\n * @returns boolean\n */\nexport const isOperationParameterRequired = (\n  parameters: OperationParameter[],\n) => {\n  const isRequired = parameters.some((parameter) => parameter.isRequired);\n  return isRequired;\n};\n\n/**\n * Attempts to parse response status code from string into number.\n * @param value string status code from OpenAPI definition\n * @returns Parsed status code or null if invalid value\n */\nexport const parseResponseStatusCode = (\n  value: string,\n): OperationResponse['code'] | null => {\n  if (value === 'default') {\n    return 'default';\n  }\n\n  if (value === '1XX') {\n    return '1XX';\n  }\n\n  if (value === '2XX') {\n    return '2XX';\n  }\n\n  if (value === '3XX') {\n    return '3XX';\n  }\n\n  if (value === '4XX') {\n    return '4XX';\n  }\n\n  if (value === '5XX') {\n    return '5XX';\n  }\n\n  if (/\\d{3}/g.test(value)) {\n    const code = Number.parseInt(value, 10);\n    if (code >= 100 && code < 600) {\n      return code;\n    }\n  }\n\n  return null;\n};\n\nexport const sorterByResponseStatusCode = (\n  a: OperationResponse,\n  b: OperationResponse,\n) => {\n  if (a.code > b.code) {\n    return 1;\n  }\n\n  if (a.code < b.code) {\n    return -1;\n  }\n\n  return 0;\n};\n\nconst isErrorStatusCode = (code: OperationResponse['code']) =>\n  code === '3XX' ||\n  code === '4XX' ||\n  code === '5XX' ||\n  (typeof code === 'number' && code >= 300);\n\nconst isSuccessStatusCode = (code: OperationResponse['code']) =>\n  code === '2XX' || (typeof code === 'number' && code >= 200 && code < 300);\n\n/**\n * Detects whether default response is meant to be used\n * for error or success response.\n */\nconst inferDefaultResponseTypes = (\n  response: OperationResponse,\n  responses: OperationResponse[],\n) => {\n  let types: Array<'error' | 'success'> = [];\n\n  const addResponseType = (type: (typeof types)[number]) => {\n    if (!types.includes(type)) {\n      types = [...types, type];\n    }\n  };\n\n  const hasSuccessResponse = responses.some(({ code }) =>\n    isSuccessStatusCode(code),\n  );\n  if (!hasSuccessResponse) {\n    addResponseType('success');\n  }\n\n  const description = (response.description ?? '').toLocaleLowerCase();\n  const $refs = response.$refs.join('|').toLocaleLowerCase();\n\n  // must be in lowercase\n  const errorKeywords = ['error', 'problem'];\n  const successKeywords = ['success'];\n\n  if (\n    successKeywords.some(\n      (keyword) => description.includes(keyword) || $refs.includes(keyword),\n    )\n  ) {\n    addResponseType('success');\n  }\n\n  if (\n    errorKeywords.some(\n      (keyword) => description.includes(keyword) || $refs.includes(keyword),\n    )\n  ) {\n    addResponseType('error');\n  }\n\n  if (!types.length) {\n    addResponseType('error');\n  }\n\n  return types;\n};\n\nexport const operationFilterFn = ({\n  config,\n  operationKey,\n}: {\n  config: Config;\n  operationKey: string;\n}): boolean => {\n  const regexp = config.plugins['@hey-api/sdk']?.config.filter\n    ? new RegExp(config.plugins['@hey-api/sdk']?.config.filter)\n    : undefined;\n  return !regexp || regexp.test(operationKey);\n};\n\n/**\n * Convert the input value to a correct operation (method) class name.\n * This will use the operation ID - if available - and otherwise fallback\n * on a generated name from the URL\n */\nexport const operationNameFn = ({\n  config,\n  method,\n  operationId,\n  path,\n}: {\n  config: Config;\n  method: string;\n  operationId: string | undefined;\n  path: string;\n}): string => {\n  if (config.plugins['@hey-api/sdk']?.config.operationId && operationId) {\n    return stringCase({\n      case: 'camelCase',\n      value: sanitizeNamespaceIdentifier(operationId),\n    });\n  }\n\n  let urlWithoutPlaceholders = path;\n\n  // legacy clients ignore the \"api-version\" param since we do not want to\n  // add it as the first/default parameter for each of the service calls\n  if (isLegacyClient(config)) {\n    urlWithoutPlaceholders = urlWithoutPlaceholders.replace(\n      /[^/]*?{api-version}.*?\\//g,\n      '',\n    );\n  }\n\n  urlWithoutPlaceholders = urlWithoutPlaceholders\n    .replace(/{(.*?)}/g, 'by-$1')\n    // replace slashes with hyphens for camelcase method at the end\n    .replace(/[/:+]/g, '-');\n\n  return stringCase({\n    case: 'camelCase',\n    value: `${method}-${urlWithoutPlaceholders}`,\n  });\n};\n\nexport const operationParameterFilterFn = (\n  parameter: OperationParameter,\n): boolean => {\n  const config = getConfig();\n\n  // legacy clients ignore the \"api-version\" param since we do not want to\n  // add it as the first/default parameter for each of the service calls\n  return !isLegacyClient(config) || parameter.prop !== 'api-version';\n};\n\nexport const operationParameterNameFn = (\n  parameter: Omit<OperationParameter, 'name'>,\n): string => {\n  const config = getConfig();\n\n  return !isLegacyClient(config)\n    ? parameter.prop\n    : transformTypeKeyName(parameter.prop);\n};\n\nexport const tagResponseTypes = (responses: OperationResponse[]) =>\n  responses.map((response) => {\n    const { code } = response;\n    if (code === 'default') {\n      response.responseTypes = inferDefaultResponseTypes(response, responses);\n    } else if (isSuccessStatusCode(code)) {\n      response.responseTypes = ['success'];\n    } else if (isErrorStatusCode(code)) {\n      response.responseTypes = ['error'];\n    }\n    return response;\n  });\n","import { IRContext } from '../ir/context';\nimport type { IR } from '../ir/types';\nimport type { Config } from '../types/config';\nimport { parseV2_0_X } from './2.0.x';\nimport { parseV3_0_X } from './3.0.x';\nimport { parseV3_1_X } from './3.1.x';\nimport type { Client } from './common/interfaces/client';\nimport type { OpenApi as LegacyOpenApi } from './common/interfaces/OpenApi';\nimport type { OpenApi } from './types';\nimport { parse as parseV2 } from './v2';\nimport { parse as parseV3 } from './v3';\n\nexport type {\n  Client,\n  Enum,\n  Method,\n  Model,\n  ModelMeta,\n  Operation,\n  OperationParameter,\n  OperationResponse,\n} from './common/interfaces/client';\nexport type { OpenApi } from './common/interfaces/OpenApi';\nexport { isOperationParameterRequired } from './common/parser/operation';\nexport {\n  ensureValidTypeScriptJavaScriptIdentifier,\n  sanitizeNamespaceIdentifier,\n  sanitizeOperationParameterName,\n} from './common/parser/sanitize';\nexport { getType } from './common/parser/type';\nexport type { OpenApiSchema as OpenApiV2Schema } from './v2/interfaces/OpenApiSchema';\nexport type { OpenApiSchema as OpenApiV3Schema } from './v3/interfaces/OpenApiSchema';\n\n/**\n * Parse the OpenAPI specification to a Client model that contains\n * all the models, services and schema's we should output.\n * @param openApi The OpenAPI spec that we have loaded from disk.\n */\nexport function parseLegacy({\n  openApi,\n}: {\n  openApi: unknown;\n}): Omit<Client, 'config'> {\n  const spec = openApi as LegacyOpenApi;\n\n  if ('openapi' in spec) {\n    return parseV3(spec);\n  }\n\n  if ('swagger' in spec) {\n    return parseV2(spec);\n  }\n\n  throw new Error(\n    `Unsupported OpenAPI specification: ${JSON.stringify(spec, null, 2)}`,\n  );\n}\n\n/**\n * @internal\n * Parse the resolved OpenAPI specification. This will populate and return\n * `context` with intermediate representation obtained from the parsed spec.\n */\nexport const parseOpenApiSpec = ({\n  config,\n  spec,\n}: {\n  config: Config;\n  spec: unknown;\n}): IR.Context | undefined => {\n  const context = new IRContext({\n    config,\n    spec: spec as OpenApi.V2_0_X | OpenApi.V3_0_X | OpenApi.V3_1_X,\n  });\n\n  if ('swagger' in context.spec) {\n    parseV2_0_X(context as IR.Context<OpenApi.V2_0_X>);\n    return context;\n  }\n\n  switch (context.spec.openapi) {\n    case '3.0.0':\n    case '3.0.1':\n    case '3.0.2':\n    case '3.0.3':\n    case '3.0.4':\n      parseV3_0_X(context as IR.Context<OpenApi.V3_0_X>);\n      return context;\n    case '3.1.0':\n    case '3.1.1':\n      parseV3_1_X(context as IR.Context<OpenApi.V3_1_X>);\n      return context;\n    default:\n      break;\n  }\n\n  throw new Error('Unsupported OpenAPI specification');\n};\n","import { compiler } from '../../../compiler';\nimport { TypeScriptFile } from '../../../generate/files';\nimport type { OpenApiV2Schema, OpenApiV3Schema } from '../../../openApi';\nimport { ensureValidTypeScriptJavaScriptIdentifier } from '../../../openApi';\nimport { getConfig } from '../../../utils/config';\nimport type { HeyApiSchemasPlugin } from './types';\n\nconst ensureValidSchemaOutput = (\n  schema: unknown,\n  parentKey?: string,\n): object => {\n  const config = getConfig();\n\n  if (Array.isArray(schema)) {\n    return schema.map((item) => ensureValidSchemaOutput(item));\n  }\n\n  if (typeof schema !== 'object' || schema === null) {\n    return schema as object;\n  }\n\n  const result = { ...schema };\n  Object.entries(result).forEach(([key, value]) => {\n    if (config.plugins['@hey-api/schemas']?.config.type === 'form') {\n      if (\n        [\n          'description',\n          'x-enum-descriptions',\n          'x-enum-varnames',\n          'x-enumNames',\n          'title',\n        ].includes(key) &&\n        parentKey !== 'properties'\n      ) {\n        // @ts-expect-error\n        delete result[key];\n        return;\n      }\n    }\n\n    // refs are encoded probably by json-schema-ref-parser, didn't investigate\n    // further\n    if (key === '$ref' && typeof value === 'string') {\n      // @ts-expect-error\n      result[key] = decodeURIComponent(value);\n    }\n\n    if (value && typeof value === 'object') {\n      // @ts-expect-error\n      result[key] = ensureValidSchemaOutput(value, key);\n    }\n  });\n  return result;\n};\n\nconst toSchemaName = (\n  name: string,\n  schema: OpenApiV2Schema | OpenApiV3Schema,\n): string => {\n  const config = getConfig();\n\n  const validName = ensureValidTypeScriptJavaScriptIdentifier(name);\n\n  const plugin = config.plugins['@hey-api/schemas'];\n\n  if (plugin?.config.nameBuilder) {\n    if (typeof plugin.config.nameBuilder === 'function') {\n      return plugin.config.nameBuilder(validName, schema);\n    } else {\n      return plugin.config.nameBuilder.replace('{{name}}', validName);\n    }\n  }\n\n  return `${validName}Schema`;\n};\n\nexport const handlerLegacy: HeyApiSchemasPlugin['LegacyHandler'] = ({\n  files,\n  openApi,\n  plugin,\n}) => {\n  const config = getConfig();\n\n  files.schemas = new TypeScriptFile({\n    dir: config.output.path,\n    exportFromIndex: plugin.config.exportFromIndex,\n    id: 'schemas',\n    name: 'schemas.ts',\n  });\n\n  const addSchema = (\n    name: string,\n    schema: OpenApiV2Schema | OpenApiV3Schema,\n  ) => {\n    const obj = ensureValidSchemaOutput(schema);\n    const expression = compiler.objectExpression({ obj });\n    const statement = compiler.constVariable({\n      assertion: 'const',\n      exportConst: true,\n      expression,\n      name: toSchemaName(name, schema),\n    });\n    files.schemas!.add(statement);\n  };\n\n  // OpenAPI 2.0\n  if ('swagger' in openApi) {\n    Object.entries(openApi.definitions ?? {}).forEach(([name, definition]) => {\n      addSchema(name, definition);\n    });\n  }\n\n  // OpenAPI 3.x\n  if ('openapi' in openApi) {\n    Object.entries(openApi.components?.schemas ?? {}).forEach(\n      ([name, schema]) => {\n        addSchema(name, schema);\n      },\n    );\n  }\n};\n","import { definePluginConfig } from '../../shared/utils/config';\nimport { handler } from './plugin';\nimport { handlerLegacy } from './plugin-legacy';\nimport type { HeyApiSchemasPlugin } from './types';\n\nexport const defaultConfig: HeyApiSchemasPlugin['Config'] = {\n  config: {\n    exportFromIndex: false,\n    nameBuilder: (name) => `${name}Schema`,\n    type: 'json',\n  },\n  handler,\n  handlerLegacy,\n  name: '@hey-api/schemas',\n  output: 'schemas',\n};\n\n/**\n * Type helper for `@hey-api/schemas` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import type { Comments } from '../../../compiler';\nimport { hasOperationDataRequired } from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { escapeComment } from '../../../utils/escape';\nimport { getClientPlugin } from '../../@hey-api/client-core/utils';\n\nexport const createOperationComment = ({\n  operation,\n}: {\n  operation: IR.OperationObject;\n}): Comments | undefined => {\n  const comments: Array<string> = [];\n\n  if (operation.summary) {\n    comments.push(escapeComment(operation.summary));\n  }\n\n  if (operation.description) {\n    comments.push(escapeComment(operation.description));\n  }\n\n  if (operation.deprecated) {\n    comments.push('@deprecated');\n  }\n\n  return comments.length ? comments : undefined;\n};\n\nexport const isOperationOptionsRequired = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}): boolean => {\n  const client = getClientPlugin(context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n  const plugin = context.config.plugins['@hey-api/sdk'];\n  return (\n    (plugin && !plugin.config.client && !plugin.config.instance) ||\n    isNuxtClient ||\n    hasOperationDataRequired(operation)\n  );\n};\n","export const nuxtTypeComposable = 'TComposable';\nexport const nuxtTypeDefault = 'DefaultT';\nexport const nuxtTypeResponse = 'ResT';\n\nexport const sdkId = 'sdk';\n","import ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport {\n  createOperationKey,\n  operationResponsesMap,\n} from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { irRef } from '../../../utils/ref';\nimport { stringCase } from '../../../utils/stringCase';\nimport { operationIrRef } from '../../shared/utils/ref';\nimport { typesId } from '../typescript/ref';\nimport { bigIntExpressions, dateExpressions } from './expressions';\nimport type { HeyApiTransformersPlugin } from './types';\n\ninterface OperationIRRef {\n  /**\n   * Operation ID\n   */\n  id: string;\n}\n\nexport const operationTransformerIrRef = ({\n  id,\n  type,\n}: OperationIRRef & {\n  type: 'data' | 'error' | 'response';\n}): string => {\n  let affix = '';\n  switch (type) {\n    case 'data':\n      affix = 'DataResponseTransformer';\n      break;\n    case 'error':\n      affix = 'ErrorResponseTransformer';\n      break;\n    case 'response':\n      affix = 'ResponseTransformer';\n      break;\n  }\n  return `${irRef}${stringCase({\n    // TODO: parser - do not pascalcase for functions, only for types\n    case: 'camelCase',\n    value: id,\n  })}${affix}`;\n};\n\nconst schemaIrRef = ({\n  $ref,\n  type,\n}: {\n  $ref: string;\n  type: 'response';\n}): string => {\n  let affix = '';\n  switch (type) {\n    case 'response':\n      affix = 'SchemaResponseTransformer';\n      break;\n  }\n  const parts = $ref.split('/');\n  return `${parts.slice(0, parts.length - 1).join('/')}/${stringCase({\n    case: 'camelCase',\n    value: parts[parts.length - 1]!,\n  })}${affix}`;\n};\n\nexport const schemaResponseTransformerRef = ({\n  $ref,\n}: {\n  $ref: string;\n}): string => schemaIrRef({ $ref, type: 'response' });\n\nexport const transformersId = 'transformers';\nconst dataVariableName = 'data';\n\nconst ensureStatements = (\n  nodes: Array<ts.Expression | ts.Statement>,\n): Array<ts.Statement> =>\n  nodes.map((node) =>\n    ts.isStatement(node)\n      ? node\n      : compiler.expressionToStatement({ expression: node }),\n  );\n\nconst isNodeReturnStatement = ({\n  node,\n}: {\n  node: ts.Expression | ts.Statement;\n}) => node.kind === ts.SyntaxKind.ReturnStatement;\n\nconst schemaResponseTransformerNodes = ({\n  plugin,\n  schema,\n}: {\n  plugin: HeyApiTransformersPlugin['Instance'];\n  schema: IR.SchemaObject;\n}): Array<ts.Expression | ts.Statement> => {\n  const identifierData = compiler.identifier({ text: dataVariableName });\n  const nodes = processSchemaType({\n    dataExpression: identifierData,\n    plugin,\n    schema,\n  });\n  // append return statement if one does not already exist\n  if (\n    nodes.length &&\n    !isNodeReturnStatement({ node: nodes[nodes.length - 1]! })\n  ) {\n    nodes.push(compiler.returnStatement({ expression: identifierData }));\n  }\n  return nodes;\n};\n\nconst processSchemaType = ({\n  dataExpression,\n  plugin,\n  schema,\n}: {\n  dataExpression?: ts.Expression | string;\n  plugin: HeyApiTransformersPlugin['Instance'];\n  schema: IR.SchemaObject;\n}): Array<ts.Expression | ts.Statement> => {\n  const file = plugin.context.file({ id: transformersId })!;\n\n  if (schema.$ref) {\n    let identifier = file.identifier({\n      $ref: schemaResponseTransformerRef({ $ref: schema.$ref }),\n      create: true,\n      namespace: 'value',\n    });\n\n    if (identifier.created && identifier.name) {\n      // create each schema response transformer only once\n      const refSchema = plugin.context.resolveIrRef<IR.SchemaObject>(\n        schema.$ref,\n      );\n      const nodes = schemaResponseTransformerNodes({\n        plugin,\n        schema: refSchema,\n      });\n      if (nodes.length) {\n        const node = compiler.constVariable({\n          expression: compiler.arrowFunction({\n            async: false,\n            multiLine: true,\n            parameters: [\n              {\n                name: dataVariableName,\n                // TODO: parser - add types, generate types without transforms\n                type: compiler.keywordTypeNode({ keyword: 'any' }),\n              },\n            ],\n            statements: ensureStatements(nodes),\n          }),\n          name: identifier.name,\n        });\n        file.add(node);\n      } else {\n        // the created schema response transformer was empty, do not generate\n        // it and prevent any future attempts\n        identifier = file.blockIdentifier({\n          $ref: schemaResponseTransformerRef({ $ref: schema.$ref }),\n          namespace: 'value',\n        });\n      }\n    }\n\n    if (identifier.name) {\n      const callExpression = compiler.callExpression({\n        functionName: identifier.name,\n        parameters: [dataExpression],\n      });\n\n      if (dataExpression) {\n        // In a map callback, the item needs to be returned, not just the transformation result\n        if (typeof dataExpression === 'string' && dataExpression === 'item') {\n          return [\n            compiler.returnStatement({\n              expression: callExpression,\n            }),\n          ];\n        }\n\n        return [\n          typeof dataExpression === 'string'\n            ? callExpression\n            : compiler.assignment({\n                left: dataExpression,\n                right: callExpression,\n              }),\n        ];\n      }\n    }\n\n    return [];\n  }\n\n  if (schema.type === 'array') {\n    if (!dataExpression || typeof dataExpression === 'string') {\n      return [];\n    }\n\n    // TODO: parser - handle tuples and complex arrays\n    const nodes = !schema.items\n      ? []\n      : processSchemaType({\n          dataExpression: 'item',\n          plugin,\n          schema: schema.items?.[0]\n            ? schema.items[0]\n            : {\n                ...schema,\n                type: undefined,\n              },\n        });\n\n    if (!nodes.length) {\n      return [];\n    }\n\n    // Ensure the map callback has a return statement for the item\n    const mapCallbackStatements = ensureStatements(nodes);\n    const hasReturnStatement = mapCallbackStatements.some((stmt) =>\n      isNodeReturnStatement({ node: stmt }),\n    );\n\n    if (!hasReturnStatement) {\n      mapCallbackStatements.push(\n        compiler.returnStatement({\n          expression: compiler.identifier({ text: 'item' }),\n        }),\n      );\n    }\n\n    return [\n      compiler.assignment({\n        left: dataExpression,\n        right: compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: dataExpression,\n            name: 'map',\n          }),\n          parameters: [\n            compiler.arrowFunction({\n              multiLine: true,\n              parameters: [\n                {\n                  name: 'item',\n                  type: 'any',\n                },\n              ],\n              statements: mapCallbackStatements,\n            }),\n          ],\n        }),\n      }),\n    ];\n  }\n\n  if (schema.type === 'object') {\n    let nodes: Array<ts.Expression | ts.Statement> = [];\n    const required = schema.required ?? [];\n\n    for (const name in schema.properties) {\n      const property = schema.properties[name]!;\n      const propertyAccessExpression = compiler.propertyAccessExpression({\n        expression: dataExpression || dataVariableName,\n        name,\n      });\n      const propertyNodes = processSchemaType({\n        dataExpression: propertyAccessExpression,\n        plugin,\n        schema: property,\n      });\n      if (!propertyNodes.length) {\n        continue;\n      }\n      const noNullableTypesInSchema = !property.items?.find(\n        (x) => x.type === 'null',\n      );\n      const requiredField = required.includes(name);\n      // Cannot fully rely on required fields\n      // Such value has to be present, but it doesn't guarantee that this value is not nullish\n      if (requiredField && noNullableTypesInSchema) {\n        nodes = nodes.concat(propertyNodes);\n      } else {\n        nodes.push(\n          // todo: Probably, it would make more sense to go with if(x !== undefined && x !== null) instead of if(x)\n          // this place influences all underlying transformers, while it's not exactly transformer itself\n          // Keep in mind that !!0 === false, so it already makes output for Bigint undesirable\n          compiler.ifStatement({\n            expression: propertyAccessExpression,\n            thenStatement: compiler.block({\n              statements: ensureStatements(propertyNodes),\n            }),\n          }),\n        );\n      }\n    }\n\n    return nodes;\n  }\n\n  if (schema.items) {\n    if (schema.items.length === 1) {\n      return processSchemaType({\n        dataExpression: 'item',\n        plugin,\n        schema: schema.items[0]!,\n      });\n    }\n\n    let arrayNodes: Array<ts.Expression | ts.Statement> = [];\n    // process 2 items if one of them is null\n    if (\n      schema.logicalOperator === 'and' ||\n      (schema.items.length === 2 &&\n        schema.items.find(\n          (item) => item.type === 'null' || item.type === 'void',\n        ))\n    ) {\n      for (const item of schema.items) {\n        const nodes = processSchemaType({\n          dataExpression: dataExpression || 'item',\n          plugin,\n          schema: item,\n        });\n        if (nodes.length) {\n          if (dataExpression) {\n            arrayNodes = arrayNodes.concat(nodes);\n          } else {\n            const identifierItem = compiler.identifier({ text: 'item' });\n            // processed means the item was transformed\n            arrayNodes.push(\n              compiler.ifStatement({\n                expression: identifierItem,\n                thenStatement: compiler.block({\n                  statements: ensureStatements(nodes),\n                }),\n              }),\n              compiler.returnStatement({ expression: identifierItem }),\n            );\n          }\n        }\n      }\n      return arrayNodes;\n    }\n\n    // assume enums do not contain transformable values\n    if (schema.type !== 'enum') {\n      if (\n        !(schema.items ?? []).every((item) =>\n          (\n            ['boolean', 'integer', 'null', 'number', 'string'] as ReadonlyArray<\n              typeof item.type\n            >\n          ).includes(item.type),\n        )\n      ) {\n        console.warn(\n          `❗️ Transformers warning: schema ${JSON.stringify(schema)} is too complex and won't be currently processed. This will likely produce an incomplete transformer which is not what you want. Please open an issue if you'd like this improved https://github.com/hey-api/openapi-ts/issues`,\n        );\n      }\n    }\n  }\n\n  for (const transformer of plugin.config.transformers ?? []) {\n    const t = transformer({\n      config: plugin.config,\n      dataExpression,\n      file,\n      schema,\n    });\n    if (t) {\n      return t;\n    }\n  }\n\n  return [];\n};\n\n// handles only response transformers for now\nexport const handler: HeyApiTransformersPlugin['Handler'] = ({ plugin }) => {\n  const file = plugin.createFile({\n    id: transformersId,\n    path: plugin.output,\n  });\n\n  if (plugin.config.dates) {\n    plugin.config.transformers = [\n      ...(plugin.config.transformers ?? []),\n      dateExpressions,\n    ];\n  }\n\n  if (plugin.config.bigInt) {\n    plugin.config.transformers = [\n      ...(plugin.config.transformers ?? []),\n      bigIntExpressions,\n    ];\n  }\n\n  plugin.forEach('operation', ({ operation }) => {\n    const { response } = operationResponsesMap(operation);\n\n    if (!response) {\n      return;\n    }\n\n    if (response.items && response.items.length > 1) {\n      if (plugin.context.config.logs.level === 'debug') {\n        console.warn(\n          `❗️ Transformers warning: route ${createOperationKey(operation)} has ${response.items.length} non-void success responses. This is currently not handled and we will not generate a response transformer. Please open an issue if you'd like this feature https://github.com/hey-api/openapi-ts/issues`,\n        );\n      }\n      return;\n    }\n\n    const identifierResponse = plugin.context\n      .file({ id: typesId })!\n      .identifier({\n        $ref: operationIrRef({\n          config: plugin.context.config,\n          id: operation.id,\n          type: 'response',\n        }),\n        namespace: 'type',\n      });\n    if (!identifierResponse.name) {\n      return;\n    }\n\n    let identifierResponseTransformer = file.identifier({\n      $ref: operationTransformerIrRef({ id: operation.id, type: 'response' }),\n      create: true,\n      namespace: 'value',\n    });\n    if (!identifierResponseTransformer.name) {\n      return;\n    }\n\n    // TODO: parser - consider handling simple string response which is also a date\n    const nodes = schemaResponseTransformerNodes({ plugin, schema: response });\n    if (nodes.length) {\n      file.import({\n        asType: true,\n        module: file.relativePathToFile({\n          context: plugin.context,\n          id: typesId,\n        }),\n        name: identifierResponse.name,\n      });\n      const responseTransformerNode = compiler.constVariable({\n        exportConst: true,\n        expression: compiler.arrowFunction({\n          async: true,\n          multiLine: true,\n          parameters: [\n            {\n              name: dataVariableName,\n              // TODO: parser - add types, generate types without transforms\n              type: compiler.keywordTypeNode({ keyword: 'any' }),\n            },\n          ],\n          returnType: compiler.typeReferenceNode({\n            typeArguments: [\n              compiler.typeReferenceNode({\n                typeName: identifierResponse.name,\n              }),\n            ],\n            typeName: 'Promise',\n          }),\n          statements: ensureStatements(nodes),\n        }),\n        name: identifierResponseTransformer.name,\n      });\n      file.add(responseTransformerNode);\n    } else {\n      // the created schema response transformer was empty, do not generate\n      // it and prevent any future attempts\n      identifierResponseTransformer = file.blockIdentifier({\n        $ref: operationTransformerIrRef({\n          id: operation.id,\n          type: 'response',\n        }),\n        namespace: 'value',\n      });\n    }\n  });\n};\n","import type ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport type { TypeScriptFile } from '../../../generate/files';\nimport type { IR } from '../../../ir/types';\nimport type { Config } from './types';\n\nexport type ExpressionTransformer = ({\n  config,\n  dataExpression,\n  file,\n  schema,\n}: {\n  config: Omit<Config, 'name'>;\n  dataExpression?: ts.Expression | string;\n  file: TypeScriptFile;\n  schema: IR.SchemaObject;\n}) => Array<ts.Expression> | undefined;\n\nexport const bigIntExpressions: ExpressionTransformer = ({\n  dataExpression,\n  schema,\n}) => {\n  if (schema.type !== 'integer' || schema.format !== 'int64') {\n    return;\n  }\n\n  const bigIntCallExpression =\n    dataExpression !== undefined\n      ? compiler.callExpression({\n          functionName: 'BigInt',\n          parameters: [\n            compiler.callExpression({\n              functionName: compiler.propertyAccessExpression({\n                expression: dataExpression,\n                name: 'toString',\n              }),\n            }),\n          ],\n        })\n      : undefined;\n\n  if (bigIntCallExpression) {\n    if (typeof dataExpression === 'string') {\n      return [bigIntCallExpression];\n    }\n\n    if (dataExpression) {\n      return [\n        compiler.assignment({\n          left: dataExpression,\n          right: bigIntCallExpression,\n        }),\n      ];\n    }\n  }\n\n  return;\n};\n\nexport const dateExpressions: ExpressionTransformer = ({\n  dataExpression,\n  schema,\n}) => {\n  if (\n    schema.type !== 'string' ||\n    !(schema.format === 'date' || schema.format === 'date-time')\n  ) {\n    return;\n  }\n\n  const identifierDate = compiler.identifier({ text: 'Date' });\n\n  if (typeof dataExpression === 'string') {\n    return [\n      compiler.newExpression({\n        argumentsArray: [compiler.identifier({ text: dataExpression })],\n        expression: identifierDate,\n      }),\n    ];\n  }\n\n  if (dataExpression) {\n    return [\n      compiler.assignment({\n        left: dataExpression,\n        right: compiler.newExpression({\n          argumentsArray: [dataExpression],\n          expression: identifierDate,\n        }),\n      }),\n    ];\n  }\n\n  return;\n};\n","import type { IR } from '../../../ir/types';\nimport type { Auth } from '../client-core/bundle/auth';\nimport type { HeyApiSdkPlugin } from './types';\n\n// TODO: parser - handle more security types\nconst securitySchemeObjectToAuthObject = ({\n  securitySchemeObject,\n}: {\n  securitySchemeObject: IR.SecurityObject;\n}): Auth | undefined => {\n  if (securitySchemeObject.type === 'openIdConnect') {\n    return {\n      scheme: 'bearer',\n      type: 'http',\n    };\n  }\n\n  if (securitySchemeObject.type === 'oauth2') {\n    if (\n      securitySchemeObject.flows.password ||\n      securitySchemeObject.flows.authorizationCode ||\n      securitySchemeObject.flows.clientCredentials ||\n      securitySchemeObject.flows.implicit\n    ) {\n      return {\n        scheme: 'bearer',\n        type: 'http',\n      };\n    }\n\n    return;\n  }\n\n  if (securitySchemeObject.type === 'apiKey') {\n    if (securitySchemeObject.in === 'header') {\n      return {\n        name: securitySchemeObject.name,\n        type: 'apiKey',\n      };\n    }\n\n    if (\n      securitySchemeObject.in === 'query' ||\n      securitySchemeObject.in == 'cookie'\n    ) {\n      return {\n        in: securitySchemeObject.in,\n        name: securitySchemeObject.name,\n        type: 'apiKey',\n      };\n    }\n\n    return;\n  }\n\n  if (securitySchemeObject.type === 'http') {\n    const scheme = securitySchemeObject.scheme.toLowerCase();\n    if (scheme === 'bearer' || scheme === 'basic') {\n      return {\n        scheme: scheme as 'bearer' | 'basic',\n        type: 'http',\n      };\n    }\n\n    return;\n  }\n\n  return;\n};\n\nexport const operationAuth = ({\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: HeyApiSdkPlugin['Instance'];\n}): Array<Auth> => {\n  if (!operation.security || !plugin.config.auth) {\n    return [];\n  }\n\n  const auth: Array<Auth> = [];\n\n  for (const securitySchemeObject of operation.security) {\n    const authObject = securitySchemeObjectToAuthObject({\n      securitySchemeObject,\n    });\n    if (authObject) {\n      auth.push(authObject);\n    } else {\n      console.warn(\n        `❗️ SDK warning: unsupported security scheme. Please open an issue if you'd like it added https://github.com/hey-api/openapi-ts/issues\\n${JSON.stringify(securitySchemeObject, null, 2)}`,\n      );\n    }\n  }\n\n  return auth;\n};\n","import type { IR } from '../../../ir/types';\nimport { sdkId } from './constants';\nimport type { HeyApiSdkPlugin } from './types';\n\nexport const createRequestValidator = ({\n  operation,\n  plugin,\n}: {\n  operation: IR.OperationObject;\n  plugin: HeyApiSdkPlugin['Instance'];\n}) => {\n  if (!plugin.config.validator.request) {\n    return;\n  }\n\n  const pluginValidator = plugin.getPlugin(plugin.config.validator.request);\n  if (!pluginValidator || !pluginValidator.api.createRequestValidator) {\n    return;\n  }\n\n  return pluginValidator.api.createRequestValidator({\n    file: plugin.context.file({ id: sdkId })!,\n    operation,\n    // @ts-expect-error\n    plugin: pluginValidator,\n  });\n};\n\nexport const createResponseValidator = ({\n  operation,\n  plugin,\n}: {\n  operation: IR.OperationObject;\n  plugin: HeyApiSdkPlugin['Instance'];\n}) => {\n  if (!plugin.config.validator.response) {\n    return;\n  }\n\n  const pluginValidator = plugin.getPlugin(plugin.config.validator.response);\n  if (!pluginValidator || !pluginValidator.api.createResponseValidator) {\n    return;\n  }\n\n  return pluginValidator.api.createResponseValidator({\n    file: plugin.context.file({ id: sdkId })!,\n    operation,\n    // @ts-expect-error\n    plugin: pluginValidator,\n  });\n};\n","import type ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport type { ObjectValue } from '../../../compiler/types';\nimport { clientApi, clientModulePath } from '../../../generate/client';\nimport type { TypeScriptFile } from '../../../generate/files';\nimport { statusCodeToGroup } from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { sanitizeNamespaceIdentifier } from '../../../openApi';\nimport { reservedJavaScriptKeywordsRegExp } from '../../../utils/regexp';\nimport { stringCase } from '../../../utils/stringCase';\nimport { transformClassName } from '../../../utils/transform';\nimport { clientId, getClientPlugin } from '../client-core/utils';\nimport {\n  operationTransformerIrRef,\n  transformersId,\n} from '../transformers/plugin';\nimport { importIdentifier } from '../typescript/ref';\nimport { operationAuth } from './auth';\nimport { nuxtTypeComposable, nuxtTypeDefault, sdkId } from './constants';\nimport type { HeyApiSdkPlugin } from './types';\nimport { createRequestValidator, createResponseValidator } from './validator';\n\ninterface ClassNameEntry {\n  /**\n   * Name of the class where this function appears.\n   */\n  className: string;\n  /**\n   * Name of the function within the class.\n   */\n  methodName: string;\n  /**\n   * JSONPath-like array to class location.\n   */\n  path: ReadonlyArray<string>;\n}\n\nconst operationClassName = ({\n  context,\n  value,\n}: {\n  context: IR.Context;\n  value: string;\n}) => {\n  const name = stringCase({\n    case: 'PascalCase',\n    value: sanitizeNamespaceIdentifier(value),\n  });\n  return transformClassName({\n    config: context.config,\n    name,\n  });\n};\n\nconst getOperationMethodName = ({\n  operation,\n  plugin,\n}: {\n  operation: IR.OperationObject;\n  plugin: {\n    config: Pick<\n      HeyApiSdkPlugin['Instance']['config'],\n      'asClass' | 'methodNameBuilder'\n    >;\n  };\n}) => {\n  if (plugin.config.methodNameBuilder) {\n    return plugin.config.methodNameBuilder(operation);\n  }\n\n  const handleIllegal = !plugin.config.asClass;\n  if (handleIllegal && operation.id.match(reservedJavaScriptKeywordsRegExp)) {\n    return `${operation.id}_`;\n  }\n\n  return operation.id;\n};\n\n/**\n * Returns a list of classes where this operation appears in the generated SDK.\n */\nexport const operationClasses = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: {\n    config: Pick<\n      HeyApiSdkPlugin['Instance']['config'],\n      'asClass' | 'classStructure' | 'instance'\n    >;\n  };\n}): Map<string, ClassNameEntry> => {\n  const classNames = new Map<string, ClassNameEntry>();\n\n  let className: string | undefined;\n  let methodName: string | undefined;\n  let classCandidates: Array<string> = [];\n\n  if (plugin.config.classStructure === 'auto' && operation.operationId) {\n    classCandidates = operation.operationId.split(/[./]/).filter(Boolean);\n    if (classCandidates.length > 1) {\n      const methodCandidate = classCandidates.pop()!;\n      methodName = stringCase({\n        case: 'camelCase',\n        value: sanitizeNamespaceIdentifier(methodCandidate),\n      });\n      className = classCandidates.pop()!;\n    }\n  }\n\n  const rootClasses = plugin.config.instance\n    ? [plugin.config.instance as string]\n    : (operation.tags ?? ['default']);\n\n  for (const rootClass of rootClasses) {\n    const finalClassName = operationClassName({\n      context,\n      value: className || rootClass,\n    });\n    classNames.set(rootClass, {\n      className: finalClassName,\n      methodName: methodName || getOperationMethodName({ operation, plugin }),\n      path: (className\n        ? [rootClass, ...classCandidates, className]\n        : [rootClass]\n      ).map((value) =>\n        operationClassName({\n          context,\n          value,\n        }),\n      ),\n    });\n  }\n\n  return classNames;\n};\n\nexport const operationOptionsType = ({\n  context,\n  file,\n  operation,\n  throwOnError,\n}: {\n  context: IR.Context;\n  file: TypeScriptFile;\n  operation: IR.OperationObject;\n  throwOnError?: string;\n}) => {\n  const client = getClientPlugin(context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n\n  const identifierData = importIdentifier({\n    context,\n    file,\n    operation,\n    type: 'data',\n  });\n  const identifierResponse = importIdentifier({\n    context,\n    file,\n    operation,\n    type: isNuxtClient ? 'response' : 'responses',\n  });\n\n  const optionsName = clientApi.Options.name;\n\n  if (isNuxtClient) {\n    return `${optionsName}<${nuxtTypeComposable}, ${identifierData.name || 'unknown'}, ${identifierResponse.name || 'unknown'}, ${nuxtTypeDefault}>`;\n  }\n\n  // TODO: refactor this to be more generic, works for now\n  if (throwOnError) {\n    return `${optionsName}<${identifierData.name || 'unknown'}, ${throwOnError}>`;\n  }\n  return identifierData.name\n    ? `${optionsName}<${identifierData.name}>`\n    : optionsName;\n};\n\n/**\n * Infers `responseType` value from provided response content type. This is\n * an adapted version of `getParseAs()` from the Fetch API client.\n *\n * From Axios documentation:\n * `responseType` indicates the type of data that the server will respond with\n * options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n * browser only: 'blob'\n */\nconst getResponseType = (\n  contentType: string | null | undefined,\n):\n  | 'arraybuffer'\n  | 'blob'\n  | 'document'\n  | 'json'\n  | 'stream'\n  | 'text'\n  | undefined => {\n  if (!contentType) {\n    return;\n  }\n\n  const cleanContent = contentType.split(';')[0]?.trim();\n\n  if (!cleanContent) {\n    return;\n  }\n\n  if (\n    cleanContent.startsWith('application/json') ||\n    cleanContent.endsWith('+json')\n  ) {\n    return 'json';\n  }\n\n  // Axios does not handle form data out of the box\n  // if (cleanContent === 'multipart/form-data') {\n  //   return 'formData';\n  // }\n\n  if (\n    ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n      cleanContent.startsWith(type),\n    )\n  ) {\n    return 'blob';\n  }\n\n  if (cleanContent.startsWith('text/')) {\n    return 'text';\n  }\n\n  return;\n};\n\nexport const operationStatements = ({\n  context,\n  isRequiredOptions,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  isRequiredOptions: boolean;\n  operation: IR.OperationObject;\n  plugin: HeyApiSdkPlugin['Instance'];\n}): Array<ts.Statement> => {\n  const file = context.file({ id: sdkId })!;\n  const sdkOutput = file.nameWithoutExtension();\n\n  const client = getClientPlugin(context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n\n  const identifierError = importIdentifier({\n    context,\n    file,\n    operation,\n    type: isNuxtClient ? 'error' : 'errors',\n  });\n  const identifierResponse = importIdentifier({\n    context,\n    file,\n    operation,\n    type: isNuxtClient ? 'response' : 'responses',\n  });\n\n  // TODO: transform parameters\n  // const query = {\n  //   BarBaz: options.query.bar_baz,\n  //   qux_quux: options.query.qux_quux,\n  //   fooBar: options.query.foo_bar,\n  // };\n\n  // if (operation.parameters) {\n  //   for (const name in operation.parameters.query) {\n  //     const parameter = operation.parameters.query[name]\n  //     if (parameter.name !== fieldName({ context, name: parameter.name })) {\n  //       console.warn(parameter.name)\n  //     }\n  //   }\n  // }\n\n  const requestOptions: ObjectValue[] = [];\n\n  if (operation.body) {\n    switch (operation.body.type) {\n      case 'form-data':\n        requestOptions.push({ spread: 'formDataBodySerializer' });\n        file.import({\n          module: clientModulePath({\n            config: context.config,\n            sourceOutput: sdkOutput,\n          }),\n          name: 'formDataBodySerializer',\n        });\n        break;\n      case 'json':\n        // jsonBodySerializer is the default, no need to specify\n        break;\n      case 'text':\n      case 'octet-stream':\n        // ensure we don't use any serializer by default\n        requestOptions.push({\n          key: 'bodySerializer',\n          value: null,\n        });\n        break;\n      case 'url-search-params':\n        requestOptions.push({ spread: 'urlSearchParamsBodySerializer' });\n        file.import({\n          module: clientModulePath({\n            config: context.config,\n            sourceOutput: sdkOutput,\n          }),\n          name: 'urlSearchParamsBodySerializer',\n        });\n        break;\n    }\n  }\n\n  // TODO: parser - set parseAs to skip inference if every response has the same\n  // content type. currently impossible because successes do not contain\n  // header information\n\n  for (const name in operation.parameters?.query) {\n    const parameter = operation.parameters.query[name]!;\n    if (\n      (parameter.schema.type === 'array' ||\n        parameter.schema.type === 'tuple') &&\n      (parameter.style !== 'form' || !parameter.explode)\n    ) {\n      // override the default settings for `querySerializer`\n      requestOptions.push({\n        key: 'querySerializer',\n        value: [\n          {\n            key: 'array',\n            value: [\n              {\n                key: 'explode',\n                value: false,\n              },\n              {\n                key: 'style',\n                value: 'form',\n              },\n            ],\n          },\n        ],\n      });\n      break;\n    }\n  }\n\n  const requestValidator = createRequestValidator({ operation, plugin });\n  if (requestValidator) {\n    requestOptions.push({\n      key: 'requestValidator',\n      value: requestValidator,\n    });\n  }\n\n  if (plugin.config.transformer === '@hey-api/transformers') {\n    const identifierTransformer = context\n      .file({ id: transformersId })!\n      .identifier({\n        $ref: operationTransformerIrRef({ id: operation.id, type: 'response' }),\n        namespace: 'value',\n      });\n\n    if (identifierTransformer.name) {\n      file.import({\n        module: file.relativePathToFile({\n          context,\n          id: transformersId,\n        }),\n        name: identifierTransformer.name,\n      });\n\n      requestOptions.push({\n        key: 'responseTransformer',\n        value: identifierTransformer.name,\n      });\n    }\n  }\n\n  if (client.name === '@hey-api/client-axios') {\n    // try to infer `responseType` option for Axios. We don't need this in\n    // Fetch API client because it automatically detects the correct response\n    // during runtime.\n    for (const statusCode in operation.responses) {\n      // this doesn't handle default status code for now\n      if (statusCodeToGroup({ statusCode }) === '2XX') {\n        const response = operation.responses[statusCode];\n        const responseType = getResponseType(response?.mediaType);\n        if (responseType) {\n          requestOptions.push({\n            key: 'responseType',\n            value: responseType,\n          });\n          break;\n        }\n      }\n    }\n  }\n\n  const responseValidator = createResponseValidator({ operation, plugin });\n  if (responseValidator) {\n    requestOptions.push({\n      key: 'responseValidator',\n      value: responseValidator,\n    });\n  }\n\n  if (plugin.config.responseStyle === 'data') {\n    requestOptions.push({\n      key: 'responseStyle',\n      value: plugin.config.responseStyle,\n    });\n  }\n\n  const auth = operationAuth({ context, operation, plugin });\n  if (auth.length) {\n    requestOptions.push({\n      key: 'security',\n      value: compiler.arrayLiteralExpression({ elements: auth }),\n    });\n  }\n\n  requestOptions.push({\n    key: 'url',\n    value: operation.path,\n  });\n\n  // options must go last to allow overriding parameters above\n  requestOptions.push({ spread: 'options' });\n\n  if (operation.body) {\n    const parameterContentType = operation.parameters?.header?.['content-type'];\n    const hasRequiredContentType = Boolean(parameterContentType?.required);\n    // spreading required Content-Type on generated header would throw a TypeScript error\n    if (!hasRequiredContentType) {\n      const spread = compiler.propertyAccessExpression({\n        expression: compiler.identifier({ text: 'options' }),\n        isOptional: !isRequiredOptions,\n        name: 'headers',\n      });\n      requestOptions.push({\n        key: 'headers',\n        value: [\n          {\n            key: parameterContentType?.name ?? 'Content-Type',\n            // form-data does not need Content-Type header, browser will set it automatically\n            value:\n              operation.body.type === 'form-data'\n                ? null\n                : operation.body.mediaType,\n          },\n          {\n            spread,\n          },\n        ],\n      });\n    }\n  }\n\n  const responseType = identifierResponse.name || 'unknown';\n  const errorType = identifierError.name || 'unknown';\n\n  const heyApiClient = plugin.config.client\n    ? file.import({\n        alias: '_heyApiClient',\n        module: file.relativePathToFile({\n          context,\n          id: clientId,\n        }),\n        name: 'client',\n      })\n    : undefined;\n\n  const optionsClient = compiler.propertyAccessExpression({\n    expression: compiler.identifier({ text: 'options' }),\n    isOptional: !isRequiredOptions,\n    name: 'client',\n  });\n\n  let clientExpression: ts.Expression;\n\n  if (plugin.config.instance) {\n    clientExpression = compiler.binaryExpression({\n      left: optionsClient,\n      operator: '??',\n      right: compiler.propertyAccessExpression({\n        expression: compiler.this(),\n        name: '_client',\n      }),\n    });\n  } else if (heyApiClient?.name) {\n    clientExpression = compiler.binaryExpression({\n      left: optionsClient,\n      operator: '??',\n      right: compiler.identifier({ text: heyApiClient.name }),\n    });\n  } else {\n    clientExpression = optionsClient;\n  }\n\n  const types: Array<string | ts.StringLiteral> = [];\n  if (isNuxtClient) {\n    types.push(\n      nuxtTypeComposable,\n      `${responseType} | ${nuxtTypeDefault}`,\n      errorType,\n      nuxtTypeDefault,\n    );\n  } else {\n    types.push(responseType, errorType, 'ThrowOnError');\n  }\n\n  if (plugin.config.responseStyle === 'data') {\n    types.push(compiler.stringLiteral({ text: plugin.config.responseStyle }));\n  }\n\n  return [\n    compiler.returnFunctionCall({\n      args: [\n        compiler.objectExpression({\n          identifiers: ['responseTransformer'],\n          obj: requestOptions,\n        }),\n      ],\n      name: compiler.propertyAccessExpression({\n        expression: clientExpression,\n        name: compiler.identifier({ text: operation.method }),\n      }),\n      types,\n    }),\n  ];\n};\n","import type ts from 'typescript';\n\nimport type { Comments, FunctionParameter } from '../../../compiler';\nimport { compiler } from '../../../compiler';\nimport type {\n  FunctionTypeParameter,\n  ObjectValue,\n} from '../../../compiler/types';\nimport { clientApi, clientModulePath } from '../../../generate/client';\nimport { TypeScriptFile } from '../../../generate/files';\nimport type { IR } from '../../../ir/types';\nimport { isOperationParameterRequired } from '../../../openApi';\nimport type {\n  Client,\n  Model,\n  Operation,\n  OperationParameter,\n  Service,\n} from '../../../types/client';\nimport type { Config as ClientConfig } from '../../../types/config';\nimport {\n  getConfig,\n  isLegacyClient,\n  legacyNameFromConfig,\n} from '../../../utils/config';\nimport { escapeComment, escapeName } from '../../../utils/escape';\nimport { reservedJavaScriptKeywordsRegExp } from '../../../utils/regexp';\nimport { stringCase } from '../../../utils/stringCase';\nimport { transformClassName } from '../../../utils/transform';\nimport { setUniqueTypeName } from '../../../utils/type';\nimport { unique } from '../../../utils/unique';\nimport { getClientPlugin } from '../client-core/utils';\nimport type { HeyApiSdkPlugin } from './types';\n\ntype OnNode = (node: ts.Node) => void;\ntype OnImport = (name: string) => void;\n\nexport const generateImport = ({\n  meta,\n  onImport,\n  ...setUniqueTypeNameArgs\n}: Pick<Parameters<typeof setUniqueTypeName>[0], 'client' | 'nameTransformer'> &\n  Pick<Model, 'meta'> & {\n    onImport: OnImport;\n  }) => {\n  // generate imports only for top-level models\n  if (!meta) {\n    // TODO: this used to return undefined. We could refactor this function to\n    // return undefined again, but we will need to improve types so we can safely\n    // do `const { name } = generateImport({ meta: ... })` (note when meta is defined\n    // we guarantee the response to be an object). For now, nothing relies on this\n    // response shape except for plugins, so it was acceptable to patch it that way\n    return { created: false, name: '' };\n  }\n\n  const { created, name } = setUniqueTypeName({\n    meta,\n    ...setUniqueTypeNameArgs,\n  });\n  if (name) {\n    onImport(name);\n  }\n  return { created, name };\n};\n\nexport const modelResponseTransformerTypeName = (name: string) =>\n  `${name}ModelResponseTransformer`;\n\nexport const operationDataTypeName = (name: string) =>\n  `${stringCase({\n    case: 'PascalCase',\n    value: name,\n  })}Data`;\n\nexport const operationErrorTypeName = (name: string) =>\n  `${stringCase({\n    case: 'PascalCase',\n    value: name,\n  })}Error`;\n\n// operation response type ends with \"Response\", it's enough to append \"Transformer\"\nexport const operationResponseTransformerTypeName = (name: string) =>\n  `${name}Transformer`;\n\nexport const operationResponseTypeName = (name: string) =>\n  `${stringCase({\n    case: 'PascalCase',\n    value: name,\n  })}Response`;\n\n/**\n * @param importedType unique type name returned from `setUniqueTypeName()`\n * @returns options type\n */\nexport const operationOptionsLegacyParserType = ({\n  importedType,\n  throwOnError,\n}: {\n  importedType?: string | false;\n  throwOnError?: string;\n}) => {\n  const optionsName = clientApi.OptionsLegacyParser.name;\n  // TODO: refactor this to be more generic, works for now\n  if (throwOnError) {\n    return `${optionsName}<${importedType || 'unknown'}, ${throwOnError}>`;\n  }\n  return importedType ? `${optionsName}<${importedType}>` : optionsName;\n};\n\nconst toOperationParamType = (\n  client: Client,\n  operation: Operation,\n): FunctionParameter[] => {\n  const config = getConfig();\n\n  const { name: importedType } = setUniqueTypeName({\n    client,\n    meta: {\n      // TODO: this should be exact ref to operation for consistency,\n      // but name should work too as operation ID is unique\n      $ref: operation.name,\n      name: operation.name,\n    },\n    nameTransformer: operationDataTypeName,\n  });\n\n  const isRequired = isOperationParameterRequired(operation.parameters);\n\n  if (!isLegacyClient(config)) {\n    return [\n      {\n        isRequired,\n        name: 'options',\n        type: operationOptionsLegacyParserType({\n          importedType,\n          throwOnError: 'ThrowOnError',\n        }),\n      },\n    ];\n  }\n\n  if (!operation.parameters.length) {\n    return [];\n  }\n\n  const getDefaultPrintable = (\n    p: OperationParameter | Model,\n  ): string | undefined => {\n    if (p.default === undefined) {\n      return;\n    }\n    return JSON.stringify(p.default, null, 4);\n  };\n\n  // legacy configuration\n  if (!config.useOptions) {\n    return operation.parameters.map((p) => {\n      const typePath = `${importedType}['${p.name}']`;\n      return {\n        default: p?.default,\n        isRequired:\n          (!p.isRequired && !getDefaultPrintable(p) ? '?' : '') === '',\n        name: p.name,\n        type: typePath,\n      };\n    });\n  }\n\n  return [\n    {\n      default: isRequired ? undefined : {},\n      name: 'data',\n      type: importedType,\n    },\n  ];\n};\n\nconst toOperationReturnType = (client: Client, operation: Operation) => {\n  const config = getConfig();\n\n  let returnType = compiler.typeNode('void');\n\n  const successResponses = operation.responses.filter((response) =>\n    response.responseTypes.includes('success'),\n  );\n\n  // TODO: we should return nothing when successes don't exist\n  // can't remove this logic without removing request/name config\n  // as it complicates things\n  if (successResponses.length) {\n    const { name: importedType } = setUniqueTypeName({\n      client,\n      meta: {\n        // TODO: this should be exact ref to operation for consistency,\n        // but name should work too as operation ID is unique\n        $ref: operation.name,\n        name: operation.name,\n      },\n      nameTransformer: operationResponseTypeName,\n    });\n    returnType = compiler.typeUnionNode({\n      types: [importedType],\n    });\n  }\n\n  if (\n    config.useOptions &&\n    config.plugins['@hey-api/sdk']?.config.response === 'response'\n  ) {\n    returnType = compiler.typeNode('ApiResult', [returnType]);\n  }\n\n  const clientPlugin = getClientPlugin(config);\n  if (clientPlugin.name === 'legacy/angular') {\n    returnType = compiler.typeNode('Observable', [returnType]);\n  } else {\n    returnType = compiler.typeNode('CancelablePromise', [returnType]);\n  }\n\n  return returnType;\n};\n\nconst toOperationComment = (operation: Operation): Comments => {\n  const config = getConfig();\n\n  if (!isLegacyClient(config)) {\n    const comment = [\n      operation.deprecated && '@deprecated',\n      operation.summary && escapeComment(operation.summary),\n      operation.description && escapeComment(operation.description),\n    ];\n    return comment;\n  }\n\n  let params: string[] = [];\n\n  if (operation.parameters.length) {\n    if (config.useOptions) {\n      params = [\n        '@param data The data for the request.',\n        ...operation.parameters.map(\n          (parameter) =>\n            `@param data.${parameter.name} ${parameter.description ? escapeComment(parameter.description) : ''}`,\n        ),\n      ];\n    } else {\n      params = operation.parameters.map(\n        (parameter) =>\n          `@param ${parameter.name} ${parameter.description ? escapeComment(parameter.description) : ''}`,\n      );\n    }\n  }\n\n  const successResponses = operation.responses.filter((response) =>\n    response.responseTypes.includes('success'),\n  );\n\n  const comment = [\n    operation.deprecated && '@deprecated',\n    operation.summary && escapeComment(operation.summary),\n    operation.description && escapeComment(operation.description),\n    ...params,\n    ...successResponses.map(\n      (response) =>\n        `@returns ${response.type} ${response.description ? escapeComment(response.description) : ''}`,\n    ),\n    '@throws ApiError',\n  ];\n  return comment;\n};\n\nconst toRequestOptions = ({\n  client,\n  onClientImport,\n  onImport,\n  operation,\n}: {\n  client: Client;\n  onClientImport: OnImport | undefined;\n  onImport: OnImport;\n  operation: Operation;\n}) => {\n  const config = getConfig();\n\n  const name = operationResponseTypeName(operation.name);\n  const { name: responseTransformerName } = setUniqueTypeName({\n    client,\n    meta: {\n      $ref: `transformers/${name}`,\n      name,\n    },\n    nameTransformer: operationResponseTransformerTypeName,\n  });\n\n  if (responseTransformerName) {\n    onImport(responseTransformerName);\n  }\n\n  if (!isLegacyClient(config)) {\n    let obj: ObjectValue[] = [\n      {\n        spread: 'options',\n      },\n    ];\n\n    const bodyParameters = operation.parameters.filter(\n      (parameter) => parameter.in === 'body' || parameter.in === 'formData',\n    );\n    const contents = bodyParameters\n      .map(\n        (parameter) =>\n          parameter.mediaType ||\n          (parameter.in === 'formData' ? 'multipart/form-data' : undefined),\n      )\n      .filter(Boolean)\n      .filter(unique);\n    if (contents.length === 1) {\n      if (contents[0] === 'multipart/form-data') {\n        obj = [\n          ...obj,\n          {\n            spread: 'formDataBodySerializer',\n          },\n          {\n            key: 'headers',\n            value: [\n              {\n                // no need for Content-Type header, browser will set it automatically\n                key: 'Content-Type',\n                value: null,\n              },\n              {\n                spread: 'options?.headers',\n              },\n            ],\n          },\n        ];\n        onClientImport?.('formDataBodySerializer');\n      }\n\n      if (contents[0] === 'application/x-www-form-urlencoded') {\n        obj = [\n          ...obj,\n          {\n            spread: 'urlSearchParamsBodySerializer',\n          },\n          {\n            key: 'headers',\n            value: [\n              {\n                key: 'Content-Type',\n                value: contents[0],\n              },\n              {\n                spread: 'options?.headers',\n              },\n            ],\n          },\n        ];\n        onClientImport?.('urlSearchParamsBodySerializer');\n      }\n    }\n\n    // TODO: set parseAs to skip inference if every result has the same\n    // content type. currently impossible because successes do not contain\n    // header information\n\n    obj = [\n      ...obj,\n      {\n        key: 'url',\n        value: operation.path,\n      },\n    ];\n\n    if (responseTransformerName) {\n      obj = [\n        ...obj,\n        {\n          key: 'responseTransformer',\n          value: responseTransformerName,\n        },\n      ];\n    }\n\n    return compiler.objectExpression({\n      identifiers: ['responseTransformer'],\n      obj,\n    });\n  }\n\n  const toObj = (parameters: OperationParameter[]) =>\n    parameters.reduce(\n      (prev, curr) => {\n        const key = curr.prop;\n        const value = config.useOptions ? `data.${curr.name}` : curr.name;\n        if (key === value) {\n          prev[key] = key;\n        } else if (escapeName(key) === key) {\n          prev[key] = value;\n        } else {\n          prev[`'${key}'`] = value;\n        }\n        return prev;\n      },\n      {} as Record<string, unknown>,\n    );\n\n  const obj: Record<string, any> = {\n    method: operation.method,\n    url: operation.path,\n  };\n\n  if (operation.parametersPath.length) {\n    obj.path = toObj(operation.parametersPath);\n  }\n\n  if (operation.parametersCookie.length) {\n    obj.cookies = toObj(operation.parametersCookie);\n  }\n\n  if (operation.parametersHeader.length) {\n    obj.headers = toObj(operation.parametersHeader);\n  }\n\n  if (operation.parametersQuery.length) {\n    obj.query = toObj(operation.parametersQuery);\n  }\n\n  if (operation.parametersForm.length) {\n    obj.formData = toObj(operation.parametersForm);\n  }\n\n  if (operation.parametersBody) {\n    if (operation.parametersBody.in === 'formData') {\n      if (config.useOptions) {\n        obj.formData = `data.${operation.parametersBody.name}`;\n      } else {\n        obj.formData = operation.parametersBody.name;\n      }\n    }\n    if (operation.parametersBody.in === 'body') {\n      if (config.useOptions) {\n        obj.body = `data.${operation.parametersBody.name}`;\n      } else {\n        obj.body = operation.parametersBody.name;\n      }\n    }\n  }\n\n  if (operation.parametersBody?.mediaType) {\n    obj.mediaType = operation.parametersBody?.mediaType;\n  }\n\n  if (operation.responseHeader) {\n    obj.responseHeader = operation.responseHeader;\n  }\n\n  if (responseTransformerName) {\n    obj.responseTransformer = responseTransformerName;\n  }\n\n  const errorResponses = operation.responses.filter((response) =>\n    response.responseTypes.includes('error'),\n  );\n  if (errorResponses.length > 0) {\n    const errors: Record<number | string, string> = {};\n    errorResponses.forEach((response) => {\n      errors[response.code] = response.description ?? '';\n    });\n    obj.errors = errors;\n  }\n\n  return compiler.objectExpression({\n    identifiers: [\n      'body',\n      'cookies',\n      'formData',\n      'headers',\n      'path',\n      'query',\n      'responseTransformer',\n    ],\n    obj,\n    shorthand: true,\n  });\n};\n\nexport const serviceFunctionIdentifier = ({\n  config,\n  handleIllegal,\n  id,\n  operation,\n}: {\n  config: ClientConfig;\n  handleIllegal?: boolean;\n  id: string;\n  operation: IR.OperationObject | Operation;\n}) => {\n  if (config.plugins['@hey-api/sdk']?.config.methodNameBuilder) {\n    return config.plugins['@hey-api/sdk'].config.methodNameBuilder(operation);\n  }\n\n  if (handleIllegal && id.match(reservedJavaScriptKeywordsRegExp)) {\n    return `${id}_`;\n  }\n\n  return id;\n};\n\nconst toOperationStatements = ({\n  client,\n  onClientImport,\n  onImport,\n  operation,\n}: {\n  client: Client;\n  onClientImport?: OnImport;\n  onImport: OnImport;\n  operation: Operation;\n}) => {\n  const config = getConfig();\n\n  const options = toRequestOptions({\n    client,\n    onClientImport,\n    onImport,\n    operation,\n  });\n\n  if (!isLegacyClient(config)) {\n    const errorType = setUniqueTypeName({\n      client,\n      meta: {\n        // TODO: this should be exact ref to operation for consistency,\n        // but name should work too as operation ID is unique\n        $ref: operation.name,\n        name: operation.name,\n      },\n      nameTransformer: operationErrorTypeName,\n    }).name;\n    const successResponses = operation.responses.filter((response) =>\n      response.responseTypes.includes('success'),\n    );\n    const responseType = successResponses.length\n      ? setUniqueTypeName({\n          client,\n          meta: {\n            // TODO: this should be exact ref to operation for consistency,\n            // but name should work too as operation ID is unique\n            $ref: operation.name,\n            name: operation.name,\n          },\n          nameTransformer: operationResponseTypeName,\n        }).name\n      : 'void';\n    return [\n      compiler.returnFunctionCall({\n        args: [options],\n        name: `(options?.client ?? client).${operation.method.toLocaleLowerCase()}`,\n        types:\n          errorType && responseType\n            ? [responseType, errorType, 'ThrowOnError']\n            : errorType\n              ? ['unknown', errorType, 'ThrowOnError']\n              : responseType\n                ? [responseType, 'unknown', 'ThrowOnError']\n                : [],\n      }),\n    ];\n  }\n\n  if (legacyNameFromConfig(config)) {\n    return [\n      compiler.returnFunctionCall({\n        args: [options],\n        name: 'this.httpRequest.request',\n      }),\n    ];\n  }\n\n  const clientPlugin = getClientPlugin(config);\n  if (clientPlugin.name === 'legacy/angular') {\n    return [\n      compiler.returnFunctionCall({\n        args: ['OpenAPI', 'this.http', options],\n        name: '__request',\n      }),\n    ];\n  }\n\n  return [\n    compiler.returnFunctionCall({\n      args: ['OpenAPI', options],\n      name: '__request',\n    }),\n  ];\n};\n\nconst processService = ({\n  client,\n  onClientImport,\n  onImport,\n  onNode,\n  service,\n}: {\n  client: Client;\n  onClientImport: OnImport;\n  onImport: OnImport;\n  onNode: OnNode;\n  service: Service;\n}) => {\n  const config = getConfig();\n\n  const clientPlugin = getClientPlugin(config);\n  const isLegacy = isLegacyClient(config);\n\n  for (const operation of service.operations) {\n    if (operation.parameters.length) {\n      generateImport({\n        client,\n        meta: {\n          // TODO: this should be exact ref to operation for consistency,\n          // but name should work too as operation ID is unique\n          $ref: operation.name,\n          name: operation.name,\n        },\n        nameTransformer: operationDataTypeName,\n        onImport,\n      });\n    }\n\n    if (!isLegacy) {\n      generateImport({\n        client,\n        meta: {\n          // TODO: this should be exact ref to operation for consistency,\n          // but name should work too as operation ID is unique\n          $ref: operation.name,\n          name: operation.name,\n        },\n        nameTransformer: operationErrorTypeName,\n        onImport,\n      });\n    }\n\n    const successResponses = operation.responses.filter((response) =>\n      response.responseTypes.includes('success'),\n    );\n    if (successResponses.length) {\n      generateImport({\n        client,\n        meta: {\n          // TODO: this should be exact ref to operation for consistency,\n          // but name should work too as operation ID is unique\n          $ref: operation.name,\n          name: operation.name,\n        },\n        nameTransformer: operationResponseTypeName,\n        onImport,\n      });\n    }\n  }\n\n  const throwOnErrorTypeGeneric: FunctionTypeParameter = {\n    default:\n      ('throwOnError' in clientPlugin.config\n        ? clientPlugin.config.throwOnError\n        : false) ?? false,\n    extends: 'boolean',\n    name: 'ThrowOnError',\n  };\n\n  if (\n    !config.plugins['@hey-api/sdk']?.config.asClass &&\n    !legacyNameFromConfig(config)\n  ) {\n    for (const operation of service.operations) {\n      const compileFunctionParams = {\n        parameters: toOperationParamType(client, operation),\n        returnType: !isLegacy\n          ? undefined\n          : toOperationReturnType(client, operation),\n        statements: toOperationStatements({\n          client,\n          onClientImport,\n          onImport,\n          operation,\n        }),\n        types: !isLegacy ? [throwOnErrorTypeGeneric] : undefined,\n      };\n      const expression =\n        clientPlugin.name === 'legacy/angular'\n          ? compiler.anonymousFunction(compileFunctionParams)\n          : compiler.arrowFunction(compileFunctionParams);\n      const statement = compiler.constVariable({\n        comment: toOperationComment(operation),\n        exportConst: true,\n        expression,\n        name: serviceFunctionIdentifier({\n          config,\n          handleIllegal: true,\n          id: operation.name,\n          operation,\n        }),\n      });\n      onNode(statement);\n    }\n    return;\n  }\n\n  let members: ts.ClassElement[] = service.operations.map((operation) => {\n    const node = compiler.methodDeclaration({\n      accessLevel: 'public',\n      comment: toOperationComment(operation),\n      isStatic:\n        legacyNameFromConfig(config) === undefined &&\n        clientPlugin.name !== 'legacy/angular',\n      name: serviceFunctionIdentifier({\n        config,\n        id: operation.name,\n        operation,\n      }),\n      parameters: toOperationParamType(client, operation),\n      returnType: !isLegacy\n        ? undefined\n        : toOperationReturnType(client, operation),\n      statements: toOperationStatements({\n        client,\n        onClientImport,\n        onImport,\n        operation,\n      }),\n      types: !isLegacy ? [throwOnErrorTypeGeneric] : undefined,\n    });\n    return node;\n  });\n\n  if (!members.length) {\n    return;\n  }\n\n  // Push constructor to front if needed\n  if (legacyNameFromConfig(config)) {\n    members = [\n      compiler.constructorDeclaration({\n        multiLine: false,\n        parameters: [\n          {\n            accessLevel: 'public',\n            isReadOnly: true,\n            name: 'httpRequest',\n            type: 'BaseHttpRequest',\n          },\n        ],\n      }),\n      ...members,\n    ];\n  } else if (clientPlugin.name === 'legacy/angular') {\n    members = [\n      compiler.constructorDeclaration({\n        multiLine: false,\n        parameters: [\n          {\n            accessLevel: 'public',\n            isReadOnly: true,\n            name: 'http',\n            type: 'HttpClient',\n          },\n        ],\n      }),\n      ...members,\n    ];\n  }\n\n  const _members: Array<ts.ClassElement> = [];\n  members.forEach((member, index) => {\n    // add newline between each class member\n    if (index) {\n      // @ts-expect-error\n      _members.push(compiler.identifier({ text: '\\n' }));\n    }\n\n    _members.push(member);\n  });\n\n  const statement = compiler.classDeclaration({\n    decorator:\n      clientPlugin.name === 'legacy/angular'\n        ? { args: [{ providedIn: 'root' }], name: 'Injectable' }\n        : undefined,\n    exportClass: true,\n    name: transformClassName({\n      config,\n      name: service.name,\n    }),\n    nodes: _members,\n  });\n  onNode(statement);\n};\n\nexport const handlerLegacy: HeyApiSdkPlugin['LegacyHandler'] = ({\n  client,\n  files,\n  plugin,\n}) => {\n  const config = getConfig();\n\n  const isLegacy = isLegacyClient(config);\n\n  const sdkOutput = 'sdk';\n\n  files.sdk = new TypeScriptFile({\n    dir: config.output.path,\n    exportFromIndex: plugin.config.exportFromIndex,\n    id: 'sdk',\n    name: `${sdkOutput}.ts`,\n  });\n\n  // Import required packages and core files.\n  if (!isLegacy) {\n    files.sdk.import({\n      module: clientModulePath({ config, sourceOutput: sdkOutput }),\n      name: 'createClient',\n    });\n    files.sdk.import({\n      module: clientModulePath({ config, sourceOutput: sdkOutput }),\n      name: 'createConfig',\n    });\n    files.sdk.import({\n      ...clientApi.OptionsLegacyParser,\n      module: clientModulePath({ config, sourceOutput: sdkOutput }),\n    });\n  } else {\n    const clientPlugin = getClientPlugin(config);\n    if (clientPlugin.name === 'legacy/angular') {\n      files.sdk.import({\n        module: '@angular/core',\n        name: 'Injectable',\n      });\n\n      if (!legacyNameFromConfig(config)) {\n        files.sdk.import({\n          module: '@angular/common/http',\n          name: 'HttpClient',\n        });\n      }\n\n      files.sdk.import({\n        asType: true,\n        module: 'rxjs',\n        name: 'Observable',\n      });\n    } else {\n      files.sdk.import({\n        asType: true,\n        module: './core/CancelablePromise',\n        name: 'CancelablePromise',\n      });\n    }\n\n    if (config.plugins['@hey-api/sdk']?.config.response === 'response') {\n      files.sdk.import({\n        asType: true,\n        module: './core/ApiResult',\n        name: 'ApiResult',\n      });\n    }\n\n    if (legacyNameFromConfig(config)) {\n      const clientPlugin = getClientPlugin(config);\n      files.sdk.import({\n        asType: clientPlugin.name !== 'legacy/angular',\n        module: './core/BaseHttpRequest',\n        name: 'BaseHttpRequest',\n      });\n    } else {\n      files.sdk.import({\n        module: './core/OpenAPI',\n        name: 'OpenAPI',\n      });\n      files.sdk.import({\n        alias: '__request',\n        module: './core/request',\n        name: 'request',\n      });\n    }\n  }\n\n  // define client first\n  if (!isLegacy) {\n    const clientPlugin = getClientPlugin(config);\n    const statement = compiler.constVariable({\n      exportConst: true,\n      expression: compiler.callExpression({\n        functionName: 'createClient',\n        parameters: [\n          compiler.callExpression({\n            functionName: 'createConfig',\n            parameters: [\n              'throwOnError' in clientPlugin && clientPlugin.throwOnError\n                ? compiler.objectExpression({\n                    obj: [\n                      {\n                        key: 'throwOnError',\n                        value: true,\n                      },\n                    ],\n                  })\n                : undefined,\n            ],\n          }),\n        ],\n      }),\n      name: 'client',\n    });\n    files.sdk.add(statement);\n  }\n\n  for (const service of client.services) {\n    processService({\n      client,\n      onClientImport: (imported) => {\n        files.sdk!.import({\n          module: clientModulePath({ config, sourceOutput: sdkOutput }),\n          name: imported,\n        });\n      },\n      onImport: (imported) => {\n        files.sdk!.import({\n          // this detection could be done safer, but it shouldn't cause any issues\n          asType: !imported.endsWith('Transformer'),\n          module: `./${files.types!.nameWithoutExtension()}`,\n          name: imported,\n        });\n      },\n      onNode: (node) => {\n        files.sdk!.add(node);\n      },\n      service,\n    });\n  }\n};\n","import { compiler } from '../../../compiler';\nimport { clientModulePath } from '../../../generate/client';\nimport type { FileImportResult } from '../../../generate/files';\nimport type { IR } from '../../../ir/types';\nimport { getClientPlugin } from '../client-core/utils';\nimport { nuxtTypeDefault, nuxtTypeResponse, sdkId } from './constants';\nimport type { HeyApiSdkPlugin } from './types';\n\nexport const createTypeOptions = ({\n  clientOptions,\n  context,\n  plugin,\n}: {\n  clientOptions: FileImportResult;\n  context: IR.Context;\n  plugin: HeyApiSdkPlugin['Instance'];\n}) => {\n  const file = context.file({ id: sdkId })!;\n  const client = getClientPlugin(context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n\n  const clientModule = clientModulePath({\n    config: context.config,\n    sourceOutput: file.nameWithoutExtension(),\n  });\n  const tDataShape = file.import({\n    asType: true,\n    module: clientModule,\n    name: 'TDataShape',\n  });\n  const clientType = file.import({\n    asType: true,\n    module: clientModule,\n    name: 'Client',\n  });\n\n  const typeOptions = compiler.typeAliasDeclaration({\n    exportType: true,\n    name: 'Options',\n    type: compiler.typeIntersectionNode({\n      types: [\n        compiler.typeReferenceNode({\n          typeArguments: isNuxtClient\n            ? [\n                compiler.typeReferenceNode({ typeName: 'TComposable' }),\n                compiler.typeReferenceNode({ typeName: 'TData' }),\n                compiler.typeReferenceNode({ typeName: nuxtTypeResponse }),\n                compiler.typeReferenceNode({ typeName: nuxtTypeDefault }),\n              ]\n            : [\n                compiler.typeReferenceNode({ typeName: 'TData' }),\n                compiler.typeReferenceNode({ typeName: 'ThrowOnError' }),\n              ],\n          typeName: clientOptions.name,\n        }),\n        compiler.typeInterfaceNode({\n          properties: [\n            {\n              comment: [\n                'You can provide a client instance returned by `createClient()` instead of',\n                'individual options. This might be also useful if you want to implement a',\n                'custom client.',\n              ],\n              isRequired: !plugin.config.client,\n              name: 'client',\n              type: compiler.typeReferenceNode({ typeName: clientType.name }),\n            },\n            {\n              comment: [\n                'You can pass arbitrary values through the `meta` object. This can be',\n                \"used to access values that aren't defined as part of the SDK function.\",\n              ],\n              isRequired: false,\n              name: 'meta',\n              type: compiler.typeReferenceNode({\n                typeArguments: [\n                  compiler.keywordTypeNode({ keyword: 'string' }),\n                  compiler.keywordTypeNode({ keyword: 'unknown' }),\n                ],\n                typeName: 'Record',\n              }),\n            },\n          ],\n          useLegacyResolution: false,\n        }),\n      ],\n    }),\n    typeParameters: isNuxtClient\n      ? [\n          compiler.typeParameterDeclaration({\n            constraint: compiler.typeReferenceNode({ typeName: 'Composable' }),\n            name: 'TComposable',\n          }),\n          compiler.typeParameterDeclaration({\n            constraint: compiler.typeReferenceNode({\n              typeName: tDataShape.name,\n            }),\n            defaultType: compiler.typeReferenceNode({\n              typeName: tDataShape.name,\n            }),\n            name: 'TData',\n          }),\n          compiler.typeParameterDeclaration({\n            defaultType: compiler.keywordTypeNode({ keyword: 'unknown' }),\n            name: nuxtTypeResponse,\n          }),\n          compiler.typeParameterDeclaration({\n            defaultType: compiler.keywordTypeNode({ keyword: 'undefined' }),\n            name: nuxtTypeDefault,\n          }),\n        ]\n      : [\n          compiler.typeParameterDeclaration({\n            constraint: compiler.typeReferenceNode({\n              typeName: tDataShape.name,\n            }),\n            defaultType: compiler.typeReferenceNode({\n              typeName: tDataShape.name,\n            }),\n            name: 'TData',\n          }),\n          compiler.typeParameterDeclaration({\n            constraint: compiler.keywordTypeNode({ keyword: 'boolean' }),\n            defaultType: compiler.keywordTypeNode({ keyword: 'boolean' }),\n            name: 'ThrowOnError',\n          }),\n        ],\n  });\n\n  file.add(typeOptions);\n};\n","import ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport { clientApi, clientModulePath } from '../../../generate/client';\nimport { stringCase } from '../../../utils/stringCase';\nimport {\n  createOperationComment,\n  isOperationOptionsRequired,\n} from '../../shared/utils/operation';\nimport { getClientPlugin } from '../client-core/utils';\nimport { importIdentifier } from '../typescript/ref';\nimport { nuxtTypeComposable, nuxtTypeDefault, sdkId } from './constants';\nimport {\n  operationClasses,\n  operationOptionsType,\n  operationStatements,\n} from './operation';\nimport { serviceFunctionIdentifier } from './plugin-legacy';\nimport { createTypeOptions } from './typeOptions';\nimport type { HeyApiSdkPlugin } from './types';\n\nconst createClientClassNodes = ({\n  plugin,\n}: {\n  plugin: HeyApiSdkPlugin['Instance'];\n}): ReadonlyArray<ts.ClassElement> => {\n  const clientAssignmentStatement = compiler.expressionToStatement({\n    expression: compiler.binaryExpression({\n      left: compiler.propertyAccessExpression({\n        expression: compiler.this(),\n        name: '_client',\n      }),\n      operator: '=',\n      right: compiler.propertyAccessExpression({\n        expression: compiler.identifier({ text: 'args' }),\n        name: 'client',\n      }),\n    }),\n  });\n\n  return [\n    compiler.propertyDeclaration({\n      initializer: plugin.config.client\n        ? compiler.identifier({ text: '_heyApiClient' })\n        : undefined,\n      modifier: 'protected',\n      name: '_client',\n      type: ts.factory.createTypeReferenceNode('Client'),\n    }),\n    // @ts-expect-error\n    compiler.identifier({ text: '\\n' }),\n    compiler.constructorDeclaration({\n      multiLine: true,\n      parameters: [\n        {\n          isRequired: !plugin.config.client,\n          name: 'args',\n          type: compiler.typeInterfaceNode({\n            properties: [\n              {\n                isRequired: !plugin.config.client,\n                name: 'client',\n                type: 'Client',\n              },\n            ],\n            useLegacyResolution: false,\n          }),\n        },\n      ],\n      statements: [\n        !plugin.config.client\n          ? clientAssignmentStatement\n          : compiler.ifStatement({\n              expression: compiler.propertyAccessExpression({\n                expression: compiler.identifier({ text: 'args' }),\n                isOptional: true,\n                name: 'client',\n              }),\n              thenStatement: compiler.block({\n                statements: [clientAssignmentStatement],\n              }),\n            }),\n      ],\n    }),\n  ];\n};\n\ninterface SdkClassEntry {\n  /**\n   * Name of the class.\n   */\n  className: string;\n  /**\n   * Child classes located inside this class.\n   */\n  classes: Set<string>;\n  /**\n   * Track unique added method nodes.\n   */\n  methods: Set<string>;\n  /**\n   * List of class nodes containing methods.\n   */\n  nodes: Array<ts.ClassElement>;\n  /**\n   * Is this a root class?\n   */\n  root: boolean;\n}\n\nconst generateClassSdk = ({\n  plugin,\n}: {\n  plugin: HeyApiSdkPlugin['Instance'];\n}) => {\n  const client = getClientPlugin(plugin.context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n  const file = plugin.context.file({ id: sdkId })!;\n  const sdkClasses = new Map<string, SdkClassEntry>();\n  /**\n   * Track unique added classes.\n   */\n  const generatedClasses = new Set<string>();\n\n  const clientClassNodes = plugin.config.instance\n    ? createClientClassNodes({ plugin })\n    : [];\n\n  plugin.forEach('operation', ({ operation }) => {\n    const isRequiredOptions = isOperationOptionsRequired({\n      context: plugin.context,\n      operation,\n    });\n    const identifierResponse = importIdentifier({\n      context: plugin.context,\n      file,\n      operation,\n      type: 'response',\n    });\n\n    const classes = operationClasses({\n      context: plugin.context,\n      operation,\n      plugin,\n    });\n\n    for (const entry of classes.values()) {\n      entry.path.forEach((currentClassName, index) => {\n        if (!sdkClasses.has(currentClassName)) {\n          sdkClasses.set(currentClassName, {\n            className: currentClassName,\n            classes: new Set(),\n            methods: new Set(),\n            nodes: [],\n            root: !index,\n          });\n        }\n\n        const parentClassName = entry.path[index - 1];\n        if (parentClassName) {\n          const parentClass = sdkClasses.get(parentClassName)!;\n          parentClass.classes.add(currentClassName);\n          sdkClasses.set(parentClassName, parentClass);\n        }\n\n        const isLast = entry.path.length === index + 1;\n        // add methods only to the last class\n        if (!isLast) {\n          return;\n        }\n\n        const currentClass = sdkClasses.get(currentClassName)!;\n\n        // avoid duplicate methods\n        if (currentClass.methods.has(entry.methodName)) {\n          return;\n        }\n\n        const functionNode = compiler.methodDeclaration({\n          accessLevel: 'public',\n          comment: createOperationComment({ operation }),\n          isStatic: !plugin.config.instance,\n          name: entry.methodName,\n          parameters: [\n            {\n              isRequired: isRequiredOptions,\n              name: 'options',\n              type: operationOptionsType({\n                context: plugin.context,\n                file,\n                operation,\n                throwOnError: isNuxtClient ? undefined : 'ThrowOnError',\n              }),\n            },\n          ],\n          returnType: undefined,\n          statements: operationStatements({\n            context: plugin.context,\n            isRequiredOptions,\n            operation,\n            plugin,\n          }),\n          types: isNuxtClient\n            ? [\n                {\n                  // default: compiler.ots.string('$fetch'),\n                  extends: compiler.typeNode('Composable'),\n                  name: nuxtTypeComposable,\n                },\n                {\n                  default: identifierResponse.name\n                    ? compiler.typeReferenceNode({\n                        typeName: identifierResponse.name,\n                      })\n                    : compiler.typeNode('undefined'),\n                  extends: identifierResponse.name\n                    ? compiler.typeReferenceNode({\n                        typeName: identifierResponse.name,\n                      })\n                    : undefined,\n                  name: nuxtTypeDefault,\n                },\n              ]\n            : [\n                {\n                  default:\n                    ('throwOnError' in client.config\n                      ? client.config.throwOnError\n                      : false) ?? false,\n                  extends: 'boolean',\n                  name: 'ThrowOnError',\n                },\n              ],\n        });\n\n        if (!currentClass.nodes.length) {\n          currentClass.nodes.push(functionNode);\n        } else {\n          currentClass.nodes.push(\n            // @ts-expect-error\n            compiler.identifier({ text: '\\n' }),\n            functionNode,\n          );\n        }\n\n        currentClass.methods.add(entry.methodName);\n\n        sdkClasses.set(currentClassName, currentClass);\n      });\n    }\n  });\n\n  const generateClass = (currentClass: SdkClassEntry) => {\n    if (generatedClasses.has(currentClass.className)) {\n      return;\n    }\n\n    if (currentClass.classes.size) {\n      for (const childClassName of currentClass.classes) {\n        const childClass = sdkClasses.get(childClassName)!;\n        generateClass(childClass);\n\n        currentClass.nodes.push(\n          compiler.propertyDeclaration({\n            initializer: plugin.config.instance\n              ? compiler.newExpression({\n                  argumentsArray: plugin.config.instance\n                    ? [\n                        compiler.objectExpression({\n                          multiLine: false,\n                          obj: [\n                            {\n                              key: 'client',\n                              value: compiler.propertyAccessExpression({\n                                expression: compiler.this(),\n                                name: '_client',\n                              }),\n                            },\n                          ],\n                        }),\n                      ]\n                    : [],\n                  expression: compiler.identifier({\n                    text: childClass.className,\n                  }),\n                })\n              : compiler.identifier({ text: childClass.className }),\n            modifier: plugin.config.instance ? undefined : 'static',\n            name: stringCase({\n              case: 'camelCase',\n              value: childClass.className,\n            }),\n          }),\n        );\n      }\n    }\n\n    const node = compiler.classDeclaration({\n      exportClass: currentClass.root,\n      extendedClasses: plugin.config.instance ? ['_HeyApiClient'] : undefined,\n      name: currentClass.className,\n      nodes: currentClass.nodes,\n    });\n    file.add(node);\n    generatedClasses.add(currentClass.className);\n  };\n\n  if (clientClassNodes.length) {\n    const node = compiler.classDeclaration({\n      exportClass: false,\n      name: '_HeyApiClient',\n      nodes: clientClassNodes,\n    });\n    file.add(node);\n  }\n\n  for (const sdkClass of sdkClasses.values()) {\n    generateClass(sdkClass);\n  }\n};\n\nconst generateFlatSdk = ({\n  plugin,\n}: {\n  plugin: HeyApiSdkPlugin['Instance'];\n}) => {\n  const client = getClientPlugin(plugin.context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n  const file = plugin.context.file({ id: sdkId })!;\n\n  plugin.forEach('operation', ({ operation }) => {\n    const isRequiredOptions = isOperationOptionsRequired({\n      context: plugin.context,\n      operation,\n    });\n    const identifierResponse = importIdentifier({\n      context: plugin.context,\n      file,\n      operation,\n      type: 'response',\n    });\n    const node = compiler.constVariable({\n      comment: createOperationComment({ operation }),\n      exportConst: true,\n      expression: compiler.arrowFunction({\n        parameters: [\n          {\n            isRequired: isRequiredOptions,\n            name: 'options',\n            type: operationOptionsType({\n              context: plugin.context,\n              file,\n              operation,\n              throwOnError: isNuxtClient ? undefined : 'ThrowOnError',\n            }),\n          },\n        ],\n        returnType: undefined,\n        statements: operationStatements({\n          context: plugin.context,\n          isRequiredOptions,\n          operation,\n          plugin,\n        }),\n        types: isNuxtClient\n          ? [\n              {\n                // default: compiler.ots.string('$fetch'),\n                extends: compiler.typeNode('Composable'),\n                name: nuxtTypeComposable,\n              },\n              {\n                default: identifierResponse.name\n                  ? compiler.typeReferenceNode({\n                      typeName: identifierResponse.name,\n                    })\n                  : compiler.typeNode('undefined'),\n                extends: identifierResponse.name\n                  ? compiler.typeReferenceNode({\n                      typeName: identifierResponse.name,\n                    })\n                  : undefined,\n                name: nuxtTypeDefault,\n              },\n            ]\n          : [\n              {\n                default:\n                  ('throwOnError' in client.config\n                    ? client.config.throwOnError\n                    : false) ?? false,\n                extends: 'boolean',\n                name: 'ThrowOnError',\n              },\n            ],\n      }),\n      name: serviceFunctionIdentifier({\n        config: plugin.context.config,\n        handleIllegal: true,\n        id: operation.id,\n        operation,\n      }),\n    });\n    file.add(node);\n  });\n};\n\nexport const handler: HeyApiSdkPlugin['Handler'] = ({ plugin }) => {\n  const file = plugin.createFile({\n    id: sdkId,\n    path: plugin.output,\n  });\n\n  // import required packages and core files\n  const clientModule = clientModulePath({\n    config: plugin.context.config,\n    sourceOutput: file.nameWithoutExtension(),\n  });\n  const clientOptions = file.import({\n    ...clientApi.Options,\n    alias: 'ClientOptions',\n    module: clientModule,\n  });\n\n  const client = getClientPlugin(plugin.context.config);\n  const isNuxtClient = client.name === '@hey-api/client-nuxt';\n  if (isNuxtClient) {\n    file.import({\n      asType: true,\n      module: clientModule,\n      name: 'Composable',\n    });\n  }\n\n  createTypeOptions({\n    clientOptions,\n    context: plugin.context,\n    plugin,\n  });\n\n  if (plugin.config.asClass) {\n    generateClassSdk({ plugin });\n  } else {\n    generateFlatSdk({ plugin });\n  }\n};\n","import { definePluginConfig } from '../../shared/utils/config';\nimport { handler } from './plugin';\nimport { handlerLegacy } from './plugin-legacy';\nimport type { HeyApiSdkPlugin } from './types';\n\nexport const defaultConfig: HeyApiSdkPlugin['Config'] = {\n  config: {\n    asClass: false,\n    auth: true,\n    classStructure: 'auto',\n    client: true,\n    exportFromIndex: true,\n    instance: false,\n    operationId: true,\n    response: 'body',\n    responseStyle: 'fields',\n    transformer: false,\n    validator: false,\n  },\n  dependencies: ['@hey-api/typescript'],\n  handler,\n  handlerLegacy,\n  name: '@hey-api/sdk',\n  output: 'sdk',\n  resolveConfig: (plugin, context) => {\n    if (plugin.config.client) {\n      if (typeof plugin.config.client === 'boolean') {\n        plugin.config.client = context.pluginByTag('client', {\n          defaultPlugin: '@hey-api/client-fetch',\n        });\n      }\n\n      plugin.dependencies.add(plugin.config.client!);\n    } else {\n      plugin.config.client = false;\n    }\n\n    if (plugin.config.transformer) {\n      if (typeof plugin.config.transformer === 'boolean') {\n        plugin.config.transformer = context.pluginByTag('transformer');\n      }\n\n      plugin.dependencies.add(plugin.config.transformer!);\n    } else {\n      plugin.config.transformer = false;\n    }\n\n    if (typeof plugin.config.validator !== 'object') {\n      plugin.config.validator = {\n        request: plugin.config.validator,\n        response: plugin.config.validator,\n      };\n    }\n\n    if (plugin.config.validator.request) {\n      if (typeof plugin.config.validator.request === 'boolean') {\n        plugin.config.validator.request = context.pluginByTag('validator');\n      }\n\n      plugin.dependencies.add(plugin.config.validator.request!);\n    } else {\n      plugin.config.validator.request = false;\n    }\n\n    if (plugin.config.validator.response) {\n      if (typeof plugin.config.validator.response === 'boolean') {\n        plugin.config.validator.response = context.pluginByTag('validator');\n      }\n\n      plugin.dependencies.add(plugin.config.validator.response!);\n    } else {\n      plugin.config.validator.response = false;\n    }\n\n    if (plugin.config.instance) {\n      if (typeof plugin.config.instance !== 'string') {\n        plugin.config.instance = 'Sdk';\n      }\n\n      plugin.config.asClass = true;\n    } else {\n      plugin.config.instance = false;\n    }\n  },\n};\n\n/**\n * Type helper for `@hey-api/sdk` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import type ts from 'typescript';\n\nimport { type Comments, compiler } from '../../../compiler';\nimport { TypeScriptFile } from '../../../generate/files';\nimport { isOperationParameterRequired } from '../../../openApi';\nimport type {\n  Client,\n  Method,\n  Model,\n  OperationParameter,\n} from '../../../types/client';\nimport { getConfig, isLegacyClient } from '../../../utils/config';\nimport { enumEntry, enumUnionType } from '../../../utils/enum';\nimport { escapeComment } from '../../../utils/escape';\nimport { sortByName, sorterByName } from '../../../utils/sort';\nimport {\n  setUniqueTypeName,\n  type SetUniqueTypeNameResult,\n  toType,\n} from '../../../utils/type';\nimport {\n  operationDataTypeName,\n  operationErrorTypeName,\n  operationResponseTypeName,\n} from '../sdk/plugin-legacy';\nimport type { HeyApiTypeScriptPlugin } from './types';\n\nexport interface TypesProps {\n  client: Client;\n  model: Model;\n  onNode: (node: ts.Node) => void;\n  onRemoveNode?: VoidFunction;\n}\n\nconst treeName = '$OpenApiTs';\n\nexport const emptyModel: Model = {\n  $refs: [],\n  base: '',\n  description: null,\n  enum: [],\n  enums: [],\n  export: 'interface',\n  imports: [],\n  in: '',\n  isDefinition: false,\n  isNullable: false,\n  isReadOnly: false,\n  isRequired: false,\n  link: null,\n  name: '',\n  properties: [],\n  template: null,\n  type: '',\n};\n\nconst generateEnum = ({\n  comments,\n  leadingComment,\n  meta,\n  obj,\n  onNode,\n  ...setUniqueTypeNameArgs\n}: Omit<Parameters<typeof compiler.enumDeclaration>[0], 'name'> &\n  Pick<Parameters<typeof setUniqueTypeName>[0], 'client' | 'nameTransformer'> &\n  Pick<Model, 'meta'> &\n  Pick<TypesProps, 'onNode'>) => {\n  // generate types only for top-level models\n  if (!meta) {\n    return;\n  }\n\n  const { created, name } = setUniqueTypeName({\n    create: true,\n    meta,\n    ...setUniqueTypeNameArgs,\n  });\n  if (created) {\n    const node = compiler.enumDeclaration({\n      comments,\n      leadingComment,\n      name,\n      obj,\n    });\n    onNode(node);\n  }\n};\n\nexport const generateType = ({\n  comment,\n  meta,\n  onCreated,\n  onNode,\n  type,\n  ...setUniqueTypeNameArgs\n}: Omit<Parameters<typeof compiler.typeAliasDeclaration>[0], 'name'> &\n  Pick<Parameters<typeof setUniqueTypeName>[0], 'client' | 'nameTransformer'> &\n  Pick<Model, 'meta'> &\n  Pick<TypesProps, 'onNode'> & {\n    onCreated?: (name: string) => void;\n  }): SetUniqueTypeNameResult => {\n  // generate types only for top-level models\n  if (!meta) {\n    return {\n      created: false,\n      name: '',\n    };\n  }\n\n  const result = setUniqueTypeName({\n    create: true,\n    meta,\n    ...setUniqueTypeNameArgs,\n  });\n  const { created, name } = result;\n  if (created) {\n    const node = compiler.typeAliasDeclaration({\n      comment,\n      exportType: true,\n      name,\n      type,\n    });\n    onNode(node);\n\n    onCreated?.(name);\n  }\n  return result;\n};\n\nconst processComposition = (props: TypesProps) => {\n  const config = getConfig();\n\n  const enumDeclarations = [] as ts.EnumDeclaration[];\n\n  processType(props);\n\n  props.model.enums.forEach((enumerator) => {\n    const pluginTypeScript = config.plugins['@hey-api/typescript'];\n    if (\n      pluginTypeScript?.config &&\n      typeof pluginTypeScript.config.enums === 'object' &&\n      pluginTypeScript.config.enums.mode !== 'typescript+namespace'\n    ) {\n      return processEnum({\n        ...props,\n        model: enumerator,\n      });\n    }\n\n    return processScopedEnum({\n      ...props,\n      model: enumerator,\n      onNode: (node) => {\n        enumDeclarations.push(node as ts.EnumDeclaration);\n      },\n    });\n  });\n\n  if (enumDeclarations.length) {\n    props.onNode(\n      compiler.namespaceDeclaration({\n        name: props.model.name,\n        statements: enumDeclarations,\n      }),\n    );\n  }\n};\n\nconst processEnum = ({ client, model, onNode }: TypesProps) => {\n  const config = getConfig();\n\n  const properties: Record<string | number, unknown> = {};\n  const comments: Record<string | number, Comments> = {};\n  model.enum.forEach((enumerator) => {\n    const { key, value } = enumEntry(enumerator);\n    properties[key] = value;\n    const comment = enumerator.customDescription || enumerator.description;\n    if (comment) {\n      comments[key] = [escapeComment(comment)];\n    }\n  });\n\n  const comment = [\n    model.description && escapeComment(model.description),\n    model.deprecated && '@deprecated',\n  ];\n\n  const pluginTypeScript = config.plugins['@hey-api/typescript'];\n  if (\n    pluginTypeScript?.config &&\n    typeof pluginTypeScript.config.enums === 'object' &&\n    pluginTypeScript.config.enums.enabled &&\n    (pluginTypeScript.config.enums.mode === 'typescript' ||\n      pluginTypeScript.config.enums.mode === 'typescript+namespace')\n  ) {\n    generateEnum({\n      client,\n      comments,\n      leadingComment: comment,\n      meta: model.meta,\n      obj: properties,\n      onNode,\n    });\n    return;\n  }\n\n  generateType({\n    client,\n    comment,\n    meta: model.meta,\n    onCreated: (name) => {\n      // create a separate JavaScript object export\n      const pluginTypeScript = config.plugins['@hey-api/typescript'];\n      if (\n        pluginTypeScript?.config &&\n        typeof pluginTypeScript.config.enums === 'object' &&\n        pluginTypeScript.config.enums.enabled &&\n        pluginTypeScript.config.enums.mode === 'javascript'\n      ) {\n        const expression = compiler.objectExpression({\n          multiLine: true,\n          obj: Object.entries(properties).map(([key, value]) => ({\n            comments: comments[key],\n            key,\n            value,\n          })),\n          unescape: true,\n        });\n        const node = compiler.constVariable({\n          assertion: 'const',\n          comment,\n          exportConst: true,\n          expression,\n          name,\n        });\n        onNode(node);\n      }\n    },\n    onNode,\n    type: enumUnionType(model.enum),\n  });\n};\n\nconst processScopedEnum = ({ model, onNode }: TypesProps) => {\n  const properties: Record<string | number, unknown> = {};\n  const comments: Record<string | number, Comments> = {};\n  model.enum.forEach((enumerator) => {\n    const { key, value } = enumEntry(enumerator);\n    properties[key] = value;\n    const comment = enumerator.customDescription || enumerator.description;\n    if (comment) {\n      comments[key] = [escapeComment(comment)];\n    }\n  });\n  onNode(\n    compiler.enumDeclaration({\n      comments,\n      leadingComment: [\n        model.description && escapeComment(model.description),\n        model.deprecated && '@deprecated',\n      ],\n      name: model.meta?.name || model.name,\n      obj: properties,\n    }),\n  );\n};\n\nconst processType = ({ client, model, onNode }: TypesProps) => {\n  generateType({\n    client,\n    comment: [\n      model.description && escapeComment(model.description),\n      model.deprecated && '@deprecated',\n    ],\n    meta: model.meta,\n    onNode,\n    type: toType(model),\n  });\n};\n\nconst processModel = (props: TypesProps) => {\n  switch (props.model.export) {\n    case 'all-of':\n    case 'any-of':\n    case 'one-of':\n    case 'interface':\n      return processComposition(props);\n    case 'enum':\n      return processEnum(props);\n    default:\n      return processType(props);\n  }\n};\n\ninterface MethodMap {\n  $ref?: string;\n  req?: OperationParameter[];\n  res?: Record<number | string, Model>;\n}\n\ntype PathMap = {\n  [method in Method]?: MethodMap;\n};\n\ntype PathsMap = Record<string, PathMap>;\n\nconst processServiceTypes = ({\n  client,\n  onNode,\n}: Pick<TypesProps, 'client' | 'onNode'>) => {\n  const pathsMap: PathsMap = {};\n\n  const config = getConfig();\n\n  if (\n    !config.plugins['@hey-api/sdk'] &&\n    !config.plugins['@hey-api/typescript']?.config.tree\n  ) {\n    return;\n  }\n\n  const isLegacy = isLegacyClient(config);\n\n  for (const service of client.services) {\n    for (const operation of service.operations) {\n      if (!operation.parameters.length && !operation.responses.length) {\n        continue;\n      }\n\n      if (!pathsMap[operation.path]) {\n        pathsMap[operation.path] = {};\n      }\n      const pathMap = pathsMap[operation.path]!;\n\n      if (!pathMap[operation.method]) {\n        pathMap[operation.method] = {};\n      }\n      const methodMap = pathMap[operation.method]!;\n      methodMap.$ref = operation.name;\n\n      if (operation.responses.length > 0) {\n        if (!methodMap.res) {\n          methodMap.res = {};\n        }\n\n        if (Array.isArray(methodMap.res)) {\n          continue;\n        }\n\n        operation.responses.forEach((response) => {\n          methodMap.res![response.code] = response;\n        });\n      }\n\n      if (operation.parameters.length > 0) {\n        let bodyParameters: OperationParameter = {\n          mediaType: null,\n          ...emptyModel,\n          in: 'body',\n          name: 'body',\n          prop: 'body',\n        };\n        let bodyParameter = operation.parameters.filter(\n          (parameter) => parameter.in === 'body',\n        );\n        if (!bodyParameter.length) {\n          bodyParameter = operation.parameters.filter(\n            (parameter) => parameter.in === 'formData',\n          );\n        }\n\n        if (bodyParameter.length === 1) {\n          bodyParameters = {\n            ...emptyModel,\n            ...bodyParameter[0]!,\n            in: 'body',\n            isRequired: bodyParameter[0]!.isRequired,\n            name: 'body',\n            prop: 'body',\n          };\n          // assume we have multiple formData parameters from Swagger 2.0\n        } else if (bodyParameter.length > 1) {\n          bodyParameters = {\n            ...emptyModel,\n            in: 'body',\n            isRequired: bodyParameter.some((parameter) => parameter.isRequired),\n            mediaType: 'multipart/form-data',\n            name: 'body',\n            prop: 'body',\n            properties: bodyParameter,\n          };\n        }\n\n        const headerParameters: OperationParameter = {\n          ...emptyModel,\n          in: 'header',\n          isRequired: isOperationParameterRequired(\n            operation.parameters.filter(\n              (parameter) => parameter.in === 'header',\n            ),\n          ),\n          mediaType: null,\n          name: isLegacy ? 'header' : 'headers',\n          prop: isLegacy ? 'header' : 'headers',\n          properties: operation.parameters\n            .filter((parameter) => parameter.in === 'header')\n            .sort(sorterByName),\n        };\n        const pathParameters: OperationParameter = {\n          ...emptyModel,\n          in: 'path',\n          isRequired: isOperationParameterRequired(\n            operation.parameters.filter((parameter) => parameter.in === 'path'),\n          ),\n          mediaType: null,\n          name: 'path',\n          prop: 'path',\n          properties: operation.parameters\n            .filter((parameter) => parameter.in === 'path')\n            .sort(sorterByName),\n        };\n        const queryParameters: OperationParameter = {\n          ...emptyModel,\n          in: 'query',\n          isRequired: isOperationParameterRequired(\n            operation.parameters.filter(\n              (parameter) => parameter.in === 'query',\n            ),\n          ),\n          mediaType: null,\n          name: 'query',\n          prop: 'query',\n          properties: operation.parameters\n            .filter((parameter) => parameter.in === 'query')\n            .sort(sorterByName),\n        };\n        const operationProperties = !isLegacy\n          ? [\n              bodyParameters,\n              headerParameters,\n              pathParameters,\n              queryParameters,\n            ].filter(\n              (param) =>\n                param.properties.length ||\n                param.$refs.length ||\n                param.mediaType,\n            )\n          : sortByName([...operation.parameters]);\n\n        methodMap.req = operationProperties;\n\n        // create type export for operation data\n        generateType({\n          client,\n          meta: {\n            // TODO: this should be exact ref to operation for consistency,\n            // but name should work too as operation ID is unique\n            $ref: operation.name,\n            name: operation.name,\n          },\n          nameTransformer: operationDataTypeName,\n          onNode,\n          type: toType({\n            ...emptyModel,\n            isRequired: true,\n            properties: operationProperties,\n          }),\n        });\n      }\n\n      const successResponses = operation.responses.filter((response) =>\n        response.responseTypes.includes('success'),\n      );\n\n      if (successResponses.length > 0) {\n        // create type export for operation response\n        generateType({\n          client,\n          meta: {\n            // TODO: this should be exact ref to operation for consistency,\n            // but name should work too as operation ID is unique\n            $ref: operation.name,\n            name: operation.name,\n          },\n          nameTransformer: operationResponseTypeName,\n          onNode,\n          type: toType({\n            ...emptyModel,\n            export: 'any-of',\n            isRequired: true,\n            properties: successResponses,\n          }),\n        });\n\n        const errorResponses = operation.responses.filter((response) =>\n          response.responseTypes.includes('error'),\n        );\n\n        if (!isLegacy) {\n          // create type export for operation error\n          generateType({\n            client,\n            meta: {\n              // TODO: this should be exact ref to operation for consistency,\n              // but name should work too as operation ID is unique\n              $ref: operation.name,\n              name: operation.name,\n            },\n            nameTransformer: operationErrorTypeName,\n            onNode,\n            type: toType(\n              errorResponses.length\n                ? {\n                    ...emptyModel,\n                    export: 'one-of',\n                    isRequired: true,\n                    properties: errorResponses,\n                  }\n                : {\n                    ...emptyModel,\n                    base: 'unknown',\n                    isRequired: true,\n                    type: 'unknown',\n                  },\n            ),\n          });\n        }\n      }\n    }\n  }\n\n  const properties = Object.entries(pathsMap).map(([path, pathMap]) => {\n    const pathParameters = Object.entries(pathMap)\n      .map(([_method, methodMap]) => {\n        const method = _method as Method;\n\n        let methodParameters: Model[] = [];\n\n        if (methodMap.req) {\n          const operationName = methodMap.$ref!;\n          const { name: base } = setUniqueTypeName({\n            client,\n            meta: {\n              // TODO: this should be exact ref to operation for consistency,\n              // but name should work too as operation ID is unique\n              $ref: operationName,\n              name: operationName,\n            },\n            nameTransformer: operationDataTypeName,\n          });\n          const reqKey: Model = {\n            ...emptyModel,\n            base,\n            export: 'reference',\n            isRequired: true,\n            name: 'req',\n            properties: [],\n            type: base,\n          };\n          methodParameters = [...methodParameters, reqKey];\n        }\n\n        if (methodMap.res) {\n          const reqResParameters = Object.entries(methodMap.res).map(\n            ([code, base]) => {\n              // TODO: move query params into separate query key\n              const value: Model = {\n                ...emptyModel,\n                ...base,\n                isRequired: true,\n                name: String(code),\n              };\n              return value;\n            },\n          );\n\n          const resKey: Model = {\n            ...emptyModel,\n            isRequired: true,\n            name: 'res',\n            properties: reqResParameters,\n          };\n          methodParameters = [...methodParameters, resKey];\n        }\n\n        const methodKey: Model = {\n          ...emptyModel,\n          isRequired: true,\n          name: method.toLocaleLowerCase(),\n          properties: methodParameters,\n        };\n        return methodKey;\n      })\n      .filter(Boolean);\n    const pathKey: Model = {\n      ...emptyModel,\n      isRequired: true,\n      name: `'${path}'`,\n      properties: pathParameters as Model[],\n    };\n    return pathKey;\n  });\n\n  if (config.plugins['@hey-api/typescript']?.config.tree) {\n    generateType({\n      client,\n      meta: {\n        $ref: '@hey-api/openapi-ts',\n        name: treeName,\n      },\n      onNode,\n      type: toType({\n        ...emptyModel,\n        properties,\n      }),\n    });\n  }\n};\n\nexport const handlerLegacy: HeyApiTypeScriptPlugin['LegacyHandler'] = ({\n  client,\n  files,\n  plugin,\n}) => {\n  const config = getConfig();\n\n  files.types = new TypeScriptFile({\n    dir: config.output.path,\n    exportFromIndex: plugin.config.exportFromIndex,\n    id: 'types',\n    name: 'types.ts',\n  });\n\n  const onNode: TypesProps['onNode'] = (node) => {\n    files.types?.add(node);\n  };\n\n  for (const model of client.models) {\n    processModel({ client, model, onNode });\n  }\n\n  processServiceTypes({ client, onNode });\n};\n","import type ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport { createOperationKey } from '../../../ir/operation';\nimport type { ModelMeta, OperationResponse } from '../../../types/client';\nimport { getConfig } from '../../../utils/config';\nimport { isModelDate, unsetUniqueTypeName } from '../../../utils/type';\nimport {\n  modelResponseTransformerTypeName,\n  operationResponseTransformerTypeName,\n  operationResponseTypeName,\n} from '../sdk/plugin-legacy';\nimport { generateType, type TypesProps } from '../typescript/plugin-legacy';\nimport type { HeyApiTransformersPlugin } from './types';\n\ninterface ModelProps extends TypesProps {\n  meta?: ModelMeta;\n  path: Array<string>;\n}\n\nconst dataVariableName = 'data';\n\nconst isVoidResponse = (response: OperationResponse) =>\n  response.base === 'unknown' &&\n  response.export === 'generic' &&\n  response.type === 'unknown';\n\nconst getRefModels = ({\n  client,\n  model,\n}: Pick<TypesProps, 'client' | 'model'>) => {\n  const refModels = model.$refs.map((ref) => {\n    const refModel = client.models.find((model) => model.meta?.$ref === ref);\n    if (!refModel) {\n      throw new Error(\n        `Ref ${ref} could not be found. Transformers cannot be generated without having access to all refs.`,\n      );\n    }\n    return refModel;\n  });\n  return refModels;\n};\n\nconst ensureModelResponseTransformerExists = (\n  props: Omit<ModelProps, 'path'>,\n) => {\n  const modelName = props.model.meta!.name;\n\n  const { name } = generateType({\n    ...props,\n    meta: {\n      $ref: `transformers/${modelName}`,\n      name: modelName,\n    },\n    nameTransformer: modelResponseTransformerTypeName,\n    onCreated: (name) => {\n      const statements = processModel({\n        ...props,\n        meta: {\n          $ref: `transformers/${modelName}`,\n          name,\n        },\n        path: [dataVariableName],\n      });\n      generateResponseTransformer({\n        ...props,\n        async: false,\n        name,\n        statements,\n      });\n    },\n    type: `(${dataVariableName}: any) => ${modelName}`,\n  });\n\n  const result = {\n    created: Boolean(props.client.types[name]),\n    name,\n  };\n  return result;\n};\n\nconst processArray = (props: ModelProps) => {\n  const { model } = props;\n  const refModels = getRefModels(props);\n\n  if (refModels.length === 1) {\n    const { created, name: nameModelResponseTransformer } =\n      ensureModelResponseTransformerExists({ ...props, model: refModels[0]! });\n\n    if (!created) {\n      return [];\n    }\n\n    return [\n      compiler.transformArrayMutation({\n        path: props.path,\n        transformerName: nameModelResponseTransformer,\n      }),\n    ];\n  }\n\n  if (\n    isModelDate(model) ||\n    (model.link &&\n      !Array.isArray(model.link) &&\n      model.link.export === 'any-of' &&\n      model.link.properties.find((property) => isModelDate(property)))\n  ) {\n    return [\n      compiler.transformArrayMap({\n        path: props.path,\n        transformExpression: compiler.conditionalExpression({\n          condition: compiler.identifier({ text: 'item' }),\n          whenFalse: compiler.identifier({ text: 'item' }),\n          whenTrue: compiler.transformNewDate({\n            parameterName: 'item',\n          }),\n        }),\n      }),\n    ];\n  }\n\n  // Not transform for this type\n  return [];\n};\n\nconst processProperty = (props: ModelProps) => {\n  const { model } = props;\n  const path = [...props.path, model.name];\n\n  if (\n    model.type === 'string' &&\n    model.export !== 'array' &&\n    isModelDate(model)\n  ) {\n    return [compiler.transformDateMutation({ path })];\n  }\n\n  // otherwise we recurse in case it's an object/array, and if it's not that will just bail with []\n  return processModel({\n    ...props,\n    model,\n    path,\n  });\n};\n\nconst processModel = (props: ModelProps): ts.Statement[] => {\n  const { model } = props;\n\n  switch (model.export) {\n    case 'array':\n      return processArray(props);\n    case 'interface':\n      return model.properties.flatMap((property) =>\n        processProperty({ ...props, model: property }),\n      );\n    case 'reference': {\n      if (model.$refs.length !== 1) {\n        return [];\n      }\n      const refModels = getRefModels(props);\n\n      const { created, name: nameModelResponseTransformer } =\n        ensureModelResponseTransformerExists({\n          ...props,\n          model: refModels[0]!,\n        });\n\n      if (!created) {\n        return [];\n      }\n\n      return model.in === 'response'\n        ? [\n            compiler.expressionToStatement({\n              expression: compiler.callExpression({\n                functionName: nameModelResponseTransformer,\n                parameters: [dataVariableName],\n              }),\n            }),\n          ]\n        : compiler.transformFunctionMutation({\n            path: props.path,\n            transformerName: nameModelResponseTransformer,\n          });\n    }\n    // unsupported\n    default:\n      return [];\n  }\n};\n\nconst generateResponseTransformer = ({\n  async,\n  client,\n  name,\n  onNode,\n  onRemoveNode,\n  statements,\n}: Pick<TypesProps, 'client' | 'onNode' | 'onRemoveNode'> & {\n  async: boolean;\n  name: string;\n  statements: Array<ts.Statement>;\n}) => {\n  const result = {\n    created: false,\n    name,\n  };\n\n  if (!statements.length) {\n    // clean up created type for response transformer if it turns out\n    // the transformer was never generated\n    unsetUniqueTypeName({\n      client,\n      name,\n    });\n    onRemoveNode?.();\n    return result;\n  }\n\n  const expression = compiler.arrowFunction({\n    async,\n    multiLine: true,\n    parameters: [\n      {\n        name: dataVariableName,\n      },\n    ],\n    statements: [\n      ...statements,\n      compiler.returnVariable({\n        expression: dataVariableName,\n      }),\n    ],\n  });\n  const statement = compiler.constVariable({\n    exportConst: true,\n    expression,\n    name,\n    typeName: name,\n  });\n  onNode(statement);\n\n  return {\n    created: true,\n    name,\n  };\n};\n\n// handles only response transformers for now\nexport const handlerLegacy: HeyApiTransformersPlugin['LegacyHandler'] = ({\n  client,\n  files,\n}) => {\n  const config = getConfig();\n\n  const onNode: TypesProps['onNode'] = (node) => {\n    files.types?.add(node);\n  };\n  const onRemoveNode: TypesProps['onRemoveNode'] = () => {\n    files.types?.removeNode();\n  };\n\n  for (const service of client.services) {\n    for (const operation of service.operations) {\n      const successResponses = operation.responses.filter((response) =>\n        response.responseTypes.includes('success'),\n      );\n\n      if (!successResponses.length) {\n        continue;\n      }\n\n      const nonVoidResponses = successResponses.filter(\n        (response) => !isVoidResponse(response),\n      );\n\n      if (!nonVoidResponses.length) {\n        continue;\n      }\n\n      if (nonVoidResponses.length > 1) {\n        if (config.logs.level === 'debug') {\n          console.warn(\n            `❗️ Transformers warning: route ${createOperationKey(operation)} has ${nonVoidResponses.length} non-void success responses. This is currently not handled and we will not generate a response transformer. Please open an issue if you'd like this feature https://github.com/hey-api/openapi-ts/issues`,\n          );\n        }\n        continue;\n      }\n\n      const name = operationResponseTypeName(operation.name);\n      generateType({\n        client,\n        meta: {\n          $ref: `transformers/${name}`,\n          name,\n        },\n        nameTransformer: operationResponseTransformerTypeName,\n        onCreated: (nameCreated) => {\n          const statements =\n            successResponses.length > 1\n              ? successResponses.flatMap((response) => {\n                  const statements = processModel({\n                    client,\n                    meta: {\n                      $ref: `transformers/${name}`,\n                      name,\n                    },\n                    model: response,\n                    onNode,\n                    onRemoveNode,\n                    path: [dataVariableName],\n                  });\n\n                  // assume unprocessed responses are void\n                  if (!statements.length) {\n                    return [];\n                  }\n\n                  return [\n                    compiler.ifStatement({\n                      expression: compiler.safeAccessExpression(['data']),\n                      thenStatement: compiler.block({ statements }),\n                    }),\n                  ];\n                })\n              : processModel({\n                  client,\n                  meta: {\n                    $ref: `transformers/${name}`,\n                    name,\n                  },\n                  model: successResponses[0]!,\n                  onNode,\n                  onRemoveNode,\n                  path: [dataVariableName],\n                });\n          generateResponseTransformer({\n            async: true,\n            client,\n            name: nameCreated,\n            onNode,\n            onRemoveNode,\n            statements,\n          });\n        },\n        onNode,\n        type: `(${dataVariableName}: any) => Promise<${name}>`,\n      });\n    }\n  }\n};\n","import { definePluginConfig } from '../../shared/utils/config';\nimport { handler } from './plugin';\nimport { handlerLegacy } from './plugin-legacy';\nimport type { HeyApiTransformersPlugin } from './types';\n\nexport const defaultConfig: HeyApiTransformersPlugin['Config'] = {\n  config: {\n    bigInt: true,\n    dates: true,\n    exportFromIndex: false,\n  },\n  dependencies: ['@hey-api/typescript'],\n  handler,\n  handlerLegacy,\n  name: '@hey-api/transformers',\n  output: 'transformers',\n  tags: ['transformer'],\n};\n\n/**\n * Type helper for `@hey-api/transformers`, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import ts from 'typescript';\n\nimport type { IR } from '../../../ir/types';\nimport { numberRegExp } from '../../../utils/regexp';\nimport { stringCase } from '../../../utils/stringCase';\n\n/**\n * Returns final field name for object properties. This might differ from the\n * original value as applying case transform function might alter it.\n */\nexport const fieldName = ({\n  context,\n  name,\n}: {\n  context: IR.Context;\n  name: string;\n}) => {\n  numberRegExp.lastIndex = 0;\n  if (numberRegExp.test(name)) {\n    // For negative numbers, use string literals instead\n    if (name.startsWith('-')) {\n      return ts.factory.createStringLiteral(name);\n    }\n    return ts.factory.createNumericLiteral(name);\n  }\n\n  // if (typeof context.config.output.case === 'function') {\n  //   return context.config.output.case({ value: name });\n  // }\n\n  return stringCase({ case: context.config.output.case, value: name });\n};\n","import type { Comments } from '../../../compiler';\nimport type { IR } from '../../../ir/types';\nimport { escapeComment } from '../../../utils/escape';\n\nexport const createSchemaComment = ({\n  schema,\n}: {\n  schema: IR.SchemaObject;\n}): Comments | undefined => {\n  const comments: Array<string> = [];\n\n  if (schema.title) {\n    comments.push(escapeComment(schema.title));\n  }\n\n  if (schema.description) {\n    comments.push(escapeComment(schema.description));\n  }\n\n  if (schema.deprecated) {\n    comments.push('@deprecated');\n  }\n\n  return comments.length ? comments : undefined;\n};\n","import ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport type { Identifier } from '../../../generate/files';\nimport type { IR } from '../../../ir/types';\nimport { parseUrl } from '../../../utils/url';\nimport { getClientBaseUrlKey, getClientPlugin } from '../client-core/utils';\nimport { typesId } from './ref';\nimport type { HeyApiTypeScriptPlugin } from './types';\n\nconst stringType = compiler.keywordTypeNode({ keyword: 'string' });\n\nconst serverToBaseUrlType = ({ server }: { server: IR.ServerObject }) => {\n  const url = parseUrl(server.url);\n\n  if (url.protocol && url.host) {\n    return compiler.literalTypeNode({\n      literal: compiler.stringLiteral({ text: server.url }),\n    });\n  }\n\n  return compiler.templateLiteralType({\n    value: [\n      url.protocol || stringType,\n      '://',\n      url.host || stringType,\n      url.port ? `:${url.port}` : '',\n      url.path || '',\n    ],\n  });\n};\n\nexport const createClientOptions = ({\n  identifier,\n  plugin,\n  servers,\n}: {\n  identifier: Identifier;\n  plugin: HeyApiTypeScriptPlugin['Instance'];\n  servers: ReadonlyArray<IR.ServerObject>;\n}) => {\n  const file = plugin.context.file({ id: typesId })!;\n\n  if (!identifier.name) {\n    return;\n  }\n\n  const client = getClientPlugin(plugin.context.config);\n\n  const types: Array<ts.TypeNode> = servers.map((server) =>\n    serverToBaseUrlType({ server }),\n  );\n\n  if (!servers.length) {\n    types.push(stringType);\n  } else if (\n    !('strictBaseUrl' in client.config && client.config.strictBaseUrl)\n  ) {\n    types.push(\n      compiler.typeIntersectionNode({\n        types: [stringType, ts.factory.createTypeLiteralNode([])],\n      }),\n    );\n  }\n\n  const typeClientOptions = compiler.typeAliasDeclaration({\n    exportType: true,\n    name: identifier.name,\n    type: compiler.typeInterfaceNode({\n      properties: [\n        {\n          name: getClientBaseUrlKey(plugin.context.config),\n          type: compiler.typeUnionNode({ types }),\n        },\n      ],\n      useLegacyResolution: false,\n    }),\n  });\n\n  file.add(typeClientOptions);\n};\n","import ts from 'typescript';\n\nimport type { Property } from '../../../compiler';\nimport { compiler } from '../../../compiler';\nimport { operationResponsesMap } from '../../../ir/operation';\nimport { deduplicateSchema } from '../../../ir/schema';\nimport type { IR } from '../../../ir/types';\nimport { irRef, isRefOpenApiComponent } from '../../../utils/ref';\nimport { numberRegExp } from '../../../utils/regexp';\nimport { stringCase } from '../../../utils/stringCase';\nimport { fieldName } from '../../shared/utils/case';\nimport { operationIrRef } from '../../shared/utils/ref';\nimport { createSchemaComment } from '../../shared/utils/schema';\nimport { createClientOptions } from './clientOptions';\nimport { typesId } from './ref';\nimport type { HeyApiTypeScriptPlugin } from './types';\n\ninterface SchemaWithType<T extends Required<IR.SchemaObject>['type']>\n  extends Omit<IR.SchemaObject, 'type'> {\n  type: Extract<Required<IR.SchemaObject>['type'], T>;\n}\n\ninterface State {\n  /**\n   * If set, we keep the specified properties (read-only or write-only) and\n   * strip the other type.\n   */\n  accessScope?: 'read' | 'write';\n  /**\n   * Path to the currently processed field. This can be used to generate\n   * deduplicated inline types. For example, if two schemas define a different\n   * enum `foo`, we want to generate two unique types instead of one.\n   */\n  path: ReadonlyArray<string>;\n}\n\nconst addJavaScriptEnum = ({\n  $ref,\n  plugin,\n  schema,\n}: {\n  $ref: string;\n  plugin: HeyApiTypeScriptPlugin['Instance'];\n  schema: SchemaWithType<'enum'>;\n}) => {\n  const file = plugin.context.file({ id: typesId })!;\n  const identifier = file.identifier({\n    $ref,\n    create: true,\n    namespace: 'value',\n  });\n\n  // TODO: parser - this is the old parser behavior where we would NOT\n  // print nested enum identifiers if they already exist. This is a\n  // blocker for referencing these identifiers within the file as\n  // we cannot guarantee just because they have a duplicate identifier,\n  // they have a duplicate value.\n  if (!identifier.created) {\n    return;\n  }\n\n  const enumObject = schemaToEnumObject({ plugin, schema });\n\n  // JavaScript enums might want to ignore null values\n  if (\n    plugin.config.enums.constantsIgnoreNull &&\n    enumObject.typeofItems.includes('object')\n  ) {\n    enumObject.obj = enumObject.obj.filter((item) => item.value !== null);\n  }\n\n  const expression = compiler.objectExpression({\n    multiLine: true,\n    obj: enumObject.obj,\n  });\n  const node = compiler.constVariable({\n    assertion: 'const',\n    comment: createSchemaComment({ schema }),\n    exportConst: true,\n    expression,\n    name: identifier.name || '',\n  });\n  return node;\n};\n\nconst schemaToEnumObject = ({\n  plugin,\n  schema,\n}: {\n  plugin: HeyApiTypeScriptPlugin['Instance'];\n  schema: IR.SchemaObject;\n}) => {\n  const typeofItems: Array<\n    | 'bigint'\n    | 'boolean'\n    | 'function'\n    | 'number'\n    | 'object'\n    | 'string'\n    | 'symbol'\n    | 'undefined'\n  > = [];\n\n  const obj = (schema.items ?? []).map((item, index) => {\n    const typeOfItemConst = typeof item.const;\n\n    if (!typeofItems.includes(typeOfItemConst)) {\n      // track types of enum values because some modes support\n      // only enums with string and number types\n      typeofItems.push(typeOfItemConst);\n    }\n\n    let key: string | undefined;\n    if (item.title) {\n      key = item.title;\n    } else if (typeOfItemConst === 'number' || typeOfItemConst === 'string') {\n      key = `${item.const}`;\n    } else if (typeOfItemConst === 'boolean') {\n      key = item.const ? 'true' : 'false';\n    } else if (item.const === null) {\n      key = 'null';\n    } else {\n      key = `${index}`;\n    }\n\n    if (key) {\n      key = stringCase({\n        case: plugin.config.enums.case,\n        stripLeadingSeparators: false,\n        value: key,\n      });\n\n      numberRegExp.lastIndex = 0;\n      // TypeScript enum keys cannot be numbers\n      if (\n        numberRegExp.test(key) &&\n        plugin.config.enums.enabled &&\n        (plugin.config.enums.mode === 'typescript' ||\n          plugin.config.enums.mode === 'typescript+namespace')\n      ) {\n        key = `_${key}`;\n      }\n    }\n\n    return {\n      comments: createSchemaComment({ schema: item }),\n      key,\n      value: item.const,\n    };\n  });\n\n  return {\n    obj,\n    typeofItems,\n  };\n};\n\nconst addTypeEnum = ({\n  $ref,\n  plugin,\n  schema,\n  state,\n}: {\n  $ref: string;\n  plugin: HeyApiTypeScriptPlugin['Instance'];\n  schema: SchemaWithType<'enum'>;\n  state: State | undefined;\n}): ts.TypeAliasDeclaration | undefined => {\n  const file = plugin.context.file({ id: typesId })!;\n  const identifier = file.identifier({\n    $ref,\n    create: true,\n    namespace: 'type',\n  });\n\n  // TODO: parser - this is the old parser behavior where we would NOT\n  // print nested enum identifiers if they already exist. This is a\n  // blocker for referencing these identifiers within the file as\n  // we cannot guarantee just because they have a duplicate identifier,\n  // they have a duplicate value.\n  if (\n    !identifier.created &&\n    !isRefOpenApiComponent($ref) &&\n    plugin.config.enums.mode !== 'typescript+namespace'\n  ) {\n    return;\n  }\n\n  const type = schemaToType({\n    plugin,\n    schema: {\n      ...schema,\n      type: undefined,\n    },\n    state,\n  });\n\n  if (type) {\n    const node = compiler.typeAliasDeclaration({\n      comment: createSchemaComment({ schema }),\n      exportType: true,\n      name: identifier.name || '',\n      type,\n    });\n    return node;\n  }\n\n  return;\n};\n\nconst shouldCreateTypeScriptEnum = ({\n  plugin,\n  schema,\n}: {\n  plugin: HeyApiTypeScriptPlugin['Instance'];\n  schema: SchemaWithType<'enum'>;\n}) => {\n  const enumObject = schemaToEnumObject({ plugin, schema });\n  // TypeScript enums support only string and number values\n  return !enumObject.typeofItems.filter(\n    (type) => type !== 'number' && type !== 'string',\n  ).length;\n};\n\nconst addTypeScriptEnum = ({\n  $ref,\n  plugin,\n  schema,\n  state,\n}: {\n  $ref: string;\n  plugin: HeyApiTypeScriptPlugin['Instance'];\n  schema: SchemaWithType<'enum'>;\n  state: State | undefined;\n}) => {\n  const enumObject = schemaToEnumObject({ plugin, schema });\n\n  // fallback to types\n  if (!shouldCreateTypeScriptEnum({ plugin, schema })) {\n    const node = addTypeEnum({\n      $ref,\n      plugin,\n      schema,\n      state,\n    });\n    return node;\n  }\n\n  const file = plugin.context.file({ id: typesId })!;\n  const identifier = file.identifier({\n    $ref,\n    create: true,\n    namespace: 'enum',\n  });\n  const node = compiler.enumDeclaration({\n    leadingComment: createSchemaComment({ schema }),\n    name: identifier.name || '',\n    obj: enumObject.obj,\n  });\n  return node;\n};\n\nconst arrayTypeToIdentifier = ({\n  namespace,\n  plugin,\n  schema,\n  state,\n}: {\n  namespace: Array<ts.Statement>;\n  plugin: HeyApiTypeScriptPlugin['Instance'];\n  schema: SchemaWithType<'array'>;\n  state: State | undefined;\n}): ts.TypeNode | undefined => {\n  if (!schema.items) {\n    return compiler.typeArrayNode(\n      compiler.keywordTypeNode({\n        keyword: 'unknown',\n      }),\n    );\n  }\n\n  schema = deduplicateSchema({ detectFormat: false, schema });\n\n  const itemTypes: Array<ts.TypeNode> = [];\n\n  for (const item of schema.items!) {\n    const type = schemaToType({\n      namespace,\n      plugin,\n      schema: item,\n      state,\n    });\n\n    if (type) {\n      itemTypes.push(type);\n    }\n  }\n\n  if (!itemTypes.length) {\n    return;\n  }\n\n  if (itemTypes.length === 1) {\n    return compiler.typeArrayNode(itemTypes[0]!);\n  }\n\n  if (schema.logicalOperator === 'and') {\n    return compiler.typeArrayNode(\n      compiler.typeIntersectionNode({ types: itemTypes }),\n    );\n  }\n\n  return compiler.typeArrayNode(compiler.typeUnionNode({ types: itemTypes }));\n};\n\nconst booleanTypeToIdentifier = ({\n  schema,\n}: {\n  namespace: Array<ts.Statement>;\n  schema: SchemaWithType<'boolean'>;\n}): ts.TypeNode => {\n  if (schema.const !== undefined) {\n    return compiler.literalTypeNode({\n      literal: compiler.ots.boolean(schema.const as boolean),\n    });\n  }\n\n  return compiler.keywordTypeNode({\n    keyword: 'boolean',\n  });\n};\n\nconst enumTypeToIdentifier = ({\n  $ref,\n  namespace,\n  plugin,\n  schema,\n  state,\n}: {\n  $ref?: string;\n  namespace: Array<ts.Statement>;\n  plugin: HeyApiTypeScriptPlugin['Instance'];\n  schema: SchemaWithType<'enum'>;\n  state: State | undefined;\n}): ts.TypeNode | undefined => {\n  const file = plugin.context.file({ id: typesId })!;\n  const isRefComponent = $ref ? isRefOpenApiComponent($ref) : false;\n\n  if ($ref && isRefComponent) {\n    // when enums are disabled (default), emit only reusable components\n    // as types, otherwise the output would be broken if we skipped all enums\n    if (!plugin.config.enums.enabled) {\n      const typeNode = addTypeEnum({\n        $ref,\n        plugin,\n        schema,\n        state,\n      });\n      if (typeNode) {\n        file.add(typeNode);\n      }\n    }\n\n    if (plugin.config.enums.enabled) {\n      if (plugin.config.enums.mode === 'javascript') {\n        const typeNode = addTypeEnum({\n          $ref,\n          plugin,\n          schema,\n          state,\n        });\n        if (typeNode) {\n          file.add(typeNode);\n        }\n\n        const objectNode = addJavaScriptEnum({\n          $ref,\n          plugin,\n          schema,\n        });\n        if (objectNode) {\n          file.add(objectNode);\n        }\n      }\n\n      if (plugin.config.enums.mode === 'typescript') {\n        const enumNode = addTypeScriptEnum({\n          $ref,\n          plugin,\n          schema,\n          state,\n        });\n        if (enumNode) {\n          file.add(enumNode);\n        }\n      }\n\n      if (plugin.config.enums.mode === 'typescript+namespace') {\n        const enumNode = addTypeScriptEnum({\n          $ref,\n          plugin,\n          schema,\n          state,\n        });\n        if (enumNode) {\n          if (isRefComponent) {\n            file.add(enumNode);\n          } else {\n            // emit enum inside TypeScript namespace\n            namespace.push(enumNode);\n          }\n        }\n      }\n    }\n  }\n\n  const type = schemaToType({\n    plugin,\n    schema: {\n      ...schema,\n      type: undefined,\n    },\n    state,\n  });\n  return type;\n};\n\nconst numberTypeToIdentifier = ({\n  plugin,\n  schema,\n}: {\n  namespace: Array<ts.Statement>;\n  plugin: HeyApiTypeScriptPlugin['Instance'];\n  schema: SchemaWithType<'integer' | 'number'>;\n}): ts.TypeNode => {\n  if (schema.const !== undefined) {\n    return compiler.literalTypeNode({\n      literal: compiler.ots.number(schema.const as number),\n    });\n  }\n\n  if (schema.type === 'integer' && schema.format === 'int64') {\n    // TODO: parser - add ability to skip type transformers\n    if (plugin.getPlugin('@hey-api/transformers')?.config.bigInt) {\n      return compiler.typeReferenceNode({ typeName: 'bigint' });\n    }\n  }\n\n  return compiler.keywordTypeNode({\n    keyword: 'number',\n  });\n};\n\nconst objectTypeToIdentifier = ({\n  namespace,\n  plugin,\n  schema,\n  state,\n}: {\n  namespace: Array<ts.Statement>;\n  plugin: HeyApiTypeScriptPlugin['Instance'];\n  schema: SchemaWithType<'object'>;\n  state: State | undefined;\n}): ts.TypeNode | undefined => {\n  const file = plugin.context.file({ id: typesId })!;\n\n  // TODO: parser - handle constants\n  let indexKey: string | undefined;\n  let indexProperty: Property | undefined;\n  const schemaProperties: Array<Property> = [];\n  let indexPropertyItems: Array<IR.SchemaObject> = [];\n  const required = schema.required ?? [];\n  let hasOptionalProperties = false;\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n\n    const propertyType = schemaToType({\n      $ref: state ? [...state.path, name].join('/') : `${irRef}${name}`,\n      namespace,\n      plugin,\n      schema: property,\n      state,\n    });\n\n    if (!propertyType) {\n      continue;\n    }\n\n    const isRequired = required.includes(name);\n    schemaProperties.push({\n      comment: createSchemaComment({ schema: property }),\n      isReadOnly: property.accessScope === 'read',\n      isRequired,\n      name: fieldName({ context: plugin.context, name }),\n      type: propertyType,\n    });\n    indexPropertyItems.push(property);\n\n    if (!isRequired) {\n      hasOptionalProperties = true;\n    }\n  }\n\n  if (\n    schema.additionalProperties &&\n    (schema.additionalProperties.type !== 'never' || !indexPropertyItems.length)\n  ) {\n    if (schema.additionalProperties.type === 'never') {\n      indexPropertyItems = [schema.additionalProperties];\n    } else {\n      indexPropertyItems.unshift(schema.additionalProperties);\n    }\n\n    if (hasOptionalProperties) {\n      indexPropertyItems.push({\n        type: 'undefined',\n      });\n    }\n\n    indexProperty = {\n      isRequired: !schema.propertyNames,\n      name: 'key',\n      type: schemaToType({\n        namespace,\n        plugin,\n        schema:\n          indexPropertyItems.length === 1\n            ? indexPropertyItems[0]!\n            : {\n                items: indexPropertyItems,\n                logicalOperator: 'or',\n              },\n        state,\n      }),\n    };\n\n    if (schema.propertyNames?.$ref) {\n      const identifier = file.identifier({\n        $ref: schema.propertyNames.$ref,\n        create: true,\n        namespace: 'type',\n      });\n      if (identifier.name) {\n        indexKey = identifier.name;\n      }\n    }\n  }\n\n  return compiler.typeInterfaceNode({\n    indexKey,\n    indexProperty,\n    properties: schemaProperties,\n    useLegacyResolution: false,\n  });\n};\n\nconst stringTypeToIdentifier = ({\n  plugin,\n  schema,\n}: {\n  namespace: Array<ts.Statement>;\n  plugin: HeyApiTypeScriptPlugin['Instance'];\n  schema: SchemaWithType<'string'>;\n}): ts.TypeNode => {\n  if (schema.const !== undefined) {\n    return compiler.literalTypeNode({\n      literal: compiler.stringLiteral({ text: schema.const as string }),\n    });\n  }\n\n  if (schema.format) {\n    if (schema.format === 'binary') {\n      return compiler.typeUnionNode({\n        types: [\n          compiler.typeReferenceNode({\n            typeName: 'Blob',\n          }),\n          compiler.typeReferenceNode({\n            typeName: 'File',\n          }),\n        ],\n      });\n    }\n\n    if (schema.format === 'date-time' || schema.format === 'date') {\n      // TODO: parser - add ability to skip type transformers\n      if (plugin.getPlugin('@hey-api/transformers')?.config.dates) {\n        return compiler.typeReferenceNode({ typeName: 'Date' });\n      }\n    }\n  }\n\n  return compiler.keywordTypeNode({\n    keyword: 'string',\n  });\n};\n\nconst tupleTypeToIdentifier = ({\n  namespace,\n  plugin,\n  schema,\n  state,\n}: {\n  namespace: Array<ts.Statement>;\n  plugin: HeyApiTypeScriptPlugin['Instance'];\n  schema: SchemaWithType<'tuple'>;\n  state: State | undefined;\n}): ts.TypeNode | undefined => {\n  let itemTypes: Array<ts.Expression | ts.TypeNode> = [];\n\n  if (schema.const && Array.isArray(schema.const)) {\n    itemTypes = schema.const.map((value) => {\n      const expression = compiler.valueToExpression({ value });\n      return expression ?? compiler.identifier({ text: 'unknown' });\n    });\n  } else if (schema.items) {\n    for (const item of schema.items) {\n      const type = schemaToType({\n        namespace,\n        plugin,\n        schema: item,\n        state,\n      });\n\n      if (type) {\n        itemTypes.push(type);\n      }\n    }\n  }\n\n  if (!itemTypes.length) {\n    return;\n  }\n\n  return compiler.typeTupleNode({\n    types: itemTypes,\n  });\n};\n\nconst schemaTypeToIdentifier = ({\n  $ref,\n  namespace,\n  plugin,\n  schema,\n  state,\n}: {\n  $ref?: string;\n  namespace: Array<ts.Statement>;\n  plugin: HeyApiTypeScriptPlugin['Instance'];\n  schema: IR.SchemaObject;\n  state: State | undefined;\n}): ts.TypeNode | undefined => {\n  switch (schema.type as Required<IR.SchemaObject>['type']) {\n    case 'array':\n      return arrayTypeToIdentifier({\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'array'>,\n        state,\n      });\n    case 'boolean':\n      return booleanTypeToIdentifier({\n        namespace,\n        schema: schema as SchemaWithType<'boolean'>,\n      });\n    case 'enum':\n      return enumTypeToIdentifier({\n        $ref,\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'enum'>,\n        state,\n      });\n    case 'integer':\n    case 'number':\n      return numberTypeToIdentifier({\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'integer' | 'number'>,\n      });\n    case 'never':\n      return compiler.keywordTypeNode({\n        keyword: 'never',\n      });\n    case 'null':\n      return compiler.literalTypeNode({\n        literal: compiler.null(),\n      });\n    case 'object':\n      return objectTypeToIdentifier({\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'object'>,\n        state,\n      });\n    case 'string':\n      return stringTypeToIdentifier({\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'string'>,\n      });\n    case 'tuple':\n      return tupleTypeToIdentifier({\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'tuple'>,\n        state,\n      });\n    case 'undefined':\n      return compiler.keywordTypeNode({\n        keyword: 'undefined',\n      });\n    case 'unknown':\n      return compiler.keywordTypeNode({\n        keyword: 'unknown',\n      });\n    case 'void':\n      return compiler.keywordTypeNode({\n        keyword: 'void',\n      });\n  }\n};\n\nconst irParametersToIrSchema = ({\n  parameters,\n}: {\n  parameters: Record<string, IR.ParameterObject>;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {\n    type: 'object',\n  };\n\n  if (parameters) {\n    const properties: Record<string, IR.SchemaObject> = {};\n    const required: Array<string> = [];\n\n    for (const key in parameters) {\n      const parameter = parameters[key]!;\n\n      properties[parameter.name] = deduplicateSchema({\n        detectFormat: false,\n        schema: parameter.schema,\n      });\n\n      if (parameter.required) {\n        required.push(parameter.name);\n      }\n    }\n\n    irSchema.properties = properties;\n\n    if (required.length) {\n      irSchema.required = required;\n    }\n  }\n\n  return irSchema;\n};\n\nconst operationToDataType = ({\n  operation,\n  plugin,\n}: {\n  operation: IR.OperationObject;\n  plugin: HeyApiTypeScriptPlugin['Instance'];\n}) => {\n  const file = plugin.context.file({ id: typesId })!;\n  const data: IR.SchemaObject = {\n    type: 'object',\n  };\n  const dataRequired: Array<string> = [];\n\n  if (!data.properties) {\n    data.properties = {};\n  }\n\n  if (operation.body) {\n    data.properties.body = operation.body.schema;\n\n    if (operation.body.required) {\n      dataRequired.push('body');\n    }\n  } else {\n    data.properties.body = {\n      type: 'never',\n    };\n  }\n\n  // TODO: parser - handle cookie parameters\n\n  // do not set headers to never so we can always pass arbitrary values\n  if (operation.parameters?.header) {\n    data.properties.headers = irParametersToIrSchema({\n      parameters: operation.parameters.header,\n    });\n\n    if (data.properties.headers.required) {\n      dataRequired.push('headers');\n    }\n  }\n\n  if (operation.parameters?.path) {\n    data.properties.path = irParametersToIrSchema({\n      parameters: operation.parameters.path,\n    });\n\n    if (data.properties.path.required) {\n      dataRequired.push('path');\n    }\n  } else {\n    data.properties.path = {\n      type: 'never',\n    };\n  }\n\n  if (operation.parameters?.query) {\n    data.properties.query = irParametersToIrSchema({\n      parameters: operation.parameters.query,\n    });\n\n    if (data.properties.query.required) {\n      dataRequired.push('query');\n    }\n  } else {\n    data.properties.query = {\n      type: 'never',\n    };\n  }\n\n  data.properties.url = {\n    const: operation.path,\n    type: 'string',\n  };\n  dataRequired.push('url');\n\n  data.required = dataRequired;\n\n  const identifier = file.identifier({\n    $ref: operationIrRef({\n      config: plugin.context.config,\n      id: operation.id,\n      type: 'data',\n    }),\n    create: true,\n    namespace: 'type',\n  });\n  const type = schemaToType({\n    plugin,\n    schema: data,\n    state: {\n      path: [operation.method, operation.path, 'data'],\n    },\n  });\n\n  if (type) {\n    const node = compiler.typeAliasDeclaration({\n      exportType: true,\n      name: identifier.name || '',\n      type,\n    });\n    file.add(node);\n  }\n};\n\nconst operationToType = ({\n  operation,\n  plugin,\n}: {\n  operation: IR.OperationObject;\n  plugin: HeyApiTypeScriptPlugin['Instance'];\n}) => {\n  operationToDataType({ operation, plugin });\n\n  const file = plugin.context.file({ id: typesId })!;\n\n  const { error, errors, response, responses } =\n    operationResponsesMap(operation);\n\n  if (errors) {\n    const identifierErrors = file.identifier({\n      $ref: operationIrRef({\n        config: plugin.context.config,\n        id: operation.id,\n        type: 'errors',\n      }),\n      create: true,\n      namespace: 'type',\n    });\n    if (identifierErrors.name) {\n      const type = schemaToType({\n        plugin,\n        schema: errors,\n        state: {\n          path: [operation.method, operation.path, 'errors'],\n        },\n      });\n\n      if (type) {\n        const node = compiler.typeAliasDeclaration({\n          exportType: true,\n          name: identifierErrors.name,\n          type,\n        });\n        file.add(node);\n      }\n\n      if (error) {\n        const identifierError = file.identifier({\n          $ref: operationIrRef({\n            config: plugin.context.config,\n            id: operation.id,\n            type: 'error',\n          }),\n          create: true,\n          namespace: 'type',\n        });\n        if (identifierError.name) {\n          const errorsType = compiler.typeReferenceNode({\n            typeName: identifierErrors.name,\n          });\n          const keyofType = ts.factory.createTypeOperatorNode(\n            ts.SyntaxKind.KeyOfKeyword,\n            errorsType,\n          );\n          const node = compiler.typeAliasDeclaration({\n            exportType: true,\n            name: identifierError.name,\n            type: compiler.indexedAccessTypeNode({\n              indexType: keyofType,\n              objectType: errorsType,\n            }),\n          });\n          file.add(node);\n        }\n      }\n    }\n  }\n\n  if (responses) {\n    const identifierResponses = file.identifier({\n      $ref: operationIrRef({\n        config: plugin.context.config,\n        id: operation.id,\n        type: 'responses',\n      }),\n      create: true,\n      namespace: 'type',\n    });\n    if (identifierResponses.name) {\n      const type = schemaToType({\n        plugin,\n        schema: responses,\n        state: {\n          path: [operation.method, operation.path, 'responses'],\n        },\n      });\n\n      if (type) {\n        const node = compiler.typeAliasDeclaration({\n          exportType: true,\n          name: identifierResponses.name,\n          type,\n        });\n        file.add(node);\n      }\n\n      if (response) {\n        const identifierResponse = file.identifier({\n          $ref: operationIrRef({\n            config: plugin.context.config,\n            id: operation.id,\n            type: 'response',\n          }),\n          create: true,\n          namespace: 'type',\n        });\n        if (identifierResponse.name) {\n          const responsesType = compiler.typeReferenceNode({\n            typeName: identifierResponses.name,\n          });\n          const keyofType = ts.factory.createTypeOperatorNode(\n            ts.SyntaxKind.KeyOfKeyword,\n            responsesType,\n          );\n          const node = compiler.typeAliasDeclaration({\n            exportType: true,\n            name: identifierResponse.name,\n            type: compiler.indexedAccessTypeNode({\n              indexType: keyofType,\n              objectType: responsesType,\n            }),\n          });\n          file.add(node);\n        }\n      }\n    }\n  }\n};\n\nexport const schemaToType = ({\n  $ref,\n  namespace = [],\n  plugin,\n  schema,\n  state,\n}: {\n  $ref?: string;\n  namespace?: Array<ts.Statement>;\n  plugin: HeyApiTypeScriptPlugin['Instance'];\n  schema: IR.SchemaObject;\n  state: State | undefined;\n}): ts.TypeNode | undefined => {\n  const file = plugin.context.file({ id: typesId })!;\n\n  let type: ts.TypeNode | undefined;\n\n  if (schema.$ref) {\n    const refSchema = plugin.context.resolveIrRef<IR.SchemaObject>(schema.$ref);\n\n    const identifier = file.identifier({\n      $ref: schema.$ref,\n      create: true,\n      namespace:\n        refSchema.type === 'enum' &&\n        plugin.config.enums.enabled &&\n        (plugin.config.enums.mode === 'typescript' ||\n          plugin.config.enums.mode === 'typescript+namespace') &&\n        shouldCreateTypeScriptEnum({\n          plugin,\n          schema: refSchema as SchemaWithType<'enum'>,\n        })\n          ? 'enum'\n          : 'type',\n    });\n    type = compiler.typeReferenceNode({\n      typeName: identifier.name || '',\n    });\n  } else if (schema.type) {\n    type = schemaTypeToIdentifier({\n      $ref,\n      namespace,\n      plugin,\n      schema,\n      state,\n    });\n  } else if (schema.items) {\n    schema = deduplicateSchema({ detectFormat: false, schema });\n    if (schema.items) {\n      const itemTypes: Array<ts.TypeNode> = [];\n\n      for (const item of schema.items) {\n        // TODO: correctly populate state.path\n        const type = schemaToType({\n          namespace,\n          plugin,\n          schema: item,\n          state,\n        });\n        if (type) {\n          itemTypes.push(type);\n        }\n      }\n\n      type =\n        schema.logicalOperator === 'and'\n          ? compiler.typeIntersectionNode({ types: itemTypes })\n          : compiler.typeUnionNode({ types: itemTypes });\n    } else {\n      // TODO: correctly populate state.path\n      type = schemaToType({\n        namespace,\n        plugin,\n        schema,\n        state,\n      });\n    }\n  } else {\n    // catch-all fallback for failed schemas\n    type = schemaTypeToIdentifier({\n      namespace,\n      plugin,\n      schema: {\n        type: 'unknown',\n      },\n      state,\n    });\n  }\n\n  // emit nodes only if $ref points to a reusable component\n  if ($ref && isRefOpenApiComponent($ref)) {\n    // emit namespace if it has any members\n    if (namespace.length) {\n      const identifier = file.identifier({\n        $ref,\n        create: true,\n        namespace: 'value',\n      });\n      const node = compiler.namespaceDeclaration({\n        name: identifier.name || '',\n        statements: namespace,\n      });\n      file.add(node);\n    }\n\n    // enum handler emits its own artifacts\n    if (schema.type !== 'enum' && type) {\n      const identifier = file.identifier({\n        $ref,\n        create: true,\n        namespace: 'type',\n      });\n      const node = compiler.typeAliasDeclaration({\n        comment: createSchemaComment({ schema }),\n        exportType: true,\n        name: identifier.name || '',\n        type,\n      });\n      file.add(node);\n    }\n  }\n\n  return type;\n};\n\nexport const handler: HeyApiTypeScriptPlugin['Handler'] = ({ plugin }) => {\n  const file = plugin.createFile({\n    id: typesId,\n    identifierCase: plugin.config.case,\n    path: plugin.output,\n  });\n\n  // reserve identifier for ClientOptions\n  const clientOptions = file.identifier({\n    $ref: 'ClientOptions',\n    create: true,\n    namespace: 'type',\n  });\n\n  const servers: Array<IR.ServerObject> = [];\n\n  plugin.forEach(\n    'operation',\n    'parameter',\n    'requestBody',\n    'schema',\n    'server',\n    (event) => {\n      if (event.type === 'operation') {\n        operationToType({ operation: event.operation, plugin });\n      } else if (event.type === 'parameter') {\n        schemaToType({\n          $ref: event.$ref,\n          plugin,\n          schema: event.parameter.schema,\n          state: {\n            // TODO: correctly populate state.path\n            path: [],\n          },\n        });\n      } else if (event.type === 'requestBody') {\n        schemaToType({\n          $ref: event.$ref,\n          plugin,\n          schema: event.requestBody.schema,\n          state: {\n            // TODO: correctly populate state.path\n            path: [],\n          },\n        });\n      } else if (event.type === 'schema') {\n        schemaToType({\n          $ref: event.$ref,\n          plugin,\n          schema: event.schema,\n          state: {\n            // TODO: correctly populate state.path\n            path: [],\n          },\n        });\n      } else if (event.type === 'server') {\n        servers.push(event.server);\n      }\n    },\n  );\n\n  createClientOptions({ identifier: clientOptions, plugin, servers });\n};\n","import { definePluginConfig } from '../../shared/utils/config';\nimport { handler } from './plugin';\nimport { handlerLegacy } from './plugin-legacy';\nimport type { HeyApiTypeScriptPlugin } from './types';\n\nexport const defaultConfig: HeyApiTypeScriptPlugin['Config'] = {\n  config: {\n    case: 'PascalCase',\n    exportFromIndex: true,\n    style: 'preserve',\n    tree: false,\n  },\n  handler,\n  handlerLegacy,\n  name: '@hey-api/typescript',\n  output: 'types',\n  resolveConfig: (plugin, context) => {\n    plugin.config.enums = context.valueToObject({\n      defaultValue: {\n        case: 'SCREAMING_SNAKE_CASE',\n        constantsIgnoreNull: false,\n        enabled: Boolean(plugin.config.enums),\n        mode: 'javascript',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (mode) => ({ mode }),\n      },\n      value: plugin.config.enums,\n    });\n  },\n};\n\n/**\n * Type helper for `@hey-api/typescript` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import type { ImportExportItemObject } from '../../../compiler/utils';\nimport type { IR } from '../../../ir/types';\nimport { getClientPlugin } from '../../@hey-api/client-core/utils';\nimport { operationOptionsType } from '../../@hey-api/sdk/operation';\nimport { importIdentifier } from '../../@hey-api/typescript/ref';\nimport type { PluginInstance } from './types';\n\nexport const useTypeData = ({\n  operation,\n  plugin,\n}: {\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n}) => {\n  const file = plugin.context.file({ id: plugin.name })!;\n\n  const typeData = operationOptionsType({\n    context: plugin.context,\n    file,\n    operation,\n  });\n  return typeData;\n};\n\nexport const useTypeError = ({\n  operation,\n  plugin,\n}: {\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n}) => {\n  const file = plugin.context.file({ id: plugin.name })!;\n  const identifierError = importIdentifier({\n    context: plugin.context,\n    file,\n    operation,\n    type: 'error',\n  });\n  let typeError: ImportExportItemObject = {\n    asType: true,\n    name: identifierError.name || '',\n  };\n  if (!typeError.name) {\n    typeError = file.import({\n      asType: true,\n      module: plugin.name,\n      name: 'DefaultError',\n    });\n  }\n  const client = getClientPlugin(plugin.context.config);\n  if (client.name === '@hey-api/client-axios') {\n    const axiosError = file.import({\n      asType: true,\n      module: 'axios',\n      name: 'AxiosError',\n    });\n    typeError = {\n      ...axiosError,\n      name: `${axiosError.name}<${typeError.name}>`,\n    };\n  }\n  return typeError;\n};\n\nexport const useTypeResponse = ({\n  operation,\n  plugin,\n}: {\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n}) => {\n  const file = plugin.context.file({ id: plugin.name })!;\n  const identifierResponse = importIdentifier({\n    context: plugin.context,\n    file,\n    operation,\n    type: 'response',\n  });\n  const typeResponse = identifierResponse.name || 'unknown';\n  return typeResponse;\n};\n","import { compiler, type Property } from '../../../compiler';\nimport { clientApi } from '../../../generate/client';\nimport { hasOperationDataRequired } from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { getClientBaseUrlKey } from '../../@hey-api/client-core/utils';\nimport type { PluginInstance } from './types';\nimport { useTypeData } from './useType';\n\nconst createQueryKeyFn = 'createQueryKey';\nexport const queryKeyName = 'QueryKey';\nconst TOptionsType = 'TOptions';\n\nconst infiniteIdentifier = compiler.identifier({ text: 'infinite' });\nconst optionsIdentifier = compiler.identifier({ text: 'options' });\n\nexport const createQueryKeyFunction = ({\n  plugin,\n}: {\n  plugin: PluginInstance;\n}) => {\n  const file = plugin.context.file({ id: plugin.name })!;\n\n  const identifierCreateQueryKey = file.identifier({\n    // TODO: refactor for better cross-plugin compatibility\n    $ref: `#/tanstack-query-create-query-key/${createQueryKeyFn}`,\n    case: plugin.config.case,\n    create: true,\n    namespace: 'value',\n  });\n\n  if (identifierCreateQueryKey.name) {\n    const returnType = compiler.indexedAccessTypeNode({\n      indexType: compiler.literalTypeNode({\n        literal: compiler.ots.number(0),\n      }),\n      objectType: compiler.typeReferenceNode({\n        typeArguments: [compiler.typeReferenceNode({ typeName: TOptionsType })],\n        typeName: queryKeyName,\n      }),\n    });\n\n    const fn = compiler.constVariable({\n      expression: compiler.arrowFunction({\n        multiLine: true,\n        parameters: [\n          {\n            name: 'id',\n            type: compiler.typeReferenceNode({ typeName: 'string' }),\n          },\n          {\n            isRequired: false,\n            name: 'options',\n            type: compiler.typeReferenceNode({ typeName: TOptionsType }),\n          },\n          {\n            isRequired: false,\n            name: 'infinite',\n            type: compiler.typeReferenceNode({ typeName: 'boolean' }),\n          },\n        ],\n        returnType: compiler.typeTupleNode({\n          types: [returnType],\n        }),\n        statements: [\n          compiler.constVariable({\n            assertion: returnType,\n            expression: compiler.objectExpression({\n              multiLine: false,\n              obj: [\n                {\n                  key: '_id',\n                  value: compiler.identifier({ text: 'id' }),\n                },\n                {\n                  key: getClientBaseUrlKey(plugin.context.config),\n                  value: compiler.identifier({\n                    text: `(options?.client ?? _heyApiClient).getConfig().${getClientBaseUrlKey(plugin.context.config)}`,\n                  }),\n                },\n              ],\n            }),\n            name: 'params',\n            typeName: returnType,\n          }),\n          compiler.ifStatement({\n            expression: infiniteIdentifier,\n            thenStatement: compiler.block({\n              statements: [\n                compiler.expressionToStatement({\n                  expression: compiler.binaryExpression({\n                    left: compiler.propertyAccessExpression({\n                      expression: 'params',\n                      name: '_infinite',\n                    }),\n                    right: infiniteIdentifier,\n                  }),\n                }),\n              ],\n            }),\n          }),\n          compiler.ifStatement({\n            expression: compiler.propertyAccessExpression({\n              expression: optionsIdentifier,\n              isOptional: true,\n              name: compiler.identifier({ text: 'body' }),\n            }),\n            thenStatement: compiler.block({\n              statements: [\n                compiler.expressionToStatement({\n                  expression: compiler.binaryExpression({\n                    left: compiler.propertyAccessExpression({\n                      expression: 'params',\n                      name: 'body',\n                    }),\n                    right: compiler.propertyAccessExpression({\n                      expression: 'options',\n                      name: 'body',\n                    }),\n                  }),\n                }),\n              ],\n            }),\n          }),\n          compiler.ifStatement({\n            expression: compiler.propertyAccessExpression({\n              expression: optionsIdentifier,\n              isOptional: true,\n              name: compiler.identifier({ text: 'headers' }),\n            }),\n            thenStatement: compiler.block({\n              statements: [\n                compiler.expressionToStatement({\n                  expression: compiler.binaryExpression({\n                    left: compiler.propertyAccessExpression({\n                      expression: 'params',\n                      name: 'headers',\n                    }),\n                    right: compiler.propertyAccessExpression({\n                      expression: 'options',\n                      name: 'headers',\n                    }),\n                  }),\n                }),\n              ],\n            }),\n          }),\n          compiler.ifStatement({\n            expression: compiler.propertyAccessExpression({\n              expression: optionsIdentifier,\n              isOptional: true,\n              name: compiler.identifier({ text: 'path' }),\n            }),\n            thenStatement: compiler.block({\n              statements: [\n                compiler.expressionToStatement({\n                  expression: compiler.binaryExpression({\n                    left: compiler.propertyAccessExpression({\n                      expression: 'params',\n                      name: 'path',\n                    }),\n                    right: compiler.propertyAccessExpression({\n                      expression: 'options',\n                      name: 'path',\n                    }),\n                  }),\n                }),\n              ],\n            }),\n          }),\n          compiler.ifStatement({\n            expression: compiler.propertyAccessExpression({\n              expression: optionsIdentifier,\n              isOptional: true,\n              name: compiler.identifier({ text: 'query' }),\n            }),\n            thenStatement: compiler.block({\n              statements: [\n                compiler.expressionToStatement({\n                  expression: compiler.binaryExpression({\n                    left: compiler.propertyAccessExpression({\n                      expression: 'params',\n                      name: 'query',\n                    }),\n                    right: compiler.propertyAccessExpression({\n                      expression: 'options',\n                      name: 'query',\n                    }),\n                  }),\n                }),\n              ],\n            }),\n          }),\n          compiler.returnStatement({\n            expression: compiler.arrayLiteralExpression({\n              elements: [compiler.identifier({ text: 'params' })],\n            }),\n          }),\n        ],\n        types: [\n          {\n            extends: compiler.typeReferenceNode({\n              typeName: compiler.identifier({\n                text: clientApi.Options.name,\n              }),\n            }),\n            name: TOptionsType,\n          },\n        ],\n      }),\n      name: identifierCreateQueryKey.name,\n    });\n    file.add(fn);\n  }\n};\n\nconst createQueryKeyLiteral = ({\n  id,\n  isInfinite,\n  plugin,\n}: {\n  id: string;\n  isInfinite?: boolean;\n  plugin: PluginInstance;\n}) => {\n  const file = plugin.context.file({ id: plugin.name })!;\n  const identifierCreateQueryKey = file.identifier({\n    // TODO: refactor for better cross-plugin compatibility\n    $ref: `#/tanstack-query-create-query-key/${createQueryKeyFn}`,\n    case: plugin.config.case,\n    namespace: 'value',\n  });\n  const createQueryKeyCallExpression = compiler.callExpression({\n    functionName: identifierCreateQueryKey.name || '',\n    parameters: [\n      compiler.ots.string(id),\n      'options',\n      isInfinite ? compiler.ots.boolean(true) : undefined,\n    ],\n  });\n  return createQueryKeyCallExpression;\n};\n\nexport const createQueryKeyType = ({ plugin }: { plugin: PluginInstance }) => {\n  const file = plugin.context.file({ id: plugin.name })!;\n\n  const properties: Property[] = [\n    {\n      name: '_id',\n      type: compiler.keywordTypeNode({\n        keyword: 'string',\n      }),\n    },\n    {\n      isRequired: false,\n      name: '_infinite',\n      type: compiler.keywordTypeNode({\n        keyword: 'boolean',\n      }),\n    },\n  ];\n\n  const queryKeyType = compiler.typeAliasDeclaration({\n    exportType: true,\n    name: queryKeyName,\n    type: compiler.typeTupleNode({\n      types: [\n        compiler.typeIntersectionNode({\n          types: [\n            compiler.typeReferenceNode({\n              typeName: `Pick<${TOptionsType}, '${getClientBaseUrlKey(plugin.context.config)}' | 'body' | 'headers' | 'path' | 'query'>`,\n            }),\n            compiler.typeInterfaceNode({\n              properties,\n              useLegacyResolution: true,\n            }),\n          ],\n        }),\n      ],\n    }),\n    typeParameters: [\n      {\n        extends: compiler.typeReferenceNode({\n          typeName: compiler.identifier({\n            text: clientApi.Options.name,\n          }),\n        }),\n        name: TOptionsType,\n      },\n    ],\n  });\n  file.add(queryKeyType);\n};\n\nexport const queryKeyStatement = ({\n  isInfinite,\n  operation,\n  plugin,\n  typeQueryKey,\n}: {\n  isInfinite: boolean;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n  typeQueryKey?: string;\n}) => {\n  const file = plugin.context.file({ id: plugin.name })!;\n  const typeData = useTypeData({ operation, plugin });\n  const identifier = isInfinite\n    ? file.identifier({\n        // TODO: refactor for better cross-plugin compatibility\n        $ref: `#/tanstack-query-infinite-query-key/${operation.id}`,\n        case: plugin.config.infiniteQueryKeys.case,\n        create: true,\n        nameTransformer: plugin.config.infiniteQueryKeys.name,\n        namespace: 'value',\n      })\n    : file.identifier({\n        // TODO: refactor for better cross-plugin compatibility\n        $ref: `#/tanstack-query-query-key/${operation.id}`,\n        case: plugin.config.queryKeys.case,\n        create: true,\n        nameTransformer: plugin.config.queryKeys.name,\n        namespace: 'value',\n      });\n  const statement = compiler.constVariable({\n    exportConst: true,\n    expression: compiler.arrowFunction({\n      parameters: [\n        {\n          isRequired: hasOperationDataRequired(operation),\n          name: 'options',\n          type: typeData,\n        },\n      ],\n      returnType: isInfinite ? typeQueryKey : undefined,\n      statements: createQueryKeyLiteral({\n        id: operation.id,\n        isInfinite,\n        plugin,\n      }),\n    }),\n    name: identifier.name || '',\n  });\n  return statement;\n};\n","import ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport { tsNodeToString } from '../../../compiler/utils';\nimport { clientApi } from '../../../generate/client';\nimport { operationPagination } from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { schemaToType } from '../../@hey-api/typescript/plugin';\nimport {\n  createOperationComment,\n  isOperationOptionsRequired,\n} from '../../shared/utils/operation';\nimport {\n  createQueryKeyFunction,\n  createQueryKeyType,\n  queryKeyName,\n  queryKeyStatement,\n} from './queryKey';\nimport type { PluginInstance, PluginState } from './types';\nimport { useTypeData, useTypeError, useTypeResponse } from './useType';\n\nconst createInfiniteParamsFn = 'createInfiniteParams';\nconst infiniteQueryOptionsFn = 'infiniteQueryOptions';\n\nconst createInfiniteParamsFunction = ({\n  plugin,\n}: {\n  plugin: PluginInstance;\n}) => {\n  const file = plugin.context.file({ id: plugin.name })!;\n\n  const identifierCreateInfiniteParams = file.identifier({\n    // TODO: refactor for better cross-plugin compatibility\n    $ref: `#/tanstack-query-create-infinite-params/${createInfiniteParamsFn}`,\n    case: plugin.config.case,\n    create: true,\n    namespace: 'value',\n  });\n\n  const fn = compiler.constVariable({\n    expression: compiler.arrowFunction({\n      multiLine: true,\n      parameters: [\n        {\n          name: 'queryKey',\n          type: compiler.typeReferenceNode({\n            typeName: `QueryKey<${clientApi.Options.name}>`,\n          }),\n        },\n        {\n          name: 'page',\n          type: compiler.typeReferenceNode({ typeName: 'K' }),\n        },\n      ],\n      statements: [\n        compiler.constVariable({\n          expression: compiler.objectExpression({\n            obj: [\n              {\n                spread: compiler.propertyAccessExpression({\n                  expression: 'queryKey',\n                  name: 0,\n                }),\n              },\n            ],\n          }),\n          name: 'params',\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'body' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'body',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        assertion: 'any',\n                        spread: 'queryKey[0].body',\n                      },\n                      {\n                        assertion: 'any',\n                        spread: 'page.body',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'headers' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'headers',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        spread: 'queryKey[0].headers',\n                      },\n                      {\n                        spread: 'page.headers',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'path' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'path',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        assertion: 'any',\n                        spread: 'queryKey[0].path',\n                      },\n                      {\n                        assertion: 'any',\n                        spread: 'page.path',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'query' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'query',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        assertion: 'any',\n                        spread: 'queryKey[0].query',\n                      },\n                      {\n                        assertion: 'any',\n                        spread: 'page.query',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.returnVariable({\n          expression: compiler.asExpression({\n            expression: compiler.asExpression({\n              expression: compiler.identifier({ text: 'params' }),\n              type: compiler.keywordTypeNode({ keyword: 'unknown' }),\n            }),\n            type: ts.factory.createTypeQueryNode(\n              compiler.identifier({ text: 'page' }),\n            ),\n          }),\n        }),\n      ],\n      types: [\n        {\n          extends: compiler.typeReferenceNode({\n            typeName: compiler.identifier({\n              text: `Pick<QueryKey<${clientApi.Options.name}>[0], 'body' | 'headers' | 'path' | 'query'>`,\n            }),\n          }),\n          name: 'K',\n        },\n      ],\n    }),\n    name: identifierCreateInfiniteParams.name || '',\n  });\n  file.add(fn);\n};\n\nexport const createInfiniteQueryOptions = ({\n  operation,\n  plugin,\n  queryFn,\n  state,\n}: {\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n  queryFn: string;\n  state: PluginState;\n}) => {\n  if (\n    !plugin.config.infiniteQueryOptions ||\n    !(['get', 'post'] as (typeof operation.method)[]).includes(operation.method)\n  ) {\n    return state;\n  }\n\n  const pagination = operationPagination({\n    context: plugin.context,\n    operation,\n  });\n\n  if (!pagination) {\n    return state;\n  }\n\n  const file = plugin.context.file({ id: plugin.name })!;\n  const isRequiredOptions = isOperationOptionsRequired({\n    context: plugin.context,\n    operation,\n  });\n\n  if (!state.hasInfiniteQueries) {\n    state.hasInfiniteQueries = true;\n\n    if (!state.hasCreateQueryKeyParamsFunction) {\n      createQueryKeyType({ plugin });\n      createQueryKeyFunction({ plugin });\n      state.hasCreateQueryKeyParamsFunction = true;\n    }\n\n    if (!state.hasCreateInfiniteParamsFunction) {\n      createInfiniteParamsFunction({ plugin });\n      state.hasCreateInfiniteParamsFunction = true;\n    }\n\n    file.import({\n      module: plugin.name,\n      name: infiniteQueryOptionsFn,\n    });\n\n    state.typeInfiniteData = file.import({\n      asType: true,\n      module: plugin.name,\n      name: 'InfiniteData',\n    });\n  }\n\n  state.hasUsedQueryFn = true;\n\n  const typeData = useTypeData({ operation, plugin });\n  const typeError = useTypeError({ operation, plugin });\n  const typeResponse = useTypeResponse({ operation, plugin });\n\n  const typeQueryKey = `${queryKeyName}<${typeData}>`;\n  const typePageObjectParam = `Pick<${typeQueryKey}[0], 'body' | 'headers' | 'path' | 'query'>`;\n  const pluginTypeScript = plugin.getPlugin('@hey-api/typescript');\n  // TODO: parser - this is a bit clunky, need to compile type to string because\n  // `compiler.returnFunctionCall()` accepts only strings, should be cleaned up\n  const type = schemaToType({\n    plugin: pluginTypeScript as Parameters<typeof schemaToType>[0]['plugin'],\n    schema: pagination.schema,\n    state: undefined,\n  });\n  const typePageParam = type\n    ? `${tsNodeToString({\n        node: type,\n        unescape: true,\n      })} | ${typePageObjectParam}`\n    : `${typePageObjectParam}`;\n\n  const node = queryKeyStatement({\n    isInfinite: true,\n    operation,\n    plugin,\n    typeQueryKey,\n  });\n  file.add(node);\n\n  const identifierInfiniteQueryKey = file.identifier({\n    // TODO: refactor for better cross-plugin compatibility\n    $ref: `#/tanstack-query-infinite-query-key/${operation.id}`,\n    case: plugin.config.infiniteQueryKeys.case,\n    nameTransformer: plugin.config.infiniteQueryKeys.name,\n    namespace: 'value',\n  });\n\n  const awaitSdkExpression = compiler.awaitExpression({\n    expression: compiler.callExpression({\n      functionName: queryFn,\n      parameters: [\n        compiler.objectExpression({\n          multiLine: true,\n          obj: [\n            {\n              spread: 'options',\n            },\n            {\n              spread: 'params',\n            },\n            {\n              key: 'signal',\n              shorthand: true,\n              value: compiler.identifier({\n                text: 'signal',\n              }),\n            },\n            {\n              key: 'throwOnError',\n              value: true,\n            },\n          ],\n        }),\n      ],\n    }),\n  });\n\n  const identifierCreateInfiniteParams = file.identifier({\n    // TODO: refactor for better cross-plugin compatibility\n    $ref: `#/tanstack-query-create-infinite-params/${createInfiniteParamsFn}`,\n    case: plugin.config.case,\n    namespace: 'value',\n  });\n\n  const statements: Array<ts.Statement> = [\n    compiler.constVariable({\n      comment: [\n        {\n          jsdoc: false,\n          lines: ['@ts-ignore'],\n        },\n      ],\n      expression: compiler.conditionalExpression({\n        condition: compiler.binaryExpression({\n          left: compiler.typeOfExpression({\n            text: 'pageParam',\n          }),\n          operator: '===',\n          right: compiler.ots.string('object'),\n        }),\n        whenFalse: compiler.objectExpression({\n          multiLine: true,\n          obj: [\n            {\n              key: pagination.in,\n              value: compiler.objectExpression({\n                multiLine: true,\n                obj: [\n                  {\n                    key: pagination.name,\n                    value: compiler.identifier({\n                      text: 'pageParam',\n                    }),\n                  },\n                ],\n              }),\n            },\n          ],\n        }),\n        whenTrue: compiler.identifier({\n          text: 'pageParam',\n        }),\n      }),\n      name: 'page',\n      typeName: typePageObjectParam,\n    }),\n    compiler.constVariable({\n      expression: compiler.callExpression({\n        functionName: identifierCreateInfiniteParams.name || '',\n        parameters: ['queryKey', 'page'],\n      }),\n      name: 'params',\n    }),\n  ];\n\n  if (plugin.getPlugin('@hey-api/sdk')?.config.responseStyle === 'data') {\n    statements.push(\n      compiler.returnVariable({\n        expression: awaitSdkExpression,\n      }),\n    );\n  } else {\n    statements.push(\n      compiler.constVariable({\n        destructure: true,\n        expression: awaitSdkExpression,\n        name: 'data',\n      }),\n      compiler.returnVariable({\n        expression: 'data',\n      }),\n    );\n  }\n\n  const identifierInfiniteQueryOptions = file.identifier({\n    // TODO: refactor for better cross-plugin compatibility\n    $ref: `#/tanstack-query-infinite-query-options/${operation.id}`,\n    case: plugin.config.infiniteQueryOptions.case,\n    create: true,\n    nameTransformer: plugin.config.infiniteQueryOptions.name,\n    namespace: 'value',\n  });\n\n  const statement = compiler.constVariable({\n    comment: plugin.config.comments\n      ? createOperationComment({ operation })\n      : undefined,\n    exportConst: true,\n    expression: compiler.arrowFunction({\n      parameters: [\n        {\n          isRequired: isRequiredOptions,\n          name: 'options',\n          type: typeData,\n        },\n      ],\n      statements: [\n        compiler.returnFunctionCall({\n          args: [\n            compiler.objectExpression({\n              comments: [\n                {\n                  jsdoc: false,\n                  lines: ['@ts-ignore'],\n                },\n              ],\n              obj: [\n                {\n                  key: 'queryFn',\n                  value: compiler.arrowFunction({\n                    async: true,\n                    multiLine: true,\n                    parameters: [\n                      {\n                        destructure: [\n                          {\n                            name: 'pageParam',\n                          },\n                          {\n                            name: 'queryKey',\n                          },\n                          {\n                            name: 'signal',\n                          },\n                        ],\n                      },\n                    ],\n                    statements,\n                  }),\n                },\n                {\n                  key: 'queryKey',\n                  value: compiler.callExpression({\n                    functionName: identifierInfiniteQueryKey.name || '',\n                    parameters: ['options'],\n                  }),\n                },\n              ],\n            }),\n          ],\n          name: infiniteQueryOptionsFn,\n          // TODO: better types syntax\n          types: [\n            typeResponse,\n            typeError.name,\n            `${typeof state.typeInfiniteData === 'string' ? state.typeInfiniteData : state.typeInfiniteData.name}<${typeResponse}>`,\n            typeQueryKey,\n            typePageParam,\n          ],\n        }),\n      ],\n    }),\n    name: identifierInfiniteQueryOptions.name || '',\n  });\n  file.add(statement);\n  return;\n};\n","import type ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport type { IR } from '../../../ir/types';\nimport { createOperationComment } from '../../shared/utils/operation';\nimport type { PluginInstance, PluginState } from './types';\nimport { useTypeData, useTypeError, useTypeResponse } from './useType';\n\nconst mutationOptionsFn = 'mutationOptions';\n\nexport const createMutationOptions = ({\n  operation,\n  plugin,\n  queryFn,\n  state,\n}: {\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n  queryFn: string;\n  state: PluginState;\n}) => {\n  if (\n    !plugin.config.mutationOptions.enabled ||\n    !(\n      ['delete', 'patch', 'post', 'put'] as (typeof operation.method)[]\n    ).includes(operation.method)\n  ) {\n    return state;\n  }\n\n  const mutationsType =\n    plugin.name === '@tanstack/angular-query-experimental' ||\n    plugin.name === '@tanstack/svelte-query' ||\n    plugin.name === '@tanstack/solid-query'\n      ? 'MutationOptions'\n      : 'UseMutationOptions';\n\n  const file = plugin.context.file({ id: plugin.name })!;\n\n  if (!state.hasMutations) {\n    state.hasMutations = true;\n\n    file.import({\n      asType: true,\n      module: plugin.name,\n      name: mutationsType,\n    });\n  }\n\n  state.hasUsedQueryFn = true;\n\n  const typeData = useTypeData({ operation, plugin });\n  const typeError = useTypeError({ operation, plugin });\n  const typeResponse = useTypeResponse({ operation, plugin });\n  // TODO: better types syntax\n  const mutationType = `${mutationsType}<${typeResponse}, ${typeError.name}, ${typeData}>`;\n\n  const awaitSdkExpression = compiler.awaitExpression({\n    expression: compiler.callExpression({\n      functionName: queryFn,\n      parameters: [\n        compiler.objectExpression({\n          multiLine: true,\n          obj: [\n            {\n              spread: 'options',\n            },\n            {\n              spread: 'localOptions',\n            },\n            {\n              key: 'throwOnError',\n              value: true,\n            },\n          ],\n        }),\n      ],\n    }),\n  });\n\n  const statements: Array<ts.Statement> = [];\n\n  if (plugin.getPlugin('@hey-api/sdk')?.config.responseStyle === 'data') {\n    statements.push(\n      compiler.returnVariable({\n        expression: awaitSdkExpression,\n      }),\n    );\n  } else {\n    statements.push(\n      compiler.constVariable({\n        destructure: true,\n        expression: awaitSdkExpression,\n        name: 'data',\n      }),\n      compiler.returnVariable({\n        expression: 'data',\n      }),\n    );\n  }\n\n  const identifier = file.identifier({\n    // TODO: refactor for better cross-plugin compatibility\n    $ref: `#/tanstack-query-mutation-options/${operation.id}`,\n    case: plugin.config.mutationOptions.case,\n    create: true,\n    nameTransformer: plugin.config.mutationOptions.name,\n    namespace: 'value',\n  });\n\n  const expression = compiler.arrowFunction({\n    parameters: [\n      {\n        isRequired: false,\n        name: 'options',\n        type: `Partial<${typeData}>`,\n      },\n    ],\n    returnType: mutationType,\n    statements: [\n      compiler.constVariable({\n        expression: compiler.objectExpression({\n          obj: [\n            {\n              key: 'mutationFn',\n              value: compiler.arrowFunction({\n                async: true,\n                multiLine: true,\n                parameters: [\n                  {\n                    name: 'localOptions',\n                  },\n                ],\n                statements,\n              }),\n            },\n          ],\n        }),\n        name: mutationOptionsFn,\n        typeName: mutationType,\n      }),\n      compiler.returnVariable({\n        expression: mutationOptionsFn,\n      }),\n    ],\n  });\n  const statement = compiler.constVariable({\n    comment: plugin.config.comments\n      ? createOperationComment({ operation })\n      : undefined,\n    exportConst: true,\n    expression,\n    name: identifier.name || '',\n  });\n  file.add(statement);\n\n  return state;\n};\n","import type ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport type { IR } from '../../../ir/types';\nimport {\n  createOperationComment,\n  isOperationOptionsRequired,\n} from '../../shared/utils/operation';\nimport {\n  createQueryKeyFunction,\n  createQueryKeyType,\n  queryKeyStatement,\n} from './queryKey';\nimport type { PluginInstance, PluginState } from './types';\nimport { useTypeData } from './useType';\n\nconst queryOptionsFn = 'queryOptions';\n\nexport const createQueryOptions = ({\n  operation,\n  plugin,\n  queryFn,\n  state,\n}: {\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n  queryFn: string;\n  state: PluginState;\n}) => {\n  if (\n    !plugin.config.queryOptions ||\n    !(['get', 'post'] as (typeof operation.method)[]).includes(operation.method)\n  ) {\n    return state;\n  }\n\n  const file = plugin.context.file({ id: plugin.name })!;\n  const isRequiredOptions = isOperationOptionsRequired({\n    context: plugin.context,\n    operation,\n  });\n\n  if (!state.hasQueries) {\n    state.hasQueries = true;\n\n    if (!state.hasCreateQueryKeyParamsFunction) {\n      createQueryKeyType({ plugin });\n      createQueryKeyFunction({ plugin });\n      state.hasCreateQueryKeyParamsFunction = true;\n    }\n\n    file.import({\n      module: plugin.name,\n      name: queryOptionsFn,\n    });\n  }\n\n  state.hasUsedQueryFn = true;\n\n  const node = queryKeyStatement({\n    isInfinite: false,\n    operation,\n    plugin,\n  });\n  file.add(node);\n\n  const typeData = useTypeData({ operation, plugin });\n\n  const identifierQueryKey = file.identifier({\n    // TODO: refactor for better cross-plugin compatibility\n    $ref: `#/tanstack-query-query-key/${operation.id}`,\n    case: plugin.config.queryKeys.case,\n    nameTransformer: plugin.config.queryKeys.name,\n    namespace: 'value',\n  });\n\n  const awaitSdkExpression = compiler.awaitExpression({\n    expression: compiler.callExpression({\n      functionName: queryFn,\n      parameters: [\n        compiler.objectExpression({\n          multiLine: true,\n          obj: [\n            {\n              spread: 'options',\n            },\n            {\n              spread: 'queryKey[0]',\n            },\n            {\n              key: 'signal',\n              shorthand: true,\n              value: compiler.identifier({\n                text: 'signal',\n              }),\n            },\n            {\n              key: 'throwOnError',\n              value: true,\n            },\n          ],\n        }),\n      ],\n    }),\n  });\n\n  const statements: Array<ts.Statement> = [];\n\n  if (plugin.getPlugin('@hey-api/sdk')?.config.responseStyle === 'data') {\n    statements.push(\n      compiler.returnVariable({\n        expression: awaitSdkExpression,\n      }),\n    );\n  } else {\n    statements.push(\n      compiler.constVariable({\n        destructure: true,\n        expression: awaitSdkExpression,\n        name: 'data',\n      }),\n      compiler.returnVariable({\n        expression: 'data',\n      }),\n    );\n  }\n\n  const identifierQueryOptions = file.identifier({\n    // TODO: refactor for better cross-plugin compatibility\n    $ref: `#/tanstack-query-query-options/${operation.id}`,\n    case: plugin.config.queryOptions.case,\n    create: true,\n    nameTransformer: plugin.config.queryOptions.name,\n    namespace: 'value',\n  });\n\n  const statement = compiler.constVariable({\n    comment: plugin.config.comments\n      ? createOperationComment({ operation })\n      : undefined,\n    exportConst: true,\n    expression: compiler.arrowFunction({\n      parameters: [\n        {\n          isRequired: isRequiredOptions,\n          name: 'options',\n          type: typeData,\n        },\n      ],\n      statements: [\n        compiler.returnFunctionCall({\n          args: [\n            compiler.objectExpression({\n              obj: [\n                {\n                  key: 'queryFn',\n                  value: compiler.arrowFunction({\n                    async: true,\n                    multiLine: true,\n                    parameters: [\n                      {\n                        destructure: [\n                          {\n                            name: 'queryKey',\n                          },\n                          {\n                            name: 'signal',\n                          },\n                        ],\n                      },\n                    ],\n                    statements,\n                  }),\n                },\n                {\n                  key: 'queryKey',\n                  value: compiler.callExpression({\n                    functionName: identifierQueryKey.name || '',\n                    parameters: ['options'],\n                  }),\n                },\n              ],\n            }),\n          ],\n          name: queryOptionsFn,\n        }),\n      ],\n    }),\n    name: identifierQueryOptions.name || '',\n    // TODO: add type error\n    // TODO: AxiosError<PutSubmissionMetaError>\n  });\n  file.add(statement);\n\n  return state;\n};\n","import { clientApi } from '../../../generate/client';\nimport { stringCase } from '../../../utils/stringCase';\nimport { clientId } from '../../@hey-api/client-core/utils';\nimport { sdkId } from '../../@hey-api/sdk/constants';\nimport { operationClasses } from '../../@hey-api/sdk/operation';\nimport { serviceFunctionIdentifier } from '../../@hey-api/sdk/plugin-legacy';\nimport { createInfiniteQueryOptions } from './infiniteQueryOptions';\nimport { createMutationOptions } from './mutationOptions';\nimport { createQueryOptions } from './queryOptions';\nimport type { PluginHandler, PluginState } from './types';\n\nexport const handler = ({ plugin }: Parameters<PluginHandler>[0]) => {\n  const file = plugin.createFile({\n    id: plugin.name,\n    identifierCase: plugin.config.case,\n    path: plugin.output,\n  });\n\n  const state: PluginState = {\n    hasCreateInfiniteParamsFunction: false,\n    hasCreateQueryKeyParamsFunction: false,\n    hasInfiniteQueries: false,\n    hasMutations: false,\n    hasQueries: false,\n    hasUsedQueryFn: false,\n    typeInfiniteData: undefined!,\n  };\n\n  file.import({\n    ...clientApi.Options,\n    module: file.relativePathToFile({ context: plugin.context, id: sdkId }),\n  });\n\n  plugin.forEach('operation', ({ operation }) => {\n    state.hasUsedQueryFn = false;\n\n    const sdkPlugin = plugin.getPlugin('@hey-api/sdk');\n    const classes = sdkPlugin?.config.asClass\n      ? operationClasses({\n          context: plugin.context,\n          operation,\n          plugin: sdkPlugin,\n        })\n      : undefined;\n    const entry = classes ? classes.values().next().value : undefined;\n    const queryFn =\n      // TODO: this should use class graph to determine correct path string\n      // as it's really easy to break once we change the class casing\n      (\n        entry\n          ? [\n              entry.path[0],\n              ...entry.path.slice(1).map((className) =>\n                stringCase({\n                  case: 'camelCase',\n                  value: className,\n                }),\n              ),\n              entry.methodName,\n            ].filter(Boolean)\n          : [\n              serviceFunctionIdentifier({\n                config: plugin.context.config,\n                handleIllegal: true,\n                id: operation.id,\n                operation,\n              }),\n            ]\n      ).join('.');\n\n    createQueryOptions({\n      operation,\n      plugin,\n      queryFn,\n      state,\n    });\n\n    createInfiniteQueryOptions({\n      operation,\n      plugin,\n      queryFn,\n      state,\n    });\n\n    createMutationOptions({\n      operation,\n      plugin,\n      queryFn,\n      state,\n    });\n\n    if (state.hasUsedQueryFn) {\n      file.import({\n        module: file.relativePathToFile({ context: plugin.context, id: sdkId }),\n        name: queryFn.split('.')[0]!,\n      });\n    }\n  });\n\n  if (state.hasQueries || state.hasInfiniteQueries) {\n    file.import({\n      alias: '_heyApiClient',\n      module: file.relativePathToFile({\n        context: plugin.context,\n        id: clientId,\n      }),\n      name: 'client',\n    });\n  }\n};\n","import ts from 'typescript';\n\nimport { compiler, type Property } from '../../../compiler';\nimport type { ImportExportItem } from '../../../compiler/module';\nimport type { ImportExportItemObject } from '../../../compiler/utils';\nimport { clientApi, clientModulePath } from '../../../generate/client';\nimport { relativeModulePath } from '../../../generate/utils';\nimport { createOperationKey } from '../../../ir/operation';\nimport { getPaginationKeywordsRegExp } from '../../../ir/pagination';\nimport type { IR } from '../../../ir/types';\nimport { isOperationParameterRequired } from '../../../openApi';\nimport type {\n  Client,\n  Method,\n  Model,\n  Operation,\n  OperationParameter,\n} from '../../../types/client';\nimport type { Config } from '../../../types/config';\nimport type { Files } from '../../../types/utils';\nimport { getConfig, isLegacyClient } from '../../../utils/config';\nimport { transformClassName } from '../../../utils/transform';\nimport {\n  getClientBaseUrlKey,\n  getClientPlugin,\n} from '../../@hey-api/client-core/utils';\nimport {\n  generateImport,\n  operationDataTypeName,\n  operationErrorTypeName,\n  operationOptionsLegacyParserType,\n  operationResponseTypeName,\n  serviceFunctionIdentifier,\n} from '../../@hey-api/sdk/plugin-legacy';\nimport type { TanStackAngularQueryPlugin } from '../angular-query-experimental';\nimport type { TanStackReactQueryPlugin } from '../react-query';\nimport type { TanStackSolidQueryPlugin } from '../solid-query';\nimport type { TanStackSvelteQueryPlugin } from '../svelte-query';\nimport type { TanStackVueQueryPlugin } from '../vue-query';\n\nconst toInfiniteQueryOptionsName = (operation: Operation) =>\n  `${serviceFunctionIdentifier({\n    config: getConfig(),\n    id: operation.name,\n    operation,\n  })}InfiniteOptions`;\n\nconst toMutationOptionsName = (operation: Operation) =>\n  `${serviceFunctionIdentifier({\n    config: getConfig(),\n    id: operation.name,\n    operation,\n  })}Mutation`;\n\nconst toQueryOptionsName = ({\n  config,\n  id,\n  operation,\n}: {\n  config: Config;\n  id: string;\n  operation: IR.OperationObject | Operation;\n}) =>\n  `${serviceFunctionIdentifier({\n    config,\n    id,\n    operation,\n  })}Options`;\n\nconst toQueryKeyName = ({\n  config,\n  id,\n  isInfinite,\n  operation,\n}: {\n  config: Config;\n  id: string;\n  isInfinite?: boolean;\n  operation: IR.OperationObject | Operation;\n}) =>\n  `${serviceFunctionIdentifier({\n    config,\n    id,\n    operation,\n  })}${isInfinite ? 'Infinite' : ''}QueryKey`;\n\nconst getPaginationIn = (parameter: OperationParameter) => {\n  switch (parameter.in) {\n    case 'formData':\n      return 'body';\n    case 'header':\n      return 'headers';\n    default:\n      return parameter.in;\n  }\n};\n\nconst createInfiniteParamsFn = 'createInfiniteParams';\nconst createQueryKeyFn = 'createQueryKey';\nconst infiniteQueryOptionsFn = 'infiniteQueryOptions';\nconst mutationOptionsFn = 'mutationOptions';\nconst queryKeyName = 'QueryKey';\nconst queryOptionsFn = 'queryOptions';\nconst TOptionsType = 'TOptions';\n\nconst createInfiniteParamsFunction = ({\n  file,\n}: {\n  file: Files[keyof Files];\n}) => {\n  const fn = compiler.constVariable({\n    expression: compiler.arrowFunction({\n      multiLine: true,\n      parameters: [\n        {\n          name: 'queryKey',\n          type: compiler.typeNode(\n            `QueryKey<${clientApi.OptionsLegacyParser.name}>`,\n          ),\n        },\n        {\n          name: 'page',\n          type: compiler.typeNode('K'),\n        },\n      ],\n      statements: [\n        compiler.constVariable({\n          expression: compiler.identifier({\n            text: 'queryKey[0]',\n          }),\n          name: 'params',\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'body' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'body',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        assertion: 'any',\n                        spread: 'queryKey[0].body',\n                      },\n                      {\n                        assertion: 'any',\n                        spread: 'page.body',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'headers' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'headers',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        spread: 'queryKey[0].headers',\n                      },\n                      {\n                        spread: 'page.headers',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'path' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'path',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        spread: 'queryKey[0].path',\n                      },\n                      {\n                        spread: 'page.path',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'query' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'query',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        spread: 'queryKey[0].query',\n                      },\n                      {\n                        spread: 'page.query',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.returnVariable({\n          expression: ts.factory.createAsExpression(\n            ts.factory.createAsExpression(\n              compiler.identifier({ text: 'params' }),\n              ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword),\n            ),\n            ts.factory.createTypeQueryNode(\n              compiler.identifier({ text: 'page' }),\n            ),\n          ),\n        }),\n      ],\n      types: [\n        {\n          extends: compiler.typeReferenceNode({\n            typeName: compiler.identifier({\n              text: `Pick<QueryKey<${clientApi.OptionsLegacyParser.name}>[0], 'body' | 'headers' | 'path' | 'query'>`,\n            }),\n          }),\n          name: 'K',\n        },\n      ],\n    }),\n    name: createInfiniteParamsFn,\n  });\n  file.add(fn);\n};\n\nconst createQueryKeyFunction = ({ file }: { file: Files[keyof Files] }) => {\n  const returnType = compiler.indexedAccessTypeNode({\n    indexType: compiler.typeNode(0),\n    objectType: compiler.typeNode(queryKeyName, [\n      compiler.typeNode(TOptionsType),\n    ]),\n  });\n\n  const infiniteIdentifier = compiler.identifier({ text: 'infinite' });\n\n  const fn = compiler.constVariable({\n    expression: compiler.arrowFunction({\n      multiLine: true,\n      parameters: [\n        {\n          name: 'id',\n          type: compiler.typeNode('string'),\n        },\n        {\n          isRequired: false,\n          name: 'options',\n          type: compiler.typeNode(TOptionsType),\n        },\n        {\n          isRequired: false,\n          name: 'infinite',\n          type: compiler.typeNode('boolean'),\n        },\n      ],\n      returnType,\n      statements: [\n        compiler.constVariable({\n          assertion: returnType,\n          expression: compiler.objectExpression({\n            multiLine: false,\n            obj: [\n              {\n                key: '_id',\n                value: compiler.identifier({ text: 'id' }),\n              },\n              {\n                key: getClientBaseUrlKey(getConfig()),\n                value: compiler.identifier({\n                  text: `(options?.client ?? _heyApiClient).getConfig().${getClientBaseUrlKey(getConfig())}`,\n                }),\n              },\n            ],\n          }),\n          name: 'params',\n          typeName: returnType,\n        }),\n        compiler.ifStatement({\n          expression: infiniteIdentifier,\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: '_infinite',\n                  }),\n                  right: infiniteIdentifier,\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'body' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'body',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'body',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'headers' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'headers',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'headers',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'path' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'path',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'path',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'query' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'query',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'query',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.returnVariable({\n          expression: 'params',\n        }),\n      ],\n      types: [\n        {\n          extends: compiler.typeReferenceNode({\n            typeName: compiler.identifier({\n              text: clientApi.OptionsLegacyParser.name,\n            }),\n          }),\n          name: TOptionsType,\n        },\n      ],\n    }),\n    name: createQueryKeyFn,\n  });\n  file.add(fn);\n};\n\nconst createQueryKeyType = ({ file }: { file: Files[keyof Files] }) => {\n  const properties: Property[] = [\n    {\n      name: '_id',\n      type: compiler.keywordTypeNode({\n        keyword: 'string',\n      }),\n    },\n    {\n      isRequired: false,\n      name: '_infinite',\n      type: compiler.keywordTypeNode({\n        keyword: 'boolean',\n      }),\n    },\n  ];\n\n  const queryKeyType = compiler.typeAliasDeclaration({\n    name: queryKeyName,\n    type: compiler.typeTupleNode({\n      types: [\n        compiler.typeIntersectionNode({\n          types: [\n            compiler.typeReferenceNode({\n              typeName: `Pick<${TOptionsType}, '${getClientBaseUrlKey(getConfig())}' | 'body' | 'headers' | 'path' | 'query'>`,\n            }),\n            compiler.typeInterfaceNode({\n              properties,\n              useLegacyResolution: true,\n            }),\n          ],\n        }),\n      ],\n    }),\n    typeParameters: [\n      {\n        extends: compiler.typeReferenceNode({\n          typeName: compiler.identifier({\n            text: clientApi.OptionsLegacyParser.name,\n          }),\n        }),\n        name: TOptionsType,\n      },\n    ],\n  });\n  file.add(queryKeyType);\n};\n\nconst createTypeData = ({\n  client,\n  file,\n  operation,\n  typesModulePath,\n}: {\n  client: Client;\n  file: Files[keyof Files];\n  operation: Operation;\n  typesModulePath: string;\n}) => {\n  const { name: nameTypeData } = generateImport({\n    client,\n    meta: operation.parameters.length\n      ? {\n          // TODO: this should be exact ref to operation for consistency,\n          // but name should work too as operation ID is unique\n          $ref: operation.name,\n          name: operation.name,\n        }\n      : undefined,\n    nameTransformer: operationDataTypeName,\n    onImport: (name) => {\n      file.import({\n        asType: true,\n        module: typesModulePath,\n        name,\n      });\n    },\n  });\n\n  const typeData = operationOptionsLegacyParserType({\n    importedType: nameTypeData,\n  });\n\n  return { typeData };\n};\n\nconst createTypeError = ({\n  client,\n  file,\n  operation,\n  pluginName,\n  typesModulePath,\n}: {\n  client: Client;\n  file: Files[keyof Files];\n  operation: Operation;\n  pluginName: string;\n  typesModulePath: string;\n}) => {\n  const config = getConfig();\n\n  const { name: nameTypeError } = generateImport({\n    client,\n    meta: {\n      // TODO: this should be exact ref to operation for consistency,\n      // but name should work too as operation ID is unique\n      $ref: operation.name,\n      name: operation.name,\n    },\n    nameTransformer: operationErrorTypeName,\n    onImport: (name) => {\n      file.import({\n        asType: true,\n        module: typesModulePath,\n        name,\n      });\n    },\n  });\n\n  let typeError: ImportExportItemObject = {\n    asType: true,\n    name: nameTypeError,\n  };\n  if (!typeError.name) {\n    typeError = file.import({\n      asType: true,\n      module: pluginName,\n      name: 'DefaultError',\n    });\n  }\n\n  const clientPlugin = getClientPlugin(config);\n  if (clientPlugin.name === '@hey-api/client-axios') {\n    const axiosError = file.import({\n      asType: true,\n      module: 'axios',\n      name: 'AxiosError',\n    });\n    typeError = {\n      ...axiosError,\n      name: `${axiosError.name}<${typeError.name}>`,\n    };\n  }\n\n  return { typeError };\n};\n\nconst createTypeResponse = ({\n  client,\n  file,\n  operation,\n  typesModulePath,\n}: {\n  client: Client;\n  file: Files[keyof Files];\n  operation: Operation;\n  typesModulePath: string;\n}) => {\n  const { name: nameTypeResponse } = generateImport({\n    client,\n    meta: {\n      // TODO: this should be exact ref to operation for consistency,\n      // but name should work too as operation ID is unique\n      $ref: operation.name,\n      name: operation.name,\n    },\n    nameTransformer: operationResponseTypeName,\n    onImport: (imported) => {\n      file.import({\n        asType: true,\n        module: typesModulePath,\n        name: imported,\n      });\n    },\n  });\n\n  const typeResponse = nameTypeResponse || 'void';\n\n  return { typeResponse };\n};\n\nconst createQueryKeyLiteral = ({\n  id,\n  isInfinite,\n}: {\n  id: string;\n  isInfinite?: boolean;\n}) => {\n  const queryKeyLiteral = compiler.arrayLiteralExpression({\n    elements: [\n      compiler.callExpression({\n        functionName: createQueryKeyFn,\n        parameters: [\n          compiler.ots.string(id),\n          'options',\n          isInfinite ? compiler.ots.boolean(true) : undefined,\n        ],\n      }),\n    ],\n    multiLine: false,\n  });\n  return queryKeyLiteral;\n};\n\nexport const handlerLegacy = ({\n  client,\n  files,\n  plugin,\n}: Parameters<\n  | TanStackAngularQueryPlugin['LegacyHandler']\n  | TanStackReactQueryPlugin['LegacyHandler']\n  | TanStackSolidQueryPlugin['LegacyHandler']\n  | TanStackSvelteQueryPlugin['LegacyHandler']\n  | TanStackVueQueryPlugin['LegacyHandler']\n>[0]) => {\n  const config = getConfig();\n\n  if (isLegacyClient(config)) {\n    throw new Error('TanStack Query plugin does not support legacy clients');\n  }\n\n  const file = files[plugin.name]!;\n\n  file.import({\n    ...clientApi.OptionsLegacyParser,\n    module: clientModulePath({ config, sourceOutput: plugin.output }),\n  });\n\n  const typesModulePath = relativeModulePath({\n    moduleOutput: files.types!.nameWithoutExtension(),\n    sourceOutput: plugin.output,\n  });\n\n  const mutationsType =\n    plugin.name === '@tanstack/angular-query-experimental' ||\n    plugin.name === '@tanstack/svelte-query' ||\n    plugin.name === '@tanstack/solid-query'\n      ? 'MutationOptions'\n      : 'UseMutationOptions';\n\n  let typeInfiniteData!: ImportExportItem;\n  let hasCreateInfiniteParamsFunction = false;\n  let hasCreateQueryKeyParamsFunction = false;\n  let hasInfiniteQueries = false;\n  let hasMutations = false;\n  let hasQueries = false;\n\n  const processedOperations = new Map<string, boolean>();\n\n  for (const service of client.services) {\n    for (const operation of service.operations) {\n      // track processed operations to avoid creating duplicates\n      const operationKey = createOperationKey(operation);\n      if (processedOperations.has(operationKey)) {\n        continue;\n      }\n      processedOperations.set(operationKey, true);\n\n      const queryFn = [\n        config.plugins['@hey-api/sdk']?.config.asClass &&\n          transformClassName({\n            config,\n            name: service.name,\n          }),\n        serviceFunctionIdentifier({\n          config,\n          handleIllegal: !config.plugins['@hey-api/sdk']?.config.asClass,\n          id: operation.name,\n          operation,\n        }),\n      ]\n        .filter(Boolean)\n        .join('.');\n      let hasUsedQueryFn = false;\n\n      // queries\n      if (\n        plugin.config.queryOptions &&\n        (['GET', 'POST'] as ReadonlyArray<Method>).includes(operation.method)\n      ) {\n        if (!hasQueries) {\n          hasQueries = true;\n\n          if (!hasCreateQueryKeyParamsFunction) {\n            createQueryKeyType({ file });\n            createQueryKeyFunction({ file });\n            hasCreateQueryKeyParamsFunction = true;\n          }\n\n          file.import({\n            module: plugin.name,\n            name: queryOptionsFn,\n          });\n        }\n\n        hasUsedQueryFn = true;\n\n        const { typeData } = createTypeData({\n          client,\n          file,\n          operation,\n          typesModulePath,\n        });\n\n        const isRequired = isOperationParameterRequired(operation.parameters);\n\n        const queryKeyStatement = compiler.constVariable({\n          exportConst: true,\n          expression: compiler.arrowFunction({\n            parameters: [\n              {\n                isRequired,\n                name: 'options',\n                type: typeData,\n              },\n            ],\n            statements: createQueryKeyLiteral({\n              id: operation.name,\n            }),\n          }),\n          name: toQueryKeyName({\n            config,\n            id: operation.name,\n            operation,\n          }),\n        });\n        file.add(queryKeyStatement);\n\n        const statement = compiler.constVariable({\n          // TODO: describe options, same as the actual function call\n          comment: [],\n          exportConst: true,\n          expression: compiler.arrowFunction({\n            parameters: [\n              {\n                isRequired,\n                name: 'options',\n                type: typeData,\n              },\n            ],\n            statements: [\n              compiler.returnFunctionCall({\n                args: [\n                  compiler.objectExpression({\n                    obj: [\n                      {\n                        key: 'queryFn',\n                        value: compiler.arrowFunction({\n                          async: true,\n                          multiLine: true,\n                          parameters: [\n                            {\n                              destructure: [\n                                {\n                                  name: 'queryKey',\n                                },\n                                {\n                                  name: 'signal',\n                                },\n                              ],\n                            },\n                          ],\n                          statements: [\n                            compiler.constVariable({\n                              destructure: true,\n                              expression: compiler.awaitExpression({\n                                expression: compiler.callExpression({\n                                  functionName: queryFn,\n                                  parameters: [\n                                    compiler.objectExpression({\n                                      multiLine: true,\n                                      obj: [\n                                        {\n                                          spread: 'options',\n                                        },\n                                        {\n                                          spread: 'queryKey[0]',\n                                        },\n                                        {\n                                          key: 'signal',\n                                          shorthand: true,\n                                          value: compiler.identifier({\n                                            text: 'signal',\n                                          }),\n                                        },\n                                        {\n                                          key: 'throwOnError',\n                                          value: true,\n                                        },\n                                      ],\n                                    }),\n                                  ],\n                                }),\n                              }),\n                              name: 'data',\n                            }),\n                            compiler.returnVariable({\n                              expression: 'data',\n                            }),\n                          ],\n                        }),\n                      },\n                      {\n                        key: 'queryKey',\n                        value: compiler.callExpression({\n                          functionName: toQueryKeyName({\n                            config,\n                            id: operation.name,\n                            operation,\n                          }),\n                          parameters: ['options'],\n                        }),\n                      },\n                    ],\n                  }),\n                ],\n                name: queryOptionsFn,\n              }),\n            ],\n          }),\n          name: toQueryOptionsName({\n            config,\n            id: operation.name,\n            operation,\n          }),\n          // TODO: add type error\n          // TODO: AxiosError<PutSubmissionMetaError>\n        });\n        file.add(statement);\n      }\n\n      // infinite queries\n      if (\n        plugin.config.infiniteQueryOptions &&\n        (['GET', 'POST'] as ReadonlyArray<Method>).includes(operation.method)\n      ) {\n        // the actual pagination field might be nested inside parameter, e.g. body\n        let paginationField!: Model | OperationParameter;\n\n        const paginationParameter = operation.parameters.find((parameter) => {\n          const paginationRegExp = getPaginationKeywordsRegExp(\n            config.parser.pagination,\n          );\n          if (paginationRegExp.test(parameter.name)) {\n            paginationField = parameter;\n            return true;\n          }\n\n          if (parameter.in !== 'body') {\n            return;\n          }\n\n          if (parameter.export === 'reference') {\n            const ref = parameter.$refs[0];\n            const refModel = client.models.find(\n              (model) => model.meta?.$ref === ref,\n            );\n            return refModel?.properties.find((property) => {\n              const paginationRegExp = getPaginationKeywordsRegExp(\n                config.parser.pagination,\n              );\n              if (paginationRegExp.test(property.name)) {\n                paginationField = property;\n                return true;\n              }\n              return;\n            });\n          }\n\n          return parameter.properties.find((property) => {\n            const paginationRegExp = getPaginationKeywordsRegExp(\n              config.parser.pagination,\n            );\n            if (paginationRegExp.test(property.name)) {\n              paginationField = property;\n              return true;\n            }\n            return;\n          });\n        });\n\n        if (paginationParameter && paginationField) {\n          if (!hasInfiniteQueries) {\n            hasInfiniteQueries = true;\n\n            if (!hasCreateQueryKeyParamsFunction) {\n              createQueryKeyType({ file });\n              createQueryKeyFunction({ file });\n              hasCreateQueryKeyParamsFunction = true;\n            }\n\n            if (!hasCreateInfiniteParamsFunction) {\n              createInfiniteParamsFunction({ file });\n              hasCreateInfiniteParamsFunction = true;\n            }\n\n            file.import({\n              module: plugin.name,\n              name: infiniteQueryOptionsFn,\n            });\n\n            typeInfiniteData = file.import({\n              asType: true,\n              module: plugin.name,\n              name: 'InfiniteData',\n            });\n          }\n\n          hasUsedQueryFn = true;\n\n          const { typeData } = createTypeData({\n            client,\n            file,\n            operation,\n            typesModulePath,\n          });\n          const { typeError } = createTypeError({\n            client,\n            file,\n            operation,\n            pluginName: plugin.name,\n            typesModulePath,\n          });\n          const { typeResponse } = createTypeResponse({\n            client,\n            file,\n            operation,\n            typesModulePath,\n          });\n\n          const isRequired = isOperationParameterRequired(operation.parameters);\n\n          const typeQueryKey = `${queryKeyName}<${typeData}>`;\n          const typePageObjectParam = `Pick<${typeQueryKey}[0], 'body' | 'headers' | 'path' | 'query'>`;\n          const typePageParam = `${paginationField.base} | ${typePageObjectParam}`;\n\n          const queryKeyStatement = compiler.constVariable({\n            exportConst: true,\n            expression: compiler.arrowFunction({\n              parameters: [\n                {\n                  isRequired,\n                  name: 'options',\n                  type: typeData,\n                },\n              ],\n              returnType: typeQueryKey,\n              statements: createQueryKeyLiteral({\n                id: operation.name,\n                isInfinite: true,\n              }),\n            }),\n            name: toQueryKeyName({\n              config,\n              id: operation.name,\n              isInfinite: true,\n              operation,\n            }),\n          });\n          file.add(queryKeyStatement);\n\n          const statement = compiler.constVariable({\n            // TODO: describe options, same as the actual function call\n            comment: [],\n            exportConst: true,\n            expression: compiler.arrowFunction({\n              parameters: [\n                {\n                  isRequired,\n                  name: 'options',\n                  type: typeData,\n                },\n              ],\n              statements: [\n                compiler.returnFunctionCall({\n                  args: [\n                    compiler.objectExpression({\n                      comments: [\n                        {\n                          jsdoc: false,\n                          lines: ['@ts-ignore'],\n                        },\n                      ],\n                      obj: [\n                        {\n                          key: 'queryFn',\n                          value: compiler.arrowFunction({\n                            async: true,\n                            multiLine: true,\n                            parameters: [\n                              {\n                                destructure: [\n                                  {\n                                    name: 'pageParam',\n                                  },\n                                  {\n                                    name: 'queryKey',\n                                  },\n                                  {\n                                    name: 'signal',\n                                  },\n                                ],\n                              },\n                            ],\n                            statements: [\n                              compiler.constVariable({\n                                comment: [\n                                  {\n                                    jsdoc: false,\n                                    lines: ['@ts-ignore'],\n                                  },\n                                ],\n                                expression: compiler.conditionalExpression({\n                                  condition: compiler.binaryExpression({\n                                    left: compiler.typeOfExpression({\n                                      text: 'pageParam',\n                                    }),\n                                    operator: '===',\n                                    right: compiler.ots.string('object'),\n                                  }),\n                                  whenFalse: compiler.objectExpression({\n                                    multiLine: true,\n                                    obj: [\n                                      {\n                                        key: getPaginationIn(\n                                          paginationParameter,\n                                        ),\n                                        value: compiler.objectExpression({\n                                          multiLine: true,\n                                          obj: [\n                                            {\n                                              key: paginationField.name,\n                                              value: compiler.identifier({\n                                                text: 'pageParam',\n                                              }),\n                                            },\n                                          ],\n                                        }),\n                                      },\n                                    ],\n                                  }),\n                                  whenTrue: compiler.identifier({\n                                    text: 'pageParam',\n                                  }),\n                                }),\n                                name: 'page',\n                                typeName: typePageObjectParam,\n                              }),\n                              compiler.constVariable({\n                                expression: compiler.callExpression({\n                                  functionName: 'createInfiniteParams',\n                                  parameters: ['queryKey', 'page'],\n                                }),\n                                name: 'params',\n                              }),\n                              compiler.constVariable({\n                                destructure: true,\n                                expression: compiler.awaitExpression({\n                                  expression: compiler.callExpression({\n                                    functionName: queryFn,\n                                    parameters: [\n                                      compiler.objectExpression({\n                                        multiLine: true,\n                                        obj: [\n                                          {\n                                            spread: 'options',\n                                          },\n                                          {\n                                            spread: 'params',\n                                          },\n                                          {\n                                            key: 'signal',\n                                            shorthand: true,\n                                            value: compiler.identifier({\n                                              text: 'signal',\n                                            }),\n                                          },\n                                          {\n                                            key: 'throwOnError',\n                                            value: true,\n                                          },\n                                        ],\n                                      }),\n                                    ],\n                                  }),\n                                }),\n                                name: 'data',\n                              }),\n                              compiler.returnVariable({\n                                expression: 'data',\n                              }),\n                            ],\n                          }),\n                        },\n                        {\n                          key: 'queryKey',\n                          value: compiler.callExpression({\n                            functionName: toQueryKeyName({\n                              config,\n                              id: operation.name,\n                              isInfinite: true,\n                              operation,\n                            }),\n                            parameters: ['options'],\n                          }),\n                        },\n                      ],\n                    }),\n                  ],\n                  name: infiniteQueryOptionsFn,\n                  // TODO: better types syntax\n                  types: [\n                    typeResponse,\n                    typeError.name,\n                    `${typeof typeInfiniteData === 'string' ? typeInfiniteData : typeInfiniteData.name}<${typeResponse}>`,\n                    typeQueryKey,\n                    typePageParam,\n                  ],\n                }),\n              ],\n            }),\n            name: toInfiniteQueryOptionsName(operation),\n          });\n          file.add(statement);\n        }\n      }\n\n      // mutations\n      if (\n        plugin.config.mutationOptions &&\n        (['DELETE', 'PATCH', 'POST', 'PUT'] as ReadonlyArray<Method>).includes(\n          operation.method,\n        )\n      ) {\n        if (!hasMutations) {\n          hasMutations = true;\n\n          file.import({\n            asType: true,\n            module: plugin.name,\n            name: mutationsType,\n          });\n        }\n\n        hasUsedQueryFn = true;\n\n        const { typeData } = createTypeData({\n          client,\n          file,\n          operation,\n          typesModulePath,\n        });\n        const { typeError } = createTypeError({\n          client,\n          file,\n          operation,\n          pluginName: plugin.name,\n          typesModulePath,\n        });\n        const { typeResponse } = createTypeResponse({\n          client,\n          file,\n          operation,\n          typesModulePath,\n        });\n\n        const expression = compiler.arrowFunction({\n          parameters: [\n            {\n              isRequired: false,\n              name: 'options',\n              type: `Partial<${typeData}>`,\n            },\n          ],\n          statements: [\n            compiler.constVariable({\n              expression: compiler.objectExpression({\n                obj: [\n                  {\n                    key: 'mutationFn',\n                    value: compiler.arrowFunction({\n                      async: true,\n                      multiLine: true,\n                      parameters: [\n                        {\n                          name: 'localOptions',\n                        },\n                      ],\n                      statements: [\n                        compiler.constVariable({\n                          destructure: true,\n                          expression: compiler.awaitExpression({\n                            expression: compiler.callExpression({\n                              functionName: queryFn,\n                              parameters: [\n                                compiler.objectExpression({\n                                  multiLine: true,\n                                  obj: [\n                                    {\n                                      spread: 'options',\n                                    },\n                                    {\n                                      spread: 'localOptions',\n                                    },\n                                    {\n                                      key: 'throwOnError',\n                                      value: true,\n                                    },\n                                  ],\n                                }),\n                              ],\n                            }),\n                          }),\n                          name: 'data',\n                        }),\n                        compiler.returnVariable({\n                          expression: 'data',\n                        }),\n                      ],\n                    }),\n                  },\n                ],\n              }),\n              name: mutationOptionsFn,\n              // TODO: better types syntax\n              typeName: `${mutationsType}<${typeResponse}, ${typeError.name}, ${typeData}>`,\n            }),\n            compiler.returnVariable({\n              expression: mutationOptionsFn,\n            }),\n          ],\n        });\n        const statement = compiler.constVariable({\n          // TODO: describe options, same as the actual function call\n          comment: [],\n          exportConst: true,\n          expression,\n          name: toMutationOptionsName(operation),\n        });\n        file.add(statement);\n      }\n\n      if (hasQueries || hasInfiniteQueries) {\n        file.import({\n          alias: '_heyApiClient',\n          module: relativeModulePath({\n            moduleOutput: files.client!.nameWithoutExtension(),\n            sourceOutput: plugin.output,\n          }),\n          name: 'client',\n        });\n      }\n\n      if (hasUsedQueryFn) {\n        file.import({\n          module: relativeModulePath({\n            moduleOutput: files.sdk!.nameWithoutExtension(),\n            sourceOutput: plugin.output,\n          }),\n          name: queryFn.split('.')[0]!,\n        });\n      }\n    }\n  }\n};\n","import { definePluginConfig } from '../../shared/utils/config';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { TanStackAngularQueryPlugin } from './types';\n\nexport const defaultConfig: TanStackAngularQueryPlugin['Config'] = {\n  config: {\n    case: 'camelCase',\n    comments: true,\n    exportFromIndex: false,\n  },\n  dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  handler: handler as TanStackAngularQueryPlugin['Handler'],\n  handlerLegacy: handlerLegacy as TanStackAngularQueryPlugin['LegacyHandler'],\n  name: '@tanstack/angular-query-experimental',\n  output: '@tanstack/angular-query-experimental',\n  resolveConfig: (plugin, context) => {\n    plugin.config.infiniteQueryKeys = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}InfiniteQueryKey',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.infiniteQueryKeys,\n    });\n\n    plugin.config.infiniteQueryOptions = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}InfiniteOptions',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.infiniteQueryOptions,\n    });\n\n    plugin.config.mutationOptions = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}Mutation',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.mutationOptions,\n    });\n\n    plugin.config.queryKeys = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}QueryKey',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.queryKeys,\n    });\n\n    plugin.config.queryOptions = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}Options',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.queryOptions,\n    });\n  },\n};\n\n/**\n * Type helper for `@tanstack/angular-query-experimental` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import { definePluginConfig } from '../../shared/utils/config';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { TanStackReactQueryPlugin } from './types';\n\nexport const defaultConfig: TanStackReactQueryPlugin['Config'] = {\n  config: {\n    case: 'camelCase',\n    comments: true,\n    exportFromIndex: false,\n  },\n  dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  handler: handler as TanStackReactQueryPlugin['Handler'],\n  handlerLegacy: handlerLegacy as TanStackReactQueryPlugin['LegacyHandler'],\n  name: '@tanstack/react-query',\n  output: '@tanstack/react-query',\n  resolveConfig: (plugin, context) => {\n    plugin.config.infiniteQueryKeys = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}InfiniteQueryKey',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.infiniteQueryKeys,\n    });\n\n    plugin.config.infiniteQueryOptions = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}InfiniteOptions',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.infiniteQueryOptions,\n    });\n\n    plugin.config.mutationOptions = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}Mutation',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.mutationOptions,\n    });\n\n    plugin.config.queryKeys = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}QueryKey',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.queryKeys,\n    });\n\n    plugin.config.queryOptions = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}Options',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.queryOptions,\n    });\n  },\n};\n\n/**\n * Type helper for `@tanstack/react-query` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import { definePluginConfig } from '../../shared/utils/config';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { TanStackSolidQueryPlugin } from './types';\n\nexport const defaultConfig: TanStackSolidQueryPlugin['Config'] = {\n  config: {\n    case: 'camelCase',\n    comments: true,\n    exportFromIndex: false,\n  },\n  dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  handler: handler as TanStackSolidQueryPlugin['Handler'],\n  handlerLegacy: handlerLegacy as TanStackSolidQueryPlugin['LegacyHandler'],\n  name: '@tanstack/solid-query',\n  output: '@tanstack/solid-query',\n  resolveConfig: (plugin, context) => {\n    plugin.config.infiniteQueryKeys = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}InfiniteQueryKey',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.infiniteQueryKeys,\n    });\n\n    plugin.config.infiniteQueryOptions = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}InfiniteOptions',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.infiniteQueryOptions,\n    });\n\n    plugin.config.mutationOptions = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}Mutation',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.mutationOptions,\n    });\n\n    plugin.config.queryKeys = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}QueryKey',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.queryKeys,\n    });\n\n    plugin.config.queryOptions = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}Options',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.queryOptions,\n    });\n  },\n};\n\n/**\n * Type helper for `@tanstack/solid-query` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import { definePluginConfig } from '../../shared/utils/config';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { TanStackSvelteQueryPlugin } from './types';\n\nexport const defaultConfig: TanStackSvelteQueryPlugin['Config'] = {\n  config: {\n    case: 'camelCase',\n    comments: true,\n    exportFromIndex: false,\n  },\n  dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  handler: handler as TanStackSvelteQueryPlugin['Handler'],\n  handlerLegacy: handlerLegacy as TanStackSvelteQueryPlugin['LegacyHandler'],\n  name: '@tanstack/svelte-query',\n  output: '@tanstack/svelte-query',\n  resolveConfig: (plugin, context) => {\n    plugin.config.infiniteQueryKeys = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}InfiniteQueryKey',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.infiniteQueryKeys,\n    });\n\n    plugin.config.infiniteQueryOptions = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}InfiniteOptions',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.infiniteQueryOptions,\n    });\n\n    plugin.config.mutationOptions = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}Mutation',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.mutationOptions,\n    });\n\n    plugin.config.queryKeys = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}QueryKey',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.queryKeys,\n    });\n\n    plugin.config.queryOptions = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}Options',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.queryOptions,\n    });\n  },\n};\n\n/**\n * Type helper for `@tanstack/svelte-query` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import { definePluginConfig } from '../../shared/utils/config';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { TanStackVueQueryPlugin } from './types';\n\nexport const defaultConfig: TanStackVueQueryPlugin['Config'] = {\n  config: {\n    case: 'camelCase',\n    comments: true,\n    exportFromIndex: false,\n  },\n  dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  handler: handler as TanStackVueQueryPlugin['Handler'],\n  handlerLegacy: handlerLegacy as TanStackVueQueryPlugin['LegacyHandler'],\n  name: '@tanstack/vue-query',\n  output: '@tanstack/vue-query',\n  resolveConfig: (plugin, context) => {\n    plugin.config.infiniteQueryKeys = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}InfiniteQueryKey',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.infiniteQueryKeys,\n    });\n\n    plugin.config.infiniteQueryOptions = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}InfiniteOptions',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.infiniteQueryOptions,\n    });\n\n    plugin.config.mutationOptions = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}Mutation',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.mutationOptions,\n    });\n\n    plugin.config.queryKeys = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}QueryKey',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.queryKeys,\n    });\n\n    plugin.config.queryOptions = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: '{{name}}Options',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.queryOptions,\n    });\n  },\n};\n\n/**\n * Type helper for `@tanstack/vue-query` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import type ts from 'typescript';\n\nimport { compiler, type Property } from '../../compiler';\nimport { operationResponsesMap } from '../../ir/operation';\nimport { hasParameterGroupObjectRequired } from '../../ir/parameter';\nimport type { IR } from '../../ir/types';\nimport { typesId } from '../@hey-api/typescript/ref';\nimport { operationIrRef } from '../shared/utils/ref';\nimport type { FastifyPlugin } from './types';\n\nconst fastifyId = 'fastify';\n\nconst operationToRouteHandler = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}): Property | undefined => {\n  const file = context.file({ id: fastifyId })!;\n  const fileTypes = context.file({ id: typesId })!;\n\n  const properties: Array<Property> = [];\n\n  const identifierData = fileTypes.identifier({\n    $ref: operationIrRef({\n      config: context.config,\n      id: operation.id,\n      type: 'data',\n    }),\n    namespace: 'type',\n  });\n  if (identifierData.name) {\n    if (operation.body) {\n      file.import({\n        asType: true,\n        module: file.relativePathToFile({ context, id: typesId }),\n        name: identifierData.name,\n      });\n      properties.push({\n        isRequired: operation.body.required,\n        name: 'Body',\n        type: `${identifierData.name}['body']`,\n      });\n    }\n\n    if (operation.parameters) {\n      if (operation.parameters.header) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierData.name,\n        });\n        properties.push({\n          isRequired: hasParameterGroupObjectRequired(\n            operation.parameters.header,\n          ),\n          name: 'Headers',\n          type: `${identifierData.name}['headers']`,\n        });\n      }\n\n      if (operation.parameters.path) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierData.name,\n        });\n        properties.push({\n          isRequired: hasParameterGroupObjectRequired(\n            operation.parameters.path,\n          ),\n          name: 'Params',\n          type: `${identifierData.name}['path']`,\n        });\n      }\n\n      if (operation.parameters.query) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierData.name,\n        });\n        properties.push({\n          isRequired: hasParameterGroupObjectRequired(\n            operation.parameters.query,\n          ),\n          name: 'Querystring',\n          type: `${identifierData.name}['query']`,\n        });\n      }\n    }\n  }\n\n  const { errors, responses } = operationResponsesMap(operation);\n\n  let errorsTypeReference: ts.TypeReferenceNode | undefined = undefined;\n  const identifierErrors = fileTypes.identifier({\n    $ref: operationIrRef({\n      config: context.config,\n      id: operation.id,\n      type: 'errors',\n    }),\n    namespace: 'type',\n  });\n  if (identifierErrors.name && errors && errors.properties) {\n    const keys = Object.keys(errors.properties);\n    if (keys.length) {\n      const hasDefaultResponse = keys.includes('default');\n      if (!hasDefaultResponse) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierErrors.name,\n        });\n        errorsTypeReference = compiler.typeReferenceNode({\n          typeName: identifierErrors.name,\n        });\n      } else if (keys.length > 1) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierErrors.name,\n        });\n        const errorsType = compiler.typeReferenceNode({\n          typeName: identifierErrors.name,\n        });\n        const defaultType = compiler.literalTypeNode({\n          literal: compiler.stringLiteral({ text: 'default' }),\n        });\n        errorsTypeReference = compiler.typeReferenceNode({\n          typeArguments: [errorsType, defaultType],\n          typeName: 'Omit',\n        });\n      }\n    }\n  }\n\n  let responsesTypeReference: ts.TypeReferenceNode | undefined = undefined;\n  const identifierResponses = fileTypes.identifier({\n    $ref: operationIrRef({\n      config: context.config,\n      id: operation.id,\n      type: 'responses',\n    }),\n    namespace: 'type',\n  });\n  if (identifierResponses.name && responses && responses.properties) {\n    const keys = Object.keys(responses.properties);\n    if (keys.length) {\n      const hasDefaultResponse = keys.includes('default');\n      if (!hasDefaultResponse) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierResponses.name,\n        });\n        responsesTypeReference = compiler.typeReferenceNode({\n          typeName: identifierResponses.name,\n        });\n      } else if (keys.length > 1) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: typesId }),\n          name: identifierResponses.name,\n        });\n        const responsesType = compiler.typeReferenceNode({\n          typeName: identifierResponses.name,\n        });\n        const defaultType = compiler.literalTypeNode({\n          literal: compiler.stringLiteral({ text: 'default' }),\n        });\n        responsesTypeReference = compiler.typeReferenceNode({\n          typeArguments: [responsesType, defaultType],\n          typeName: 'Omit',\n        });\n      }\n    }\n  }\n\n  const replyTypes = [errorsTypeReference, responsesTypeReference].filter(\n    Boolean,\n  );\n  if (replyTypes.length) {\n    properties.push({\n      name: 'Reply',\n      type: compiler.typeIntersectionNode({\n        types: replyTypes,\n      }),\n    });\n  }\n\n  if (!properties.length) {\n    return;\n  }\n\n  const routeHandler: Property = {\n    name: operation.id,\n    type: compiler.typeNode('RouteHandler', [\n      compiler.typeInterfaceNode({\n        properties,\n        useLegacyResolution: false,\n      }),\n    ]),\n  };\n  return routeHandler;\n};\n\nexport const handler: FastifyPlugin['Handler'] = ({ plugin }) => {\n  const file = plugin.createFile({\n    id: fastifyId,\n    path: plugin.output,\n  });\n\n  const routeHandlers: Array<Property> = [];\n\n  plugin.forEach('operation', ({ operation }) => {\n    const routeHandler = operationToRouteHandler({\n      context: plugin.context,\n      operation,\n    });\n    if (routeHandler) {\n      routeHandlers.push(routeHandler);\n    }\n  });\n\n  const identifier = file.identifier({\n    $ref: 'RouteHandlers',\n    create: true,\n    namespace: 'type',\n  });\n\n  if (!identifier.name) {\n    return;\n  }\n\n  if (routeHandlers.length) {\n    file.import({\n      asType: true,\n      module: 'fastify',\n      name: 'RouteHandler',\n    });\n  }\n\n  file.add(\n    compiler.typeAliasDeclaration({\n      exportType: true,\n      name: identifier.name,\n      type: compiler.typeInterfaceNode({\n        properties: routeHandlers,\n        useLegacyResolution: false,\n      }),\n    }),\n  );\n};\n","import { definePluginConfig } from '../shared/utils/config';\nimport { handler } from './plugin';\nimport type { FastifyPlugin } from './types';\n\nexport const defaultConfig: FastifyPlugin['Config'] = {\n  config: {\n    exportFromIndex: false,\n  },\n  dependencies: ['@hey-api/typescript'],\n  handler,\n  name: 'fastify',\n  output: 'fastify',\n};\n\n/**\n * Type helper for `fastify` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import { compiler } from '../../compiler';\n\nexport const identifiers = {\n  /**\n   * {@link https://valibot.dev/api/#actions Actions}\n   */\n  actions: {\n    args: compiler.identifier({ text: 'args' }),\n    base64: compiler.identifier({ text: 'base64' }),\n    bic: compiler.identifier({ text: 'bic' }),\n    brand: compiler.identifier({ text: 'brand' }),\n    bytes: compiler.identifier({ text: 'bytes' }),\n    check: compiler.identifier({ text: 'check' }),\n    checkItems: compiler.identifier({ text: 'checkItems' }),\n    creditCard: compiler.identifier({ text: 'creditCard' }),\n    cuid2: compiler.identifier({ text: 'cuid2' }),\n    decimal: compiler.identifier({ text: 'decimal' }),\n    description: compiler.identifier({ text: 'description' }),\n    digits: compiler.identifier({ text: 'digits' }),\n    email: compiler.identifier({ text: 'email' }),\n    emoji: compiler.identifier({ text: 'emoji' }),\n    empty: compiler.identifier({ text: 'empty' }),\n    endsWith: compiler.identifier({ text: 'endsWith' }),\n    entries: compiler.identifier({ text: 'entries' }),\n    everyItem: compiler.identifier({ text: 'everyItem' }),\n    excludes: compiler.identifier({ text: 'excludes' }),\n    filterItems: compiler.identifier({ text: 'filterItems' }),\n    findItem: compiler.identifier({ text: 'findItem' }),\n    finite: compiler.identifier({ text: 'finite' }),\n    flavor: compiler.identifier({ text: 'flavor' }),\n    graphemes: compiler.identifier({ text: 'graphemes' }),\n    gtValue: compiler.identifier({ text: 'gtValue' }),\n    hash: compiler.identifier({ text: 'hash' }),\n    hexColor: compiler.identifier({ text: 'hexColor' }),\n    hexadecimal: compiler.identifier({ text: 'hexadecimal' }),\n    imei: compiler.identifier({ text: 'imei' }),\n    includes: compiler.identifier({ text: 'includes' }),\n    integer: compiler.identifier({ text: 'integer' }),\n    ip: compiler.identifier({ text: 'ip' }),\n    ipv4: compiler.identifier({ text: 'ipv4' }),\n    ipv6: compiler.identifier({ text: 'ipv6' }),\n    isoDate: compiler.identifier({ text: 'isoDate' }),\n    isoDateTime: compiler.identifier({ text: 'isoDateTime' }),\n    isoTime: compiler.identifier({ text: 'isoTime' }),\n    isoTimeSecond: compiler.identifier({ text: 'isoTimeSecond' }),\n    isoTimestamp: compiler.identifier({ text: 'isoTimestamp' }),\n    isoWeek: compiler.identifier({ text: 'isoWeek' }),\n    length: compiler.identifier({ text: 'length' }),\n    ltValue: compiler.identifier({ text: 'ltValue' }),\n    mac: compiler.identifier({ text: 'mac' }),\n    mac48: compiler.identifier({ text: 'mac48' }),\n    mac64: compiler.identifier({ text: 'mac64' }),\n    mapItems: compiler.identifier({ text: 'mapItems' }),\n    maxBytes: compiler.identifier({ text: 'maxBytes' }),\n    maxEntries: compiler.identifier({ text: 'maxEntries' }),\n    maxGraphemes: compiler.identifier({ text: 'maxGraphemes' }),\n    maxLength: compiler.identifier({ text: 'maxLength' }),\n    maxSize: compiler.identifier({ text: 'maxSize' }),\n    maxValue: compiler.identifier({ text: 'maxValue' }),\n    maxWords: compiler.identifier({ text: 'maxWords' }),\n    metadata: compiler.identifier({ text: 'metadata' }),\n    mimeType: compiler.identifier({ text: 'mimeType' }),\n    minBytes: compiler.identifier({ text: 'minBytes' }),\n    minEntries: compiler.identifier({ text: 'minEntries' }),\n    minGraphemes: compiler.identifier({ text: 'minGraphemes' }),\n    minLength: compiler.identifier({ text: 'minLength' }),\n    minSize: compiler.identifier({ text: 'minSize' }),\n    minValue: compiler.identifier({ text: 'minValue' }),\n    minWords: compiler.identifier({ text: 'minWords' }),\n    multipleOf: compiler.identifier({ text: 'multipleOf' }),\n    nanoid: compiler.identifier({ text: 'nanoid' }),\n    nonEmpty: compiler.identifier({ text: 'nonEmpty' }),\n    normalize: compiler.identifier({ text: 'normalize' }),\n    notBytes: compiler.identifier({ text: 'notBytes' }),\n    notEntries: compiler.identifier({ text: 'notEntries' }),\n    notGraphemes: compiler.identifier({ text: 'notGraphemes' }),\n    notLength: compiler.identifier({ text: 'notLength' }),\n    notSize: compiler.identifier({ text: 'notSize' }),\n    notValue: compiler.identifier({ text: 'notValue' }),\n    notValues: compiler.identifier({ text: 'notValues' }),\n    notWords: compiler.identifier({ text: 'notWords' }),\n    octal: compiler.identifier({ text: 'octal' }),\n    parseJson: compiler.identifier({ text: 'parseJson' }),\n    partialCheck: compiler.identifier({ text: 'partialCheck' }),\n    rawCheck: compiler.identifier({ text: 'rawCheck' }),\n    rawTransform: compiler.identifier({ text: 'rawTransform' }),\n    readonly: compiler.identifier({ text: 'readonly' }),\n    reduceItems: compiler.identifier({ text: 'reduceItems' }),\n    regex: compiler.identifier({ text: 'regex' }),\n    returns: compiler.identifier({ text: 'returns' }),\n    rfcEmail: compiler.identifier({ text: 'rfcEmail' }),\n    safeInteger: compiler.identifier({ text: 'safeInteger' }),\n    size: compiler.identifier({ text: 'size' }),\n    slug: compiler.identifier({ text: 'slug' }),\n    someItem: compiler.identifier({ text: 'someItem' }),\n    sortItems: compiler.identifier({ text: 'sortItems' }),\n    startsWith: compiler.identifier({ text: 'startsWith' }),\n    stringifyJson: compiler.identifier({ text: 'stringifyJson' }),\n    title: compiler.identifier({ text: 'title' }),\n    toLowerCase: compiler.identifier({ text: 'toLowerCase' }),\n    toMaxValue: compiler.identifier({ text: 'toMaxValue' }),\n    toMinValue: compiler.identifier({ text: 'toMinValue' }),\n    toUpperCase: compiler.identifier({ text: 'toUpperCase' }),\n    transform: compiler.identifier({ text: 'transform' }),\n    trim: compiler.identifier({ text: 'trim' }),\n    trimEnd: compiler.identifier({ text: 'trimEnd' }),\n    trimStart: compiler.identifier({ text: 'trimStart' }),\n    ulid: compiler.identifier({ text: 'ulid' }),\n    url: compiler.identifier({ text: 'url' }),\n    uuid: compiler.identifier({ text: 'uuid' }),\n    value: compiler.identifier({ text: 'value' }),\n    values: compiler.identifier({ text: 'values' }),\n    words: compiler.identifier({ text: 'words' }),\n  },\n  /**\n   * {@link https://valibot.dev/api/#async Async}\n   */\n  async: {\n    argsAsync: compiler.identifier({ text: 'argsAsync' }),\n    arrayAsync: compiler.identifier({ text: 'arrayAsync' }),\n    awaitAsync: compiler.identifier({ text: 'awaitAsync' }),\n    checkAsync: compiler.identifier({ text: 'checkAsync' }),\n    checkItemsAsync: compiler.identifier({ text: 'checkItemsAsync' }),\n    customAsync: compiler.identifier({ text: 'customAsync' }),\n    exactOptionalAsync: compiler.identifier({ text: 'exactOptionalAsync' }),\n    fallbackAsync: compiler.identifier({ text: 'fallbackAsync' }),\n    forwardAsync: compiler.identifier({ text: 'forwardAsync' }),\n    getDefaultsAsync: compiler.identifier({ text: 'getDefaultsAsync' }),\n    getFallbacksAsync: compiler.identifier({ text: 'getFallbacksAsync' }),\n    intersectAsync: compiler.identifier({ text: 'intersectAsync' }),\n    lazyAsync: compiler.identifier({ text: 'lazyAsync' }),\n    looseObjectAsync: compiler.identifier({ text: 'looseObjectAsync' }),\n    looseTupleAsync: compiler.identifier({ text: 'looseTupleAsync' }),\n    mapAsync: compiler.identifier({ text: 'mapAsync' }),\n    nonNullableAsync: compiler.identifier({ text: 'nonNullableAsync' }),\n    nonNullishAsync: compiler.identifier({ text: 'nonNullishAsync' }),\n    nonOptionalAsync: compiler.identifier({ text: 'nonOptionalAsync' }),\n    nullableAsync: compiler.identifier({ text: 'nullableAsync' }),\n    nullishAsync: compiler.identifier({ text: 'nullishAsync' }),\n    objectAsync: compiler.identifier({ text: 'objectAsync' }),\n    objectWithRestAsync: compiler.identifier({ text: 'objectWithRestAsync' }),\n    optionalAsync: compiler.identifier({ text: 'optionalAsync' }),\n    parseAsync: compiler.identifier({ text: 'parseAsync' }),\n    parserAsync: compiler.identifier({ text: 'parserAsync' }),\n    partialAsync: compiler.identifier({ text: 'partialAsync' }),\n    partialCheckAsync: compiler.identifier({ text: 'partialCheckAsync' }),\n    pipeAsync: compiler.identifier({ text: 'pipeAsync' }),\n    rawCheckAsync: compiler.identifier({ text: 'rawCheckAsync' }),\n    rawTransformAsync: compiler.identifier({ text: 'rawTransformAsync' }),\n    recordAsync: compiler.identifier({ text: 'recordAsync' }),\n    requiredAsync: compiler.identifier({ text: 'requiredAsync' }),\n    returnsAsync: compiler.identifier({ text: 'returnsAsync' }),\n    safeParseAsync: compiler.identifier({ text: 'safeParseAsync' }),\n    safeParserAsync: compiler.identifier({ text: 'safeParserAsync' }),\n    setAsync: compiler.identifier({ text: 'setAsync' }),\n    strictObjectAsync: compiler.identifier({ text: 'strictObjectAsync' }),\n    strictTupleAsync: compiler.identifier({ text: 'strictTupleAsync' }),\n    transformAsync: compiler.identifier({ text: 'transformAsync' }),\n    tupleAsync: compiler.identifier({ text: 'tupleAsync' }),\n    tupleWithRestAsync: compiler.identifier({ text: 'tupleWithRestAsync' }),\n    undefinedableAsync: compiler.identifier({ text: 'undefinedableAsync' }),\n    unionAsync: compiler.identifier({ text: 'unionAsync' }),\n    variantAsync: compiler.identifier({ text: 'variantAsync' }),\n  },\n  /**\n   * {@link https://valibot.dev/api/#methods Methods}\n   */\n  methods: {\n    assert: compiler.identifier({ text: 'assert' }),\n    config: compiler.identifier({ text: 'config' }),\n    fallback: compiler.identifier({ text: 'fallback' }),\n    flatten: compiler.identifier({ text: 'flatten' }),\n    forward: compiler.identifier({ text: 'forward' }),\n    getDefault: compiler.identifier({ text: 'getDefault' }),\n    getDefaults: compiler.identifier({ text: 'getDefaults' }),\n    getDescription: compiler.identifier({ text: 'getDescription' }),\n    getFallback: compiler.identifier({ text: 'getFallback' }),\n    getFallbacks: compiler.identifier({ text: 'getFallbacks' }),\n    getMetadata: compiler.identifier({ text: 'getMetadata' }),\n    getTitle: compiler.identifier({ text: 'getTitle' }),\n    is: compiler.identifier({ text: 'is' }),\n    keyof: compiler.identifier({ text: 'keyof' }),\n    message: compiler.identifier({ text: 'message' }),\n    omit: compiler.identifier({ text: 'omit' }),\n    parse: compiler.identifier({ text: 'parse' }),\n    parser: compiler.identifier({ text: 'parser' }),\n    partial: compiler.identifier({ text: 'partial' }),\n    pick: compiler.identifier({ text: 'pick' }),\n    pipe: compiler.identifier({ text: 'pipe' }),\n    required: compiler.identifier({ text: 'required' }),\n    safeParse: compiler.identifier({ text: 'safeParse' }),\n    safeParser: compiler.identifier({ text: 'safeParser' }),\n    summarize: compiler.identifier({ text: 'summarize' }),\n    unwrap: compiler.identifier({ text: 'unwrap' }),\n  },\n  /**\n   * {@link https://valibot.dev/api/#schemas Schemas}\n   */\n  schemas: {\n    any: compiler.identifier({ text: 'any' }),\n    array: compiler.identifier({ text: 'array' }),\n    bigInt: compiler.identifier({ text: 'bigint' }),\n    blob: compiler.identifier({ text: 'blob' }),\n    boolean: compiler.identifier({ text: 'boolean' }),\n    custom: compiler.identifier({ text: 'custom' }),\n    date: compiler.identifier({ text: 'date' }),\n    enum: compiler.identifier({ text: 'enum' }),\n    exactOptional: compiler.identifier({ text: 'exactOptional' }),\n    file: compiler.identifier({ text: 'file' }),\n    function: compiler.identifier({ text: 'function' }),\n    instance: compiler.identifier({ text: 'instance' }),\n    intersect: compiler.identifier({ text: 'intersect' }),\n    lazy: compiler.identifier({ text: 'lazy' }),\n    literal: compiler.identifier({ text: 'literal' }),\n    looseObject: compiler.identifier({ text: 'looseObject' }),\n    looseTuple: compiler.identifier({ text: 'looseTuple' }),\n    map: compiler.identifier({ text: 'map' }),\n    nan: compiler.identifier({ text: 'nan' }),\n    never: compiler.identifier({ text: 'never' }),\n    nonNullable: compiler.identifier({ text: 'nonNullable' }),\n    nonNullish: compiler.identifier({ text: 'nonNullish' }),\n    nonOptional: compiler.identifier({ text: 'nonOptional' }),\n    null: compiler.identifier({ text: 'null' }),\n    nullable: compiler.identifier({ text: 'nullable' }),\n    nullish: compiler.identifier({ text: 'nullish' }),\n    number: compiler.identifier({ text: 'number' }),\n    object: compiler.identifier({ text: 'object' }),\n    objectWithRest: compiler.identifier({ text: 'objectWithRest' }),\n    optional: compiler.identifier({ text: 'optional' }),\n    picklist: compiler.identifier({ text: 'picklist' }),\n    promise: compiler.identifier({ text: 'promise' }),\n    record: compiler.identifier({ text: 'record' }),\n    set: compiler.identifier({ text: 'set' }),\n    strictObject: compiler.identifier({ text: 'strictObject' }),\n    strictTuple: compiler.identifier({ text: 'strictTuple' }),\n    string: compiler.identifier({ text: 'string' }),\n    symbol: compiler.identifier({ text: 'symbol' }),\n    tuple: compiler.identifier({ text: 'tuple' }),\n    tupleWithRest: compiler.identifier({ text: 'tupleWithRest' }),\n    undefined: compiler.identifier({ text: 'undefined' }),\n    undefinedable: compiler.identifier({ text: 'undefinedable' }),\n    union: compiler.identifier({ text: 'union' }),\n    unknown: compiler.identifier({ text: 'unknown' }),\n    variant: compiler.identifier({ text: 'variant' }),\n    void: compiler.identifier({ text: 'void' }),\n  },\n  /**\n   * {@link https://valibot.dev/api/#storages Storages}\n   */\n  storages: {\n    // TODO: implement if necessary\n  },\n  /**\n   * {@link https://valibot.dev/api/#types Types}\n   */\n  types: {\n    // TODO: implement if necessary\n    GenericSchema: compiler.identifier({ text: 'GenericSchema' }),\n  },\n  /**\n   * {@link https://valibot.dev/api/#utils Utils}\n   */\n  utils: {\n    // TODO: implement if necessary\n  },\n  v: compiler.identifier({ text: 'v' }),\n};\n\nexport const valibotId = 'valibot';\n","import type ts from 'typescript';\n\nimport { compiler } from '../../compiler';\nimport type { TypeScriptFile } from '../../generate/files';\nimport type { IR } from '../../ir/types';\nimport { identifiers, valibotId } from './constants';\nimport type { ValibotPlugin } from './types';\n\nconst createRequestValidator = ({\n  file,\n  operation,\n  plugin,\n}: {\n  file: TypeScriptFile;\n  operation: IR.OperationObject;\n  plugin: ValibotPlugin['Instance'];\n}): ts.ArrowFunction | undefined => {\n  const { requests } = plugin.config;\n  const schemaIdentifier = plugin.context.file({ id: valibotId })!.identifier({\n    // TODO: refactor for better cross-plugin compatibility\n    $ref: `#/valibot-response/${operation.id}`,\n    // TODO: refactor to not have to define nameTransformer\n    nameTransformer: typeof requests === 'object' ? requests.name : undefined,\n    namespace: 'value',\n  });\n\n  if (!schemaIdentifier.name) {\n    return;\n  }\n\n  file.import({\n    module: file.relativePathToFile({\n      context: plugin.context,\n      id: valibotId,\n    }),\n    name: schemaIdentifier.name,\n  });\n\n  file.import({\n    alias: identifiers.v.text,\n    module: 'valibot',\n    name: '*',\n  });\n\n  const dataParameterName = 'data';\n\n  return compiler.arrowFunction({\n    async: true,\n    parameters: [\n      {\n        name: dataParameterName,\n      },\n    ],\n    statements: [\n      compiler.returnStatement({\n        expression: compiler.awaitExpression({\n          expression: compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: identifiers.v,\n              name: identifiers.async.parseAsync,\n            }),\n            parameters: [\n              compiler.identifier({ text: schemaIdentifier.name }),\n              compiler.identifier({ text: dataParameterName }),\n            ],\n          }),\n        }),\n      }),\n    ],\n  });\n};\n\nconst createResponseValidator = ({\n  file,\n  operation,\n  plugin,\n}: {\n  file: TypeScriptFile;\n  operation: IR.OperationObject;\n  plugin: ValibotPlugin['Instance'];\n}): ts.ArrowFunction | undefined => {\n  const { responses } = plugin.config;\n  const schemaIdentifier = plugin.context.file({ id: valibotId })!.identifier({\n    // TODO: refactor for better cross-plugin compatibility\n    $ref: `#/valibot-response/${operation.id}`,\n    // TODO: refactor to not have to define nameTransformer\n    nameTransformer: typeof responses === 'object' ? responses.name : undefined,\n    namespace: 'value',\n  });\n\n  if (!schemaIdentifier.name) {\n    return;\n  }\n\n  file.import({\n    module: file.relativePathToFile({\n      context: plugin.context,\n      id: valibotId,\n    }),\n    name: schemaIdentifier.name,\n  });\n\n  file.import({\n    alias: identifiers.v.text,\n    module: 'valibot',\n    name: '*',\n  });\n\n  const dataParameterName = 'data';\n\n  return compiler.arrowFunction({\n    async: true,\n    parameters: [\n      {\n        name: dataParameterName,\n      },\n    ],\n    statements: [\n      compiler.returnStatement({\n        expression: compiler.awaitExpression({\n          expression: compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: identifiers.v,\n              name: identifiers.async.parseAsync,\n            }),\n            parameters: [\n              compiler.identifier({ text: schemaIdentifier.name }),\n              compiler.identifier({ text: dataParameterName }),\n            ],\n          }),\n        }),\n      }),\n    ],\n  });\n};\n\nexport type Api = {\n  createRequestValidator: (args: {\n    file: TypeScriptFile;\n    operation: IR.OperationObject;\n    plugin: ValibotPlugin['Instance'];\n  }) => ts.ArrowFunction | undefined;\n  createResponseValidator: (args: {\n    file: TypeScriptFile;\n    operation: IR.OperationObject;\n    plugin: ValibotPlugin['Instance'];\n  }) => ts.ArrowFunction | undefined;\n};\n\nexport const api: Api = {\n  createRequestValidator,\n  createResponseValidator,\n};\n","import { operationResponsesMap } from '../../ir/operation';\nimport type { IR } from '../../ir/types';\nimport { valibotId } from './constants';\nimport { schemaToValibotSchema, type State } from './plugin';\nimport type { ValibotPlugin } from './types';\n\nexport const operationToValibotSchema = ({\n  operation,\n  plugin,\n  state,\n}: {\n  operation: IR.OperationObject;\n  plugin: ValibotPlugin['Instance'];\n  state: State;\n}) => {\n  const file = plugin.context.file({ id: valibotId })!;\n\n  if (plugin.config.requests.enabled) {\n    const requiredProperties = new Set<string>();\n\n    const schemaData: IR.SchemaObject = {\n      properties: {\n        body: {\n          type: 'never',\n        },\n        path: {\n          type: 'never',\n        },\n        query: {\n          type: 'never',\n        },\n      },\n      type: 'object',\n    };\n\n    if (operation.parameters) {\n      // TODO: add support for cookies\n\n      if (operation.parameters.header) {\n        const properties: Record<string, IR.SchemaObject> = {};\n        const required: Array<string> = [];\n\n        for (const key in operation.parameters.header) {\n          const parameter = operation.parameters.header[key]!;\n          properties[parameter.name] = parameter.schema;\n          if (parameter.required) {\n            required.push(parameter.name);\n            requiredProperties.add('headers');\n          }\n        }\n\n        if (Object.keys(properties).length) {\n          schemaData.properties!.headers = {\n            properties,\n            required,\n            type: 'object',\n          };\n        }\n      }\n\n      if (operation.parameters.path) {\n        const properties: Record<string, IR.SchemaObject> = {};\n        const required: Array<string> = [];\n\n        for (const key in operation.parameters.path) {\n          const parameter = operation.parameters.path[key]!;\n          properties[parameter.name] = parameter.schema;\n          if (parameter.required) {\n            required.push(parameter.name);\n            requiredProperties.add('path');\n          }\n        }\n\n        if (Object.keys(properties).length) {\n          schemaData.properties!.path = {\n            properties,\n            required,\n            type: 'object',\n          };\n        }\n      }\n\n      if (operation.parameters.query) {\n        const properties: Record<string, IR.SchemaObject> = {};\n        const required: Array<string> = [];\n\n        for (const key in operation.parameters.query) {\n          const parameter = operation.parameters.query[key]!;\n          properties[parameter.name] = parameter.schema;\n          if (parameter.required) {\n            required.push(parameter.name);\n            requiredProperties.add('query');\n          }\n        }\n\n        if (Object.keys(properties).length) {\n          schemaData.properties!.query = {\n            properties,\n            required,\n            type: 'object',\n          };\n        }\n      }\n    }\n\n    if (operation.body) {\n      schemaData.properties!.body = operation.body.schema;\n\n      if (operation.body.required) {\n        requiredProperties.add('body');\n      }\n    }\n\n    schemaData.required = [...requiredProperties];\n\n    const identifierData = file.identifier({\n      // TODO: refactor for better cross-plugin compatibility\n      $ref: `#/valibot-data/${operation.id}`,\n      case: plugin.config.requests.case,\n      create: true,\n      nameTransformer: plugin.config.requests.name,\n      namespace: 'value',\n    });\n    schemaToValibotSchema({\n      // TODO: refactor for better cross-plugin compatibility\n      $ref: `#/valibot-data/${operation.id}`,\n      identifier: identifierData,\n      plugin,\n      schema: schemaData,\n      state,\n    });\n  }\n\n  if (plugin.config.responses.enabled) {\n    if (operation.responses) {\n      const { response } = operationResponsesMap(operation);\n\n      if (response) {\n        const identifierResponse = file.identifier({\n          // TODO: refactor for better cross-plugin compatibility\n          $ref: `#/valibot-response/${operation.id}`,\n          case: plugin.config.responses.case,\n          create: true,\n          nameTransformer: plugin.config.responses.name,\n          namespace: 'value',\n        });\n        schemaToValibotSchema({\n          // TODO: refactor for better cross-plugin compatibility\n          $ref: `#/valibot-response/${operation.id}`,\n          identifier: identifierResponse,\n          plugin,\n          schema: response,\n          state,\n        });\n      }\n    }\n  }\n};\n","import ts from 'typescript';\n\nimport { compiler } from '../../compiler';\nimport type { Identifier } from '../../generate/files';\nimport { deduplicateSchema } from '../../ir/schema';\nimport type { IR } from '../../ir/types';\nimport type { StringCase } from '../../types/case';\nimport { numberRegExp } from '../../utils/regexp';\nimport { createSchemaComment } from '../shared/utils/schema';\nimport { identifiers, valibotId } from './constants';\nimport { operationToValibotSchema } from './operation';\nimport type { ValibotPlugin } from './types';\n\ninterface SchemaWithType<T extends Required<IR.SchemaObject>['type']>\n  extends Omit<IR.SchemaObject, 'type'> {\n  type: Extract<Required<IR.SchemaObject>['type'], T>;\n}\n\nexport interface State {\n  circularReferenceTracker: Set<string>;\n  hasCircularReference: boolean;\n  nameCase: StringCase;\n  nameTransformer: string | ((name: string) => string);\n}\n\nconst pipesToExpression = (pipes: Array<ts.Expression>) => {\n  if (pipes.length === 1) {\n    return pipes[0]!;\n  }\n\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.methods.pipe,\n    }),\n    parameters: pipes,\n  });\n  return expression;\n};\n\nconst arrayTypeToValibotSchema = ({\n  plugin,\n  schema,\n  state,\n}: {\n  plugin: ValibotPlugin['Instance'];\n  schema: SchemaWithType<'array'>;\n  state: State;\n}): ts.Expression => {\n  const functionName = compiler.propertyAccessExpression({\n    expression: identifiers.v,\n    name: identifiers.schemas.array,\n  });\n\n  const pipes: Array<ts.CallExpression> = [];\n\n  if (!schema.items) {\n    const expression = compiler.callExpression({\n      functionName,\n      parameters: [\n        unknownTypeToValibotSchema({\n          schema: {\n            type: 'unknown',\n          },\n        }),\n      ],\n    });\n    pipes.push(expression);\n  } else {\n    schema = deduplicateSchema({ schema });\n\n    // at least one item is guaranteed\n    const itemExpressions = schema.items!.map((item) => {\n      const schemaPipes = schemaToValibotSchema({\n        plugin,\n        schema: item,\n        state,\n      });\n      return pipesToExpression(schemaPipes);\n    });\n\n    if (itemExpressions.length === 1) {\n      const expression = compiler.callExpression({\n        functionName,\n        parameters: itemExpressions,\n      });\n      pipes.push(expression);\n    } else {\n      if (schema.logicalOperator === 'and') {\n        // TODO: parser - handle intersection\n        // return compiler.typeArrayNode(\n        //   compiler.typeIntersectionNode({ types: itemExpressions }),\n        // );\n      }\n\n      // TODO: parser - handle union\n      // return compiler.typeArrayNode(compiler.typeUnionNode({ types: itemExpressions }));\n\n      const expression = compiler.callExpression({\n        functionName,\n        parameters: [\n          unknownTypeToValibotSchema({\n            schema: {\n              type: 'unknown',\n            },\n          }),\n        ],\n      });\n      pipes.push(expression);\n    }\n  }\n\n  if (schema.minItems === schema.maxItems && schema.minItems !== undefined) {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.actions.length,\n      }),\n      parameters: [compiler.valueToExpression({ value: schema.minItems })],\n    });\n    pipes.push(expression);\n  } else {\n    if (schema.minItems !== undefined) {\n      const expression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: identifiers.v,\n          name: identifiers.actions.minLength,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.minItems })],\n      });\n      pipes.push(expression);\n    }\n\n    if (schema.maxItems !== undefined) {\n      const expression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: identifiers.v,\n          name: identifiers.actions.maxLength,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.maxItems })],\n      });\n      pipes.push(expression);\n    }\n  }\n\n  return pipesToExpression(pipes);\n};\n\nconst booleanTypeToValibotSchema = ({\n  schema,\n}: {\n  schema: SchemaWithType<'boolean'>;\n}) => {\n  if (typeof schema.const === 'boolean') {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.schemas.literal,\n      }),\n      parameters: [compiler.ots.boolean(schema.const)],\n    });\n    return expression;\n  }\n\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.boolean,\n    }),\n  });\n  return expression;\n};\n\nconst enumTypeToValibotSchema = ({\n  schema,\n}: {\n  schema: SchemaWithType<'enum'>;\n}): ts.CallExpression => {\n  const enumMembers: Array<ts.LiteralExpression> = [];\n\n  let isNullable = false;\n\n  for (const item of schema.items ?? []) {\n    // Zod supports only string enums\n    if (item.type === 'string' && typeof item.const === 'string') {\n      enumMembers.push(\n        compiler.stringLiteral({\n          text: item.const,\n        }),\n      );\n    } else if (item.type === 'null' || item.const === null) {\n      isNullable = true;\n    }\n  }\n\n  if (!enumMembers.length) {\n    return unknownTypeToValibotSchema({\n      schema: {\n        type: 'unknown',\n      },\n    });\n  }\n\n  let resultExpression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.picklist,\n    }),\n    parameters: [\n      compiler.arrayLiteralExpression({\n        elements: enumMembers,\n        multiLine: false,\n      }),\n    ],\n  });\n\n  if (isNullable) {\n    resultExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.schemas.nullable,\n      }),\n      parameters: [resultExpression],\n    });\n  }\n\n  return resultExpression;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst neverTypeToValibotSchema = (_props: {\n  schema: SchemaWithType<'never'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.never,\n    }),\n  });\n  return expression;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst nullTypeToValibotSchema = (_props: {\n  schema: SchemaWithType<'null'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.null,\n    }),\n  });\n  return expression;\n};\n\nconst numberParameter = ({\n  isBigInt,\n  value,\n}: {\n  isBigInt: boolean;\n  value: unknown;\n}) => {\n  const expression = compiler.valueToExpression({ value });\n\n  if (\n    isBigInt &&\n    (typeof value === 'bigint' ||\n      typeof value === 'number' ||\n      typeof value === 'string' ||\n      typeof value === 'boolean')\n  ) {\n    return compiler.callExpression({\n      functionName: 'BigInt',\n      parameters: [expression],\n    });\n  }\n\n  return expression;\n};\n\nconst numberTypeToValibotSchema = ({\n  schema,\n}: {\n  schema: SchemaWithType<'integer' | 'number'>;\n}) => {\n  const isBigInt = schema.type === 'integer' && schema.format === 'int64';\n\n  if (typeof schema.const === 'number') {\n    // TODO: parser - handle bigint constants\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.schemas.literal,\n      }),\n      parameters: [compiler.ots.number(schema.const)],\n    });\n    return expression;\n  }\n\n  const pipes: Array<ts.CallExpression> = [];\n\n  // Zod uses coerce for bigint here, might be needed for Valibot too\n  const expression = compiler.callExpression({\n    functionName: isBigInt\n      ? compiler.propertyAccessExpression({\n          expression: identifiers.v,\n          name: identifiers.schemas.bigInt,\n        })\n      : compiler.propertyAccessExpression({\n          expression: identifiers.v,\n          name: identifiers.schemas.number,\n        }),\n  });\n  pipes.push(expression);\n\n  if (!isBigInt && schema.type === 'integer') {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.actions.integer,\n      }),\n    });\n    pipes.push(expression);\n  }\n\n  if (schema.exclusiveMinimum !== undefined) {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.actions.gtValue,\n      }),\n      parameters: [\n        numberParameter({ isBigInt, value: schema.exclusiveMinimum }),\n      ],\n    });\n    pipes.push(expression);\n  } else if (schema.minimum !== undefined) {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.actions.minValue,\n      }),\n      parameters: [numberParameter({ isBigInt, value: schema.minimum })],\n    });\n    pipes.push(expression);\n  }\n\n  if (schema.exclusiveMaximum !== undefined) {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.actions.ltValue,\n      }),\n      parameters: [\n        numberParameter({ isBigInt, value: schema.exclusiveMaximum }),\n      ],\n    });\n    pipes.push(expression);\n  } else if (schema.maximum !== undefined) {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.actions.maxValue,\n      }),\n      parameters: [numberParameter({ isBigInt, value: schema.maximum })],\n    });\n    pipes.push(expression);\n  }\n\n  return pipesToExpression(pipes);\n};\n\nconst objectTypeToValibotSchema = ({\n  plugin,\n  schema,\n  state,\n}: {\n  plugin: ValibotPlugin['Instance'];\n  schema: SchemaWithType<'object'>;\n  state: State;\n}): {\n  anyType: string;\n  expression: ts.CallExpression;\n} => {\n  // TODO: parser - handle constants\n  const properties: Array<ts.PropertyAssignment> = [];\n\n  const required = schema.required ?? [];\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    const isRequired = required.includes(name);\n\n    const schemaPipes = schemaToValibotSchema({\n      optional: !isRequired,\n      plugin,\n      schema: property,\n      state,\n    });\n\n    numberRegExp.lastIndex = 0;\n    let propertyName;\n    if (numberRegExp.test(name)) {\n      // For numeric literals, we'll handle negative numbers by using a string literal\n      // instead of trying to use a PrefixUnaryExpression\n      propertyName = name.startsWith('-')\n        ? ts.factory.createStringLiteral(name)\n        : ts.factory.createNumericLiteral(name);\n    } else {\n      propertyName = name;\n    }\n    // TODO: parser - abstract safe property name logic\n    if (\n      ((name.match(/^[0-9]/) && name.match(/\\D+/g)) || name.match(/\\W/g)) &&\n      !name.startsWith(\"'\") &&\n      !name.endsWith(\"'\")\n    ) {\n      propertyName = `'${name}'`;\n    }\n    properties.push(\n      compiler.propertyAssignment({\n        initializer: pipesToExpression(schemaPipes),\n        name: propertyName,\n      }),\n    );\n  }\n\n  if (\n    schema.additionalProperties &&\n    schema.additionalProperties.type === 'object' &&\n    !Object.keys(properties).length\n  ) {\n    const pipes = schemaToValibotSchema({\n      plugin,\n      schema: schema.additionalProperties,\n      state,\n    });\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.schemas.record,\n      }),\n      parameters: [\n        compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: identifiers.v,\n            name: identifiers.schemas.string,\n          }),\n          parameters: [],\n        }),\n        pipesToExpression(pipes),\n      ],\n    });\n    return {\n      anyType: 'AnyZodObject',\n      expression,\n    };\n  }\n\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.object,\n    }),\n    parameters: [ts.factory.createObjectLiteralExpression(properties, true)],\n  });\n  return {\n    // Zod uses AnyZodObject here, maybe we want to be more specific too\n    anyType: identifiers.types.GenericSchema.text,\n    expression,\n  };\n};\n\nconst stringTypeToValibotSchema = ({\n  schema,\n}: {\n  schema: SchemaWithType<'string'>;\n}) => {\n  if (typeof schema.const === 'string') {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.schemas.literal,\n      }),\n      parameters: [compiler.ots.string(schema.const)],\n    });\n    return expression;\n  }\n\n  const pipes: Array<ts.CallExpression> = [];\n\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.string,\n    }),\n  });\n  pipes.push(expression);\n\n  if (schema.format) {\n    switch (schema.format) {\n      case 'date':\n        pipes.push(\n          compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: identifiers.v,\n              name: identifiers.actions.isoDate,\n            }),\n          }),\n        );\n        break;\n      case 'date-time':\n        pipes.push(\n          compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: identifiers.v,\n              name: identifiers.actions.isoTimestamp,\n            }),\n          }),\n        );\n        break;\n      case 'ipv4':\n      case 'ipv6':\n        pipes.push(\n          compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: identifiers.v,\n              name: identifiers.actions.ip,\n            }),\n          }),\n        );\n        break;\n      case 'uri':\n        pipes.push(\n          compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: identifiers.v,\n              name: identifiers.actions.url,\n            }),\n          }),\n        );\n        break;\n      case 'email':\n      case 'time':\n      case 'uuid':\n        pipes.push(\n          compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: identifiers.v,\n              name: compiler.identifier({ text: schema.format }),\n            }),\n          }),\n        );\n        break;\n    }\n  }\n\n  if (schema.minLength === schema.maxLength && schema.minLength !== undefined) {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.actions.length,\n      }),\n      parameters: [compiler.valueToExpression({ value: schema.minLength })],\n    });\n    pipes.push(expression);\n  } else {\n    if (schema.minLength !== undefined) {\n      const expression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: identifiers.v,\n          name: identifiers.actions.minLength,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.minLength })],\n      });\n      pipes.push(expression);\n    }\n\n    if (schema.maxLength !== undefined) {\n      const expression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: identifiers.v,\n          name: identifiers.actions.maxLength,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.maxLength })],\n      });\n      pipes.push(expression);\n    }\n  }\n\n  if (schema.pattern) {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.actions.regex,\n      }),\n      parameters: [compiler.regularExpressionLiteral({ text: schema.pattern })],\n    });\n    pipes.push(expression);\n  }\n\n  return pipesToExpression(pipes);\n};\n\nconst tupleTypeToValibotSchema = ({\n  plugin,\n  schema,\n  state,\n}: {\n  plugin: ValibotPlugin['Instance'];\n  schema: SchemaWithType<'tuple'>;\n  state: State;\n}) => {\n  if (schema.const && Array.isArray(schema.const)) {\n    const tupleElements = schema.const.map((value) =>\n      compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: identifiers.v,\n          name: identifiers.schemas.literal,\n        }),\n        parameters: [compiler.valueToExpression({ value })],\n      }),\n    );\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.schemas.tuple,\n      }),\n      parameters: [\n        compiler.arrayLiteralExpression({\n          elements: tupleElements,\n        }),\n      ],\n    });\n    return expression;\n  }\n\n  if (schema.items) {\n    const tupleElements = schema.items.map((item) => {\n      const schemaPipes = schemaToValibotSchema({\n        plugin,\n        schema: item,\n        state,\n      });\n      return pipesToExpression(schemaPipes);\n    });\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: identifiers.v,\n        name: identifiers.schemas.tuple,\n      }),\n      parameters: [\n        compiler.arrayLiteralExpression({\n          elements: tupleElements,\n        }),\n      ],\n    });\n    return expression;\n  }\n\n  return unknownTypeToValibotSchema({\n    schema: {\n      type: 'unknown',\n    },\n  });\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst undefinedTypeToValibotSchema = (_props: {\n  schema: SchemaWithType<'undefined'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.undefined,\n    }),\n  });\n  return expression;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst unknownTypeToValibotSchema = (_props: {\n  schema: SchemaWithType<'unknown'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.unknown,\n    }),\n  });\n  return expression;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst voidTypeToValibotSchema = (_props: {\n  schema: SchemaWithType<'void'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: identifiers.v,\n      name: identifiers.schemas.void,\n    }),\n  });\n  return expression;\n};\n\nconst schemaTypeToValibotSchema = ({\n  plugin,\n  schema,\n  state,\n}: {\n  plugin: ValibotPlugin['Instance'];\n  schema: IR.SchemaObject;\n  state: State;\n}): {\n  anyType?: string;\n  expression: ts.Expression;\n} => {\n  switch (schema.type as Required<IR.SchemaObject>['type']) {\n    case 'array':\n      return {\n        expression: arrayTypeToValibotSchema({\n          plugin,\n          schema: schema as SchemaWithType<'array'>,\n          state,\n        }),\n      };\n    case 'boolean':\n      return {\n        expression: booleanTypeToValibotSchema({\n          schema: schema as SchemaWithType<'boolean'>,\n        }),\n      };\n    case 'enum':\n      return {\n        expression: enumTypeToValibotSchema({\n          schema: schema as SchemaWithType<'enum'>,\n        }),\n      };\n    case 'integer':\n    case 'number':\n      return {\n        expression: numberTypeToValibotSchema({\n          schema: schema as SchemaWithType<'integer' | 'number'>,\n        }),\n      };\n    case 'never':\n      return {\n        expression: neverTypeToValibotSchema({\n          schema: schema as SchemaWithType<'never'>,\n        }),\n      };\n    case 'null':\n      return {\n        expression: nullTypeToValibotSchema({\n          schema: schema as SchemaWithType<'null'>,\n        }),\n      };\n    case 'object':\n      return objectTypeToValibotSchema({\n        plugin,\n        schema: schema as SchemaWithType<'object'>,\n        state,\n      });\n    case 'string':\n      return {\n        expression: stringTypeToValibotSchema({\n          schema: schema as SchemaWithType<'string'>,\n        }),\n      };\n    case 'tuple':\n      return {\n        expression: tupleTypeToValibotSchema({\n          plugin,\n          schema: schema as SchemaWithType<'tuple'>,\n          state,\n        }),\n      };\n    case 'undefined':\n      return {\n        expression: undefinedTypeToValibotSchema({\n          schema: schema as SchemaWithType<'undefined'>,\n        }),\n      };\n    case 'unknown':\n      return {\n        expression: unknownTypeToValibotSchema({\n          schema: schema as SchemaWithType<'unknown'>,\n        }),\n      };\n    case 'void':\n      return {\n        expression: voidTypeToValibotSchema({\n          schema: schema as SchemaWithType<'void'>,\n        }),\n      };\n  }\n};\n\nexport const schemaToValibotSchema = ({\n  $ref,\n  identifier: _identifier,\n  optional,\n  plugin,\n  schema,\n  state,\n}: {\n  /**\n   * When $ref is supplied, a node will be emitted to the file.\n   */\n  $ref?: string;\n  identifier?: Identifier;\n  /**\n   * Accept `optional` to handle optional object properties. We can't handle\n   * this inside the object function because `.optional()` must come before\n   * `.default()` which is handled in this function.\n   */\n  optional?: boolean;\n  plugin: ValibotPlugin['Instance'];\n  schema: IR.SchemaObject;\n  state: State;\n}): Array<ts.Expression> => {\n  const file = plugin.context.file({ id: valibotId })!;\n\n  let anyType: string | undefined;\n  let identifier: ReturnType<typeof file.identifier> | undefined = _identifier;\n  let pipes: Array<ts.Expression> = [];\n\n  if ($ref) {\n    state.circularReferenceTracker.add($ref);\n\n    if (!identifier) {\n      identifier = file.identifier({\n        $ref,\n        case: state.nameCase,\n        create: true,\n        nameTransformer: state.nameTransformer,\n        namespace: 'value',\n      });\n    }\n  }\n\n  if (schema.$ref) {\n    const isCircularReference = state.circularReferenceTracker.has(schema.$ref);\n\n    // if $ref hasn't been processed yet, inline it to avoid the\n    // \"Block-scoped variable used before its declaration.\" error\n    // this could be (maybe?) fixed by reshuffling the generation order\n    let identifierRef = file.identifier({\n      $ref: schema.$ref,\n      case: state.nameCase,\n      nameTransformer: state.nameTransformer,\n      namespace: 'value',\n    });\n\n    if (!identifierRef.name) {\n      const ref = plugin.context.resolveIrRef<IR.SchemaObject>(schema.$ref);\n      const schemaPipes = schemaToValibotSchema({\n        $ref: schema.$ref,\n        plugin,\n        schema: ref,\n        state,\n      });\n      pipes.push(...schemaPipes);\n\n      identifierRef = file.identifier({\n        $ref: schema.$ref,\n        case: state.nameCase,\n        nameTransformer: state.nameTransformer,\n        namespace: 'value',\n      });\n    }\n\n    // if `identifierRef.name` is falsy, we already set expression above\n    if (identifierRef.name) {\n      const refIdentifier = compiler.identifier({ text: identifierRef.name });\n      if (isCircularReference) {\n        const lazyExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: identifiers.v,\n            name: identifiers.schemas.lazy,\n          }),\n          parameters: [\n            compiler.arrowFunction({\n              statements: [\n                compiler.returnStatement({\n                  expression: refIdentifier,\n                }),\n              ],\n            }),\n          ],\n        });\n        pipes.push(lazyExpression);\n        state.hasCircularReference = true;\n      } else {\n        pipes.push(refIdentifier);\n      }\n    }\n  } else if (schema.type) {\n    const valibotSchema = schemaTypeToValibotSchema({ plugin, schema, state });\n    anyType = valibotSchema.anyType;\n    pipes.push(valibotSchema.expression);\n\n    if (plugin.config.metadata && schema.description) {\n      const expression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: identifiers.v,\n          name: identifiers.actions.metadata,\n        }),\n        parameters: [\n          compiler.objectExpression({\n            obj: [\n              {\n                key: 'description',\n                value: compiler.stringLiteral({ text: schema.description }),\n              },\n            ],\n          }),\n        ],\n      });\n      pipes.push(expression);\n    }\n  } else if (schema.items) {\n    schema = deduplicateSchema({ schema });\n\n    if (schema.items) {\n      const itemTypes = schema.items.map((item) => {\n        const schemaPipes = schemaToValibotSchema({\n          plugin,\n          schema: item,\n          state,\n        });\n        return pipesToExpression(schemaPipes);\n      });\n\n      if (schema.logicalOperator === 'and') {\n        const intersectExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: identifiers.v,\n            name: identifiers.schemas.intersect,\n          }),\n          parameters: [\n            compiler.arrayLiteralExpression({\n              elements: itemTypes,\n            }),\n          ],\n        });\n        pipes.push(intersectExpression);\n      } else {\n        const unionExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: identifiers.v,\n            name: identifiers.schemas.union,\n          }),\n          parameters: [\n            compiler.arrayLiteralExpression({\n              elements: itemTypes,\n            }),\n          ],\n        });\n        pipes.push(unionExpression);\n      }\n    } else {\n      const schemaPipes = schemaToValibotSchema({\n        plugin,\n        schema,\n        state,\n      });\n      pipes.push(...schemaPipes);\n    }\n  } else {\n    // catch-all fallback for failed schemas\n    const valibotSchema = schemaTypeToValibotSchema({\n      plugin,\n      schema: {\n        type: 'unknown',\n      },\n      state,\n    });\n    anyType = valibotSchema.anyType;\n    pipes.push(valibotSchema.expression);\n  }\n\n  if ($ref) {\n    state.circularReferenceTracker.delete($ref);\n  }\n\n  if (pipes.length) {\n    if (schema.accessScope === 'read') {\n      const readonlyExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: identifiers.v,\n          name: identifiers.actions.readonly,\n        }),\n      });\n      pipes.push(readonlyExpression);\n    }\n  }\n\n  if (pipes.length) {\n    let callParameter: ts.Expression | undefined;\n\n    if (schema.default !== undefined) {\n      const isBigInt = schema.type === 'integer' && schema.format === 'int64';\n      callParameter = numberParameter({ isBigInt, value: schema.default });\n      if (callParameter) {\n        pipes = [\n          compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: identifiers.v,\n              name: identifiers.schemas.optional,\n            }),\n            parameters: [pipesToExpression(pipes), callParameter],\n          }),\n        ];\n      }\n    }\n\n    if (optional && !callParameter) {\n      pipes = [\n        compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: identifiers.v,\n            name: identifiers.schemas.optional,\n          }),\n          parameters: [pipesToExpression(pipes)],\n        }),\n      ];\n    }\n  }\n\n  // emit nodes only if $ref points to a reusable component\n  if (identifier && identifier.name && identifier.created) {\n    const statement = compiler.constVariable({\n      comment: plugin.config.comments\n        ? createSchemaComment({ schema })\n        : undefined,\n      exportConst: true,\n      expression: pipesToExpression(pipes),\n      name: identifier.name,\n      typeName: state.hasCircularReference\n        ? (compiler.propertyAccessExpression({\n            expression: identifiers.v,\n            name: anyType || identifiers.types.GenericSchema.text,\n          }) as unknown as ts.TypeNode)\n        : undefined,\n    });\n    file.add(statement);\n\n    return [];\n  }\n\n  return pipes;\n};\n\nexport const handler: ValibotPlugin['Handler'] = ({ plugin }) => {\n  const file = plugin.createFile({\n    id: valibotId,\n    identifierCase: plugin.config.case,\n    path: plugin.output,\n  });\n\n  file.import({\n    alias: identifiers.v.text,\n    module: 'valibot',\n    name: '*',\n  });\n\n  plugin.forEach('operation', 'parameter', 'requestBody', 'schema', (event) => {\n    const state: State = {\n      circularReferenceTracker: new Set(),\n      hasCircularReference: false,\n      nameCase: plugin.config.definitions.case,\n      nameTransformer: plugin.config.definitions.name,\n    };\n\n    if (event.type === 'operation') {\n      operationToValibotSchema({\n        operation: event.operation,\n        plugin,\n        state,\n      });\n    } else if (event.type === 'parameter') {\n      schemaToValibotSchema({\n        $ref: event.$ref,\n        plugin,\n        schema: event.parameter.schema,\n        state,\n      });\n    } else if (event.type === 'requestBody') {\n      schemaToValibotSchema({\n        $ref: event.$ref,\n        plugin,\n        schema: event.requestBody.schema,\n        state,\n      });\n    } else if (event.type === 'schema') {\n      schemaToValibotSchema({\n        $ref: event.$ref,\n        plugin,\n        schema: event.schema,\n        state,\n      });\n    }\n  });\n};\n","import { definePluginConfig } from '../shared/utils/config';\nimport { api } from './api';\nimport { handler } from './plugin';\nimport type { ValibotPlugin } from './types';\n\nexport const defaultConfig: ValibotPlugin['Config'] = {\n  api,\n  config: {\n    case: 'camelCase',\n    comments: true,\n    exportFromIndex: false,\n    metadata: false,\n  },\n  handler,\n  name: 'valibot',\n  output: 'valibot',\n  resolveConfig: (plugin, context) => {\n    plugin.config.definitions = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: 'v{{name}}',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.definitions,\n    });\n\n    plugin.config.requests = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: 'v{{name}}Data',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.requests,\n    });\n\n    plugin.config.responses = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: 'v{{name}}Response',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.responses,\n    });\n  },\n  tags: ['validator'],\n};\n\n/**\n * Type helper for Valibot plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import { compiler } from '../../compiler';\n\nexport const identifiers = {\n  parseAsync: compiler.identifier({ text: 'parseAsync' }),\n};\n\nexport const zodId = 'zod';\n","import type ts from 'typescript';\n\nimport { compiler } from '../../compiler';\nimport type { TypeScriptFile } from '../../generate/files';\nimport type { IR } from '../../ir/types';\nimport { identifiers, zodId } from './constants';\nimport type { ZodPlugin } from './types';\n\nconst createRequestValidator = ({\n  file,\n  operation,\n  plugin,\n}: {\n  file: TypeScriptFile;\n  operation: IR.OperationObject;\n  plugin: ZodPlugin['Instance'];\n}): ts.ArrowFunction | undefined => {\n  const { requests } = plugin.config;\n  const schemaIdentifier = plugin.context.file({ id: zodId })!.identifier({\n    // TODO: refactor for better cross-plugin compatibility\n    $ref: `#/zod-data/${operation.id}`,\n    // TODO: refactor to not have to define nameTransformer\n    nameTransformer: typeof requests === 'object' ? requests.name : undefined,\n    namespace: 'value',\n  });\n\n  if (!schemaIdentifier.name) {\n    return;\n  }\n\n  file.import({\n    module: file.relativePathToFile({\n      context: plugin.context,\n      id: zodId,\n    }),\n    name: schemaIdentifier.name,\n  });\n\n  const dataParameterName = 'data';\n\n  return compiler.arrowFunction({\n    async: true,\n    parameters: [\n      {\n        name: dataParameterName,\n      },\n    ],\n    statements: [\n      compiler.returnStatement({\n        expression: compiler.awaitExpression({\n          expression: compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: compiler.identifier({ text: schemaIdentifier.name }),\n              name: identifiers.parseAsync,\n            }),\n            parameters: [compiler.identifier({ text: dataParameterName })],\n          }),\n        }),\n      }),\n    ],\n  });\n};\n\nconst createResponseValidator = ({\n  file,\n  operation,\n  plugin,\n}: {\n  file: TypeScriptFile;\n  operation: IR.OperationObject;\n  plugin: ZodPlugin['Instance'];\n}): ts.ArrowFunction | undefined => {\n  const { responses } = plugin.config;\n  const schemaIdentifier = plugin.context.file({ id: zodId })!.identifier({\n    // TODO: refactor for better cross-plugin compatibility\n    $ref: `#/zod-response/${operation.id}`,\n    // TODO: refactor to not have to define nameTransformer\n    nameTransformer: typeof responses === 'object' ? responses.name : undefined,\n    namespace: 'value',\n  });\n\n  if (!schemaIdentifier.name) {\n    return;\n  }\n\n  file.import({\n    module: file.relativePathToFile({\n      context: plugin.context,\n      id: zodId,\n    }),\n    name: schemaIdentifier.name,\n  });\n\n  const dataParameterName = 'data';\n\n  return compiler.arrowFunction({\n    async: true,\n    parameters: [\n      {\n        name: dataParameterName,\n      },\n    ],\n    statements: [\n      compiler.returnStatement({\n        expression: compiler.awaitExpression({\n          expression: compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: compiler.identifier({ text: schemaIdentifier.name }),\n              name: identifiers.parseAsync,\n            }),\n            parameters: [compiler.identifier({ text: dataParameterName })],\n          }),\n        }),\n      }),\n    ],\n  });\n};\n\nexport type Api = {\n  createRequestValidator: (args: {\n    file: TypeScriptFile;\n    operation: IR.OperationObject;\n    plugin: ZodPlugin['Instance'];\n  }) => ts.ArrowFunction | undefined;\n  createResponseValidator: (args: {\n    file: TypeScriptFile;\n    operation: IR.OperationObject;\n    plugin: ZodPlugin['Instance'];\n  }) => ts.ArrowFunction | undefined;\n};\n\nexport const api: Api = {\n  createRequestValidator,\n  createResponseValidator,\n};\n","import { operationResponsesMap } from '../../ir/operation';\nimport type { IR } from '../../ir/types';\nimport { zodId } from './constants';\nimport type { State } from './plugin';\nimport { schemaToZodSchema } from './plugin';\nimport type { ZodPlugin } from './types';\n\nexport const operationToZodSchema = ({\n  operation,\n  plugin,\n  state,\n}: {\n  operation: IR.OperationObject;\n  plugin: ZodPlugin['Instance'];\n  state: State;\n}) => {\n  const file = plugin.context.file({ id: zodId })!;\n\n  if (plugin.config.requests.enabled) {\n    const requiredProperties = new Set<string>();\n\n    const schemaData: IR.SchemaObject = {\n      properties: {\n        body: {\n          type: 'never',\n        },\n        path: {\n          type: 'never',\n        },\n        query: {\n          type: 'never',\n        },\n      },\n      type: 'object',\n    };\n\n    if (operation.parameters) {\n      // TODO: add support for cookies\n\n      if (operation.parameters.header) {\n        const properties: Record<string, IR.SchemaObject> = {};\n        const required: Array<string> = [];\n\n        for (const key in operation.parameters.header) {\n          const parameter = operation.parameters.header[key]!;\n          properties[parameter.name] = parameter.schema;\n          if (parameter.required) {\n            required.push(parameter.name);\n            requiredProperties.add('headers');\n          }\n        }\n\n        if (Object.keys(properties).length) {\n          schemaData.properties!.headers = {\n            properties,\n            required,\n            type: 'object',\n          };\n        }\n      }\n\n      if (operation.parameters.path) {\n        const properties: Record<string, IR.SchemaObject> = {};\n        const required: Array<string> = [];\n\n        for (const key in operation.parameters.path) {\n          const parameter = operation.parameters.path[key]!;\n          properties[parameter.name] = parameter.schema;\n          if (parameter.required) {\n            required.push(parameter.name);\n            requiredProperties.add('path');\n          }\n        }\n\n        if (Object.keys(properties).length) {\n          schemaData.properties!.path = {\n            properties,\n            required,\n            type: 'object',\n          };\n        }\n      }\n\n      if (operation.parameters.query) {\n        const properties: Record<string, IR.SchemaObject> = {};\n        const required: Array<string> = [];\n\n        for (const key in operation.parameters.query) {\n          const parameter = operation.parameters.query[key]!;\n          properties[parameter.name] = parameter.schema;\n          if (parameter.required) {\n            required.push(parameter.name);\n            requiredProperties.add('query');\n          }\n        }\n\n        if (Object.keys(properties).length) {\n          schemaData.properties!.query = {\n            properties,\n            required,\n            type: 'object',\n          };\n        }\n      }\n    }\n\n    if (operation.body) {\n      schemaData.properties!.body = operation.body.schema;\n\n      if (operation.body.required) {\n        requiredProperties.add('body');\n      }\n    }\n\n    schemaData.required = [...requiredProperties];\n\n    const identifierData = file.identifier({\n      // TODO: refactor for better cross-plugin compatibility\n      $ref: `#/zod-data/${operation.id}`,\n      case: plugin.config.requests.case,\n      create: true,\n      nameTransformer: plugin.config.requests.name,\n      namespace: 'value',\n    });\n    schemaToZodSchema({\n      // TODO: refactor for better cross-plugin compatibility\n      $ref: `#/zod-data/${operation.id}`,\n      identifier: identifierData,\n      plugin,\n      schema: schemaData,\n      state,\n    });\n  }\n\n  if (plugin.config.responses.enabled) {\n    if (operation.responses) {\n      const { response } = operationResponsesMap(operation);\n\n      if (response) {\n        const identifierResponse = file.identifier({\n          // TODO: refactor for better cross-plugin compatibility\n          $ref: `#/zod-response/${operation.id}`,\n          case: plugin.config.responses.case,\n          create: true,\n          nameTransformer: plugin.config.responses.name,\n          namespace: 'value',\n        });\n        schemaToZodSchema({\n          // TODO: refactor for better cross-plugin compatibility\n          $ref: `#/zod-response/${operation.id}`,\n          identifier: identifierResponse,\n          plugin,\n          schema: response,\n          state,\n        });\n      }\n    }\n  }\n};\n","import ts from 'typescript';\n\nimport { compiler } from '../../compiler';\nimport type { Identifier } from '../../generate/files';\nimport { deduplicateSchema } from '../../ir/schema';\nimport type { IR } from '../../ir/types';\nimport type { StringCase } from '../../types/case';\nimport { numberRegExp } from '../../utils/regexp';\nimport { createSchemaComment } from '../shared/utils/schema';\nimport { zodId } from './constants';\nimport { operationToZodSchema } from './operation';\nimport type { ZodPlugin } from './types';\n\ninterface SchemaWithType<T extends Required<IR.SchemaObject>['type']>\n  extends Omit<IR.SchemaObject, 'type'> {\n  type: Extract<Required<IR.SchemaObject>['type'], T>;\n}\n\nexport interface State {\n  circularReferenceTracker: Set<string>;\n  hasCircularReference: boolean;\n  nameCase: StringCase;\n  nameTransformer: string | ((name: string) => string);\n}\n\n// frequently used identifiers\nconst andIdentifier = compiler.identifier({ text: 'and' });\nconst arrayIdentifier = compiler.identifier({ text: 'array' });\nconst coerceIdentifier = compiler.identifier({ text: 'coerce' });\nconst defaultIdentifier = compiler.identifier({ text: 'default' });\nconst describeIdentifier = compiler.identifier({ text: 'describe' });\nconst intersectionIdentifier = compiler.identifier({ text: 'intersection' });\nconst lazyIdentifier = compiler.identifier({ text: 'lazy' });\nconst lengthIdentifier = compiler.identifier({ text: 'length' });\nconst literalIdentifier = compiler.identifier({ text: 'literal' });\nconst maxIdentifier = compiler.identifier({ text: 'max' });\nconst minIdentifier = compiler.identifier({ text: 'min' });\nconst objectIdentifier = compiler.identifier({ text: 'object' });\nconst optionalIdentifier = compiler.identifier({ text: 'optional' });\nconst readonlyIdentifier = compiler.identifier({ text: 'readonly' });\nconst recordIdentifier = compiler.identifier({ text: 'record' });\nconst regexIdentifier = compiler.identifier({ text: 'regex' });\nconst unionIdentifier = compiler.identifier({ text: 'union' });\nconst zIdentifier = compiler.identifier({ text: 'z' });\n\nconst arrayTypeToZodSchema = ({\n  plugin,\n  schema,\n  state,\n}: {\n  plugin: ZodPlugin['Instance'];\n  schema: SchemaWithType<'array'>;\n  state: State;\n}): ts.CallExpression => {\n  const functionName = compiler.propertyAccessExpression({\n    expression: zIdentifier,\n    name: arrayIdentifier,\n  });\n\n  let arrayExpression: ts.CallExpression | undefined;\n\n  if (!schema.items) {\n    arrayExpression = compiler.callExpression({\n      functionName,\n      parameters: [\n        unknownTypeToZodSchema({\n          schema: {\n            type: 'unknown',\n          },\n        }),\n      ],\n    });\n  } else {\n    schema = deduplicateSchema({ schema });\n\n    // at least one item is guaranteed\n    const itemExpressions = schema.items!.map((item) =>\n      schemaToZodSchema({\n        plugin,\n        schema: item,\n        state,\n      }),\n    );\n\n    if (itemExpressions.length === 1) {\n      arrayExpression = compiler.callExpression({\n        functionName,\n        parameters: itemExpressions,\n      });\n    } else {\n      if (schema.logicalOperator === 'and') {\n        // TODO: parser - handle intersection\n        // return compiler.typeArrayNode(\n        //   compiler.typeIntersectionNode({ types: itemExpressions }),\n        // );\n      }\n\n      arrayExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: zIdentifier,\n          name: arrayIdentifier,\n        }),\n        parameters: [\n          compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: zIdentifier,\n              name: unionIdentifier,\n            }),\n            parameters: [\n              compiler.arrayLiteralExpression({\n                elements: itemExpressions,\n              }),\n            ],\n          }),\n        ],\n      });\n    }\n  }\n\n  if (schema.minItems === schema.maxItems && schema.minItems !== undefined) {\n    arrayExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: arrayExpression,\n        name: lengthIdentifier,\n      }),\n      parameters: [compiler.valueToExpression({ value: schema.minItems })],\n    });\n  } else {\n    if (schema.minItems !== undefined) {\n      arrayExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: arrayExpression,\n          name: minIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.minItems })],\n      });\n    }\n\n    if (schema.maxItems !== undefined) {\n      arrayExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: arrayExpression,\n          name: maxIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.maxItems })],\n      });\n    }\n  }\n\n  return arrayExpression;\n};\n\nconst booleanTypeToZodSchema = ({\n  schema,\n}: {\n  schema: SchemaWithType<'boolean'>;\n}) => {\n  if (typeof schema.const === 'boolean') {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: zIdentifier,\n        name: literalIdentifier,\n      }),\n      parameters: [compiler.ots.boolean(schema.const)],\n    });\n    return expression;\n  }\n\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'boolean' }),\n    }),\n  });\n  return expression;\n};\n\nconst enumTypeToZodSchema = ({\n  schema,\n}: {\n  schema: SchemaWithType<'enum'>;\n}): ts.CallExpression => {\n  const enumMembers: Array<ts.LiteralExpression> = [];\n\n  let isNullable = false;\n\n  for (const item of schema.items ?? []) {\n    // Zod supports only string enums\n    if (item.type === 'string' && typeof item.const === 'string') {\n      enumMembers.push(\n        compiler.stringLiteral({\n          text: item.const,\n        }),\n      );\n    } else if (item.type === 'null' || item.const === null) {\n      isNullable = true;\n    }\n  }\n\n  if (!enumMembers.length) {\n    return unknownTypeToZodSchema({\n      schema: {\n        type: 'unknown',\n      },\n    });\n  }\n\n  let enumExpression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'enum' }),\n    }),\n    parameters: [\n      compiler.arrayLiteralExpression({\n        elements: enumMembers,\n        multiLine: false,\n      }),\n    ],\n  });\n\n  if (isNullable) {\n    enumExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: enumExpression,\n        name: compiler.identifier({ text: 'nullable' }),\n      }),\n    });\n  }\n\n  return enumExpression;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst neverTypeToZodSchema = (_props: { schema: SchemaWithType<'never'> }) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'never' }),\n    }),\n  });\n  return expression;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst nullTypeToZodSchema = (_props: { schema: SchemaWithType<'null'> }) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'null' }),\n    }),\n  });\n  return expression;\n};\n\nconst numberParameter = ({\n  isBigInt,\n  value,\n}: {\n  isBigInt: boolean;\n  value: unknown;\n}) => {\n  const expression = compiler.valueToExpression({ value });\n\n  if (\n    isBigInt &&\n    (typeof value === 'bigint' ||\n      typeof value === 'number' ||\n      typeof value === 'string' ||\n      typeof value === 'boolean')\n  ) {\n    return compiler.callExpression({\n      functionName: 'BigInt',\n      parameters: [expression],\n    });\n  }\n\n  return expression;\n};\n\nconst numberTypeToZodSchema = ({\n  schema,\n}: {\n  schema: SchemaWithType<'integer' | 'number'>;\n}) => {\n  const isBigInt = schema.type === 'integer' && schema.format === 'int64';\n\n  if (typeof schema.const === 'number') {\n    // TODO: parser - handle bigint constants\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: zIdentifier,\n        name: literalIdentifier,\n      }),\n      parameters: [compiler.ots.number(schema.const)],\n    });\n    return expression;\n  }\n\n  let numberExpression = compiler.callExpression({\n    functionName: isBigInt\n      ? compiler.propertyAccessExpression({\n          expression: compiler.propertyAccessExpression({\n            expression: zIdentifier,\n            name: coerceIdentifier,\n          }),\n          name: compiler.identifier({ text: 'bigint' }),\n        })\n      : compiler.propertyAccessExpression({\n          expression: zIdentifier,\n          name: compiler.identifier({ text: 'number' }),\n        }),\n  });\n\n  if (!isBigInt && schema.type === 'integer') {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'int' }),\n      }),\n    });\n  }\n\n  if (schema.exclusiveMinimum !== undefined) {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'gt' }),\n      }),\n      parameters: [\n        numberParameter({ isBigInt, value: schema.exclusiveMinimum }),\n      ],\n    });\n  } else if (schema.minimum !== undefined) {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'gte' }),\n      }),\n      parameters: [numberParameter({ isBigInt, value: schema.minimum })],\n    });\n  }\n\n  if (schema.exclusiveMaximum !== undefined) {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'lt' }),\n      }),\n      parameters: [\n        numberParameter({ isBigInt, value: schema.exclusiveMaximum }),\n      ],\n    });\n  } else if (schema.maximum !== undefined) {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'lte' }),\n      }),\n      parameters: [numberParameter({ isBigInt, value: schema.maximum })],\n    });\n  }\n\n  return numberExpression;\n};\n\nconst objectTypeToZodSchema = ({\n  plugin,\n  schema,\n  state,\n}: {\n  plugin: ZodPlugin['Instance'];\n  schema: SchemaWithType<'object'>;\n  state: State;\n}): {\n  anyType: string;\n  expression: ts.CallExpression;\n} => {\n  // TODO: parser - handle constants\n  const properties: Array<ts.PropertyAssignment> = [];\n\n  const required = schema.required ?? [];\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    const isRequired = required.includes(name);\n\n    const propertyExpression = schemaToZodSchema({\n      optional: !isRequired,\n      plugin,\n      schema: property,\n      state,\n    });\n\n    numberRegExp.lastIndex = 0;\n    let propertyName;\n    if (numberRegExp.test(name)) {\n      // For numeric literals, we'll handle negative numbers by using a string literal\n      // instead of trying to use a PrefixUnaryExpression\n      propertyName = name.startsWith('-')\n        ? ts.factory.createStringLiteral(name)\n        : ts.factory.createNumericLiteral(name);\n    } else {\n      propertyName = name;\n    }\n    // TODO: parser - abstract safe property name logic\n    if (\n      ((name.match(/^[0-9]/) && name.match(/\\D+/g)) || name.match(/\\W/g)) &&\n      !name.startsWith(\"'\") &&\n      !name.endsWith(\"'\")\n    ) {\n      propertyName = `'${name}'`;\n    }\n    properties.push(\n      compiler.propertyAssignment({\n        initializer: propertyExpression,\n        name: propertyName,\n      }),\n    );\n  }\n\n  if (\n    schema.additionalProperties &&\n    schema.additionalProperties.type === 'object' &&\n    !Object.keys(properties).length\n  ) {\n    const zodSchema = schemaToZodSchema({\n      plugin,\n      schema: schema.additionalProperties,\n      state,\n    });\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: zIdentifier,\n        name: recordIdentifier,\n      }),\n      parameters: [zodSchema],\n    });\n    return {\n      anyType: 'AnyZodObject',\n      expression,\n    };\n  }\n\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: objectIdentifier,\n    }),\n    parameters: [ts.factory.createObjectLiteralExpression(properties, true)],\n  });\n  return {\n    anyType: 'AnyZodObject',\n    expression,\n  };\n};\n\nconst stringTypeToZodSchema = ({\n  plugin,\n  schema,\n}: {\n  plugin: ZodPlugin['Instance'];\n  schema: SchemaWithType<'string'>;\n}) => {\n  if (typeof schema.const === 'string') {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: zIdentifier,\n        name: literalIdentifier,\n      }),\n      parameters: [compiler.ots.string(schema.const)],\n    });\n    return expression;\n  }\n\n  let stringExpression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'string' }),\n    }),\n  });\n\n  if (schema.format) {\n    switch (schema.format) {\n      case 'date-time':\n        stringExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: stringExpression,\n            name: compiler.identifier({ text: 'datetime' }),\n          }),\n          parameters: plugin.config.dates.offset\n            ? [\n                compiler.objectExpression({\n                  obj: [\n                    {\n                      key: 'offset',\n                      value: true,\n                    },\n                  ],\n                }),\n              ]\n            : [],\n        });\n        break;\n      case 'ipv4':\n      case 'ipv6':\n        stringExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: stringExpression,\n            name: compiler.identifier({ text: 'ip' }),\n          }),\n        });\n        break;\n      case 'uri':\n        stringExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: stringExpression,\n            name: compiler.identifier({ text: 'url' }),\n          }),\n        });\n        break;\n      case 'date':\n      case 'email':\n      case 'time':\n      case 'uuid':\n        stringExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: stringExpression,\n            name: compiler.identifier({ text: schema.format }),\n          }),\n        });\n        break;\n    }\n  }\n\n  if (schema.minLength === schema.maxLength && schema.minLength !== undefined) {\n    stringExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: stringExpression,\n        name: lengthIdentifier,\n      }),\n      parameters: [compiler.valueToExpression({ value: schema.minLength })],\n    });\n  } else {\n    if (schema.minLength !== undefined) {\n      stringExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: stringExpression,\n          name: minIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.minLength })],\n      });\n    }\n\n    if (schema.maxLength !== undefined) {\n      stringExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: stringExpression,\n          name: maxIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.maxLength })],\n      });\n    }\n  }\n\n  if (schema.pattern) {\n    stringExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: stringExpression,\n        name: regexIdentifier,\n      }),\n      parameters: [compiler.regularExpressionLiteral({ text: schema.pattern })],\n    });\n  }\n\n  return stringExpression;\n};\n\nconst tupleTypeToZodSchema = ({\n  plugin,\n  schema,\n  state,\n}: {\n  plugin: ZodPlugin['Instance'];\n  schema: SchemaWithType<'tuple'>;\n  state: State;\n}) => {\n  if (schema.const && Array.isArray(schema.const)) {\n    const tupleElements = schema.const.map((value) =>\n      compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: zIdentifier,\n          name: literalIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value })],\n      }),\n    );\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: zIdentifier,\n        name: compiler.identifier({ text: 'tuple' }),\n      }),\n      parameters: [\n        compiler.arrayLiteralExpression({\n          elements: tupleElements,\n        }),\n      ],\n    });\n    return expression;\n  }\n\n  const tupleElements: Array<ts.Expression> = [];\n\n  for (const item of schema.items ?? []) {\n    tupleElements.push(\n      schemaToZodSchema({\n        plugin,\n        schema: item,\n        state,\n      }),\n    );\n  }\n\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'tuple' }),\n    }),\n    parameters: [\n      compiler.arrayLiteralExpression({\n        elements: tupleElements,\n      }),\n    ],\n  });\n  return expression;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst undefinedTypeToZodSchema = (_props: {\n  schema: SchemaWithType<'undefined'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'undefined' }),\n    }),\n  });\n  return expression;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst unknownTypeToZodSchema = (_props: {\n  schema: SchemaWithType<'unknown'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'unknown' }),\n    }),\n  });\n  return expression;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst voidTypeToZodSchema = (_props: { schema: SchemaWithType<'void'> }) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: 'void' }),\n    }),\n  });\n  return expression;\n};\n\nconst schemaTypeToZodSchema = ({\n  plugin,\n  schema,\n  state,\n}: {\n  plugin: ZodPlugin['Instance'];\n  schema: IR.SchemaObject;\n  state: State;\n}): {\n  anyType?: string;\n  expression: ts.Expression;\n} => {\n  switch (schema.type as Required<IR.SchemaObject>['type']) {\n    case 'array':\n      return {\n        expression: arrayTypeToZodSchema({\n          plugin,\n          schema: schema as SchemaWithType<'array'>,\n          state,\n        }),\n      };\n    case 'boolean':\n      return {\n        expression: booleanTypeToZodSchema({\n          schema: schema as SchemaWithType<'boolean'>,\n        }),\n      };\n    case 'enum':\n      return {\n        expression: enumTypeToZodSchema({\n          schema: schema as SchemaWithType<'enum'>,\n        }),\n      };\n    case 'integer':\n    case 'number':\n      return {\n        expression: numberTypeToZodSchema({\n          schema: schema as SchemaWithType<'integer' | 'number'>,\n        }),\n      };\n    case 'never':\n      return {\n        expression: neverTypeToZodSchema({\n          schema: schema as SchemaWithType<'never'>,\n        }),\n      };\n    case 'null':\n      return {\n        expression: nullTypeToZodSchema({\n          schema: schema as SchemaWithType<'null'>,\n        }),\n      };\n    case 'object':\n      return objectTypeToZodSchema({\n        plugin,\n        schema: schema as SchemaWithType<'object'>,\n        state,\n      });\n    case 'string':\n      return {\n        expression: stringTypeToZodSchema({\n          plugin,\n          schema: schema as SchemaWithType<'string'>,\n        }),\n      };\n    case 'tuple':\n      return {\n        expression: tupleTypeToZodSchema({\n          plugin,\n          schema: schema as SchemaWithType<'tuple'>,\n          state,\n        }),\n      };\n    case 'undefined':\n      return {\n        expression: undefinedTypeToZodSchema({\n          schema: schema as SchemaWithType<'undefined'>,\n        }),\n      };\n    case 'unknown':\n      return {\n        expression: unknownTypeToZodSchema({\n          schema: schema as SchemaWithType<'unknown'>,\n        }),\n      };\n    case 'void':\n      return {\n        expression: voidTypeToZodSchema({\n          schema: schema as SchemaWithType<'void'>,\n        }),\n      };\n  }\n};\n\nexport const schemaToZodSchema = ({\n  $ref,\n  identifier: _identifier,\n  optional,\n  plugin,\n  schema,\n  state,\n}: {\n  /**\n   * When $ref is supplied, a node will be emitted to the file.\n   */\n  $ref?: string;\n  identifier?: Identifier;\n  /**\n   * Accept `optional` to handle optional object properties. We can't handle\n   * this inside the object function because `.optional()` must come before\n   * `.default()` which is handled in this function.\n   */\n  optional?: boolean;\n  plugin: ZodPlugin['Instance'];\n  schema: IR.SchemaObject;\n  state: State;\n}): ts.Expression => {\n  const file = plugin.context.file({ id: zodId })!;\n\n  let anyType: string | undefined;\n  let expression: ts.Expression | undefined;\n  let identifier: ReturnType<typeof file.identifier> | undefined = _identifier;\n\n  if ($ref) {\n    state.circularReferenceTracker.add($ref);\n\n    if (!identifier) {\n      identifier = file.identifier({\n        $ref,\n        case: state.nameCase,\n        create: true,\n        nameTransformer: state.nameTransformer,\n        namespace: 'value',\n      });\n    }\n  }\n\n  if (schema.$ref) {\n    const isCircularReference = state.circularReferenceTracker.has(schema.$ref);\n\n    // if $ref hasn't been processed yet, inline it to avoid the\n    // \"Block-scoped variable used before its declaration.\" error\n    // this could be (maybe?) fixed by reshuffling the generation order\n    let identifierRef = file.identifier({\n      $ref: schema.$ref,\n      case: state.nameCase,\n      nameTransformer: state.nameTransformer,\n      namespace: 'value',\n    });\n\n    if (!identifierRef.name) {\n      const ref = plugin.context.resolveIrRef<IR.SchemaObject>(schema.$ref);\n      expression = schemaToZodSchema({\n        $ref: schema.$ref,\n        plugin,\n        schema: ref,\n        state,\n      });\n\n      identifierRef = file.identifier({\n        $ref: schema.$ref,\n        case: state.nameCase,\n        nameTransformer: state.nameTransformer,\n        namespace: 'value',\n      });\n    }\n\n    // if `identifierRef.name` is falsy, we already set expression above\n    if (identifierRef.name) {\n      const refIdentifier = compiler.identifier({ text: identifierRef.name });\n      if (isCircularReference) {\n        expression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: zIdentifier,\n            name: lazyIdentifier,\n          }),\n          parameters: [\n            compiler.arrowFunction({\n              statements: [\n                compiler.returnStatement({\n                  expression: refIdentifier,\n                }),\n              ],\n            }),\n          ],\n        });\n        state.hasCircularReference = true;\n      } else {\n        expression = refIdentifier;\n      }\n    }\n  } else if (schema.type) {\n    const zodSchema = schemaTypeToZodSchema({ plugin, schema, state });\n    anyType = zodSchema.anyType;\n    expression = zodSchema.expression;\n\n    if (plugin.config.metadata && schema.description) {\n      expression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression,\n          name: describeIdentifier,\n        }),\n        parameters: [compiler.stringLiteral({ text: schema.description })],\n      });\n    }\n  } else if (schema.items) {\n    schema = deduplicateSchema({ schema });\n\n    if (schema.items) {\n      const itemTypes = schema.items.map((item) =>\n        schemaToZodSchema({\n          plugin,\n          schema: item,\n          state,\n        }),\n      );\n\n      if (schema.logicalOperator === 'and') {\n        const firstSchema = schema.items[0]!;\n        // we want to add an intersection, but not every schema can use the same API.\n        // if the first item contains another array or not an object, we cannot use\n        // `.merge()` as that does not exist on `.union()` and non-object schemas.\n        if (\n          firstSchema.logicalOperator === 'or' ||\n          (firstSchema.type && firstSchema.type !== 'object')\n        ) {\n          expression = compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: zIdentifier,\n              name: intersectionIdentifier,\n            }),\n            parameters: itemTypes,\n          });\n        } else {\n          expression = itemTypes[0];\n          itemTypes.slice(1).forEach((item) => {\n            expression = compiler.callExpression({\n              functionName: compiler.propertyAccessExpression({\n                expression: expression!,\n                name: andIdentifier,\n              }),\n              parameters: [item],\n            });\n          });\n        }\n      } else {\n        expression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: zIdentifier,\n            name: unionIdentifier,\n          }),\n          parameters: [\n            compiler.arrayLiteralExpression({\n              elements: itemTypes,\n            }),\n          ],\n        });\n      }\n    } else {\n      expression = schemaToZodSchema({\n        plugin,\n        schema,\n        state,\n      });\n    }\n  } else {\n    // catch-all fallback for failed schemas\n    const zodSchema = schemaTypeToZodSchema({\n      plugin,\n      schema: {\n        type: 'unknown',\n      },\n      state,\n    });\n    anyType = zodSchema.anyType;\n    expression = zodSchema.expression;\n  }\n\n  if ($ref) {\n    state.circularReferenceTracker.delete($ref);\n  }\n\n  if (expression) {\n    if (schema.accessScope === 'read') {\n      expression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression,\n          name: readonlyIdentifier,\n        }),\n      });\n    }\n\n    if (optional) {\n      expression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression,\n          name: optionalIdentifier,\n        }),\n      });\n    }\n\n    if (schema.default !== undefined) {\n      const isBigInt = schema.type === 'integer' && schema.format === 'int64';\n      const callParameter = numberParameter({\n        isBigInt,\n        value: schema.default,\n      });\n      if (callParameter) {\n        expression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression,\n            name: defaultIdentifier,\n          }),\n          parameters: [callParameter],\n        });\n      }\n    }\n  }\n\n  // emit nodes only if $ref points to a reusable component\n  if (identifier && identifier.name && identifier.created) {\n    const statement = compiler.constVariable({\n      comment: plugin.config.comments\n        ? createSchemaComment({ schema })\n        : undefined,\n      exportConst: true,\n      expression: expression!,\n      name: identifier.name,\n      typeName: state.hasCircularReference\n        ? (compiler.propertyAccessExpression({\n            expression: zIdentifier,\n            name: anyType || 'ZodTypeAny',\n          }) as unknown as ts.TypeNode)\n        : undefined,\n    });\n    file.add(statement);\n  }\n\n  return expression!;\n};\n\nexport const handler: ZodPlugin['Handler'] = ({ plugin }) => {\n  const file = plugin.createFile({\n    id: zodId,\n    identifierCase: plugin.config.case,\n    path: plugin.output,\n  });\n\n  file.import({\n    module: 'zod',\n    name: 'z',\n  });\n\n  plugin.forEach('operation', 'parameter', 'requestBody', 'schema', (event) => {\n    const state: State = {\n      circularReferenceTracker: new Set(),\n      hasCircularReference: false,\n      nameCase: plugin.config.definitions.case,\n      nameTransformer: plugin.config.definitions.name,\n    };\n\n    if (event.type === 'operation') {\n      operationToZodSchema({ operation: event.operation, plugin, state });\n    } else if (event.type === 'parameter') {\n      schemaToZodSchema({\n        $ref: event.$ref,\n        plugin,\n        schema: event.parameter.schema,\n        state,\n      });\n    } else if (event.type === 'requestBody') {\n      schemaToZodSchema({\n        $ref: event.$ref,\n        plugin,\n        schema: event.requestBody.schema,\n        state,\n      });\n    } else if (event.type === 'schema') {\n      schemaToZodSchema({\n        $ref: event.$ref,\n        plugin,\n        schema: event.schema,\n        state,\n      });\n    }\n  });\n};\n","import { definePluginConfig } from '../shared/utils/config';\nimport { api } from './api';\nimport { handler } from './plugin';\nimport type { ZodPlugin } from './types';\n\nexport const defaultConfig: ZodPlugin['Config'] = {\n  api,\n  config: {\n    case: 'camelCase',\n    comments: true,\n    exportFromIndex: false,\n    metadata: false,\n  },\n  handler,\n  name: 'zod',\n  output: 'zod',\n  resolveConfig: (plugin, context) => {\n    plugin.config.dates = context.valueToObject({\n      defaultValue: {\n        offset: false,\n      },\n      value: plugin.config.dates,\n    });\n\n    plugin.config.definitions = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: 'z{{name}}',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.definitions,\n    });\n\n    plugin.config.requests = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: 'z{{name}}Data',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.requests,\n    });\n\n    plugin.config.responses = context.valueToObject({\n      defaultValue: {\n        case: plugin.config.case ?? 'camelCase',\n        enabled: true,\n        name: 'z{{name}}Response',\n      },\n      mappers: {\n        boolean: (enabled) => ({ enabled }),\n        string: (name) => ({ enabled: true, name }),\n      },\n      value: plugin.config.responses,\n    });\n  },\n  tags: ['validator'],\n};\n\n/**\n * Type helper for Zod plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig = definePluginConfig(defaultConfig);\n","import type { HeyApiClientAxiosPlugin } from './@hey-api/client-axios';\nimport { defaultConfig as heyApiClientAxios } from './@hey-api/client-axios';\nimport type { HeyApiClientFetchPlugin } from './@hey-api/client-fetch';\nimport { defaultConfig as heyApiClientFetch } from './@hey-api/client-fetch';\nimport type { HeyApiClientNextPlugin } from './@hey-api/client-next';\nimport { defaultConfig as heyApiClientNext } from './@hey-api/client-next';\nimport type { HeyApiClientNuxtPlugin } from './@hey-api/client-nuxt';\nimport { defaultConfig as heyApiClientNuxt } from './@hey-api/client-nuxt';\nimport type { HeyApiClientLegacyAngularPlugin } from './@hey-api/legacy-angular';\nimport { defaultConfig as heyApiLegacyAngular } from './@hey-api/legacy-angular';\nimport type { HeyApiClientLegacyAxiosPlugin } from './@hey-api/legacy-axios';\nimport { defaultConfig as heyApiLegacyAxios } from './@hey-api/legacy-axios';\nimport type { HeyApiClientLegacyFetchPlugin } from './@hey-api/legacy-fetch';\nimport { defaultConfig as heyApiLegacyFetch } from './@hey-api/legacy-fetch';\nimport type { HeyApiClientLegacyNodePlugin } from './@hey-api/legacy-node';\nimport { defaultConfig as heyApiLegacyNode } from './@hey-api/legacy-node';\nimport type { HeyApiClientLegacyXhrPlugin } from './@hey-api/legacy-xhr';\nimport { defaultConfig as heyApiLegacyXhr } from './@hey-api/legacy-xhr';\nimport type { HeyApiSchemasPlugin } from './@hey-api/schemas';\nimport { defaultConfig as heyApiSchemas } from './@hey-api/schemas';\nimport type { HeyApiSdkPlugin } from './@hey-api/sdk';\nimport { defaultConfig as heyApiSdk } from './@hey-api/sdk';\nimport type { HeyApiTransformersPlugin } from './@hey-api/transformers';\nimport { defaultConfig as heyApiTransformers } from './@hey-api/transformers';\nimport type { HeyApiTypeScriptPlugin } from './@hey-api/typescript';\nimport { defaultConfig as heyApiTypeScript } from './@hey-api/typescript';\nimport type { TanStackAngularQueryPlugin } from './@tanstack/angular-query-experimental';\nimport { defaultConfig as tanStackAngularQuery } from './@tanstack/angular-query-experimental';\nimport type { TanStackReactQueryPlugin } from './@tanstack/react-query';\nimport { defaultConfig as tanStackReactQuery } from './@tanstack/react-query';\nimport type { TanStackSolidQueryPlugin } from './@tanstack/solid-query';\nimport { defaultConfig as tanStackSolidQuery } from './@tanstack/solid-query';\nimport type { TanStackSvelteQueryPlugin } from './@tanstack/svelte-query';\nimport { defaultConfig as tanStackSvelteQuery } from './@tanstack/svelte-query';\nimport type { TanStackVueQueryPlugin } from './@tanstack/vue-query';\nimport { defaultConfig as tanStackVueQuery } from './@tanstack/vue-query';\nimport type { FastifyPlugin } from './fastify';\nimport { defaultConfig as fastify } from './fastify';\nimport type { Plugin, PluginNames } from './types';\nimport type { ValibotPlugin } from './valibot';\nimport { defaultConfig as valibot } from './valibot';\nimport type { ZodPlugin } from './zod';\nimport { defaultConfig as zod } from './zod';\n\nexport interface PluginConfigMap {\n  '@hey-api/client-axios': HeyApiClientAxiosPlugin['Types'];\n  '@hey-api/client-fetch': HeyApiClientFetchPlugin['Types'];\n  '@hey-api/client-next': HeyApiClientNextPlugin['Types'];\n  '@hey-api/client-nuxt': HeyApiClientNuxtPlugin['Types'];\n  '@hey-api/schemas': HeyApiSchemasPlugin['Types'];\n  '@hey-api/sdk': HeyApiSdkPlugin['Types'];\n  '@hey-api/transformers': HeyApiTransformersPlugin['Types'];\n  '@hey-api/typescript': HeyApiTypeScriptPlugin['Types'];\n  '@tanstack/angular-query-experimental': TanStackAngularQueryPlugin['Types'];\n  '@tanstack/react-query': TanStackReactQueryPlugin['Types'];\n  '@tanstack/solid-query': TanStackSolidQueryPlugin['Types'];\n  '@tanstack/svelte-query': TanStackSvelteQueryPlugin['Types'];\n  '@tanstack/vue-query': TanStackVueQueryPlugin['Types'];\n  fastify: FastifyPlugin['Types'];\n  'legacy/angular': HeyApiClientLegacyAngularPlugin['Types'];\n  'legacy/axios': HeyApiClientLegacyAxiosPlugin['Types'];\n  'legacy/fetch': HeyApiClientLegacyFetchPlugin['Types'];\n  'legacy/node': HeyApiClientLegacyNodePlugin['Types'];\n  'legacy/xhr': HeyApiClientLegacyXhrPlugin['Types'];\n  valibot: ValibotPlugin['Types'];\n  zod: ZodPlugin['Types'];\n}\n\nexport const defaultPluginConfigs: {\n  [K in PluginNames]: Plugin.Config<PluginConfigMap[K]>;\n} = {\n  '@hey-api/client-axios': heyApiClientAxios,\n  '@hey-api/client-fetch': heyApiClientFetch,\n  '@hey-api/client-next': heyApiClientNext,\n  '@hey-api/client-nuxt': heyApiClientNuxt,\n  '@hey-api/schemas': heyApiSchemas,\n  '@hey-api/sdk': heyApiSdk,\n  '@hey-api/transformers': heyApiTransformers,\n  '@hey-api/typescript': heyApiTypeScript,\n  '@tanstack/angular-query-experimental': tanStackAngularQuery,\n  '@tanstack/react-query': tanStackReactQuery,\n  '@tanstack/solid-query': tanStackSolidQuery,\n  '@tanstack/svelte-query': tanStackSvelteQuery,\n  '@tanstack/vue-query': tanStackVueQuery,\n  fastify,\n  'legacy/angular': heyApiLegacyAngular,\n  'legacy/axios': heyApiLegacyAxios,\n  'legacy/fetch': heyApiLegacyFetch,\n  'legacy/node': heyApiLegacyNode,\n  'legacy/xhr': heyApiLegacyXhr,\n  valibot,\n  zod,\n};\n","import { defaultPluginConfigs } from '../plugins/config';\nimport type {\n  AnyPluginName,\n  PluginContext,\n  PluginNames,\n} from '../plugins/types';\nimport type { Config, UserConfig } from '../types/config';\nimport { valueToObject } from './utils';\n\n/**\n * Default plugins used to generate artifacts if plugins aren't specified.\n */\nexport const defaultPlugins = [\n  '@hey-api/typescript',\n  '@hey-api/sdk',\n] as const satisfies ReadonlyArray<PluginNames>;\n\nconst getPluginsConfig = ({\n  userPlugins,\n  userPluginsConfig,\n}: {\n  userPlugins: ReadonlyArray<AnyPluginName>;\n  userPluginsConfig: Config['plugins'];\n}): Pick<Config, 'plugins' | 'pluginOrder'> => {\n  const circularReferenceTracker = new Set<AnyPluginName>();\n  const pluginOrder = new Set<AnyPluginName>();\n  const plugins: Config['plugins'] = {};\n\n  const dfs = (name: AnyPluginName) => {\n    if (circularReferenceTracker.has(name)) {\n      throw new Error(`Circular reference detected at '${name}'`);\n    }\n\n    if (pluginOrder.has(name)) {\n      return;\n    }\n\n    circularReferenceTracker.add(name);\n\n    const defaultPlugin = defaultPluginConfigs[name as PluginNames];\n    const userPlugin = userPluginsConfig[name as PluginNames];\n\n    if (!defaultPlugin && !userPlugin) {\n      throw new Error(\n        `unknown plugin dependency \"${name}\" - do you need to register a custom plugin with this name?`,\n      );\n    }\n\n    const plugin = {\n      ...defaultPlugin,\n      ...userPlugin,\n      config: {\n        ...defaultPlugin?.config,\n        ...userPlugin?.config,\n      },\n      dependencies: new Set([\n        ...(defaultPlugin?.dependencies || []),\n        ...(userPlugin?.dependencies || []),\n      ]),\n    };\n\n    if (plugin.resolveConfig) {\n      const context: PluginContext = {\n        pluginByTag: (tag, props = {}) => {\n          const { defaultPlugin, errorMessage } = props;\n\n          for (const userPlugin of userPlugins) {\n            const defaultConfig =\n              defaultPluginConfigs[userPlugin as PluginNames] ||\n              userPluginsConfig[userPlugin as PluginNames];\n            if (\n              defaultConfig &&\n              defaultConfig.tags?.includes(tag) &&\n              userPlugin !== name\n            ) {\n              return userPlugin as any;\n            }\n          }\n\n          if (defaultPlugin) {\n            const defaultConfig =\n              defaultPluginConfigs[defaultPlugin as PluginNames] ||\n              userPluginsConfig[defaultPlugin as PluginNames];\n            if (\n              defaultConfig &&\n              defaultConfig.tags?.includes(tag) &&\n              defaultPlugin !== name\n            ) {\n              return defaultPlugin;\n            }\n          }\n\n          throw new Error(\n            errorMessage ||\n              `missing plugin - no plugin with tag \"${tag}\" found`,\n          );\n        },\n        valueToObject,\n      };\n      // @ts-expect-error\n      plugin.resolveConfig(plugin, context);\n    }\n\n    for (const dependency of plugin.dependencies) {\n      dfs(dependency);\n    }\n\n    circularReferenceTracker.delete(name);\n    pluginOrder.add(name);\n\n    // @ts-expect-error\n    plugins[name] = plugin;\n  };\n\n  for (const name of userPlugins) {\n    dfs(name);\n  }\n\n  return {\n    pluginOrder: Array.from(pluginOrder) as ReadonlyArray<PluginNames>,\n    plugins,\n  };\n};\n\nconst isPluginClient = (plugin: Required<UserConfig>['plugins'][number]) => {\n  if (typeof plugin === 'string') {\n    return plugin.startsWith('@hey-api/client') || plugin.startsWith('legacy/');\n  }\n\n  return (\n    plugin.name.startsWith('@hey-api/client') ||\n    plugin.name.startsWith('legacy/') ||\n    // @ts-expect-error\n    (plugin.tags && plugin.tags.includes('client'))\n  );\n};\n\nexport const getPlugins = (\n  userConfig: UserConfig,\n): Pick<Config, 'plugins' | 'pluginOrder'> => {\n  const userPluginsConfig: Config['plugins'] = {};\n\n  let definedPlugins: UserConfig['plugins'] = defaultPlugins;\n\n  if (userConfig.plugins) {\n    userConfig.plugins = userConfig.plugins.filter(\n      (plugin) =>\n        (typeof plugin === 'string' && plugin) ||\n        (typeof plugin !== 'string' && plugin.name),\n    );\n    if (\n      userConfig.plugins.length === 1 &&\n      isPluginClient(userConfig.plugins[0]!)\n    ) {\n      definedPlugins = [...defaultPlugins, ...userConfig.plugins];\n    } else {\n      definedPlugins = userConfig.plugins;\n    }\n  }\n\n  const userPlugins = definedPlugins\n    .map((plugin) => {\n      if (typeof plugin === 'string') {\n        return plugin;\n      }\n\n      const pluginName = plugin.name;\n\n      if (pluginName) {\n        // @ts-expect-error\n        if (plugin.handler) {\n          // @ts-expect-error\n          userPluginsConfig[pluginName] = plugin;\n        } else {\n          // @ts-expect-error\n          userPluginsConfig[pluginName] = {\n            config: { ...plugin },\n          };\n          // @ts-expect-error\n          delete userPluginsConfig[pluginName]!.config.name;\n        }\n      }\n\n      return pluginName;\n    })\n    .filter(Boolean);\n\n  return getPluginsConfig({ userPlugins, userPluginsConfig });\n};\n","import path from 'node:path';\n\nimport { loadConfig } from 'c12';\n\nimport type { Config, UserConfig } from '../types/config';\nimport { isLegacyClient, setConfig } from '../utils/config';\nimport { getInput } from './input';\nimport { getLogs } from './logs';\nimport { mergeConfigs } from './merge';\nimport { getOutput } from './output';\nimport { getParser } from './parser';\nimport { getPlugins } from './plugins';\n\n/**\n * @internal\n */\nexport const initConfigs = async (\n  userConfig: UserConfig | undefined,\n): Promise<\n  ReadonlyArray<{\n    config: Config;\n    errors: ReadonlyArray<Error>;\n  }>\n> => {\n  let configurationFile: string | undefined = undefined;\n  if (userConfig?.configFile) {\n    const parts = userConfig.configFile.split('.');\n    configurationFile = parts.slice(0, parts.length - 1).join('.');\n  }\n\n  const { config: configFromFile } = await loadConfig<UserConfig>({\n    configFile: configurationFile,\n    name: 'openapi-ts',\n  });\n\n  const userConfigs: ReadonlyArray<UserConfig> = Array.isArray(userConfig)\n    ? userConfig\n    : Array.isArray(configFromFile)\n      ? configFromFile.map((config) => mergeConfigs(config, userConfig))\n      : [mergeConfigs(configFromFile, userConfig)];\n\n  const results: Array<{\n    config: Config;\n    errors: Array<Error>;\n  }> = [];\n\n  for (const userConfig of userConfigs) {\n    const {\n      base,\n      configFile = '',\n      dryRun = false,\n      experimentalParser = true,\n      exportCore = true,\n      name,\n      request,\n      useOptions = true,\n    } = userConfig;\n\n    const errors: Array<Error> = [];\n\n    const logs = getLogs(userConfig);\n\n    if (logs.level === 'debug') {\n      console.warn('userConfig:', userConfig);\n    }\n\n    const input = getInput(userConfig);\n    const output = getOutput(userConfig);\n    const parser = getParser(userConfig);\n\n    if (!input.path) {\n      errors.push(\n        new Error(\n          'missing input - which OpenAPI specification should we use to generate your output?',\n        ),\n      );\n    }\n\n    if (!output.path) {\n      errors.push(\n        new Error('missing output - where should we generate your output?'),\n      );\n    }\n\n    if (!useOptions) {\n      console.warn(\n        '❗️ Deprecation warning: useOptions set to false. This setting will be removed in future versions. Please migrate useOptions to true https://heyapi.dev/openapi-ts/migrating.html#v0-27-38',\n      );\n    }\n\n    output.path = path.resolve(process.cwd(), output.path);\n\n    let plugins: Pick<Config, 'plugins' | 'pluginOrder'>;\n\n    try {\n      plugins = getPlugins(userConfig);\n    } catch (error) {\n      errors.push(error);\n      plugins = {\n        pluginOrder: [],\n        plugins: {},\n      };\n    }\n\n    const config = setConfig({\n      ...plugins,\n      base,\n      configFile,\n      dryRun,\n      experimentalParser,\n      exportCore: false,\n      input,\n      logs,\n      name,\n      output,\n      parser,\n      request,\n      useOptions,\n    });\n    config.exportCore = isLegacyClient(config) ? exportCore : false;\n\n    if (logs.level === 'debug') {\n      console.warn('config:', config);\n    }\n\n    results.push({\n      config,\n      errors,\n    });\n  }\n\n  return results;\n};\n","import { getAuthToken } from '../../client-core/bundle/auth';\nimport type {\n  QuerySerializer,\n  QuerySerializerOptions,\n} from '../../client-core/bundle/bodySerializer';\nimport { jsonBodySerializer } from '../../client-core/bundle/bodySerializer';\nimport {\n  serializeArrayParam,\n  serializeObjectParam,\n  serializePrimitiveParam,\n} from '../../client-core/bundle/pathSerializer';\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n  path: Record<string, unknown>;\n  url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n  let url = _url;\n  const matches = _url.match(PATH_PARAM_RE);\n  if (matches) {\n    for (const match of matches) {\n      let explode = false;\n      let name = match.substring(1, match.length - 1);\n      let style: ArraySeparatorStyle = 'simple';\n\n      if (name.endsWith('*')) {\n        explode = true;\n        name = name.substring(0, name.length - 1);\n      }\n\n      if (name.startsWith('.')) {\n        name = name.substring(1);\n        style = 'label';\n      } else if (name.startsWith(';')) {\n        name = name.substring(1);\n        style = 'matrix';\n      }\n\n      const value = path[name];\n\n      if (value === undefined || value === null) {\n        continue;\n      }\n\n      if (Array.isArray(value)) {\n        url = url.replace(\n          match,\n          serializeArrayParam({ explode, name, style, value }),\n        );\n        continue;\n      }\n\n      if (typeof value === 'object') {\n        url = url.replace(\n          match,\n          serializeObjectParam({\n            explode,\n            name,\n            style,\n            value: value as Record<string, unknown>,\n            valueOnly: true,\n          }),\n        );\n        continue;\n      }\n\n      if (style === 'matrix') {\n        url = url.replace(\n          match,\n          `;${serializePrimitiveParam({\n            name,\n            value: value as string,\n          })}`,\n        );\n        continue;\n      }\n\n      const replaceValue = encodeURIComponent(\n        style === 'label' ? `.${value as string}` : (value as string),\n      );\n      url = url.replace(match, replaceValue);\n    }\n  }\n  return url;\n};\n\nexport const createQuerySerializer = <T = unknown>({\n  allowReserved,\n  array,\n  object,\n}: QuerySerializerOptions = {}) => {\n  const querySerializer = (queryParams: T) => {\n    const search: string[] = [];\n    if (queryParams && typeof queryParams === 'object') {\n      for (const name in queryParams) {\n        const value = queryParams[name];\n\n        if (value === undefined || value === null) {\n          continue;\n        }\n\n        if (Array.isArray(value)) {\n          const serializedArray = serializeArrayParam({\n            allowReserved,\n            explode: true,\n            name,\n            style: 'form',\n            value,\n            ...array,\n          });\n          if (serializedArray) search.push(serializedArray);\n        } else if (typeof value === 'object') {\n          const serializedObject = serializeObjectParam({\n            allowReserved,\n            explode: true,\n            name,\n            style: 'deepObject',\n            value: value as Record<string, unknown>,\n            ...object,\n          });\n          if (serializedObject) search.push(serializedObject);\n        } else {\n          const serializedPrimitive = serializePrimitiveParam({\n            allowReserved,\n            name,\n            value: value as string,\n          });\n          if (serializedPrimitive) search.push(serializedPrimitive);\n        }\n      }\n    }\n    return search.join('&');\n  };\n  return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n  contentType: string | null,\n): Exclude<Config['parseAs'], 'auto'> => {\n  if (!contentType) {\n    // If no Content-Type header is provided, the best we can do is return the raw response body,\n    // which is effectively the same as the 'stream' option.\n    return 'stream';\n  }\n\n  const cleanContent = contentType.split(';')[0]?.trim();\n\n  if (!cleanContent) {\n    return;\n  }\n\n  if (\n    cleanContent.startsWith('application/json') ||\n    cleanContent.endsWith('+json')\n  ) {\n    return 'json';\n  }\n\n  if (cleanContent === 'multipart/form-data') {\n    return 'formData';\n  }\n\n  if (\n    ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n      cleanContent.startsWith(type),\n    )\n  ) {\n    return 'blob';\n  }\n\n  if (cleanContent.startsWith('text/')) {\n    return 'text';\n  }\n\n  return;\n};\n\nexport const setAuthParams = async ({\n  security,\n  ...options\n}: Pick<Required<RequestOptions>, 'security'> &\n  Pick<RequestOptions, 'auth' | 'query'> & {\n    headers: Headers;\n  }) => {\n  for (const auth of security) {\n    const token = await getAuthToken(auth, options.auth);\n\n    if (!token) {\n      continue;\n    }\n\n    const name = auth.name ?? 'Authorization';\n\n    switch (auth.in) {\n      case 'query':\n        if (!options.query) {\n          options.query = {};\n        }\n        options.query[name] = token;\n        break;\n      case 'cookie':\n        options.headers.append('Cookie', `${name}=${token}`);\n        break;\n      case 'header':\n      default:\n        options.headers.set(name, token);\n        break;\n    }\n\n    return;\n  }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n  const url = getUrl({\n    baseUrl: options.baseUrl as string,\n    path: options.path,\n    query: options.query,\n    querySerializer:\n      typeof options.querySerializer === 'function'\n        ? options.querySerializer\n        : createQuerySerializer(options.querySerializer),\n    url: options.url,\n  });\n  return url;\n};\n\nexport const getUrl = ({\n  baseUrl,\n  path,\n  query,\n  querySerializer,\n  url: _url,\n}: {\n  baseUrl?: string;\n  path?: Record<string, unknown>;\n  query?: Record<string, unknown>;\n  querySerializer: QuerySerializer;\n  url: string;\n}) => {\n  const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n  let url = (baseUrl ?? '') + pathUrl;\n  if (path) {\n    url = defaultPathSerializer({ path, url });\n  }\n  let search = query ? querySerializer(query) : '';\n  if (search.startsWith('?')) {\n    search = search.substring(1);\n  }\n  if (search) {\n    url += `?${search}`;\n  }\n  return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n  const config = { ...a, ...b };\n  if (config.baseUrl?.endsWith('/')) {\n    config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n  }\n  config.headers = mergeHeaders(a.headers, b.headers);\n  return config;\n};\n\nexport const mergeHeaders = (\n  ...headers: Array<Required<Config>['headers'] | undefined>\n): Headers => {\n  const mergedHeaders = new Headers();\n  for (const header of headers) {\n    if (!header || typeof header !== 'object') {\n      continue;\n    }\n\n    const iterator =\n      header instanceof Headers ? header.entries() : Object.entries(header);\n\n    for (const [key, value] of iterator) {\n      if (value === null) {\n        mergedHeaders.delete(key);\n      } else if (Array.isArray(value)) {\n        for (const v of value) {\n          mergedHeaders.append(key, v as string);\n        }\n      } else if (value !== undefined) {\n        // assume object headers are meant to be JSON stringified, i.e. their\n        // content value in OpenAPI specification is 'application/json'\n        mergedHeaders.set(\n          key,\n          typeof value === 'object' ? JSON.stringify(value) : (value as string),\n        );\n      }\n    }\n  }\n  return mergedHeaders;\n};\n\ntype ErrInterceptor<Err, Res, Req, Options> = (\n  error: Err,\n  response: Res,\n  request: Req,\n  options: Options,\n) => Err | Promise<Err>;\n\ntype ReqInterceptor<Req, Options> = (\n  request: Req,\n  options: Options,\n) => Req | Promise<Req>;\n\ntype ResInterceptor<Res, Req, Options> = (\n  response: Res,\n  request: Req,\n  options: Options,\n) => Res | Promise<Res>;\n\nclass Interceptors<Interceptor> {\n  _fns: (Interceptor | null)[];\n\n  constructor() {\n    this._fns = [];\n  }\n\n  clear() {\n    this._fns = [];\n  }\n\n  getInterceptorIndex(id: number | Interceptor): number {\n    if (typeof id === 'number') {\n      return this._fns[id] ? id : -1;\n    } else {\n      return this._fns.indexOf(id);\n    }\n  }\n  exists(id: number | Interceptor) {\n    const index = this.getInterceptorIndex(id);\n    return !!this._fns[index];\n  }\n\n  eject(id: number | Interceptor) {\n    const index = this.getInterceptorIndex(id);\n    if (this._fns[index]) {\n      this._fns[index] = null;\n    }\n  }\n\n  update(id: number | Interceptor, fn: Interceptor) {\n    const index = this.getInterceptorIndex(id);\n    if (this._fns[index]) {\n      this._fns[index] = fn;\n      return id;\n    } else {\n      return false;\n    }\n  }\n\n  use(fn: Interceptor) {\n    this._fns = [...this._fns, fn];\n    return this._fns.length - 1;\n  }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware<Req, Res, Err, Options> {\n  error: Pick<\n    Interceptors<ErrInterceptor<Err, Res, Req, Options>>,\n    'eject' | 'use'\n  >;\n  request: Pick<Interceptors<ReqInterceptor<Req, Options>>, 'eject' | 'use'>;\n  response: Pick<\n    Interceptors<ResInterceptor<Res, Req, Options>>,\n    'eject' | 'use'\n  >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = <Req, Res, Err, Options>() => ({\n  error: new Interceptors<ErrInterceptor<Err, Res, Req, Options>>(),\n  request: new Interceptors<ReqInterceptor<Req, Options>>(),\n  response: new Interceptors<ResInterceptor<Res, Req, Options>>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n  allowReserved: false,\n  array: {\n    explode: true,\n    style: 'form',\n  },\n  object: {\n    explode: true,\n    style: 'deepObject',\n  },\n});\n\nconst defaultHeaders = {\n  'Content-Type': 'application/json',\n};\n\nexport const createConfig = <T extends ClientOptions = ClientOptions>(\n  override: Config<Omit<ClientOptions, keyof T> & T> = {},\n): Config<Omit<ClientOptions, keyof T> & T> => ({\n  ...jsonBodySerializer,\n  headers: defaultHeaders,\n  parseAs: 'auto',\n  querySerializer: defaultQuerySerializer,\n  ...override,\n});\n","import {\n  $RefParser,\n  getResolvedInput,\n  type JSONSchema,\n  sendRequest,\n} from '@hey-api/json-schema-ref-parser';\n\nimport { mergeHeaders } from './plugins/@hey-api/client-fetch/bundle';\nimport type { Config } from './types/config';\nimport type { WatchValues } from './types/types';\n\ninterface SpecResponse {\n  data: JSONSchema;\n  error?: undefined;\n  response?: undefined;\n}\n\ninterface SpecError {\n  data?: undefined;\n  error: 'not-modified' | 'not-ok';\n  response: Response;\n}\n\n/**\n * @internal\n */\nexport const getSpec = async ({\n  fetchOptions,\n  inputPath,\n  timeout,\n  watch,\n}: {\n  fetchOptions?: RequestInit;\n  inputPath: Config['input']['path'];\n  timeout: number;\n  watch: WatchValues;\n}): Promise<SpecResponse | SpecError> => {\n  const refParser = new $RefParser();\n  const resolvedInput = getResolvedInput({ pathOrUrlOrSchema: inputPath });\n\n  let arrayBuffer: ArrayBuffer | undefined;\n  // boolean signals whether the file has **definitely** changed\n  let hasChanged: boolean | undefined;\n  let response: Response | undefined;\n\n  if (resolvedInput.type === 'url') {\n    // do NOT send HEAD request on first run or if unsupported\n    if (watch.lastValue && watch.isHeadMethodSupported !== false) {\n      try {\n        const request = await sendRequest({\n          fetchOptions: {\n            method: 'HEAD',\n            ...fetchOptions,\n            headers: mergeHeaders(fetchOptions?.headers, watch.headers),\n          },\n          timeout,\n          url: resolvedInput.path,\n        });\n\n        if (request.response.status >= 300) {\n          return {\n            error: 'not-ok',\n            response: request.response,\n          };\n        }\n\n        response = request.response;\n      } catch (error) {\n        return {\n          error: 'not-ok',\n          response: new Response(error.message),\n        };\n      }\n\n      if (!response.ok && watch.isHeadMethodSupported) {\n        // assume the server is no longer running\n        // do nothing, it might be restarted later\n        return {\n          error: 'not-ok',\n          response,\n        };\n      }\n\n      if (watch.isHeadMethodSupported === undefined) {\n        watch.isHeadMethodSupported = response.ok;\n      }\n\n      if (response.status === 304) {\n        return {\n          error: 'not-modified',\n          response,\n        };\n      }\n\n      if (hasChanged === undefined) {\n        const eTag = response.headers.get('ETag');\n        if (eTag) {\n          hasChanged = eTag !== watch.headers.get('If-None-Match');\n\n          if (hasChanged) {\n            watch.headers.set('If-None-Match', eTag);\n          }\n        }\n      }\n\n      if (hasChanged === undefined) {\n        const lastModified = response.headers.get('Last-Modified');\n        if (lastModified) {\n          hasChanged = lastModified !== watch.headers.get('If-Modified-Since');\n\n          if (hasChanged) {\n            watch.headers.set('If-Modified-Since', lastModified);\n          }\n        }\n      }\n\n      // we definitely know the input has not changed\n      if (hasChanged === false) {\n        return {\n          error: 'not-modified',\n          response,\n        };\n      }\n    }\n\n    try {\n      const request = await sendRequest({\n        fetchOptions: {\n          method: 'GET',\n          ...fetchOptions,\n        },\n        timeout,\n        url: resolvedInput.path,\n      });\n\n      if (request.response.status >= 300) {\n        return {\n          error: 'not-ok',\n          response: request.response,\n        };\n      }\n\n      response = request.response;\n    } catch (error) {\n      return {\n        error: 'not-ok',\n        response: new Response(error.message),\n      };\n    }\n\n    if (!response.ok) {\n      // assume the server is no longer running\n      // do nothing, it might be restarted later\n      return {\n        error: 'not-ok',\n        response,\n      };\n    }\n\n    arrayBuffer = response.body\n      ? await response.arrayBuffer()\n      : new ArrayBuffer(0);\n\n    if (hasChanged === undefined) {\n      const content = new TextDecoder().decode(arrayBuffer);\n      hasChanged = content !== watch.lastValue;\n      watch.lastValue = content;\n    }\n  } else {\n    // we do not support watch mode for files or raw spec data\n    if (!watch.lastValue) {\n      watch.lastValue = resolvedInput.type;\n    } else {\n      hasChanged = false;\n    }\n  }\n\n  if (hasChanged === false) {\n    return {\n      error: 'not-modified',\n      response: response!,\n    };\n  }\n\n  const data = await refParser.bundle({\n    arrayBuffer,\n    pathOrUrlOrSchema: undefined,\n    resolvedInput,\n  });\n\n  return {\n    data,\n  };\n};\n"]}