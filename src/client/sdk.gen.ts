// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { HealthData, HealthResponses, HealthErrors, CreateAccountData, CreateAccountResponses, CreateAccountErrors, LoginPlayerData, LoginPlayerResponses, LoginPlayerErrors, LogoutPlayerData, LogoutPlayerResponses, LogoutPlayerErrors, AddGameData, AddGameResponses, AddGameErrors, DeleteGameData, DeleteGameResponses, DeleteGameErrors, UpdateGameData, UpdateGameResponses, UpdateGameErrors, SearchGamesData, SearchGamesResponses, SearchGamesErrors, SearchPlayersData, SearchPlayersResponses, SearchPlayersErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Used to check health of the server
 * health status
 */
export const health = <ThrowOnError extends boolean = false>(options?: Options<HealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthResponses, HealthErrors, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Create a new player
 * Create a new user account to be able to play games.
 */
export const createAccount = <ThrowOnError extends boolean = false>(options: Options<CreateAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAccountResponses, CreateAccountErrors, ThrowOnError>({
        url: '/players',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login existing player
 * Login Existing Player.
 */
export const loginPlayer = <ThrowOnError extends boolean = false>(options: Options<LoginPlayerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginPlayerResponses, LoginPlayerErrors, ThrowOnError>({
        url: '/players/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logs out logged in player
 * Logs out logged in player.
 */
export const logoutPlayer = <ThrowOnError extends boolean = false>(options: Options<LogoutPlayerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<LogoutPlayerResponses, LogoutPlayerErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/players/{uid}/logout',
        ...options
    });
};

/**
 * Add a game to store
 * Upload a game
 */
export const addGame = <ThrowOnError extends boolean = false>(options: Options<AddGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddGameResponses, AddGameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/games',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a game from store
 * Use to delete a game
 */
export const deleteGame = <ThrowOnError extends boolean = false>(options: Options<DeleteGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGameResponses, DeleteGameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/games/{uid}',
        ...options
    });
};

/**
 * Update a games metadata
 * Use to update a games info
 */
export const updateGame = <ThrowOnError extends boolean = false>(options: Options<UpdateGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateGameResponses, UpdateGameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/games/{uid}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Search game catalog
 * Used to search for single or batch get
 */
export const searchGames = <ThrowOnError extends boolean = false>(options: Options<SearchGamesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SearchGamesResponses, SearchGamesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/search/games',
        ...options,
        headers: {
            'Content-Type': 'applicaiton/json',
            ...options.headers
        }
    });
};

/**
 * Search for players
 * Used to search for single or batch get
 */
export const searchPlayers = <ThrowOnError extends boolean = false>(options?: Options<SearchPlayersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<SearchPlayersResponses, SearchPlayersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/search/players',
        ...options,
        headers: {
            'Content-Type': 'applicaiton/json',
            ...options?.headers
        }
    });
};